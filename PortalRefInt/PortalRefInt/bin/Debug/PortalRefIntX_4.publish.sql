/*
Deployment script for PortalRefIntX

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PortalRefIntX"
:setvar DefaultFilePrefix "PortalRefIntX"
:setvar DefaultDataPath "D:\SQLDATA\"
:setvar DefaultLogPath "E:\SQLDATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[DF_int_print_job_et_vitals_id]...';


GO
ALTER TABLE [dbo].[int_print_job_et_vitals]
    ADD CONSTRAINT [DF_int_print_job_et_vitals_id] DEFAULT (NEXT VALUE FOR [dbo].[SequenceBigInt]) FOR [Id];


GO
PRINT N'Creating [dbo].[DF_int_print_job_et_waveform_id]...';


GO
ALTER TABLE [dbo].[int_print_job_et_waveform]
    ADD CONSTRAINT [DF_int_print_job_et_waveform_id] DEFAULT (NEXT VALUE FOR [dbo].[SequenceBigInt]) FOR [Id];


GO
PRINT N'Creating [dbo].[GetPatientsList]...';


GO
CREATE PROCEDURE [dbo].[GetPatientsList]
    (
     @unit_id DUNIT_ID,
     @status NVARCHAR(40)
    )
AS
BEGIN
    DECLARE @return_value TABLE
        (
         [patient_id] BIGINT,
         [patient_name] NVARCHAR(100),
         [MONITOR_NAME] NVARCHAR(30),
         [ACCOUNT_ID] NVARCHAR(30),
         [MRN_ID] NVARCHAR(30),
         [UNIT_ID] BIGINT,
         [organization_cd] NVARCHAR(20),
         [FACILITY_ID] BIGINT,
         [FACILITY_NAME] NVARCHAR(20),
         [DOB] DATETIME,
         [ADMIT_TIME] DATETIME,
         [DISCHARGED_TIME] DATETIME,
         [PATIENT_MONITOR_ID] BIGINT,
         [STATUS] VARCHAR(40)
        );

    INSERT  @return_value
            EXEC [dbo].[GetUserPatientsList] @unit_id = @unit_id, @status = @status;
 
    SELECT
        [patient_id],
        [patient_name],
        [MONITOR_NAME],
        [ACCOUNT_ID],
        [MRN_ID],
        [UNIT_ID],
        [organization_cd],
        [FACILITY_ID],
        [FACILITY_NAME],
        [DOB],
        [ADMIT_TIME],
        [DISCHARGED_TIME],
        [PATIENT_MONITOR_ID],
        [STATUS]
    FROM
        @return_value;
END;
GO
PRINT N'Creating [dbo].[GetRawECGData]...';


GO
CREATE PROCEDURE [dbo].[GetRawECGData]
    (
     @PatientId [dbo].[DPATIENT_ID], -- TG - Should be BIGINT
     @ChannelTypeID [dbo].[DCHANNEL_TYPE_ID],
     @StartTime BIGINT,
     @EndTime BIGINT
    )
AS
BEGIN
    DECLARE @ChannelIds AS [dbo].[StringList];

    INSERT  INTO @ChannelIds
            ([Item])
    VALUES
            (@ChannelTypeID);
    
    EXEC [dbo].[usp_CA_GetPatientWaveForms] @patient_id = @PatientId, @channelIds = @ChannelIds, @start_ft = @StartTime, @end_ft = @EndTime;    
END;
GO
PRINT N'Creating [dbo].[usp_HL7_InsertInboundFacility]...';


GO
CREATE PROCEDURE [dbo].[usp_HL7_InsertInboundFacility]
    (
     @SendingFacility NVARCHAR(180),
     @DynAddOrgs BIT,
     @FacilityId BIGINT = NULL OUT
    )
AS
BEGIN
    BEGIN TRY
        SET @FacilityId = (SELECT
                            [organization_id]
                           FROM
                            [dbo].[int_organization]
                           WHERE
                            [category_cd] = 'F'
                            AND [organization_cd] = @SendingFacility
                          );
        IF (@FacilityId IS NULL
            AND @DynAddOrgs = 1
            )
        BEGIN
            DECLARE
                @PrimaryOrganization BIGINT,
                @orgId BIGINT = NEXT VALUE FOR [dbo].[SequenceBigInt]; --we will make this as constraint
            SET @PrimaryOrganization = (SELECT
                                            [organization_id]
                                        FROM
                                            [dbo].[int_organization]
                                        WHERE
                                            [category_cd] = 'O'
                                       );

            EXEC [dbo].[usp_InsertOrganizationInformation] @organizationId = @orgId, @categoryCd = 'F', @parentOrganizationId = @PrimaryOrganization, @organizationCd = @SendingFacility, @organizationNm = @SendingFacility;
            SET @FacilityId = @orgId;
        END;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        -- Use RAISERROR inside the CATCH block to return error
        -- information about the original error that caused
        -- execution to jump to the CATCH block.
        RAISERROR (@ErrorMessage, -- Message text.
                @ErrorSeverity, -- Severity.
                @ErrorState -- State.
                );
    END CATCH;
END;
GO
PRINT N'Creating [dbo].[usp_HL7_InsertInboundSendingSystem]...';


GO
CREATE PROCEDURE [dbo].[usp_HL7_InsertInboundSendingSystem]
    (
     @SendingSystem NVARCHAR(180),
     @DynAddSendingSys BIT,
     @OrganizationId BIGINT,
     @SendingSysId BIGINT = NULL OUT
    )
AS
BEGIN
    BEGIN TRY
        SET @SendingSysId = (SELECT
                                [sys_id]
                             FROM
                                [dbo].[int_send_sys]
                             WHERE
                                [code] = @SendingSystem
                                AND [organization_id] = @OrganizationId
                            );

        IF (@SendingSysId IS NULL
            AND @DynAddSendingSys = 1
            )
        BEGIN
            DECLARE @SendSysId BIGINT = NEXT VALUE FOR [dbo].[SequenceBigInt]; -- We will make this as constraint
            EXEC [dbo].[usp_InsertSendingSystemInformation] @SendSysId, @OrganizationId, @SendingSystem, NULL;
            SET @SendingSysId = @SendSysId; -- Need to change this to scope_identity
        END;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        -- Use RAISERROR inside the CATCH block to return error
        -- information about the original error that caused
        -- execution to jump to the CATCH block.
        RAISERROR (@ErrorMessage, -- Message text.
            @ErrorSeverity, -- Severity.
            @ErrorState -- State.
            );
    END CATCH;
END;
GO
PRINT N'Creating [dbo].[usp_HL7_SavePatientDemographicInformation]...';


GO
CREATE PROCEDURE [dbo].[usp_HL7_SavePatientDemographicInformation]
(
@PatientTypeAccountNo bit,
@PatientMrn NVARCHAR(20),
@PatientAccount NVARCHAR(20)=null,
@OrganizationId BIGINT,
@PatientGivenName NVARCHAR(48),
@PatientFamilyName NVARCHAR(48),
@PatientMiddleName NVARCHAR(48),
@PatientDob datetime,
@PatientGenderCodeId int,
@PatientId BIGINT out,
@AccountId BIGINT out
)
AS 
BEGIN
BEGIN TRY
    DECLARE @PatientMrnId BIGINT, @PatientAccountId BIGINT;

    --get the patient mrn if exists in the database.
    SET @PatientMrnId=(SELECT patient_id FROM [dbo].[int_mrn_map] where mrn_xid=@PatientMrn  AND organization_id = @OrganizationId AND merge_cd <> 'L');
    
    --if the patient identification is Account Number
    IF(@PatientTypeAccountNo=1)
    BEGIN
        --get the account number if exists in the database.
        SET @PatientAccountId=(SELECT patient_id FROM [dbo].[int_mrn_map] WHERE mrn_xid=@PatientAccount AND organization_id=@OrganizationId AND merge_cd <> 'L');
    END
    
    --patient mrn exists in the database
    IF(@PatientMrnId IS NOT NULL)
        BEGIN
            --update the patient MRN
            Set @PatientId=@PatientMrnId
            exec dbo.usp_HL7_UpdatePatientInfo @PatientId=@PatientId,@mrn1=@PatientMrn,@mrn2=@PatientAccount,@FirstNm=@PatientGivenName,
            @MiddleNm=@PatientMiddleName,@LastNm=@PatientFamilyName,@dob=@PatientDob,@GenderCid=@PatientGenderCodeId
        END
    ELSE
    BEGIN
        --There is no existing int_mrn_map record based on mrn, and account number is primary id
         IF(@PatientAccountId IS NOT NULL)
             BEGIN
                SET @PatientId=@PatientAccountId;
                EXEC dbo.usp_HL7_UpdatePatientInfo @PatientId=@PatientId,@mrn1=@PatientMrn,@mrn2=@PatientAccount,@FirstNm=@PatientGivenName,
                    @MiddleNm=@PatientMiddleName,@LastNm=@PatientFamilyName,@dob=@PatientDob,@GenderCid=@PatientGenderCodeId
             END
         ELSE
             BEGIN
                 --Inserts new patient information to respective tables here
                 SET @PatientId=NEXT VALUE FOR [dbo].[SequenceBigInt];
                 EXEC dbo.usp_HL7_SavePatientInformation @organizationId=@OrganizationId,@PatientId=@PatientId,@mrn1=@PatientMrn,
                 @mrn2=@PatientAccount,@FirstNm=@PatientGivenName,@MiddleNm=@PatientMiddleName,@LastNm=@PatientFamilyName,@dob=@PatientDob,@GenderCid=@PatientGenderCodeId,@AccountId=@AccountId out;
             END
    END
    
    IF(@PatientAccount IS NOT NULL)
    BEGIN
        -- Always get the latest account ID
        SET @AccountId = (SELECT TOP (1) account_id FROM dbo.int_account WHERE account_xid = @PatientAccount AND organization_id = @OrganizationId ORDER BY account_open_dt DESC)
        IF (@AccountId IS NULL)
        BEGIN
            SET @AccountId = NEXT VALUE FOR [dbo].[SequenceBigInt];
            EXEC dbo.[usp_InsertAccountInformation] @AccountId = @AccountId, @orgId = @organizationId, @accountNumber = @PatientAccount;
        END
    END
    
END TRY
BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;
        SELECT  @ErrorMessage = ERROR_MESSAGE(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE();

        -- Use RAISERROR inside the CATCH block to return error
        -- information about the original error that caused
        -- execution to jump to the CATCH block.
        RAISERROR (@ErrorMessage, -- Message text.
                   @ErrorSeverity, -- Severity.
                   @ErrorState -- State.
                   );
END CATCH
END
GO
PRINT N'Creating [dbo].[usp_HL7_SavePatientVisitInformation]...';


GO
CREATE PROCEDURE [dbo].[usp_HL7_SavePatientVisitInformation]
    (
     @UniqueVisitNumber BIT,
     @UnitId BIGINT,
     @OrganizationId BIGINT,
     @PatientId BIGINT,
     @SendingApplicationId BIGINT,
     @PatientClassCid INT,
     @PatientPointOfCare NVARCHAR(80),
     @PatientVisitNumber NVARCHAR(20),
     @MessageNumber INT,
     @PatientRoom NVARCHAR(80) = NULL,
     @PatientBed NCHAR(80) = NULL,
     @AccountId BIGINT = NULL,
     @VIPIndicator NCHAR(2) = NULL, -- TG - Should be NCHAR(1)
     @AdmitDateTime DATETIME = NULL,
     @DischargeDateTime DATETIME = NULL
    )
AS
BEGIN
    BEGIN TRY
        DECLARE
            @VisitNumberExists INT,
            @EncounterId BIGINT,
            @StatusCode NCHAR(1),
            @MessageControlId NVARCHAR(10);

        -- Getting the Message Control Id from the message No
        SET @MessageControlId = (SELECT
                                    [MessageControlId]
                                 FROM
                                    [dbo].[HL7InboundMessage]
                                 WHERE
                                    [MessageNo] = @MessageNumber
                                );

        SET @StatusCode = N'C';

        IF @DischargeDateTime IS NOT NULL
        BEGIN
            SET @StatusCode = N'D';
        END;

        SET @VisitNumberExists = (SELECT
                                    COUNT(1)
                                  FROM
                                    [dbo].[int_encounter_map]
                                  WHERE
                                    [encounter_xid] = @PatientVisitNumber
                                    AND [organization_id] = @OrganizationId
                                 );

        IF (@VisitNumberExists > 0)
        BEGIN
            SET @EncounterId = (SELECT
                                    [encounter_id]
                                FROM
                                    [dbo].[int_encounter_map]
                                WHERE
                                    [encounter_xid] = @PatientVisitNumber
                                    AND [organization_id] = @OrganizationId
                                    AND [patient_id] = @PatientId
                               );
            IF NOT EXISTS ( SELECT
                                [patient_id]
                            FROM
                                [dbo].[int_encounter_map]
                            WHERE
                                [encounter_xid] = @PatientVisitNumber
                                AND [organization_id] = @OrganizationId
                                AND [patient_id] = @PatientId )
            BEGIN
                -- Gets the Existing Encounter ID
                IF (@UniqueVisitNumber = 1)
                BEGIN
                    RAISERROR ('VisitNumber = "%s" already exists in the database for a different patient,change visit number for MessageControlId="%s".',16,1,@PatientVisitNumber,@MessageControlId);
                    RETURN;
                END;
                ELSE
                BEGIN
                    SET @EncounterId = NEXT VALUE FOR [dbo].[SequenceBigInt];

                    -- Only begin_dt is not stored from pre release which is from MSH in int_encounter
                    INSERT  INTO [dbo].[int_encounter]
                            ([encounter_id],
                             [organization_id],
                             [mod_dt],
                             [patient_id],
                             [status_cd],
                             [account_id]
                            )
                    VALUES
                            (@EncounterId,
                             @OrganizationId,
                             GETDATE(),
                             @PatientId,
                             CAST(@StatusCode AS NVARCHAR(3)),
                             @AccountId
                            );
                        
                    INSERT  INTO [dbo].[int_encounter_map]
                            ([encounter_xid],
                             [organization_id],
                             [encounter_id],
                             [patient_id],
                             [seq_no],
                             [status_cd],
                             [account_id]
                            )
                    VALUES
                            (@PatientVisitNumber,
                             @OrganizationId,
                             @EncounterId,
                             @PatientId,
                             1,
                             @StatusCode,
                             @AccountId
                            );
                END;
            END;
        END;
        ELSE
        BEGIN
            SET @EncounterId = NEXT VALUE FOR [dbo].[SequenceBigInt];
            INSERT  INTO [dbo].[int_encounter]
                    ([encounter_id],
                     [organization_id],
                     [mod_dt],
                     [patient_id],
                     [status_cd],
                     [account_id]
                    )
            VALUES
                    (@EncounterId,
                     @OrganizationId,
                     GETDATE(),
                     @PatientId,
                     CAST(@StatusCode AS NVARCHAR(3)),
                     @AccountId
                    );
                        
            INSERT  INTO [dbo].[int_encounter_map]
                    ([encounter_xid],
                     [organization_id],
                     [encounter_id],
                     [patient_id],
                     [seq_no],
                     [status_cd],
                     [account_id]
                    )
            VALUES
                    (@PatientVisitNumber,
                     @OrganizationId,
                     @EncounterId,
                     @PatientId,
                     1,
                     @StatusCode,
                     @AccountId
                    );
        END;
    
        -- Update Encounter information
        DECLARE @VIPIndicator1 NCHAR(1) = CAST(@VIPIndicator AS NCHAR(1));

        EXEC [dbo].[usp_HL7_UpdatePatientVisitInformation] @EncounterId = @EncounterId, @AccountId = @AccountId, @StatusCd = @StatusCode, @VipSw = @VIPIndicator1, @PatientClassCid = @PatientClassCid, @UnitOrgId = @UnitId, @AdmitDt = @AdmitDateTime, @Rm = @PatientRoom, @Bed = @PatientBed, @DischargeDt = @DischargeDateTime;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        -- Use RAISERROR inside the CATCH block to return error
        -- information about the original error that caused
        -- execution to jump to the CATCH block.
        RAISERROR (@ErrorMessage, -- Message text.
                   @ErrorSeverity, -- Severity.
                   @ErrorState -- State.
                   );
    END CATCH;
END;
GO
PRINT N'Creating [dbo].[usp_PM_CopyETVitalsData]...';


GO
CREATE PROCEDURE [dbo].[usp_PM_CopyETVitalsData]
AS
BEGIN 
    SET NOCOUNT ON;

    -- The number of minutes to grab vitals data before the start of the alarm... using this instead of tMinusPaddingSeconds for preAlarm in order to match what Clinical Access Alarms Tab does.
    DECLARE @preAlarmDataMinutes INT = 15; 

    -- The number of seconds of waveform/vitals data after an alarm that we want to display/capture
    DECLARE @tMinusPaddingSeconds INT; 

    SELECT
        @tMinusPaddingSeconds = CAST([Value] AS INT)
    FROM
        [dbo].[ApplicationSettings]
    WHERE
        [ApplicationType] = 'Global'
        AND [Key] = 'PrintJobPaddingSeconds';

    IF @tMinusPaddingSeconds IS NULL
        RAISERROR(N'Global setting "%s" from the ApplicationSettings table was null or missing', 13, 1, N'PrintJobPaddingSeconds');

    MERGE [dbo].[int_print_job_et_vitals] AS [Target]
    USING
        (SELECT DISTINCT
            [ipjea].[PatientId],
            [vd].[TopicSessionId],
            [gcm].[GdsCode] AS [GDSCode],
            [vd].[Name],
            [vd].[Value] AS [Value],
            [vd].[TimestampUTC] AS [ResultTimeUTC]
         FROM
            [dbo].[VitalsData] AS [vd]
            INNER JOIN [dbo].[GdsCodeMap] AS [gcm]
                ON [gcm].[FeedTypeId] = [vd].[FeedTypeId]
                   AND [gcm].[Name] = [vd].[Name]
            INNER JOIN [dbo].[TopicSessions] AS [ts]
                ON [ts].[Id] = [vd].[TopicSessionId]
            INNER JOIN [dbo].[int_print_job_et_alarm] AS [ipjea]
                ON [ipjea].[DeviceSessionId] = [ts].[DeviceSessionId]
         WHERE
            [vd].[TimestampUTC] >= DATEADD(MINUTE, -@preAlarmDataMinutes, [ipjea].[AlarmStartTimeUTC])
            AND [vd].[TimestampUTC] <= DATEADD(SECOND, @tMinusPaddingSeconds, [ipjea].[AlarmEndTimeUTC])
        ) AS [Source]
    ON [Target].[TopicSessionId] = [Source].[TopicSessionId]
        AND [Target].[GDSCode] = [Source].[GDSCode]
        AND [Target].[ResultTimeUTC] = [Source].[ResultTimeUTC]
    WHEN NOT MATCHED THEN
        INSERT
               ([Id],
                [PatientId],
                [TopicSessionId],
                [GDSCode],
                [Name],
                [Value],
                [ResultTimeUTC])
        VALUES (DEFAULT,
                [Source].[PatientId],
                [Source].[TopicSessionId],
                [Source].[GDSCode],
                [Source].[Name],
                [Source].[Value],
                [Source].[ResultTimeUTC]);
END;
GO
PRINT N'Creating [dbo].[usp_PM_CopyETWaveformData]...';


GO
CREATE PROCEDURE [dbo].[usp_PM_CopyETWaveformData]
AS
BEGIN
    DECLARE @tMinusPaddingSeconds INT; -- The number of seconds of waveform/vitals data before and after an alarm that we want to display/capture

    SELECT
        @tMinusPaddingSeconds = CAST([Value] AS INT)
    FROM
        [dbo].[ApplicationSettings]
    WHERE
        [ApplicationType] = 'Global'
        AND [Key] = 'PrintJobPaddingSeconds';

    IF @tMinusPaddingSeconds IS NULL
        RAISERROR(N'Global setting "%s" from the ApplicationSettings table was null or missing', 13, 1, N'PrintJobPaddingSeconds');

    MERGE [dbo].[int_print_job_et_waveform] AS [Target]
    USING
        (SELECT DISTINCT
            [AlarmTopics].[DeviceSessionId],
            [Waveform].[TimeStampBeginUTC] AS [StartTimeUTC],
            [Waveform].[TimeStampEndUTC] AS [EndTimeUTC],
            [Waveform].[SampleRate],
            [Waveform].[WaveformData],
            [ChannelTypes].[ChannelCode],
            [ChannelTypes].[CdiLabel]
         FROM
            [dbo].[v_LegacyWaveform] AS [Waveform]
            LEFT OUTER JOIN [dbo].[v_LegacyChannelTypes] AS [ChannelTypes] ON [Waveform].[TypeId] = [ChannelTypes].[TypeId]
            INNER JOIN (SELECT
                            [int_print_job_et_alarm].[DeviceSessionId],
                            MIN([int_print_job_et_alarm].[AlarmStartTimeUTC]) AS [MinAlarmStartTimeUTC],
                            MAX([int_print_job_et_alarm].[AlarmEndTimeUTC]) AS [MaxAlarmEndTimeUTC]
                        FROM
                            [dbo].[int_print_job_et_alarm]
                            INNER JOIN [dbo].[TopicSessions] ON [TopicSessions].[DeviceSessionId] = [int_print_job_et_alarm].[DeviceSessionId]
                        GROUP BY
                            [int_print_job_et_alarm].[DeviceSessionId]
                       ) AS [AlarmTopics] ON [AlarmTopics].[DeviceSessionId] = [Waveform].[DeviceSessionId]
         WHERE
            [Waveform].[TimeStampBeginUTC] < DATEADD(SECOND, @tMinusPaddingSeconds, [AlarmTopics].[MaxAlarmEndTimeUTC])
            AND [Waveform].[TimeStampEndUTC] > DATEADD(SECOND, -@tMinusPaddingSeconds, [AlarmTopics].[MinAlarmStartTimeUTC])
        ) AS [Source]
    ON [Target].[DeviceSessionId] = [Source].[DeviceSessionId]
        AND [Target].[StartTimeUTC] = [Source].[StartTimeUTC]
        AND [Target].[EndTimeUTC] = [Source].[EndTimeUTC]
        AND [Target].[ChannelCode] = [Source].[ChannelCode]
    WHEN NOT MATCHED THEN
        INSERT
               ([Id],
                [DeviceSessionId],
                [StartTimeUTC],
                [EndTimeUTC],
                [SampleRate],
                [WaveformData],
                [ChannelCode],
                [CdiLabel]
               )
        VALUES (DEFAULT,
                [Source].[DeviceSessionId],
                [Source].[StartTimeUTC],
                [Source].[EndTimeUTC],
                [Source].[SampleRate],
                [Source].[WaveformData],
                [Source].[ChannelCode],
                [Source].[CdiLabel]
               );
END;
GO
PRINT N'Creating [dbo].[usp_PM_GetAlarmData]...';


GO
CREATE PROCEDURE [dbo].[usp_PM_GetAlarmData]
    (
     @alarmId BIGINT,
     @locale VARCHAR(2) = 'en' -- TG - Should be CHAR(2)
    )
AS
BEGIN
    IF (@alarmId IS NULL)
        RAISERROR(14043, -1, -1, '@alarmId', 'usp_PM_GetAlarmData');
        
    IF (@locale IS NULL
        OR @locale NOT IN ('de', 'en', 'es', 'fr', 'it', 'nl', 'pl', 'zh', 'cs', 'pt'))
        SET @locale = 'en';

    DECLARE @paddingSeconds INT; -- The number of seconds of waveform/vitals data before and after an alarm that we want to display/capture

    SELECT
        @paddingSeconds = CAST([Value] AS INT)
    FROM
        [dbo].[ApplicationSettings]
    WHERE
        [ApplicationType] = 'Global'
        AND [Key] = 'PrintJobPaddingSeconds';

    IF @paddingSeconds IS NULL
        RAISERROR(N'Global setting "%s" from the ApplicationSettings table was null or missing', 13, 1, N'PrintJobPaddingSeconds');

    SELECT
        [Alarms].[AlarmId] AS [Id],
        [Alarms].[PatientId],
        ISNULL(ISNULL([ResMessage].[Value], '') + '  ' + REPLACE(ISNULL([ResValue].[Value], ''), '{0}',
                                                                 [Alarms].[ViolatingValue]) + '  '
               + REPLACE(ISNULL([ResLimit].[Value], ''), '{0}', [Alarms].[SettingViolated]), [ResMessage].[Value]) AS [Title],
        DATEADD(s, -@paddingSeconds, [Alarms].[AlarmStartTimeUTC]) AS [ReportStartTimeUTC],
        DATEADD(s, @paddingSeconds, [Alarms].[AlarmEndTimeUTC]) AS [ReportEndTimeUTC],
        ISNULL([ResLabel].[Value], '') AS [TitleLabel],
        [Alarms].[FirstName],
        [Alarms].[LastName],
        [Alarms].[FullName],
        [Alarms].[ID1],
        [Alarms].[ID2],
        [Alarms].[DOB],
        [Alarms].[FacilityName],
        [Alarms].[UnitName],
        [Alarms].[MonitorName]
    FROM
        [dbo].[int_print_job_et_alarm] AS [Alarms]
        LEFT OUTER JOIN [dbo].[ResourceStrings] AS [ResMessage]
            ON [ResMessage].[Name] = [Alarms].[StrMessage]
               AND [ResMessage].[Locale] = @locale
        LEFT OUTER JOIN [dbo].[ResourceStrings] AS [ResLimit]
            ON [ResLimit].[Name] = [Alarms].[StrLimitFormat]
               AND [ResLimit].[Locale] = @locale
        LEFT OUTER JOIN [dbo].[ResourceStrings] AS [ResValue]
            ON [ResValue].[Name] = [Alarms].[StrValueFormat]
               AND [ResValue].[Locale] = @locale
        LEFT OUTER JOIN [dbo].[ResourceStrings] AS [ResLabel]
            ON [ResLabel].[Name] = [Alarms].[StrTitleLabel]
               AND [ResLabel].[Locale] = @locale
    WHERE
        [Alarms].[AlarmId] = @alarmId;
END;
GO
PRINT N'Creating [dbo].[usp_PM_GetPatientVitalsByGDS]...';


GO
CREATE PROCEDURE [dbo].[usp_PM_GetPatientVitalsByGDS]
    (
     @gdsCodes [dbo].[GdsCodes] READONLY,
     @PatientId BIGINT,
     @startTimeUTC DATETIME,
     @endTimeUTC DATETIME
    )
AS
BEGIN
    SELECT
        [Vitals].[GDSCode],
        [Vitals].[Name],
        [Vitals].[Value],
        [Vitals].[ResultTimeUTC]
    FROM
        (SELECT
            [Vitals].[GDSCode],
            [Vitals].[Name],
            [Vitals].[Value],
            [Vitals].[ResultTimeUTC]
         FROM
            [dbo].[int_print_job_et_vitals] AS [Vitals]
            INNER JOIN (SELECT
                            [GdsCode]
                        FROM
                            @gdsCodes
                       ) AS [Codes] ON [Codes].[GdsCode] = [Vitals].[GDSCode]
         WHERE
            [Vitals].[PatientId] = @PatientId
            AND [Vitals].[ResultTimeUTC] >= @startTimeUTC
            AND [Vitals].[ResultTimeUTC] <= @endTimeUTC
         UNION ALL
         SELECT
            [GdsCodeMap].[GdsCode] AS [GDSCode],
            [VitalsData].[Name] AS [Name],
            [VitalsData].[Value] AS [Value],
            [VitalsData].[TimestampUTC] AS [ResultTimeUTC]
         FROM
            [dbo].[VitalsData]
            INNER JOIN [dbo].[GdsCodeMap] ON [GdsCodeMap].[GdsCode] IN (SELECT
                                                                    [GdsCode]
                                                                  FROM
                                                                    @gdsCodes)
                                       AND [GdsCodeMap].[FeedTypeId] = [VitalsData].[FeedTypeId]
                                       AND [GdsCodeMap].[Name] = [VitalsData].[Name]
         WHERE
            [VitalsData].[TopicSessionId] IN (SELECT
                                                [Id]
                                              FROM
                                                [dbo].[TopicSessions]
                                              WHERE
                                                [PatientSessionId] IN (SELECT DISTINCT
                                                                        [PatientSessionId]
                                                                       FROM
                                                                        [dbo].[PatientSessionsMap]
                                                                       WHERE
                                                                        [PatientId] = @PatientId))
            AND [VitalsData].[TimestampUTC] >= @startTimeUTC
            AND [VitalsData].[TimestampUTC] <= @endTimeUTC
         UNION ALL
         SELECT
            [GdsCodeMap].[GdsCode] AS [GDSCode],
            [LiveData].[Name] AS [Name],
            [LiveData].[Value] AS [Value],
            [LiveData].[TimestampUTC] AS [ResultTimeUTC]
         FROM
            [dbo].[LiveData]
            INNER JOIN [dbo].[GdsCodeMap] ON [GdsCodeMap].[GdsCode] IN (SELECT
                                                                            [GdsCode]
                                                                        FROM
                                                                            @gdsCodes)
                                             AND [GdsCodeMap].[FeedTypeId] = [LiveData].[FeedTypeId]
                                             AND [GdsCodeMap].[Name] = [LiveData].[Name]
         WHERE
            [LiveData].[TopicInstanceId] IN (SELECT
                                                [TopicInstanceId]
                                             FROM
                                                [dbo].[TopicSessions]
                                             WHERE
                                                [PatientSessionId] IN (SELECT DISTINCT
                                                                        [PatientSessionId]
                                                                       FROM
                                                                        [dbo].[PatientSessionsMap]
                                                                       WHERE
                                                                        [PatientId] = @PatientId)
                                                AND [TopicSessions].[EndTimeUTC] IS NULL)
            AND [LiveData].[TimestampUTC] >= @startTimeUTC
            AND [LiveData].[TimestampUTC] <= @endTimeUTC
        ) AS [Vitals];
END;
GO
PRINT N'Creating [dbo].[usp_PM_GetPatientWaveformData]...';


GO
CREATE PROCEDURE [dbo].[usp_PM_GetPatientWaveformData]
    (
     @alarmId BIGINT,
     @numberOfSeconds INT = -1,
     @locale NVARCHAR(2) = N'en' -- TG - Should be NCHAR(2)
    )
AS
BEGIN
    IF (@locale IS NULL
        OR @locale NOT IN (N'de', N'en', N'es', N'fr', N'it', N'nl', N'pl', N'zh', N'cs', N'pt')
        )
        SET @locale = N'en';

    DECLARE @deviceSessionId BIGINT;
    DECLARE @alarmStartTimeUTC DATETIME;
    DECLARE @alarmEndTimeUTC DATETIME;

    DECLARE @Waveforms TABLE
        (
         [ReportStartTimeUTC] DATETIME,
         [ReportEndTimeUTC] DATETIME,
         [WaveformStartTimeUTC] DATETIME,
         [WaveformEndTimeUTC] DATETIME,
         [SampleRate] INT,
         [WaveformData] VARBINARY(MAX),
         [ChannelCode] INT,
         [WaveformLabel] NVARCHAR(250),
         [Compressed] INT
        );

    DECLARE @paddingSeconds INT = 6; -- The number of seconds of waveform/vitals data before and after an alarm that we want to display/capture


    SELECT
        @deviceSessionId = [DeviceSessionId],
        @alarmStartTimeUTC = DATEADD(SECOND, -@paddingSeconds, [AlarmStartTimeUTC]),
        @alarmEndTimeUTC = DATEADD(SECOND, @paddingSeconds, [AlarmEndTimeUTC])
    FROM
        [dbo].[int_print_job_et_alarm]
    WHERE
        [AlarmId] = @alarmId;
    
    IF (@numberOfSeconds > 0)
        SET @alarmEndTimeUTC = DATEADD(SECOND, @numberOfSeconds, @alarmStartTimeUTC);

    IF (@alarmEndTimeUTC IS NULL)
        SET @alarmEndTimeUTC = GETUTCDATE();

    INSERT  INTO @Waveforms
    SELECT DISTINCT
        @alarmStartTimeUTC AS [ReportStartTimeUTC],
        @alarmEndTimeUTC AS [ReportEndTimeUTC],
        [Waveforms].[StartTimeUTC] AS [WaveformStartTimeUTC],
        [Waveforms].[EndTimeUTC] AS [WaveformEndTimeUTC],
        [Waveforms].[SampleRate],
        [Waveforms].[WaveformData],
        [Waveforms].[ChannelCode],
        [ResourceStrings].[Value] AS [WaveformLabel],
        [Waveforms].[Compressed]
    FROM
        (SELECT
            [ipjew].[StartTimeUTC],
            [ipjew].[EndTimeUTC],
            [ipjew].[SampleRate],
            [ipjew].[WaveformData],
            [ipjew].[ChannelCode],
            [ipjew].[CdiLabel],
            1 AS [Compressed]
         FROM
            [dbo].[int_print_job_et_waveform] AS [ipjew]
         WHERE
            [DeviceSessionId] = @deviceSessionId
            AND [StartTimeUTC] < @alarmEndTimeUTC
         UNION ALL
         SELECT
            [WaveformData].[StartTimeUTC] AS [StartTimeUTC],
            [WaveformData].[EndTimeUTC] AS [EndTimeUTC],
            [TopicFeedTypes].[SampleRate] AS [SampleRate],
            [WaveformData].[Samples] AS [WaveformData],
            [TopicFeedTypes].[ChannelCode] AS [ChannelCode],
            [TopicFeedTypes].[Label] AS [CdiLabel],
            [WaveformData].[Compressed]
         FROM
            [dbo].[WaveformData]
            INNER JOIN [dbo].[TopicSessions] ON [WaveformData].[TopicSessionId] = [TopicSessions].[Id]
            INNER JOIN [dbo].[TopicFeedTypes] ON [TopicFeedTypes].[FeedTypeId] = [WaveformData].[TypeId]
         WHERE
            [TopicSessions].[DeviceSessionId] = @deviceSessionId
            AND [WaveformData].[StartTimeUTC] < @alarmEndTimeUTC
        ) AS [Waveforms]
        INNER JOIN [dbo].[ResourceStrings] ON [CdiLabel] = [ResourceStrings].[Name]
                                        AND [Locale] = @locale
    WHERE
        [Waveforms].[EndTimeUTC] > @alarmStartTimeUTC;

    DECLARE @LatestSample DATETIME;

    SELECT
        @LatestSample = MAX([WaveformEndTimeUTC])
    FROM
        @Waveforms;

    IF (@alarmEndTimeUTC > @LatestSample)
    BEGIN
        INSERT  INTO @Waveforms
        SELECT DISTINCT
            @alarmStartTimeUTC AS [ReportStartTimeUTC],
            @alarmEndTimeUTC AS [ReportEndTimeUTC],
            [StartTimeUTC] AS [WaveformStartTimeUTC],
            [EndTimeUTC] AS [WaveformEndTimeUTC],
            [SampleRate],
            [WaveformData],
            [ChannelCode],
            [ResourceStrings].[Value] AS [WaveformLabel],
            [Waveforms].[Compressed]
        FROM
            (SELECT
                [TopicSessions].[DeviceSessionId],
                [WaveformLiveData].[StartTimeUTC] AS [StartTimeUTC],
                [WaveformLiveData].[EndTimeUTC] AS [EndTimeUTC],
                [TopicFeedTypes].[SampleRate] AS [SampleRate],
                [WaveformLiveData].[Samples] AS [WaveformData],
                [TopicFeedTypes].[ChannelCode] AS [ChannelCode],
                [TopicFeedTypes].[Label] AS [CdiLabel],
                [Compressed] = 0
             FROM
                [dbo].[WaveformLiveData]
                INNER JOIN [dbo].[TopicSessions] ON [WaveformLiveData].[TopicInstanceId] = [TopicSessions].[TopicInstanceId]
                INNER JOIN [dbo].[TopicFeedTypes] ON [TopicFeedTypes].[FeedTypeId] = [WaveformLiveData].[TypeId]
             WHERE
                [TopicSessions].[DeviceSessionId] = @deviceSessionId
                AND [WaveformLiveData].[StartTimeUTC] < @alarmEndTimeUTC
            ) AS [Waveforms]
            INNER JOIN [dbo].[ResourceStrings] ON [CdiLabel] = [ResourceStrings].[Name]
                                                  AND [Locale] = @locale
        WHERE
            [Waveforms].[EndTimeUTC] > @LatestSample;
    END;

    SELECT
        [ReportStartTimeUTC],
        [ReportEndTimeUTC],
        [WaveformStartTimeUTC],
        [WaveformEndTimeUTC],
        [SampleRate],
        [WaveformData],
        [ChannelCode],
        [WaveformLabel],
        [Compressed]
    FROM
        @Waveforms
    ORDER BY
        [ChannelCode],
        [WaveformStartTimeUTC] ASC;
END;
GO
PRINT N'Creating [dbo].[usp_PurgeDlAlarmData]...';


GO
CREATE PROCEDURE [dbo].[usp_PurgeDlAlarmData]
    (
     @FChunkSize INT,
     @PurgeDateUTC DATETIME,
     @AlarmsRowsPurged INT OUTPUT
    )
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @RC INT = 0;
    DECLARE @Loop INT = 1;
    
    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [gad]
        FROM
            [dbo].[GeneralAlarmsData] AS [gad] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [gad].[StartDateTime] < @PurgeDateUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;
    
    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [lad]
        FROM
            [dbo].[LimitAlarmsData] AS [lad] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [lad].[StartDateTime] < @PurgeDateUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;
    
    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [lcd]
        FROM
            [dbo].[LimitChangeData] AS [lcd] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [lcd].[AcquiredDateTimeUTC] < @PurgeDateUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;
    
    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [asd]
        FROM
            [dbo].[AlarmsStatusData] AS [asd] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [asd].[AcquiredDateTimeUTC] < @PurgeDateUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    IF (@RC <> 0)
        SET @AlarmsRowsPurged = @RC;
END;
GO
PRINT N'Creating [dbo].[usp_PurgeDlEncounterData]...';


GO
CREATE PROCEDURE [dbo].[usp_PurgeDlEncounterData]
    (
     @FChunkSize INT,
     @EncounterDataPurged INT OUTPUT
    )
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @PurgeDateTimeUTC DATETIME = DATEADD(DAY, -10, GETUTCDATE());
    DECLARE @RC INT = 0;
    DECLARE @Loop INT = 1;

    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize) FROM
            [dbo].[DeviceSessions] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [DeviceSessions].[EndTimeUTC] IS NOT NULL
            AND [DeviceSessions].[EndTimeUTC] <= @PurgeDateTimeUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;

    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [did]
        FROM
            [dbo].[DeviceInfoData] AS [did] WITH (ROWLOCK) -- Do not allow lock escalations.
            LEFT OUTER JOIN [dbo].[DeviceSessions] AS [ds]
                ON [did].[DeviceSessionId] = [ds].[Id]
        WHERE
            [ds].[Id] IS NULL;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;

    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize) FROM
            [dbo].[TopicSessions] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [TopicSessions].[EndTimeUTC] IS NOT NULL
            AND [TopicSessions].[EndTimeUTC] <= @PurgeDateTimeUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;

    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize) FROM
            [dbo].[PatientData] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [PatientSessionId] IN (SELECT
                                    [ps].[Id]
                                   FROM
                                    [dbo].[PatientSessions] AS [ps]
                                   WHERE
                                    [ps].[EndTimeUTC] IS NOT NULL
                                    AND [ps].[EndTimeUTC] <= @PurgeDateTimeUTC)
            AND [TimestampUTC] <= @PurgeDateTimeUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;

    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize) FROM
            [dbo].[PatientSessions] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [EndTimeUTC] IS NOT NULL
            AND [EndTimeUTC] <= @PurgeDateTimeUTC
            AND NOT EXISTS ( SELECT
                                1
                             FROM
                                [dbo].[PatientData] AS [pd]
                             WHERE
                                [pd].[PatientSessionId] = [PatientSessions].[Id] );


        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;

    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [psm]
        FROM
            [dbo].[PatientSessionsMap] AS [psm] WITH (ROWLOCK) -- Do not allow lock escalations.
            LEFT OUTER JOIN [dbo].[PatientSessions] AS [ps]
                ON [psm].[PatientSessionId] = [ps].[Id]
        WHERE
            [ps].[Id] IS NULL;


        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @EncounterDataPurged = @RC;
END;
GO
PRINT N'Creating [dbo].[usp_PurgeDlPrintJobsData]...';


GO
CREATE PROCEDURE [dbo].[usp_PurgeDlPrintJobsData]
    (
     @FChunkSize INT,
     @PurgeDate VARCHAR(30), -- TG - Should be DATETIME
     @PrintJobsPurged INT OUTPUT
    )
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @RC INT = 0;

    DELETE TOP (@FChunkSize)
        [dbo].[PrintBlobData]
    WHERE
        [PrintRequestId] IN (SELECT
                                [Id]
                             FROM
                                [dbo].[PrintRequests]
                             WHERE
                                [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) < CAST(@PurgeDate AS DATETIME));

    SET @RC = @RC + @@ROWCOUNT;

    DELETE TOP (@FChunkSize)
        [dbo].[WaveformPrintData]
    WHERE
        [PrintRequestId] IN (SELECT
                                [Id]
                             FROM
                                [dbo].[PrintRequests]
                             WHERE
                                [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) < CAST(@PurgeDate AS DATETIME));

    SET @RC = @RC + @@ROWCOUNT;

    DELETE TOP (@FChunkSize)
        [dbo].[PrintRequests]
    WHERE
        [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) < CAST(@PurgeDate AS DATETIME);

    --TRUNCATE TABLE [dbo].[PrintJobs] --don't have a clear idea 

    SET @RC = @RC + @@ROWCOUNT;

    IF (@RC <> 0)
        SET @PrintJobsPurged = @RC;
END;
GO
PRINT N'Creating [dbo].[usp_PurgeDlVitalsData]...';


GO
CREATE PROCEDURE [dbo].[usp_PurgeDlVitalsData]
    (
     @FChunkSize INT,
     @PurgeDateUTC DATETIME,
     @HL7MonitorRowsPurged INT OUTPUT
    )
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @RC INT = 0;
    DECLARE @Loop INT = 1;
    
    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [vd]
        FROM
            [dbo].[VitalsData] AS [vd] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [vd].[TimestampUTC] < @PurgeDateUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;
    
    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [sd]
        FROM
            [dbo].[StatusData] AS [sd] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [sd].[SetId] IN (SELECT
                                [sds].[Id]
                             FROM
                                [dbo].[StatusDataSets] AS [sds] WITH (ROWLOCK) -- Do not allow lock escalations.
                             WHERE
                                [sds].[TimestampUTC] < @PurgeDateUTC);

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @Loop = 1;
    
    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [sds]
        FROM
            [dbo].[StatusDataSets] AS [sds] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [sds].[TimestampUTC] < @PurgeDateUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @HL7MonitorRowsPurged = @RC;
END;
GO
PRINT N'Creating [dbo].[usp_PurgeDlWaveformData]...';


GO
CREATE PROCEDURE [dbo].[usp_PurgeDlWaveformData]
    (
     @FChunkSize INT,
     @PurgeDateUTC DATETIME,
     @WaveformDataPurged INT OUTPUT
    )
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE
        @RC INT = 0,
        @Loop INT = 1;
    
    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [wd]
        FROM
            [dbo].[WaveformData] AS [wd] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [wd].[StartTimeUTC] < @PurgeDateUTC;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @WaveformDataPurged = @RC;
END;
GO
PRINT N'Creating [dbo].[usp_PurgeEventsData]...';


GO
CREATE PROCEDURE [dbo].[usp_PurgeEventsData]
    (
     @FChunkSize INT,
     @PurgeDate DATETIME,
     @EventsDataRowsPurged INT OUTPUT
    )
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @RC INT = 0;
    DECLARE @Loop INT = 1;

    WHILE (@Loop > 0)
    BEGIN
        DELETE TOP (@FChunkSize)
            [ed]
        FROM
            [dbo].[EventsData] AS [ed] WITH (ROWLOCK) -- Do not allow lock escalations.
        WHERE
            [ed].[TimestampUTC] < @PurgeDate;

        SET @Loop = @@ROWCOUNT;
        SET @RC += @Loop;
    END;

    SET @EventsDataRowsPurged = @RC;
END;
GO
PRINT N'Creating [dbo].[usp_PurgeTasks]...';


GO
CREATE PROCEDURE [dbo].[usp_PurgeTasks]
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ChunkSize INT = 200;

        /* Order of purging the data
        --HL7Success
        --HL7Error
        --MonitorResults
        --EventsData
        --TwelveLead
        --Alarm
        --PrintJob
        --MsgLog
        --ChunkSize
        --HL7NotRead
        --CEILog
        --DebugWaveforms
        --HL7Pending
        --Encounter
        --CHAUDITLOG
        --CHPATSETTINGS
        --CHLOGDATA
        */

        DECLARE
            @HL7SuccessPurgeDate DATETIME,
            @HL7SuccessRowsPurged INT;
        EXEC [dbo].[PurgerParameters] 'HL7Success', @PurgeDate = @HL7SuccessPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        DECLARE
            @HL7ErrorPurgeDate DATETIME,
            @HL7ErrorRowsPurged INT;
        EXEC [dbo].[PurgerParameters] 'HL7Error', @PurgeDate = @HL7ErrorPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
 
        DECLARE
            @MonitorResultsPurgeDate DATETIME,
            @HL7MonitorRowsPurged INT;
        EXEC [dbo].[PurgerParameters] 'MonitorResults', @PurgeDate = @MonitorResultsPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        --DECLARE @MonitorResultsPurgeDateUTC DATETIME = DATEADD(hour, 1, dbo.fnLocalDateTimeToUtcTime(@MonitorResultsPurgeDate)); -- add 1 hour as fnLocalDateTimeToUtcTime does not handle daylight savings shift well
        
        DECLARE
            @EventsDataPurgeDate DATETIME,
            @EventsDataRowsPurged INT;
        EXEC [dbo].[PurgerwaveformParameters] @PurgeDate = @EventsDataPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @EventsDataPurgeDateUTC DATETIME = DATEADD(HOUR, 1, [dbo].[fnLocalDateTimeToUtcTime](@EventsDataPurgeDate)); -- add 1 hour as fnLocalDateTimeToUtcTime does not handle daylight savings shift well

        DECLARE
            @TwelveLeadRowsPurgeDate DATETIME,
            @TwelveLeadRowsPurged INT;
        EXEC [dbo].[PurgerParameters] 'TwelveLead', @PurgeDate = @TwelveLeadRowsPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        DECLARE
            @AlarmRowsPurgedDate DATETIME,
            @AlarmsRowsPurged INT;
        EXEC [dbo].[PurgerParameters] 'Alarm', @PurgeDate = @AlarmRowsPurgedDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @AlarmRowsPurgedDateUTC DATETIME = DATEADD(HOUR, 1, [dbo].[fnLocalDateTimeToUtcTime](@AlarmRowsPurgedDate)); -- add 1 hour as fnLocalDateTimeToUtcTime does not handle daylight savings shift well
        
        DECLARE
            @PrintJobsPurgedDate DATETIME,
            @PrintJobsPurgeCount INT;
        EXEC [dbo].[PurgerParameters] 'PrintJob', @PurgeDate = @PrintJobsPurgedDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        
        DECLARE
            @MessageLogPurgeDate DATETIME,
            @MessageLogPurgeCount INT;
        EXEC [dbo].[PurgerParameters] 'MsgLog', @PurgeDate = @MessageLogPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        DECLARE
            @HL7NotReadPurgedDate DATETIME,
            @HL7NotReadPurged INT;
        EXEC [dbo].[PurgerParameters] 'HL7NotRead', @PurgeDate = @HL7NotReadPurgedDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        DECLARE
            @CEILogPurgeDate DATETIME,
            @CEILogPurged INT;
        EXEC [dbo].[PurgerParameters] 'CEILog', @PurgeDate = @CEILogPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        DECLARE
            @WaveformPurgeDate DATETIME,
            @WaveformDataPurged INT;
        EXEC [dbo].[PurgerwaveformParameters] @PurgeDate = @WaveformPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @WaveformPurgeDateUTC DATETIME = DATEADD(HOUR, 1, [dbo].[fnLocalDateTimeToUtcTime](@WaveformPurgeDate)); -- add 1 hour as fnLocalDateTimeToUtcTime does not handle daylight savings shift well
        
        DECLARE
            @HL7PendingPurgeDate DATETIME,
            @HL7PendingDataPurged INT;
        EXEC [dbo].[PurgerParameters] 'HL7Pending', @PurgeDate = @HL7PendingPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        DECLARE @EncounterDataPurged INT;
        
        DECLARE
            @CHAuditLogDate DATETIME,
            @ChAuditDataPurged INT;
        EXEC [dbo].[PurgerParameters] 'CHAUDITLOG', @PurgeDate = @CHAuditLogDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        DECLARE
            @CHPatientSettingsDate DATETIME,
            @PatientSettingsDataPurged INT;
        EXEC [dbo].[PurgerParameters] 'CHPATSETTINGS', @PurgeDate = @CHPatientSettingsDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        DECLARE
            @CHLogDataDate DATETIME,
            @CHLogDataPurged INT;
        EXEC [dbo].[PurgerParameters] 'CHLOGDATA', @PurgeDate = @CHLogDataDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;

        SET @HL7SuccessRowsPurged = 0; --Initial value
        SET @HL7ErrorRowsPurged = 0; --Initial value
        SET @HL7MonitorRowsPurged = 0; --Initial value
        SET @EventsDataRowsPurged = 0; --Initial value
        SET @TwelveLeadRowsPurged = 0; --Initial value
        SET @AlarmsRowsPurged = 0; --Initial value
        SET @PrintJobsPurgeCount = 0; --Initial value
        SET @MessageLogPurgeCount = 0; --Initial value
        SET @HL7NotReadPurged = 0; --Initial value
        SET @CEILogPurged = 0; --Initial value
        SET @WaveformDataPurged = 0; --Initial value
        SET @HL7PendingDataPurged = 0; --Initial value
        SET @ChAuditDataPurged = 0; --Initial value
        SET @EncounterDataPurged = 0; --Initial value
        SET @PatientSettingsDataPurged = 0; --Initial value
        SET @CHLogDataPurged = 0; --Initial value

        DECLARE
            @ErrorMessage NVARCHAR(4000),
            @ErrorNumber INT,
            @ErrorSeverity INT,
            @ErrorState INT,
            @ErrorLine INT,
            @ErrorProcedure NVARCHAR(200);

        BEGIN TRY
            /* To purge the HL7 Success data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_HL7_Success] @FChunkSize = @ChunkSize, @PurgeDate = @HL7SuccessPurgeDate, @HL7SuccessRowsPurged = @HL7SuccessRowsPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@HL7SuccessRowsPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_HL7_Success) at configured time interval : ' + RTRIM(CAST(@HL7SuccessPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            -- Assign variables to error-handling functions that capture information for RAISERROR.
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            -- Build the message string that will contain original error information.
            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            -- Raise an error: msg_str parameter of RAISERROR will contain the original error information.
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the HL7 Error data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_HL7_Error] @FChunkSize = @ChunkSize, @PurgeDate = @HL7ErrorPurgeDate, @HL7ErrorRowsPurged = @HL7ErrorRowsPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@HL7ErrorRowsPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_HL7_Error) at configured time interval : ' + RTRIM(CAST(@HL7ErrorPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the Monitor data which is older than the configured interval*/
            SET @HL7MonitorRowsPurged = 0; --Resetting
            EXEC [dbo].[p_Purge_Result_Data] @FChunkSize = @ChunkSize, @PurgeDate = @MonitorResultsPurgeDate, @HL7MonitorRowsPurged = @HL7MonitorRowsPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@HL7MonitorRowsPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_Result_Data) at configured time interval : ' + RTRIM(CAST(@MonitorResultsPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the Monitor data which is older than the configured interval*/
            EXEC [dbo].[usp_PurgeEventsData] @FChunkSize = @ChunkSize, @PurgeDate = @EventsDataPurgeDateUTC, @EventsDataRowsPurged = @EventsDataRowsPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@EventsDataRowsPurged AS NVARCHAR(20))
                   + ') purged from ICS (usp_PurgeEventsData) at configured time interval : ' + RTRIM(CAST(@EventsDataPurgeDateUTC AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            SET @HL7MonitorRowsPurged = 0; --Resetting
            EXEC [dbo].[usp_PurgeDlVitalsData] @FChunkSize = @ChunkSize, @PurgeDateUTC = @MonitorResultsPurgeDate, @HL7MonitorRowsPurged = @HL7MonitorRowsPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@HL7MonitorRowsPurged AS NVARCHAR(20))
                   + ') purged from ICS (usp_PurgeDlVitalsData) at configured time interval : ' + RTRIM(CAST(@MonitorResultsPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the TweleveLead data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_12Lead_Data] @FChunkSize = @ChunkSize, @PurgeDate = @TwelveLeadRowsPurgeDate, @TwelveLeadRowsPurged = @TwelveLeadRowsPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@TwelveLeadRowsPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_12Lead_Data) at configured time interval : ' + RTRIM(CAST(@TwelveLeadRowsPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the Alarm data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_Alarm_Data] @FChunkSize = @ChunkSize, @PurgeDate = @AlarmRowsPurgedDate, @AlarmsRowsPurged = @AlarmsRowsPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@AlarmsRowsPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_Alarm_Data) at configured time interval : ' + RTRIM(CAST(@AlarmRowsPurgedDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            SET @AlarmsRowsPurged = 0; --Resetting
            EXEC [dbo].[usp_PurgeDlAlarmData] @FChunkSize = @ChunkSize, @PurgeDateUTC = @AlarmRowsPurgedDateUTC, @AlarmsRowsPurged = @AlarmsRowsPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@AlarmsRowsPurged AS NVARCHAR(20))
                   + ') purged from ICS (usp_PurgeDlAlarmData) at configured time interval : ' + RTRIM(CAST(@AlarmRowsPurgedDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the Prints jobs data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_Print_Job_Data] @FChunkSize = @ChunkSize, @PurgeDate = @PrintJobsPurgedDate, @PrintJobsPurged = @PrintJobsPurgeCount OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@PrintJobsPurgeCount AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_Print_Job_Data) at configured time interval : ' + RTRIM(CAST(@PrintJobsPurgedDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        /*
        SET @PrintJobsPurgeCount = 0; --Resetting the value
        -- NO DL PRINT JOBS USED IN THE CURRENT ICS VERSION
        EXEC [dbo].[usp_PurgeDlPrintJobsData] @FChunkSize = @ChunkSize, @PurgeDate = @PrintJobsPurgedDate, @PrintJobsPurgeCount = @PrintJobsPurgeCount OUTPUT
        PRINT(CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@PrintJobsPurgeCount AS NVARCHAR(20)) + ') purged from ICS (usp_PurgeDlPrintJobsData) at configured time interval : ' + RTRIM(CAST(@PrintJobsPurgedDate AS NVARCHAR(30))) +  N'.');
        */

        BEGIN TRY
            SET @PrintJobsPurgeCount = 0; -- Resetting
            EXEC [dbo].[p_Purge_ETPrintJobs_Data] @FChunkSize = @ChunkSize, @PurgeDate = @PrintJobsPurgedDate, @PrintJobsPurged = @PrintJobsPurgeCount OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@PrintJobsPurgeCount AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_ETPrintJobs_Data) at configured time interval : ' + RTRIM(CAST(@PrintJobsPurgedDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the Message log data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_msg_Log_Data] @FChunkSize = @ChunkSize, @PurgeDate = @MessageLogPurgeDate, @MessageLogPurged = @MessageLogPurgeCount OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@MessageLogPurgeCount AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_msg_Log_Data) at configured time interval : ' + RTRIM(CAST(@MessageLogPurgeDate AS NVARCHAR(30))) + N'.');    
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the HL7 Not Read data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_HL7_Not_Read] @FChunkSize = @ChunkSize, @PurgeDate = @HL7NotReadPurgedDate, @HL7NotReadPurged = @HL7NotReadPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@HL7NotReadPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_HL7_Not_Read) at configured time interval : ' + RTRIM(CAST(@HL7NotReadPurgedDate AS NVARCHAR(30))) + N'.');    
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the CEI data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_CEI_Log_Data] @FChunkSize = @ChunkSize, @PurgeDate = @CEILogPurgeDate, @CEILogPurged = @CEILogPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@CEILogPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_CEI_Log_Data) at configured time interval : ' + RTRIM(CAST(@CEILogPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the Waveform data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_WaveForm_Data] @FChunkSize = @ChunkSize, @PurgeDate = @WaveformPurgeDate, @WaveformDataPurged = @WaveformDataPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@WaveformDataPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_WaveForm_Data) at configured time interval : ' + RTRIM(CAST(@WaveformPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            SET @WaveformDataPurged = 0; --Resetting
            EXEC [dbo].[usp_PurgeDlWaveformData] @FChunkSize = @ChunkSize, @PurgeDateUTC = @WaveformPurgeDateUTC, @WaveformDataPurged = @WaveformDataPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@WaveformDataPurged AS NVARCHAR(20))
                   + ') purged from ICS (usp_PurgeDlWaveformData) at configured time interval : ' + RTRIM(CAST(@WaveformPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the HL7 Pending data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_HL7_Pending] @FChunkSize = @ChunkSize, @PurgeDate = @HL7PendingPurgeDate, @HL7PendingDataPurged = @HL7PendingDataPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@HL7PendingDataPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_HL7_Pending) at configured time interval : ' + RTRIM(CAST(@HL7PendingPurgeDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the Encounter data(here the purge is doing for the date before 10 days*/
            EXEC [dbo].[p_Purge_Encounter_Data] @FChunkSize = @ChunkSize, @EncounterDataPurged = @EncounterDataPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@EncounterDataPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_Encounter_Data).');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            SET @EncounterDataPurged = 0; --Resetting
            EXEC [dbo].[usp_PurgeDlEncounterData] @FChunkSize = @ChunkSize, @EncounterDataPurged = @EncounterDataPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@EncounterDataPurged AS NVARCHAR(20))
                   + ') purged from ICS (usp_PurgeDlEncounterData).');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the CH Audit log data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_ch_Audit_Log] @FChunkSize = @ChunkSize, @PurgeDate = @CHAuditLogDate, @ChAuditDataPurged = @ChAuditDataPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@ChAuditDataPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_ch_Audit_Log) at configured time interval : ' + RTRIM(CAST(@CHAuditLogDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the CH Patient Settings data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_ch_Patient_Settings] @FChunkSize = @ChunkSize, @PurgeDate = @CHPatientSettingsDate, @PatientSettingsDataPurged = @PatientSettingsDataPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@PatientSettingsDataPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_ch_Patient_Settings) at configured time interval : ' + RTRIM(CAST(@CHPatientSettingsDate AS NVARCHAR(30)))
                   + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;

        BEGIN TRY
            /* To purge the CH Log data which is older than the configured interval*/
            EXEC [dbo].[p_Purge_ch_Log_Data] @FChunkSize = @ChunkSize, @PurgeDate = @CHLogDataDate, @CHLogDataPurged = @CHLogDataPurged OUTPUT;
            PRINT (CONVERT(VARCHAR(30), GETDATE(), 121) + ' -- Records (' + CAST(@CHLogDataPurged AS NVARCHAR(20))
                   + ') purged from ICS (p_Purge_ch_Log_Data) at configured time interval : ' + RTRIM(CAST(@CHLogDataDate AS NVARCHAR(30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT
                @ErrorNumber = ERROR_NUMBER(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE(),
                @ErrorLine = ERROR_LINE(),
                @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

            SELECT
                @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
        END CATCH;
    END TRY
    BEGIN CATCH
        SELECT
            @ErrorNumber = ERROR_NUMBER(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE(),
            @ErrorLine = ERROR_LINE(),
            @ErrorProcedure = COALESCE(ERROR_PROCEDURE(), N'(null)');

        -- Use RAISERROR inside the CATCH block to return error
        -- information about the original error that caused
        -- execution to jump to the CATCH block.
        -- Build the message string that will contain original error information.
        SELECT
            @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE(ERROR_MESSAGE(), N'(null)');

        -- Raise an error: msg_str parameter of RAISERROR will contain the original error information.
        RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;
    END CATCH;
END;
GO
PRINT N'Creating [dbo].[usp_RemoveTrailingLiveData]...';


GO
CREATE PROCEDURE [dbo].[usp_RemoveTrailingLiveData]
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ChunkSize INT = 1500;
    DECLARE @DateString VARCHAR(30) = CAST(SYSDATETIME() AS VARCHAR(30));
    DECLARE @RowCount BIGINT = @ChunkSize;
    DECLARE @TotalRows BIGINT = 0;
    DECLARE @Message VARCHAR(200) = '';
    DECLARE @Flag BIT = 1;
    DECLARE @ErrorNumber INT = 0;
    DECLARE @Seconds SMALLINT = 150;
    DECLARE @Multiple TINYINT = 100;

    SET @Message = CAST(SYSDATETIME() AS VARCHAR(40)) + ' - Starting LiveData purge...';
    RAISERROR (@Message, 10, 1) WITH NOWAIT;

    SET @DateString = CAST(SYSDATETIME() AS VARCHAR(30));
    RAISERROR (N'%s - Chunk Size: %d', 10, 1, @DateString, @ChunkSize) WITH NOWAIT;
    
    SELECT
        [TopicInstanceId],
        [FeedTypeId],
        DATEADD(SECOND, -150, MAX([TimestampUTC])) AS [LatestUTC]
    INTO
        [#CutoffRows]
    FROM
        [dbo].[LiveData] AS [ld]
    GROUP BY
        [TopicInstanceId],
        [FeedTypeId];

    WHILE (@Flag = 1)
    BEGIN
        BEGIN TRY
            DELETE TOP (@ChunkSize) [ld]
            FROM
                [dbo].[LiveData] AS [ld] WITH (ROWLOCK) -- Do not allow lock escalations.
                INNER JOIN [#CutoffRows] AS [cr]
                ON [ld].[TopicInstanceId] = [cr].[TopicInstanceId]
                    AND [ld].[FeedTypeId] = [cr].[FeedTypeId]
            WHERE
                [ld].[TimestampUTC] < [cr].[LatestUTC];

            SET @RowCount = @@ROWCOUNT;
            SET @TotalRows += @RowCount;
        END TRY
        BEGIN CATCH
            SET @ErrorNumber = ERROR_NUMBER();
            RAISERROR (N'%s - ERROR: %d - CONTINUING...', 10, 1, @DateString, @ErrorNumber) WITH NOWAIT;

            WAITFOR DELAY '00:00:01';
    
            CONTINUE;
        END CATCH;

        IF (@TotalRows % (@ChunkSize * @Multiple) = 0) -- When Total Rows is a multiple of Chunk Size
        BEGIN
            SET @DateString = CAST(SYSDATETIME() AS VARCHAR(30));
            RAISERROR (N'%s - Total Rows Deleted: %I64d ...', 10, 1, @DateString, @TotalRows) WITH NOWAIT;
        END;

        IF (@RowCount = 0)
            SET @Flag = 0;
    END;

    -- Delete any other live data older than 10 days
    DECLARE @PurgeDate DATETIME2 = DATEADD(DAY, -10, SYSUTCDATETIME());
    SET @RowCount = @ChunkSize;
    SET @Flag = 1;

    WHILE (@Flag = 1)
    BEGIN
        BEGIN TRY
            DELETE TOP (@ChunkSize) -- TOP is not allowed in an UPDATE or DELETE statement against a partitioned view.
                [ld]
            FROM
                [dbo].[LiveData] AS [ld] WITH (ROWLOCK) -- Do not allow lock escalations.
            WHERE
                [ld].[TimestampUTC] < @PurgeDate;

            SET @RowCount = @@ROWCOUNT;
            SET @TotalRows += @RowCount;

        END TRY
        BEGIN CATCH
            SET @ErrorNumber = ERROR_NUMBER();
            RAISERROR (N'%s - ERROR: %d - CONTINUING...', 10, 1, @DateString, @ErrorNumber) WITH NOWAIT;

            WAITFOR DELAY '00:00:01';
    
            CONTINUE;
        END CATCH;

        SET @DateString = CAST(SYSDATETIME() AS VARCHAR(30));
        RAISERROR (N'%s - Total Rows Deleted: %I64d ...', 10, 1, @DateString, @TotalRows) WITH NOWAIT;

        IF (@RowCount = 0)
            SET @Flag = 0;
    END;

    SET @DateString = CAST(SYSDATETIME() AS VARCHAR(30));
    RAISERROR (N'%s - Total Rows Deleted: %I64d', 10, 1, @DateString, @TotalRows) WITH NOWAIT;

    SET @Message = CAST(SYSDATETIME() AS VARCHAR(40)) + ' - Ending LiveData purge...';
    RAISERROR (@Message, 10, 1) WITH NOWAIT;
END;
GO
PRINT N'Creating [dbo].[usp_RemoveTrailingLiveWaveformData]...';


GO
CREATE PROCEDURE [dbo].[usp_RemoveTrailingLiveWaveformData]
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Message VARCHAR(200) = '';
    DECLARE @ChunkSize INT = 1500;
    DECLARE @DateString VARCHAR(30) = CAST(SYSDATETIME() AS VARCHAR(30));
    DECLARE @Flag BIT = 1;
    DECLARE @TotalRows BIGINT = 0;
    DECLARE @RowCount BIGINT = 0;
    DECLARE @ErrorNumber INT = 0;
    DECLARE @Multiplier TINYINT = 10;

    SET @Message = CAST(SYSDATETIME() AS VARCHAR(30)) + ' - Starting WaveformLiveData purge...';
    RAISERROR (@Message, 10, 1) WITH NOWAIT;

    SET @DateString = CAST(SYSDATETIME() AS VARCHAR(30));
    RAISERROR (N'%s - Chunk Size: %d', 10, 1, @DateString, @ChunkSize) WITH NOWAIT;

    SELECT
        [wld].[TopicInstanceId],
        [wld].[TypeId],
        MAX([wld].[EndTimeUTC]) AS [LatestUTC]
    INTO
        [#CutoffRows]
    FROM
        [dbo].[WaveformLiveData] AS [wld]
    GROUP BY
        [wld].[TopicInstanceId],
        [wld].[TypeId];

    WHILE (@Flag = 1)
    BEGIN
        BEGIN TRY
            DELETE TOP (@ChunkSize)
                [wld]
            FROM
                [dbo].[WaveformLiveData] AS [wld] WITH (ROWLOCK) -- Do not allow lock escalations.
                INNER JOIN [#CutoffRows] AS [cr]
                    ON [wld].[TopicInstanceId] = [cr].[TopicInstanceId]
                       AND [wld].[TypeId] = [cr].[TypeId]
            WHERE
                [wld].[StartTimeUTC] < [cr].[LatestUTC];

            SET @RowCount = @@ROWCOUNT;
            SET @TotalRows += @RowCount;
        END TRY
        BEGIN CATCH
            SET @ErrorNumber = ERROR_NUMBER();
            RAISERROR (N'%s - ERROR: %d - CONTINUING...', 10, 1, @DateString, @ErrorNumber) WITH NOWAIT;

            WAITFOR DELAY '00:00:01';
    
            CONTINUE;
        END CATCH;

        -- Report progress when Total Rows is a multiple of Chunk Size
        IF (@TotalRows % (@ChunkSize * @Multiplier) = 0) 
        BEGIN
            SET @DateString = CAST(SYSDATETIME() AS VARCHAR(30));
            RAISERROR (N'%s - Total Rows Deleted: %I64d ...', 10, 1, @DateString, @TotalRows) WITH NOWAIT;
        END;

        IF (@RowCount = 0)
            SET @Flag = 0;
    END;

    SET @DateString = CAST(SYSDATETIME() AS VARCHAR(30));
    RAISERROR (N'%s - Total Rows Deleted: %I64d', 10, 1, @DateString, @TotalRows) WITH NOWAIT;

    SET @Message = CAST(SYSDATETIME() AS VARCHAR(40)) + ' - Ending WaveformLiveData purge...';
    RAISERROR (@Message, 10, 1) WITH NOWAIT;
END;
GO
PRINT N'Creating [dbo].[usp_RetrieveConfigurationSection]...';


GO
CREATE PROCEDURE [dbo].[usp_RetrieveConfigurationSection]
    (
     @ApplicationName NVARCHAR(256),
     @SectionName NVARCHAR(256)
    )
AS
BEGIN
    SELECT
        [SectionData],
        [UpdatedTimeStampUTC]
    FROM
        [dbo].[tbl_ConfigurationData]
    WHERE
        [ApplicationName] = @ApplicationName
        AND [SectionName] = @SectionName;
END;
GO
PRINT N'Creating [dbo].[usp_SaveBeginDeviceSession]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveBeginDeviceSession]
    (
     @beginDeviceSessionData [dbo].DeviceSessionDataType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    -- Add devices that are not in the DB yet
    INSERT  INTO [dbo].[Devices]
            ([Id],
             [Name]
            )
    SELECT DISTINCT
        [DeviceId],
        [UniqueDeviceName]
    FROM
        @beginDeviceSessionData
    WHERE
        NOT EXISTS ( SELECT
                        *
                     FROM
                        [dbo].[Devices]
                     WHERE
                        [Id] = [@beginDeviceSessionData].[DeviceId] );

    -- If some of the devices have pending sessions, close them
    UPDATE
        [dbo].[DeviceSessions]
    SET
        [EndTimeUTC] = [x].[BeginTimeUTC]
    FROM
        (SELECT
            [ss].[Id],
            [dd].[BeginTimeUTC]
         FROM
            [dbo].[DeviceSessions] AS [ss]
            INNER JOIN @beginDeviceSessionData AS [dd] ON [ss].[DeviceId] = [dd].[DeviceId]
                                                          AND [ss].[EndTimeUTC] IS NULL
        ) AS [x]
    WHERE
        [x].[Id] = [DeviceSessions].[Id];
    
    -- Add the new session rows
    MERGE INTO [dbo].[DeviceSessions] AS [Target]
    USING @beginDeviceSessionData AS [Source]
    ON [Source].[Id] = [Target].[Id]
    WHEN NOT MATCHED BY TARGET THEN
        INSERT
               ([Id],
                [DeviceId],
                [BeginTimeUTC]
               )
        VALUES ([Source].[Id],
                [Source].[DeviceId],
                [Source].[BeginTimeUTC]
               )
    WHEN MATCHED THEN
        UPDATE SET
               [Target].[DeviceId] = [Source].[DeviceId],
               [Target].[BeginTimeUTC] = [Source].[BeginTimeUTC];
END;
GO
PRINT N'Creating [dbo].[usp_SaveBeginPatientSession]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveBeginPatientSession]
    (
     @beginPatientSessionData [dbo].[PatientSessionDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;
    
    MERGE INTO [dbo].[PatientSessions]
    USING @beginPatientSessionData AS [Source]
    ON [Source].[Id] = [PatientSessions].[Id]
    WHEN NOT MATCHED THEN
        INSERT
               ([Id], [BeginTimeUTC])
        VALUES ([Source].[Id],
                [Source].[BeginTimeUTC]
               )
    WHEN MATCHED THEN
        UPDATE SET
               [PatientSessions].[EndTimeUTC] = NULL;
END;
GO
PRINT N'Creating [dbo].[usp_SaveBeginTopicSession]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveBeginTopicSession]
    (
     @beginTopicSessionData [dbo].TopicSessionDataType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    /* In the procedure input, a given session id might be associated with two rows :
       one with the PatientSessionId and one without, in case the topic session update
       is part of the same batched query as the topic session discovery.
       In that case we combine the two rows into one */

    DECLARE @zippedTopicSessionData AS [dbo].[TopicSessionDataType];

    INSERT  INTO @zippedTopicSessionData
            ([Id],
             [TopicTypeId],
             [TopicInstanceId],
             [DeviceSessionId],
             [PatientSessionId],
             [BeginTimeUTC]
            )
    SELECT
        [Source].[Id],
        [Source].[TopicTypeId],
        [Source].[TopicInstanceId],
        [Source].[DeviceSessionId],
        [DataWithPatientSession].[PatientSessionId],
        MIN([Source].[BeginTimeUTC])
    FROM
        @beginTopicSessionData AS [Source]
        LEFT OUTER JOIN @beginTopicSessionData AS [DataWithPatientSession] ON [DataWithPatientSession].[Id] = [Source].[Id]
                                                                              AND [DataWithPatientSession].[PatientSessionId] IS NOT NULL
    GROUP BY
        [Source].[Id],
        [Source].[TopicTypeId],
        [Source].[TopicInstanceId],
        [Source].[DeviceSessionId],
        [DataWithPatientSession].[PatientSessionId];

    /* If some of the devices have pending sessions, close them */
    /* Do not close sessions that have no patient session associated
       when the new data provides that patient association */
    UPDATE
        [dbo].[TopicSessions]
    SET
        [TopicSessions].[EndTimeUTC] = [x].[BeginTimeUTC]
    FROM
        (SELECT
            [ss].[Id],
            [dd].[BeginTimeUTC]
         FROM
            [dbo].[TopicSessions] AS [ss]
            INNER JOIN (SELECT
                            [TopicInstanceId],
                            [PatientSessionId],
                            [BeginTimeUTC],
                            ROW_NUMBER() OVER (PARTITION BY [TopicInstanceId] ORDER BY [BeginTimeUTC] ASC) AS [RowNumber]
                        FROM
                            @zippedTopicSessionData AS [Source]
                       ) AS [dd] ON [ss].[TopicInstanceId] = [dd].[TopicInstanceId]
                                    AND [dd].[RowNumber] = 1
                                    AND [ss].[EndTimeUTC] IS NULL
                                    AND ([dd].[PatientSessionId] IS NULL
                                    OR [ss].[PatientSessionId] IS NOT NULL
                                    )
        ) AS [x]
    WHERE
        [TopicSessions].[Id] = [x].[Id];

	UPDATE
		[dbo].[PatientSessions]
	SET
		[PatientSessions].[EndTimeUTC] = [x].[BeginTimeUTC]
	FROM
		-- [x] associates PatientSessionIds of dangling sessions to the begintime of the incoming topicsessions.
		(
			SELECT [ps].[Id], [ztsd].[BeginTimeUTC]
			FROM @zippedTopicSessionData AS [ztsd]
			INNER JOIN [dbo].[TopicSessions] AS [ts]
				ON [ts].[Id] <> [ztsd].[Id]
				AND [ts].[TopicInstanceId] = [ztsd].[TopicInstanceId]
			INNER JOIN [dbo].[PatientSessions] AS [ps]
				ON [ps].[Id] = [ts].[PatientSessionId]
				AND [ps].[Id] <> [ztsd].[PatientSessionId]
			WHERE [ps].[EndTimeUTC] IS NULL
		) AS [x]
	WHERE
		[PatientSessions].[Id] = [x].[Id];

    -- Insert the new sessions
    INSERT  INTO [dbo].[TopicSessions]
            ([Id],
             [TopicTypeId],
             [TopicInstanceId],
             [DeviceSessionId],
             [PatientSessionId],
             [BeginTimeUTC]
            )
    SELECT
        [Source].[Id],
        [Source].[TopicTypeId],
        [Source].[TopicInstanceId],
        [Source].[DeviceSessionId],
        [Source].[PatientSessionId],
        [Source].[BeginTimeUTC]
    FROM
        @zippedTopicSessionData AS [Source]
    WHERE
        [Source].[Id] NOT IN (SELECT
                                [Id]
                              FROM
                                [dbo].[TopicSessions]);

    /* Deal with the sessions for which the closing query arrives
       before the opening query. In this case we have no begin time
       but we do have an endtime.  Fill in the rest of the info */
    UPDATE
        [dbo].[TopicSessions]
    SET
        [TopicSessions].[TopicTypeId] = [Updates].[TopicTypeId],
        [TopicSessions].[TopicInstanceId] = [Updates].[TopicInstanceId],
        [TopicSessions].[DeviceSessionId] = [Updates].[DeviceSessionId],
        [TopicSessions].[PatientSessionId] = [Updates].[PatientSessionId],
        [TopicSessions].[BeginTimeUTC] = [Updates].[BeginTimeUTC]
    FROM
        (SELECT
            [Target].[Id],
            [Source].[TopicTypeId],
            [Source].[TopicInstanceId],
            [Source].[DeviceSessionId],
            [Source].[PatientSessionId],
            [Source].[BeginTimeUTC]
         FROM
            [dbo].[TopicSessions] AS [Target]
            INNER JOIN @zippedTopicSessionData AS [Source] ON [Target].[Id] = [Source].[Id]
         WHERE
            [Target].[BeginTimeUTC] IS NULL
            AND [Target].[EndTimeUTC] IS NOT NULL
        ) AS [Updates]
    WHERE
        [Updates].[Id] = [TopicSessions].[Id];

    /* Log the PatientSessionId for sessions that are opened but waiting for
       a patient session Id.  These sessions have a begin time but no patient session id */
    UPDATE
        [dbo].[TopicSessions]
    SET
        [TopicSessions].[PatientSessionId] = [Updates].[PatientSessionId]
    FROM
        (SELECT
            [Target].[Id],
            [Source].[PatientSessionId]
         FROM
            [dbo].[TopicSessions] AS [Target]
            INNER JOIN @zippedTopicSessionData AS [Source] ON [Target].[Id] = [Source].[Id]
         WHERE
            [Target].[BeginTimeUTC] IS NOT NULL
            AND [Target].[PatientSessionId] IS NULL
        ) AS [Updates]
    WHERE
        [Updates].[Id] = [TopicSessions].[Id];
END;
GO
PRINT N'Creating [dbo].[usp_SaveBlobPrintRequestDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveBlobPrintRequestDataSet]
    (
     @PrintRequestDataSetEntries [dbo].[PrintRequestDataSetEntriesType] READONLY,
     @PrintRequestDataSet [dbo].[PrintRequestDataType] READONLY,
     @BlobDataSet [dbo].[BlobDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[PrintJobs]
            ([Id],
             [TopicSessionId],
             [FeedTypeId]
            )
    SELECT
        [PrintJobId] AS [Id],
        [TopicSessionId],
        [FeedTypeId]
    FROM
        (SELECT DISTINCT
            [PrintJobId],
            [TopicSessionId],
            [FeedTypeId]
         FROM
            @PrintRequestDataSetEntries
         WHERE
            NOT EXISTS ( SELECT
                            *
                         FROM
                            [dbo].[PrintJobs]
                         WHERE
                            [PrintJobs].[Id] = [PrintJobId] )
        ) [NewPrintJobs];

    INSERT  INTO [dbo].[PrintRequests]
            ([Id],
             [PrintJobId],
             [RequestTypeEnumValue],
             [RequestTypeEnumId],
             [TimestampUTC]
            )
    SELECT
        [PrintRequestId] AS [Id],
        [PrintJobId],
        [RequestTypeEnumValue],
        [RequestTypeEnumId],
        [TimestampUTC]
    FROM
        @PrintRequestDataSetEntries;

    INSERT  INTO [dbo].[PrintRequestData]
    SELECT
        [Id],
        [PrintRequestId],
        [Name],
        [Value]
    FROM
        @PrintRequestDataSet;

    INSERT  INTO [dbo].[PrintBlobData]
    SELECT
        [Id],
        [PrintRequestId],
        [NumBytes],
        [Value]
    FROM
        @BlobDataSet;
END;
GO
PRINT N'Creating [dbo].[usp_SaveCfgValues]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveCfgValues]
    (
     @keyname VARCHAR(40),
     @keyvalue VARCHAR(100)
    )
AS
BEGIN
    IF NOT EXISTS ( SELECT
                        [keyname]
                    FROM
                        [dbo].[int_cfg_values]
                    WHERE
                        [keyname] = @keyname )
        INSERT  INTO [dbo].[int_cfg_values]
                ([keyname], [keyvalue])
        VALUES
                (@keyname, @keyvalue); 
    ELSE
        UPDATE
            [dbo].[int_cfg_values]
        SET
            [keyvalue] = @keyvalue
        WHERE
            [keyname] = @keyname;
END;
GO
PRINT N'Creating [dbo].[usp_SaveConfigurationSection]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveConfigurationSection]
    (
     @ApplicationName NVARCHAR(256),
     @SectionName NVARCHAR(256), -- TG - Should be NVARCHAR(150)
     @SectionData XML
    )
AS
BEGIN
    IF EXISTS ( SELECT
                    1
                FROM
                    [dbo].[tbl_ConfigurationData]
                WHERE
                    [ApplicationName] = @ApplicationName
                    AND [SectionName] = @SectionName )
    BEGIN
        UPDATE
            [dbo].[tbl_ConfigurationData]
        SET
            [SectionData] = @SectionData,
            [UpdatedTimeStampUTC] = GETUTCDATE()
        WHERE
            [ApplicationName] = @ApplicationName
            AND [SectionName] = @SectionName;
    END;
    ELSE
    BEGIN
        INSERT  INTO [dbo].[tbl_ConfigurationData]
                ([ApplicationName],
                 [SectionName],
                 [SectionData],
                 [UpdatedTimeStampUTC]
                )
        VALUES
                (@ApplicationName,
                 CAST(@SectionName AS NVARCHAR(150)),
                 @SectionData,
                 GETUTCDATE()
                );
    END;
END;
GO
PRINT N'Creating [dbo].[usp_SaveDeviceInfoDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveDeviceInfoDataSet]
	(@deviceInfoData [dbo].[DeviceInfoDataSetType] READONLY)
AS
BEGIN

	SET NOCOUNT ON

	INSERT INTO [dbo].[DeviceInfoData] ([Id], [DeviceSessionId], [Name], [Value], [TimestampUTC])
		SELECT [Id], [DeviceSessionId], [Name], [Value], [TimestampUTC]
			FROM @deviceInfoData
	
	/* If a patient admit was pending on the device org assignment arrival, then we
	   create the mrn_map row here.  The patient id might be already bound to the
	   patient session or not */
	MERGE
		INTO [dbo].[int_mrn_map] AS [Dest]
		USING
		(
			SELECT [PatientId] = ISNULL([PatientSessionsMapSequence].[PatientId]) --, NEXT VALUE FOR [dbo].[SequenceBigInt])
	              ,[FacilityId] = [Facilities].[organization_id]
		          ,[ID1] = [LatestPatientData].[ID1]
		          ,[ID2] = [LatestPatientData].[ID2]
				FROM
				(
					SELECT [DeviceSessionId]
						  ,[FacilityValue] =
							CASE
								WHEN CHARINDEX('+', [Value]) > 0 THEN LEFT([Value], CHARINDEX('+', [Value]) - 1)
								ELSE NULL
							END
						FROM
						(
							SELECT [DeviceSessionId]
							      ,[Value]
								  ,[R] = ROW_NUMBER() OVER (PARTITION BY [DeviceSessionId] ORDER BY [TimestampUTC] DESC)
								FROM @deviceInfoData
								WHERE [Name]='Unit'
						) AS [DeviceSessionFacilitySequence]
						WHERE [R]=1
				) AS [LatestDeviceSessionFacility]
				INNER JOIN [dbo].[int_organization] AS [Facilities]
					ON [category_cd]='F' AND [organization_nm]=[LatestDeviceSessionFacility].[FacilityValue]
				INNER JOIN
				(
					SELECT [PatientSessionId] 
						  ,[DeviceSessionId]
						  ,[ID1]
						  ,[ID2]
						FROM
						(
							SELECT [PatientSessionId] 
								  ,[DeviceSessionId]
								  ,[ID1]
								  ,[ID2]
								  ,[R]=ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC)
								FROM [dbo].[PatientData]
						) AS [PatientDataSequence]
						WHERE [R]=1 AND [ID1] IS NOT NULL
				) AS [LatestPatientData]
					ON [LatestPatientData].[DeviceSessionId]=[LatestDeviceSessionFacility].[DeviceSessionId]
				INNER JOIN
				(
					SELECT [PatientSessionId]
							,[PatientId]
							,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC)
						FROM [dbo].[PatientSessionsMap]
				) AS [PatientSessionsMapSequence]
				    ON [PatientSessionsMapSequence].[R]=1
					AND [PatientSessionsMapSequence].[PatientSessionId]=[LatestPatientData].[PatientSessionId]
		) AS [Src]
		ON [Src].[PatientId] = [Dest].[patient_id] AND [Dest].[merge_cd] = 'C'
		WHEN NOT MATCHED BY TARGET
			THEN INSERT ([organization_id], [mrn_xid], [patient_id], [merge_cd], [mrn_xid2])
				VALUES ([Src].[FacilityId], [Src].[ID1], [Src].[PatientId], 'C', [Src].[ID2]);
						
END
GO
PRINT N'Creating [dbo].[usp_SaveEndDeviceSession]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveEndDeviceSession]
    (
     @endDeviceSessionData [dbo].DeviceSessionDataType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

/* We close all open topics still open on the device sessions that we are closing */
    DECLARE @closedDeviceSessions AS TABLE
        (
         [DeviceSessionId] BIGINT NOT NULL,
         [EndTimeUTC] DATETIME NOT NULL
        );

    INSERT  INTO @closedDeviceSessions
    SELECT
        [ss].[Id],
        [dd].[EndTimeUTC]
    FROM
        [dbo].[DeviceSessions] AS [ss]
        INNER JOIN @endDeviceSessionData AS [dd] ON [ss].[Id] = [dd].[Id]
                                                    AND [ss].[EndTimeUTC] IS NULL;

    UPDATE
        [dbo].[TopicSessions]
    SET
        [TopicSessions].[EndTimeUTC] = [x].[EndTimeUTC]
    FROM
        @closedDeviceSessions AS [x]
    WHERE
        [TopicSessions].[DeviceSessionId] = [x].[DeviceSessionId]
        AND [TopicSessions].[EndTimeUTC] IS NULL;

    MERGE INTO [dbo].[DeviceSessions] AS [Target]
    USING @endDeviceSessionData AS [Source]
    ON [Source].[Id] = [Target].[Id]
    WHEN NOT MATCHED BY TARGET THEN
        INSERT
               ([Id],
                [DeviceId],
                [EndTimeUTC]
               )
        VALUES ([Source].[Id],
                [Source].[DeviceId],
                [Source].[EndTimeUTC]
               )
    WHEN MATCHED THEN
        UPDATE SET
               [Target].[EndTimeUTC] = [Source].[EndTimeUTC];
END;
GO
PRINT N'Creating [dbo].[usp_SaveEndPatientSession]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveEndPatientSession]
    (
     @endPatientSessionData [dbo].[PatientSessionDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE
        [dbo].[PatientSessions]
    SET
        [EndTimeUTC] = [x].[EndTimeUTC]
    FROM
        @endPatientSessionData AS [x]
    WHERE
        [PatientSessions].[Id] = [x].[Id]
        AND [PatientSessions].[EndTimeUTC] IS NULL;
END;
GO
PRINT N'Creating [dbo].[usp_SaveEndTopicSession]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveEndTopicSession]
    (
     @endTopicSessionData [dbo].TopicSessionDataType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    MERGE INTO [dbo].[TopicSessions] AS [Target]
    USING @endTopicSessionData AS [Source]
    ON [Source].[Id] = [Target].[Id]
    WHEN NOT MATCHED BY TARGET THEN
        INSERT
               ([Id], [EndTimeUTC])
        VALUES ([Source].[Id],
                [Source].[EndTimeUTC]
               )
    WHEN MATCHED THEN
        UPDATE SET
               [Target].[EndTimeUTC] = [Source].[EndTimeUTC];
END;
GO
PRINT N'Creating [dbo].[usp_SaveEventsDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveEventsDataSet]
    (
     @eventsData [dbo].EventDataType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[EventsData]
            ([CategoryValue],
             [Type],
             [Subtype],
             [Value1],
             [Value2],
             [Status],
             [Valid_Leads],
             [TopicSessionId],
             [FeedTypeId],
             [TimestampUTC]
            )
    SELECT
        [CategoryValue],
        [Type],
        [Subtype],
        [Value1],
        [Value2],
        [Status],
        [Valid_Leads],
        [TopicSessionId],
        [FeedTypeId],
        [TimestampUTC]
    FROM
        @eventsData;
END;
GO
PRINT N'Creating [dbo].[usp_SaveGeneralAlarmsDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveGeneralAlarmsDataSet]
    (
     @GeneralAlarmsData [dbo].GeneralAlarmsDataType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[AlarmsStatusData]
            ([Id],
             [AlarmId],
             [StatusTimeout],
             [StatusValue],
             [AcquiredDateTimeUTC],
             [Leads],
             [WaveformFeedTypeId],
             [TopicSessionId],
             [FeedTypeId],
             [IDEnumValue],
             [EnumGroupId]
            )
    SELECT
        NEXT VALUE FOR [dbo].[SequenceBigInt],
        [AlarmId],
        [StatusTimeout],
        [StatusValue],
        [AcquiredDateTimeUTC],
        [Leads],
        [WaveformFeedTypeId],
        [TopicSessionId],
        [FeedTypeId],
        [IDEnumValue],
        [EnumGroupId]
    FROM
        @GeneralAlarmsData
    WHERE
        [StartDateTime] IS NULL;

    MERGE INTO [dbo].[GeneralAlarmsData] AS [Dest]
    USING
        (SELECT
            [StartingUpdatesSequence].[AlarmId],
            [StatusTimeout],
            [StartDateTime],
            [EndDateTime] = ISNULL([EndingUpdatesSequence].[EndDateTime], [TopicSessions].[EndTimeUTC]),
            [StatusValue],
            [PriorityWeightValue],
            [AcquiredDateTimeUTC],
            [Leads],
            [WaveformFeedTypeId],
            [TopicSessionId],
            [FeedTypeId],
            [IDEnumValue],
            [EnumGroupId]
         FROM
            (SELECT
                [AlarmId],
                [StatusTimeout],
                [StartDateTime],
                [StatusValue],
                [PriorityWeightValue],
                [AcquiredDateTimeUTC],
                [Leads],
                [WaveformFeedTypeId],
                [TopicSessionId],
                [FeedTypeId],
                [IDEnumValue],
                [EnumGroupId],
                ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] ASC) AS [RowNumber]
             FROM
                @GeneralAlarmsData
             WHERE
                [StartDateTime] IS NOT NULL
            ) AS [StartingUpdatesSequence]
            LEFT OUTER JOIN (SELECT
                                [AlarmId],
                                [EndDateTime],
                                ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] DESC) AS [RowNumber]
                             FROM
                                @GeneralAlarmsData
                             WHERE
                                [EndDateTime] IS NOT NULL
                            ) AS [EndingUpdatesSequence] ON [EndingUpdatesSequence].[AlarmId] = [StartingUpdatesSequence].[AlarmId]
                                                            AND [EndingUpdatesSequence].[RowNumber] = 1
            LEFT OUTER JOIN [dbo].[TopicSessions] ON [TopicSessions].[Id] = [StartingUpdatesSequence].[TopicSessionId]
         WHERE
            [StartingUpdatesSequence].[RowNumber] = 1
        ) AS [Src]
    ON [Src].[AlarmId] = [Dest].[AlarmId]
    WHEN NOT MATCHED BY TARGET THEN
        INSERT
               ([AlarmId],
                [StatusTimeout],
                [StartDateTime],
                [EndDateTime],
                [StatusValue],
                [PriorityWeightValue],
                [AcquiredDateTimeUTC],
                [Leads],
                [WaveformFeedTypeId],
                [TopicSessionId],
                [FeedTypeId],
                [IDEnumValue],
                [EnumGroupId]
               )
        VALUES ([Src].[AlarmId],
                [Src].[StatusTimeout],
                [Src].[StartDateTime],
                [Src].[EndDateTime],
                [Src].[StatusValue],
                [Src].[PriorityWeightValue],
                [Src].[AcquiredDateTimeUTC],
                [Src].[Leads],
                [Src].[WaveformFeedTypeId],
                [Src].[TopicSessionId],
                [Src].[FeedTypeId],
                [Src].[IDEnumValue],
                [Src].[EnumGroupId]
               )
    WHEN MATCHED THEN
        UPDATE SET
               [Dest].[EndDateTime] = [Src].[EndDateTime];
END;
GO
PRINT N'Creating [dbo].[usp_SaveLimitAlarmDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveLimitAlarmDataSet]
    (
     @LimitAlarmsData [dbo].LimitAlarmsDataType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[AlarmsStatusData]
            ([Id],
             [AlarmId],
             [StatusValue],
             [AcquiredDateTimeUTC],
             [Leads],
             [WaveformFeedTypeId],
             [TopicSessionId],
             [FeedTypeId],
             [IDEnumValue],
             [EnumGroupId]
            )
    SELECT
        NEXT VALUE FOR [dbo].[SequenceBigInt],
        [AlarmId],
        [StatusValue],
        [AcquiredDateTimeUTC],
        [Leads],
        [WaveformFeedTypeId],
        [TopicSessionId],
        [FeedTypeId],
        [IDEnumValue],
        [EnumGroupId]
    FROM
        @LimitAlarmsData
    WHERE
        [StartDateTime] IS NULL;

    MERGE INTO [dbo].[LimitAlarmsData] AS [Dest]
    USING
        (SELECT
            [StartingUpdatesSequence].[AlarmId],
            [SettingViolated],
            [ViolatingValue],
            [StartDateTime],
            [EndDateTime] = ISNULL([EndingUpdatesSequence].[EndDateTime], [TopicSessions].[EndTimeUTC]),
            [StatusValue],
            [DetectionTimestamp],
            [Acknowledged],
            [PriorityWeightValue],
            [AcquiredDateTimeUTC],
            [Leads],
            [WaveformFeedTypeId],
            [TopicSessionId],
            [FeedTypeId],
            [IDEnumValue],
            [EnumGroupId]
         FROM
            (SELECT
                [AlarmId],
                [SettingViolated],
                [ViolatingValue],
                [StartDateTime],
                [StatusValue],
                [DetectionTimestamp],
                [Acknowledged],
                [PriorityWeightValue],
                [AcquiredDateTimeUTC],
                [Leads],
                [WaveformFeedTypeId],
                [TopicSessionId],
                [FeedTypeId],
                [IDEnumValue],
                [EnumGroupId],
                ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] ASC) AS [RowNumber]
             FROM
                @LimitAlarmsData
             WHERE
                [StartDateTime] IS NOT NULL
            ) AS [StartingUpdatesSequence]
            LEFT OUTER JOIN (SELECT
                                [AlarmId],
                                [EndDateTime],
                                ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] DESC) AS [RowNumber]
                             FROM
                                @LimitAlarmsData
                             WHERE
                                [EndDateTime] IS NOT NULL
                            ) AS [EndingUpdatesSequence] ON [EndingUpdatesSequence].[AlarmId] = [StartingUpdatesSequence].[AlarmId]
                                                            AND [EndingUpdatesSequence].[RowNumber] = 1
            LEFT OUTER JOIN [dbo].[TopicSessions] ON [TopicSessions].[Id] = [StartingUpdatesSequence].[TopicSessionId]
         WHERE
            [StartingUpdatesSequence].[RowNumber] = 1
        ) AS [Src]
    ON [Src].[AlarmId] = [Dest].[AlarmId]
    WHEN NOT MATCHED BY TARGET THEN
        INSERT
               ([AlarmId],
                [SettingViolated],
                [ViolatingValue],
                [StartDateTime],
                [EndDateTime],
                [StatusValue],
                [DetectionTimestamp],
                [Acknowledged],
                [PriorityWeightValue],
                [AcquiredDateTimeUTC],
                [Leads],
                [WaveformFeedTypeId],
                [TopicSessionId],
                [FeedTypeId],
                [IDEnumValue],
                [EnumGroupId]
               )
        VALUES ([Src].[AlarmId],
                [Src].[SettingViolated],
                [Src].[ViolatingValue],
                [Src].[StartDateTime],
                [Src].[EndDateTime],
                [Src].[StatusValue],
                [Src].[DetectionTimestamp],
                [Src].[Acknowledged],
                [Src].[PriorityWeightValue],
                [Src].[AcquiredDateTimeUTC],
                [Src].[Leads],
                [Src].[WaveformFeedTypeId],
                [Src].[TopicSessionId],
                [Src].[FeedTypeId],
                [Src].[IDEnumValue],
                [Src].[EnumGroupId]
               )
    WHEN MATCHED THEN
        UPDATE SET
               [Dest].[EndDateTime] = [Src].[EndDateTime];
END;
GO
PRINT N'Creating [dbo].[usp_SaveLimitChangeDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveLimitChangeDataSet]
    (
     @limitChangeData [dbo].[LimitChangeDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[LimitChangeData]
    SELECT
        [Id],
        [High],
        [Low],
        [ExtremeHigh],
        [ExtremeLow],
        [Desat],
        [AcquiredDateTimeUTC],
        [TopicSessionId],
        [FeedTypeId],
        [EnumGroupId],
        [IDEnumValue]
    FROM
        @limitChangeData;
END;
GO
PRINT N'Creating [dbo].[usp_SaveLiveDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveLiveDataSet]
    (
     @LiveData [dbo].[NameValueDataSetType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[LiveData]
            ([Id],
             [TopicInstanceId],
             [FeedTypeId],
             [Name],
             [Value],
             [TimestampUTC])
    SELECT
        [ld].[Id],
        [ts].[TopicInstanceId],
        [ld].[FeedTypeId],
        [ld].[Name],
        [ld].[Value],
        [ld].[TimestampUTC]
    FROM
        @LiveData AS [ld]
        INNER JOIN [dbo].[TopicSessions] AS [ts]
            ON [ts].[Id] = [ld].[TopicSessionId];
END;
GO
PRINT N'Creating [dbo].[usp_SavePatientData]...';


GO
CREATE PROCEDURE [dbo].[usp_SavePatientData]
	(@patientData [dbo].[PatientDataType] READONLY)
AS
BEGIN
	
	SET NOCOUNT ON
	
	INSERT INTO [dbo].[PatientData]
	(
		[Id],
		[PatientSessionId],
		[DeviceSessionId],
		[LastName],
		[MiddleName],
		[FirstName],
		[FullName],
		[Gender],
		[ID1],
		[ID2],
		[DOB],
		[Weight],
		[WeightUOM],
		[Height],
		[HeightUOM],
		[BSA],
		[Location],
		[PatientType],
		[TimestampUTC]
	)

	SELECT
		[d].[Id],
		[d].[PatientSessionId],
		[d].[DeviceSessionId],
		[d].[LastName],
		[d].[MiddleName],
		[d].[FirstName],
		[d].[FullName],
		[d].[Gender],
		[d].[ID1],
		[d].[ID2],
		[d].[DOB],
		[d].[Weight],
		[d].[WeightUOM],
		[d].[Height],
		[d].[HeightUOM],
		[d].[BSA],
		[d].[Location],
		[d].[PatientType],
		[d].[TimestampUTC]
		
	FROM @patientData AS [d]

	/* Register the binding with the patient sessions */
	INSERT INTO [dbo].[PatientSessionsMap]([PatientSessionId], [PatientId])
		SELECT [Src].[PatientSessionId]
			  ,[Src].[PatientId]
			FROM 
			(
				SELECT [PatientSessionId] = [LatestPatientData].[PatientSessionId]
					  ,[PatientId] = COALESCE([int_mrn_map].[patient_id], [PatientSessionsMapSequence].[PatientId], NEXT VALUE FOR [dbo].[SequenceBigInt])
					FROM
					/* The new data coming in */
					(
						SELECT [PatientSessionId]
							  ,[ID1]
							FROM
							(
								SELECT [PatientSessionId] 
									  ,[ID1]
									  ,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC)
									FROM @patientData
							) AS [PatientDataSequence]
							WHERE [R]=1
					) AS [LatestPatientData]
					/* The patientId that's already associated with existing patient sessions */
					LEFT OUTER JOIN
					(
						SELECT [PatientSessionId]
						      ,[PatientId]
							  ,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC)
							FROM [dbo].[PatientSessionsMap]
					) AS [PatientSessionsMapSequence]
						ON [PatientSessionsMapSequence].[R]=1
						AND [PatientSessionsMapSequence].[PatientSessionId]=[LatestPatientData].[PatientSessionId]
						AND LEFT([LatestPatientData].[ID1], 1) <> '*'  /* for incoming duplicated IDs, force a fresh patient GUID */
					/* The patientId that's associated with the incoming ID1 */
					LEFT OUTER JOIN [dbo].[int_mrn_map]
						ON [int_mrn_map].[mrn_xid]=[LatestPatientData].[ID1] AND [int_mrn_map].[merge_cd] = 'C'
			) AS [Src]
			/* Do not insert a new row when we are not updating the current binding */
			LEFT OUTER JOIN
			(
				SELECT [PatientSessionId]
					  ,[PatientId]
					  ,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC)
					FROM [dbo].[PatientSessionsMap]
			) AS [PatientSessionsMapSequence]
				ON [PatientSessionsMapSequence].[R]=1
				AND [PatientSessionsMapSequence].[PatientSessionId] = [Src].[PatientSessionId]
				AND [PatientSessionsMapSequence].[PatientId] = [Src].[PatientId]
			WHERE [PatientSessionsMapSequence].[PatientSessionId] IS NULL

	/* update the mrn_map when we have the device org assignments */
	MERGE
		INTO [dbo].[int_mrn_map] AS [Dest]
		USING
		(
			SELECT [FacilityId] = [int_organization].[organization_id]
			      ,[PatientId] = [LatestPatientSessionsMap].[PatientId]
			      ,[ID1]
			      ,[ID2]
				FROM
				(
					SELECT [PatientSessionId]
						  ,[DeviceSessionId]
						  ,[ID1]
						  ,[ID2]
						FROM
						(
							SELECT [PatientSessionId] 
								  ,[DeviceSessionId]
								  ,[ID1]
								  ,[ID2]
								  ,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC)
								FROM @patientData
						) AS [PatientDataSequence]
						WHERE [R]=1 AND LTRIM(RTRIM(ISNULL([ID1],''))) <> ''
				) AS [LatestPatientData]
				INNER JOIN
				(
					SELECT [DeviceSessionId]
						  ,[FacilityValue] =
							CASE
								WHEN CHARINDEX('+', [Value]) > 0 THEN LEFT([Value], CHARINDEX('+', [Value]) - 1)
								ELSE NULL
							END
						FROM
						(
							SELECT [DeviceSessionId]
								  ,[Value]
								  ,[R] = ROW_NUMBER() OVER (PARTITION BY [DeviceSessionId] ORDER BY [TimestampUTC] DESC)
								FROM [dbo].[DeviceInfoData]
								WHERE [Name]='Unit'
						) AS [DeviceSessionFacilitySequence]
						WHERE [R]=1
				) AS [LatestDeviceSessionFacility]
					ON [LatestDeviceSessionFacility].[DeviceSessionId]=[LatestPatientData].[DeviceSessionId]
				INNER JOIN [dbo].[int_organization]
	    			ON [organization_nm]=[LatestDeviceSessionFacility].[FacilityValue] AND [category_cd]='F'
				LEFT OUTER JOIN
				(
					SELECT [PatientSessionId]
						  ,[PatientId]
						FROM
						(
							SELECT [PatientSessionId]
								  ,[PatientId]
								  ,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC)
								FROM [dbo].[PatientSessionsMap]
						) AS [PatientSessionsMapSequence]
						WHERE [R]=1
				) AS [LatestPatientSessionsMap]
					ON [LatestPatientSessionsMap].[PatientSessionId]=[LatestPatientData].[PatientSessionId]
		) AS [Src]
		ON [Src].[PatientId] = [Dest].[patient_id] AND [Dest].[merge_cd] = 'C'
		WHEN NOT MATCHED BY TARGET
			THEN INSERT ([organization_id], [mrn_xid], [patient_id], [merge_cd], [mrn_xid2])
				VALUES ([Src].[FacilityId], [Src].[ID1], [Src].[PatientId], 'C', [Src].[ID2])
		WHEN MATCHED 
			THEN UPDATE SET [mrn_xid2]=ISNULL(NULLIF([Src].[ID2], ''), [Dest].[mrn_xid2]),
			                [mrn_xid]=[Src].[ID1]
	;

	/* update int_patient.  we do this even if we don't have the mrn_map record */
	MERGE
		INTO [dbo].[int_patient] AS [Dest]
		USING 
		(
			SELECT [PatientId]
				  ,[DOB]
				  ,[GenderCodeId] = [int_misc_code].[code_id]
				FROM
				(
					SELECT  [PatientSessionId]
					       ,[ID1]
						   ,[Gender]
						   ,[DOB]
						FROM
						(
							SELECT [PatientSessionId]
							      ,[ID1]
								  ,[Gender]
								  ,[DOB]
								  ,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC)
								FROM @patientData
						) AS [PatientDataSequence]
						WHERE [R]=1 AND [ID1] IS NOT NULL
				) AS [LatestPatientData]
				INNER JOIN
				(
					SELECT [PatientSessionId]
						  ,[PatientId]
						FROM
						(
							SELECT [PatientSessionId]
								  ,[PatientId]
								  ,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC)
								FROM [dbo].[PatientSessionsMap]
						) AS [PatientSessionsMapSequence]
						WHERE [R]=1
				) AS [LatestPatientSessionsMap]
					ON [LatestPatientSessionsMap].[PatientSessionId]=[LatestPatientData].[PatientSessionId]
				LEFT OUTER JOIN [dbo].[int_misc_code]
					ON [int_misc_code].[category_cd]='SEX' and [int_misc_code].[short_dsc]=[LatestPatientData].[Gender]
		) AS [Src]
		ON [Dest].[patient_id]=[Src].[PatientId]
		WHEN NOT MATCHED BY TARGET
			THEN INSERT ([patient_id], [dob], [gender_cid])
				VALUES ([Src].[PatientId], [Src].[DOB], [Src].[GenderCodeId])
		WHEN MATCHED
			THEN UPDATE SET [dob]=ISNULL([Src].[DOB], [Dest].[dob])
							,[gender_cid]=ISNULL([Src].[GenderCodeId], [Dest].[gender_cid])
	;

	/* update int_person.  we do this even if we don't have the mrn_map record */
	MERGE
		INTO [dbo].[int_person] AS [Dest]
		USING 
		(
			SELECT [PatientId]
				  ,[FirstName]
				  ,[MiddleName]
				  ,[LastName]
			FROM
			(
				SELECT  [PatientSessionId]
				       ,[ID1]
					   ,[FirstName]
					   ,[MiddleName]
					   ,[LastName]
					FROM
					(
						SELECT   [PatientSessionId]
						        ,[ID1]
								,[FirstName]
								,[MiddleName]
								,[LastName]
								,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC)
							FROM @patientData
					) AS [PatientDataSequence]
					WHERE [R]=1 AND [ID1] IS NOT NULL
			) AS [LatestPatientData]
			INNER JOIN
				(
					SELECT [PatientSessionId]
						  ,[PatientId]
						FROM
						(
							SELECT [PatientSessionId]
								  ,[PatientId]
								  ,[R] = ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC)
								FROM [dbo].[PatientSessionsMap]
						) AS [PatientSessionsMapSequence]
						WHERE [R]=1
				) AS [LatestPatientSessionsMap]
					ON [LatestPatientSessionsMap].[PatientSessionId]=[LatestPatientData].[PatientSessionId]
		) AS [Src]
		ON [Dest].[person_id]=[Src].[PatientId]
		WHEN NOT MATCHED BY TARGET
			THEN INSERT ([person_id], [first_nm], [middle_nm], [last_nm])
				VALUES ([Src].[PatientId], [Src].[FirstName], [Src].[MiddleName], [Src].[LastName])
		WHEN MATCHED
			THEN UPDATE SET [first_nm]=ISNULL(NULLIF([Src].[FirstName], ''), [Dest].[first_nm])
							,[middle_nm]=ISNULL(NULLIF([Src].[MiddleName], ''), [Dest].[middle_nm])
							,[last_nm]=ISNULL(NULLIF([Src].[LastName], ''), [Dest].[last_nm])
	;

END
GO
PRINT N'Creating [dbo].[usp_SavePrintRequestDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SavePrintRequestDataSet]
    (
     @PrintRequestDataSetEntries [dbo].[PrintRequestDataSetEntriesType] READONLY,
     @PrintRequestDataSet [dbo].[PrintRequestDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[PrintJobs]
            ([Id],
             [TopicSessionId],
             [FeedTypeId]
            )
    SELECT
        [PrintJobId] AS [Id],
        [TopicSessionId],
        [FeedTypeId]
    FROM
        (SELECT DISTINCT
            [PrintJobId],
            [TopicSessionId],
            [FeedTypeId]
         FROM
            @PrintRequestDataSetEntries
         WHERE
            NOT EXISTS ( SELECT
                            *
                         FROM
                            [dbo].[PrintJobs]
                         WHERE
                            [PrintJobs].[Id] = [PrintJobId] )
        ) AS [NewPrintJobs];

    INSERT  INTO [dbo].[PrintRequests]
            ([Id],
             [PrintJobId],
             [RequestTypeEnumValue],
             [RequestTypeEnumId],
             [TimestampUTC]
            )
    SELECT
        [PrintRequestId] AS [Id],
        [PrintJobId],
        [RequestTypeEnumValue],
        [RequestTypeEnumId],
        [TimestampUTC]
    FROM
        @PrintRequestDataSetEntries;

    INSERT  INTO [dbo].[PrintRequestData]
    SELECT
        [Id],
        [PrintRequestId],
        [Name],
        [Value]
    FROM
        @PrintRequestDataSet;
END;
GO
PRINT N'Creating [dbo].[usp_SaveStatusDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveStatusDataSet]
    (
     @statusData [dbo].NameValueDataSetType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[StatusDataSets]
            ([Id],
             [TopicSessionId],
             [FeedTypeId],
             [TimestampUTC]
            )
    SELECT DISTINCT
        [SetId] AS [Id],
        [TopicSessionId],
        [FeedTypeId],
        [TimestampUTC]
    FROM
        @statusData;

    INSERT  INTO [dbo].[StatusData]
            ([Id],
             [SetId],
             [Name],
             [Value]
            )
    SELECT
        [Id],
        [SetId],
        [Name],
        [Value]
    FROM
        @statusData;
END;
GO
PRINT N'Creating [dbo].[usp_SaveVitalsDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveVitalsDataSet]
    (
     @vitalsData [dbo].NameValueDataSetType READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[VitalsData]
            ([SetId],
             [Name],
             [Value],
             [TopicSessionId],
             [FeedTypeId],
             [TimestampUTC]
            )
    SELECT
        [SetId],
        [Name],
        [Value],
        [TopicSessionId],
        [FeedTypeId],
        [TimestampUTC]
    FROM
        @vitalsData;
END;
GO
PRINT N'Creating [dbo].[usp_SaveWaveformAnnotationDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformAnnotationDataSet]
    (
     @WaveformAnnotationDataSet [dbo].[WaveformAnnotationDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[WaveformAnnotationData]
    SELECT
        [Id],
        [PrintRequestId],
        [ChannelIndex],
        [Annotation]
    FROM
        @WaveformAnnotationDataSet;
END;
GO
PRINT N'Creating [dbo].[usp_SaveWaveformDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformDataSet]
    (
     @waveformData [dbo].[WaveformDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[WaveformData]
            ([Id],
             [SampleCount],
             [TypeName],
             [TypeId],
             [Samples],
             [Compressed],
             [TopicSessionId],
             [StartTimeUTC],
             [EndTimeUTC]
            )
    SELECT
        [Id],
        [SampleCount],
        [TypeName],
        [TypeId],
        [Samples],
        [Compressed],
        [TopicSessionId],
        [StartTimeUTC],
        [EndTimeUTC]
    FROM
        @waveformData;
END;
GO
PRINT N'Creating [dbo].[usp_SaveWaveformLiveDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformLiveDataSet]
    (
     @waveformData [dbo].[WaveformDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[WaveformLiveData]
            ([Id],
             [SampleCount],
             [TypeName],
             [TypeId],
             [Samples],
             [TopicInstanceId],
             [StartTimeUTC],
             [EndTimeUTC])
    SELECT
        [wf].[Id],
        [wf].[SampleCount],
        [wf].[TypeName],
        [wf].[TypeId],
        [wf].[Samples],
        [ts].[TopicInstanceId],
        [wf].[StartTimeUTC],
        [wf].[EndTimeUTC]
    FROM
        @waveformData AS [wf]
        INNER JOIN [dbo].[TopicSessions] AS [ts]
            ON [ts].[Id] = [wf].[TopicSessionId];
END;
GO
PRINT N'Creating [dbo].[usp_SaveWaveformPrintDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformPrintDataSet]
    (
     @WaveformPrintDataSet [dbo].[WaveformPrintDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[WaveformPrintData]
    SELECT
        [Id],
        [PrintRequestId],
        [ChannelIndex],
        [NumSamples],
        [Samples]
    FROM
        @WaveformPrintDataSet;
END;
GO
PRINT N'Creating [dbo].[usp_SaveWaveformPrintRequestDataSet]...';


GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformPrintRequestDataSet]
    (
     @PrintRequestDataSetEntries [dbo].[PrintRequestDataSetEntriesType] READONLY,
     @PrintRequestDataSet [dbo].[PrintRequestDataType] READONLY,
     @ChannelInfoDataSet [dbo].[ChannelInfoDataType] READONLY
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[PrintJobs]
            ([Id],
             [TopicSessionId],
             [FeedTypeId]
            )
    SELECT
        [PrintJobId] AS [Id],
        [TopicSessionId],
        [FeedTypeId]
    FROM
        (SELECT DISTINCT
            [PrintJobId],
            [TopicSessionId],
            [FeedTypeId]
         FROM
            @PrintRequestDataSetEntries
         WHERE
            NOT EXISTS ( SELECT
                            *
                         FROM
                            [dbo].[PrintJobs]
                         WHERE
                            [PrintJobs].[Id] = [PrintJobId] )
        ) AS [NewPrintJobs];

    INSERT  INTO [dbo].[PrintRequests]
            ([Id],
             [PrintJobId],
             [RequestTypeEnumValue],
             [RequestTypeEnumId],
             [TimestampUTC]
            )
    SELECT
        [PrintRequestId] AS [Id],
        [PrintJobId],
        [RequestTypeEnumValue],
        [RequestTypeEnumId],
        [TimestampUTC]
    FROM
        @PrintRequestDataSetEntries;

    INSERT  INTO [dbo].[PrintRequestData]
    SELECT
        [Id],
        [PrintRequestId],
        [Name],
        [Value]
    FROM
        @PrintRequestDataSet;

    INSERT  INTO [dbo].[ChannelInfoData]
    SELECT
        [Id],
        [PrintRequestId],
        [ChannelIndex],
        [IsPrimaryECG],
        [IsSecondaryECG],
        [IsNonWaveformType],
        [SampleRate],
        [Scale],
        [ScaleValue],
        [ScaleMin],
        [ScaleMax],
        [ScaleTypeEnumValue],
        [Baseline],
        [YPointsPerUnit],
        [ChannelType]
    FROM
        @ChannelInfoDataSet;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateApplicationSettingsInstanceId]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateApplicationSettingsInstanceId]
    @applicationType VARCHAR(50),
    @oldInstanceId VARCHAR(50),
    @newInstanceId VARCHAR(50)
AS
BEGIN
    UPDATE
        [dbo].[ApplicationSettings]
    SET
        [InstanceId] = @newInstanceId
    WHERE
        [InstanceId] = @oldInstanceId;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateCEISettings]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateCEISettings]
    (
     @alarmNotificationMode INT = NULL,
     @vitalsUpdateInterval INT = NULL,
     @portNumber INT = NULL,
     @trackAlarmExecution TINYINT = NULL,
     @trackVitalsUpdateExecution TINYINT = NULL
    )
AS
BEGIN
    UPDATE
        [dbo].[int_event_config]
    SET
        [alarm_notification_mode] = ISNULL(@alarmNotificationMode, [alarm_notification_mode]),
        [vitals_update_interval] = ISNULL(@vitalsUpdateInterval, [vitals_update_interval]),
        [port_number] = ISNULL(@portNumber, [port_number]),
        [track_alarm_execution] = ISNULL(@trackAlarmExecution, [track_alarm_execution]),
        [track_vitals_update_execution] = ISNULL(@trackVitalsUpdateExecution, [track_vitals_update_execution]);

END;
GO
PRINT N'Creating [dbo].[usp_UpdateEncounter]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateEncounter]
    (
     @unit_org_id BIGINT,
     @organization_id BIGINT,
     @rm NVARCHAR(6),
     @bed NVARCHAR(6),
     @patient_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_encounter]
    SET
        [unit_org_id] = @unit_org_id,
        [organization_id] = @organization_id,
        [rm] = @rm,
        [bed] = @bed
    WHERE
        [status_cd] = N'C'
        AND [patient_id] = @patient_id;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateGatewaySettings]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateGatewaySettings]
    (
     @network_id NVARCHAR(30),
     @enable_sw TINYINT,
     @recv_app NVARCHAR(30),
     @send_app NVARCHAR(30),
     @organization_id BIGINT,
     @send_sys_id BIGINT,
     @results_usid INT,
     @sleep_secs INT,
     @debug_level INT,
     @unit_org_id BIGINT,
     @patient_id_type CHAR(4),
     @gateway_type CHAR(4),
     @auto_assign_id_sw TINYINT,
     @new_mrn_format NVARCHAR(80),
     @auto_chan_attach_sw TINYINT,
     @live_vitals_sw TINYINT,
     @live_waveform_size INT,
     @decnet_node INT,
     @node_name CHAR(5),
     @nodes_excluded NVARCHAR(255),
     @nodes_included NVARCHAR(255),
     @timemaster_sw TINYINT,
     @waveform_size INT,
     @print_enabled_sw TINYINT,
     @auto_record_alarm_sw TINYINT,
     @collect_12_lead_sw TINYINT,
     @print_auto_record_sw TINYINT,
     @encryption_status BIT,
     @gateway_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_gateway]
    SET
        [network_id] = @network_id,
        [hostname] = N'localhost',
        [enable_sw] = @enable_sw,
        [reconnect_secs] = 0,
        [recv_app] = @recv_app,
        [send_app] = @send_app,
        [organization_id] = @organization_id,
        [send_sys_id] = @send_sys_id,
        [results_usid] = @results_usid,
        [sleep_secs] = @sleep_secs,
        [add_monitors_sw] = 1,
        [debug_level] = @debug_level,
        [unit_org_id] = @unit_org_id,
        [patient_id_type] = @patient_id_type,
        [add_patients_sw] = 1,
        [gateway_type] = @gateway_type,
        [auto_assign_id_sw] = @auto_assign_id_sw,
        [new_mrn_format] = @new_mrn_format,
        [auto_chan_attach_sw] = @auto_chan_attach_sw,
        [live_vitals_sw] = @live_vitals_sw,
        [live_waveform_size] = @live_waveform_size,
        [decnet_node] = @decnet_node,
        [node_name] = @node_name,
        [nodes_excluded] = @nodes_excluded,
        [nodes_included] = @nodes_included,
        [timemaster_sw] = @timemaster_sw,
        [waveform_size] = @waveform_size,
        [print_enabled_sw] = @print_enabled_sw,
        [auto_record_alarm_sw] = @auto_record_alarm_sw,
        [collect_12_lead_sw] = @collect_12_lead_sw,
        [print_auto_record_sw] = @print_auto_record_sw,
        [encryption_status] = @encryption_status
    WHERE
        [gateway_id] = @gateway_id;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateMiscCode]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateMiscCode]
    (
     @organization_id BIGINT,
     @sys_id BIGINT,
     @category_cd CHAR(4),
     @method_cd NVARCHAR(10),
     @code NVARCHAR(80),
     @int_keystone_cd NVARCHAR(80),
     @short_dsc NVARCHAR(100),
     @verification_sw TINYINT,
     @code_id INT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_misc_code]
    SET
        [organization_id] = @organization_id,
        [sys_id] = @sys_id,
        [category_cd] = @category_cd,
        [method_cd] = @method_cd,
        [code] = @code,
        [int_keystone_cd] = @int_keystone_cd,
        [short_dsc] = @short_dsc,
        [verification_sw] = @verification_sw
    WHERE
        [code_id] = @code_id;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateMonitor]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateMonitor]
    (
     @monitor_dsc NVARCHAR(50), -- TG - Should be VARCHAR(50)
     @unit_Org_id BIGINT,
     @room NVARCHAR(12), -- TG - Should be VARCHAR(12)
     @bed_cd NVARCHAR(20),
     @monitor_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_monitor]
    SET
        [monitor_dsc] = @monitor_dsc,
        [unit_org_id] = @unit_Org_id,
        [room] = @room,
        [bed_cd] = @bed_cd
    WHERE
        [monitor_id] = @monitor_id;
    
    UPDATE
        [dbo].[Devices]
    SET
        [Description] = CAST(@monitor_dsc AS VARCHAR(50)),
        [Room] = CAST(@room AS VARCHAR(12))
    WHERE
        [Id] = @monitor_id;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateMrn]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateMrn]
    (
     @mrn_xid NVARCHAR(30),
     @mrn_xid2 NVARCHAR(30),
     @patient_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_mrn_map]
    SET
        [mrn_xid] = @mrn_xid,
        [mrn_xid2] = @mrn_xid2
    WHERE
        [patient_id] = @patient_id;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateOrg]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateOrg]
    (
     @organizationCd NVARCHAR(20),
     @organizationNm NVARCHAR(50),
     @organizationId BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_organization]
    SET
        [organization_cd] = @organizationCd,
        [organization_nm] = @organizationNm
    WHERE
        [organization_id] = @organizationId;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateOrgRecord]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateOrgRecord]
    (
     @auto_collect_interval INT,
     @outbound_interval INT,
     @printer_name VARCHAR(255),
     @alarm_printer_name VARCHAR(255),
     @organization_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_organization]
    SET
        [auto_collect_interval] = @auto_collect_interval,
        [outbound_interval] = @outbound_interval,
        [printer_name] = @printer_name,
        [alarm_printer_name] = @alarm_printer_name
    WHERE
        [organization_id] = @organization_id;
END;
GO
PRINT N'Creating [dbo].[usp_UpdatePatient]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdatePatient]
    (
     @dob DATETIME,
     @gender_cid INT,
     @patient_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_patient]
    SET
        [dob] = @dob,
        [gender_cid] = @gender_cid
    WHERE
        [patient_id] = @patient_id;
END;
GO
PRINT N'Creating [dbo].[usp_UpdatePatientDemographicsToMonitor]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdatePatientDemographicsToMonitor]
    (
     @patient_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_patient_monitor]
    SET
        [monitor_status] = 'UPD'
    WHERE
        [patient_id] = @patient_id
        AND [active_sw] = 1;
END;
GO
PRINT N'Creating [dbo].[usp_UpdatePerson]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdatePerson]
    (
     @last_nm NVARCHAR(50),
     @first_nm NVARCHAR(50),
     @middle_nm NVARCHAR(50),
     @person_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_person]
    SET
        [last_nm] = @last_nm,
        [first_nm] = @first_nm,
        [middle_nm] = @middle_nm
    WHERE
        [person_id] = @person_id;
END;
GO
PRINT N'Creating [dbo].[usp_UpdatePersonName]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdatePersonName]
    (
     @last_nm NVARCHAR(50),
     @first_nm NVARCHAR(50),
     @middle_nm NVARCHAR(50),
     @person_nm_id BIGINT
    )
AS
BEGIN
    UPDATE
        [dbo].[int_person_name]
    SET
        [last_nm] = @last_nm,
        [first_nm] = @first_nm,
        [middle_nm] = @middle_nm
    WHERE
        [person_nm_id] = @person_nm_id
        AND [active_sw] = 1;
END;
GO
PRINT N'Creating [dbo].[usp_UpdateSysParameter_debugSw]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateSysParameter_debugSw] (@debug_sw TINYINT)
AS
BEGIN
    UPDATE
        [dbo].[int_system_parameter]
    SET
        [debug_sw] = @debug_sw
    WHERE
        [system_parameter_id] IN (1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 14);
END;
GO
PRINT N'Creating [dbo].[usp_UpdateSysParameter_parmVal]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateSysParameter_parmVal]
    (
     @parm_value NVARCHAR(80),
     @name NVARCHAR(30)
    )
AS
BEGIN
    UPDATE
        [dbo].[int_system_parameter]
    SET
        [parm_value] = @parm_value
    WHERE
        UPPER([name]) = @name; --TG-Why UPPER??
END;
GO
PRINT N'Creating [dbo].[uspInsertPurgerLog]...';


GO

CREATE PROCEDURE [dbo].[uspInsertPurgerLog]
    (
     @Procedure NVARCHAR(128),
     @Table NVARCHAR(128),
     @PurgeDate DATETIME2(7),
     @Parameters NVARCHAR(128),
     @ChunkSize INT,
     @Rows BIGINT,
     @ErrorNumber INT,
     @ErrorMessage NVARCHAR(MAX),
     @StartTime DATETIME2(7) = '01-01-1900' -- Default to extreme early date until all procedures are updated.
    )
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[PurgerLog]
            ([Procedure],
             [Table],
             [PurgeDate],
             [Parameters],
             [ChunkSize],
             [Rows],
             [ErrorNumber],
             [ErrorMessage],
             [StartTime])
    VALUES
            (@Procedure,
             @Table,
             @PurgeDate,
             @Parameters,
             @ChunkSize,
             @Rows,
             @ErrorNumber,
             @ErrorMessage,
             @StartTime);
END;
GO
PRINT N'Creating [dbo].[uspInsertTableRowSpace]...';


GO
CREATE PROCEDURE [dbo].[uspInsertTableRowSpace]
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[TableRowSpace]
            ([DatabaseName],
             [SchemaName],
             [TableName],
             [IndexID],
             [IndexName],
             [RowCount],
             [TotalSpaceKB],
             [UsedSpaceKB],
             [UnusedSpaceKB])
    SELECT
        DB_NAME() AS [DatabaseName],
        [s].[name] AS [SchemaName],
        [t].[name] AS [TableName],
        [i].[index_id] AS [IndexID],
        [i].[name] AS [IndexName],
        [p].[rows] AS [RowCount],
        SUM([a].[total_pages]) * 8 AS [TotalSpaceKB],
        SUM([a].[used_pages]) * 8 AS [UsedSpaceKB],
        (SUM([a].[total_pages]) - SUM([a].[used_pages])) * 8 AS [UnusedSpaceKB]
    FROM
        [sys].[tables] [t]
        INNER JOIN [sys].[schemas] [s]
            ON [s].[schema_id] = [t].[schema_id]
        INNER JOIN [sys].[indexes] [i]
            ON [t].[object_id] = [i].[object_id]
        INNER JOIN [sys].[partitions] [p]
            ON [i].[object_id] = [p].[object_id]
               AND [i].[index_id] = [p].[index_id]
        INNER JOIN [sys].[allocation_units] [a]
            ON [p].[partition_id] = [a].[container_id]
    WHERE
        [t].[name] NOT LIKE N'dt%' -- filter out system tables for diagramming
        AND [t].[is_ms_shipped] = 0
        AND [i].[object_id] > 255
    GROUP BY
        [t].[name],
        [s].[name],
        [i].[index_id],
        [i].[name],
        [p].[rows]
    ORDER BY
        [s].[name],
        [t].[name],
        [i].[name];
END;
GO
PRINT N'Creating [dbo].[WriteAnalysisTime]...';


GO
CREATE PROCEDURE [dbo].[WriteAnalysisTime]
    (
     @UserID BIGINT,
     @PatientId BIGINT,
     @StartFt BIGINT,
     @EndFt BIGINT,
     @AnalysisType INT
    )
AS
BEGIN
    INSERT  INTO [dbo].[AnalysisTime]
            ([user_id],
             [patient_id],
             [start_ft],
             [end_ft],
             [analysis_type]
            )
    VALUES
            (@UserID,
             @PatientId,
             @StartFt,
             @EndFt,
             @AnalysisType
            );
END;
GO
PRINT N'Creating [dbo].[WriteBeatTimeLog]...';


GO
CREATE PROCEDURE [dbo].[WriteBeatTimeLog]
    (
     @UserID [dbo].[DUSER_ID], -- TG - Should be BIGINT
     @PatientId [dbo].[DPATIENT_ID], -- TG - Should be BIGINT
     @StartFt BIGINT,
     @NumBeats INT,
     @BeatData IMAGE,
     @SampleRate SMALLINT
    )
AS
BEGIN
    INSERT  INTO [dbo].[int_beat_time_log]
            ([user_id],
             [patient_id],
             [start_ft],
             [num_beats],
             [beat_data],
             [sample_rate]
            )
    VALUES
            (CAST(@UserID AS BIGINT),
             CAST(@PatientId AS BIGINT),
             @StartFt,
             @NumBeats,
             @BeatData,
             @SampleRate
            );
END;
GO
PRINT N'Creating [dbo].[WriteBinInfo]...';


GO
CREATE PROCEDURE [dbo].[WriteBinInfo]
    (
     @UserID [dbo].[DUSER_ID], -- TG - Should be BIGINT
     @PatientId [dbo].[DPATIENT_ID], -- TG - Should be BIGINT
     @TemplateSetIndex INT,
     @TemplateIndex INT,
     @BinNumber INT,
     @Source INT,
     @BeatCount INT,
     @FirstBeatNumber INT,
     @NonIgnoredCount INT,
     @FirstNonIgnoredBeat INT,
     @ISOOffset INT,
     @STOffset INT,
     @IPoint INT,
     @JPoint INT,
     @STClass INT,
     @SinglesBin INT,
     @EditBin INT,
     @SubclassNumber INT
    )
AS
BEGIN
    INSERT  INTO [dbo].[int_bin_info]
            ([user_id],
             [patient_id],
             [template_set_index],
             [template_index],
             [bin_number],
             [source],
             [beat_count],
             [first_beat_number],
             [non_ignored_count],
             [first_non_ignored_beat],
             [iso_offset],
             [st_offset],
             [i_point],
             [j_point],
             [st_class],
             [singles_bin],
             [edit_bin],
             [subclass_number],
             [bin_image]
            )
    VALUES
            (CAST(@UserID AS BIGINT),
             CAST(@PatientId AS BIGINT),
             @TemplateSetIndex,
             @TemplateIndex,
             @BinNumber,
             @Source,
             @BeatCount,
             @FirstBeatNumber,
             @NonIgnoredCount,
             @FirstNonIgnoredBeat,
             @ISOOffset,
             @STOffset,
             @IPoint,
             @JPoint,
             @STClass,
             @SinglesBin,
             @EditBin,
             @SubclassNumber,
             NULL
            );
END;
GO
PRINT N'Creating [dbo].[WriteEventData]...';


GO
CREATE PROCEDURE [dbo].[WriteEventData]
    (
     @UserID [dbo].[DUSER_ID], -- TG - Should be BIGINT
     @PatientId [dbo].[DPATIENT_ID], -- TG - Should be BIGINT
     @Type INT,
     @NumEvents INT,
     @EventData IMAGE,
     @SampleRate SMALLINT
    )
AS
BEGIN
    INSERT  INTO [dbo].[AnalysisEvents]
            ([user_id],
             [patient_id],
             [type],
             [num_events],
             [sample_rate],
             [event_data]
            )
    VALUES
            (CAST(@UserID AS BIGINT),
             CAST(@PatientId AS BIGINT),
             @Type,
             @NumEvents,
             @SampleRate,
             @EventData
            );
END;
GO
PRINT N'Creating [dbo].[WritePacerSpikeLog]...';


GO
CREATE PROCEDURE [dbo].[WritePacerSpikeLog]
    (
     @UserID [dbo].[DUSER_ID], -- TG - Should be BIGINT
     @PatientId [dbo].[DPATIENT_ID], -- TG - Should be BIGINT
     @SampleRate SMALLINT,
     @StartFt BIGINT,
     @NumSpikes INT,
     @SpikeData IMAGE
    )
AS
BEGIN
    INSERT  INTO [dbo].[PacerSpikeLog]
            ([user_id],
             [patient_id],
             [sample_rate],
             [start_ft],
             [num_spikes],
             [spike_data]
            )
    VALUES
            (CAST(@UserID AS BIGINT),
             CAST(@PatientId AS BIGINT),
             @SampleRate,
             @StartFt,
             @NumSpikes,
             @SpikeData
            );
END;
GO
PRINT N'Creating [dbo].[WriteTemplateSetInfo]...';


GO
CREATE PROCEDURE [dbo].[WriteTemplateSetInfo]
    (
     @UserID [dbo].[DUSER_ID], -- TG - Should be BIGINT
     @PatientId [dbo].[DPATIENT_ID], -- TG - Should be BIGINT
     @TemplateSetIndex INT,
     @LeadOne INT,
     @LeadTwo INT,
     @NumberOfBins INT,
     @NumberOfTemplates INT
    )
AS
BEGIN
    INSERT  INTO [dbo].[int_template_set_info]
            ([user_id],
             [patient_id],
             [template_set_index],
             [lead_one],
             [lead_two],
             [number_of_bins],
             [number_of_templates]
            )
    VALUES
            (CAST(@UserID AS BIGINT),
             CAST(@PatientId AS BIGINT),
             @TemplateSetIndex,
             @LeadOne,
             @LeadTwo,
             @NumberOfBins,
             @NumberOfTemplates
            );
END;
GO
PRINT N'Creating [dbo].[WriteTrendData]...';


GO
CREATE PROCEDURE [dbo].[WriteTrendData]
    (
     @UserID [dbo].[DUSER_ID], -- TG - Should be BIGINT
     @PatientId [dbo].[DPATIENT_ID], -- TG - Should be BIGINT
     @TotalCategories INT,
     @StartFT BIGINT,
     @TotalPeriods INT,
     @SamplesPerPeriod FLOAT, -- TG - Should be INT
     @TrendData IMAGE
    )
AS
BEGIN
    INSERT  INTO [dbo].[TrendData]
            ([user_id],
             [patient_id],
             [total_categories],
             [start_ft],
             [total_periods],
             [samples_per_period],
             [trend_data]
            )
    VALUES
            (CAST(@UserID AS BIGINT),
             CAST(@PatientId AS BIGINT),
             @TotalCategories,
             @StartFT,
             @TotalPeriods,
             CAST(@SamplesPerPeriod AS INT),
             @TrendData
            );
END;
GO
PRINT N'Creating [dbo].[WriteTwelveLeadData]...';


GO
CREATE PROCEDURE [dbo].[WriteTwelveLeadData]
    (
     @PatientId VARCHAR(256), -- TG - Should be BIGINT
     @ReportID VARCHAR(256), -- TG - Should be BIGINT
     @ReportDT DATETIME,
     @VersionNumber SMALLINT,
     @PatientName VARCHAR(50),
     @IdNum VARCHAR(20),
     @Birthdate VARCHAR(15),
     @Age VARCHAR(15),
     @Sex VARCHAR(1), -- TG - Should be CHAR(1)
     @Height VARCHAR(15),
     @Weight VARCHAR(15),
     @ReportDate VARCHAR(15),
     @ReportTime VARCHAR(15),
     @VentRate INT,
     @PRInterval INT,
     @QT INT,
     @QTC INT,
     @QRSDuration INT,
     @PAxis INT,
     @QRSAxis INT,
     @TAxis INT,
     @Interpretation NVARCHAR(MAX),
     @SampleRate INT,
     @SampleCount INT,
     @NumYPoints INT,
     @Baseline INT,
     @YPointsPerUnit INT,
     @WaveformData IMAGE
    )
AS
BEGIN
    INSERT  INTO [dbo].[int_12lead_report_new]
            ([patient_id],
             [report_id],
             [report_dt],
             [version_number],
             [patient_name],
             [id_number],
             [birthdate],
             [age],
             [sex],
             [height],
             [weight],
             [report_date],
             [report_time],
             [vent_rate],
             [pr_interval],
             [qt],
             [qtc],
             [qrs_duration],
             [p_axis],
             [qrs_axis],
             [t_axis],
             [interpretation],
             [sample_rate],
             [sample_count],
             [num_Ypoints],
             [baseline],
             [Ypoints_per_unit],
             [waveform_data]
            )
    VALUES
            (CAST(@PatientId AS BIGINT),
             CAST(@ReportID AS BIGINT),
             @ReportDT,
             @VersionNumber,
             @PatientName,
             @IdNum,
             @Birthdate,
             @Age,
             @Sex,
             @Height,
             @Weight,
             @ReportDate,
             @ReportTime,
             @VentRate,
             @PRInterval,
             @QT,
             @QTC,
             @QRSDuration,
             @PAxis,
             @QRSAxis,
             @TAxis,
             @Interpretation,
             @SampleRate,
             @SampleCount,
             @NumYPoints,
             @Baseline,
             @YPointsPerUnit,
             @WaveformData
            );
END;
GO
PRINT N'Creating [dbo].[usp_HL7_SaveADTMessage]...';


GO
CREATE PROCEDURE [dbo].[usp_HL7_SaveADTMessage]
    (
     @MessageNumber INT,
    /*Configuration settings*/
     @DynAddOrgs BIT,
     @DynAddSendingSys BIT,
     @PatientTypeAccountNo BIT,
     @UniqueVisitNumber BIT,
     @DynamicallyAddNursingUnits BIT,
     @DynamicallyAddUSID BIT,
    /*Configuration settings*/

    /*Msh(organization Information)*/
     @SendingSystem NVARCHAR(180),
     @SendingFacility NVARCHAR(180),
    /*Msh(organization Information)*/
    
    /*Patient Demographic information*/
     @PatientMrn NVARCHAR(20),
     @PatientAccount NVARCHAR(20) = NULL,
     @PatientGivenName NVARCHAR(48) = NULL,
     @PatientFamilyName NVARCHAR(48) = NULL,
     @PatientMiddleName NVARCHAR(48) = NULL,
     @PatientDob DATETIME = NULL,
     @PatientSex NVARCHAR(1) = NULL, -- TG - should be NCHAR(1)
    /*Patient Demographic information*/

    /*Patient Visit Information*/
     @PatientClass NVARCHAR(1), -- TG - should be NCHAR(1)
     @PatientPointOfCare NVARCHAR(80),
     @PatientVisitNumber NVARCHAR(20),
     @PatientRoom NVARCHAR(80) = NULL,
     @PatientBed NVARCHAR(80) = NULL,
     @VIPIndicator NCHAR(2) = NULL,
     @AdmitDateTime DATETIME = NULL,
     @DischargeDateTime DATETIME = NULL
    /*Patient Visit Information*/
    )
AS
BEGIN
    BEGIN TRY
        --Getting the Message Control Id from the message No
        DECLARE @MessageControlId NVARCHAR(10);

        SET @MessageControlId = (SELECT
                                    [MessageControlId]
                                 FROM
                                    [dbo].[HL7InboundMessage]
                                 WHERE
                                    [MessageNo] = @MessageNumber
                                );

        --Checking the facility and sending system existing in the current system, if not returing the error message.
        DECLARE
            @FacilityId BIGINT,
            @SendingSysId BIGINT;

        EXEC [dbo].[usp_HL7_InsertInboundFacility] @SendingFacility, @DynAddOrgs, @FacilityId OUT;

        IF (@FacilityId IS NOT NULL)
        BEGIN 
            EXEC [dbo].[usp_HL7_InsertInboundSendingSystem] @SendingSystem, @DynAddSendingSys, @FacilityId, @SendingSysId OUT;
        END;

        IF (@FacilityId IS NULL
            OR @SendingSysId IS NULL
            )
        BEGIN
            INSERT  INTO [dbo].[HL7PatientLink]
                    ([MessageNo],
                     [PatientMrn],
                     [PatientVisitNumber],
                     [PatientId]
                    )
            VALUES
                    (@MessageNumber,
                     @PatientMrn,
                     @PatientVisitNumber,
                     NULL
                    );

            RAISERROR (N'Sending Application "%s" or Sending Facility "%s" is not present at the database for MessageControlId="%s".',16,1,@SendingSystem,@SendingFacility,@MessageControlId);
            RETURN;
        END;

        -- Inserts the new unit if Dynamically Add nursing units are set to true
        DECLARE @UnitId BIGINT;

        SET @UnitId = (SELECT
                        [organization_id]
                       FROM
                        [dbo].[int_organization]
                       WHERE
                        [category_cd] = 'D'
                        AND [organization_cd] = @PatientPointOfCare
                        AND [parent_organization_id] = @FacilityId
                      );

        IF (@UnitId IS NULL)
        BEGIN
            IF (@DynamicallyAddNursingUnits = 1)
            BEGIN
                SET @UnitId = NEXT VALUE FOR [dbo].[SequenceBigInt];
                EXEC [dbo].[usp_InsertOrganizationInformation] @organizationId = @UnitId, @categoryCd = 'D', @autoCollectInterval = 1, @parentOrganizationId = @FacilityId, @organizationCd = @PatientPointOfCare, @organizationNm = @PatientPointOfCare;
            END;
            ELSE
            BEGIN
                INSERT  INTO [dbo].[HL7PatientLink]
                        ([MessageNo],
                         [PatientMrn],
                         [PatientVisitNumber],
                         [PatientId]
                        )
                VALUES
                        (@MessageNumber,
                         @PatientMrn,
                         @PatientVisitNumber,
                         NULL
                        );

                RAISERROR(N'Facility for "%s" unit is not present at the database or DynAddNursingUnits configuration is set to false for MessageControlId="%s".',16,1,@PatientPointOfCare,@MessageControlId);
                RETURN;
            END;
        END;

        -- Check the Unit is Licensed
        DECLARE @UnitCode NVARCHAR(20);

        EXEC [dbo].[usp_HL7_GetUnitLicense] 'inHL7', 'D', @UnitId, @UnitCode OUT;

        IF (@UnitCode IS NULL)
        BEGIN
            INSERT  INTO [dbo].[HL7PatientLink]
                    ([MessageNo],
                     [PatientMrn],
                     [PatientVisitNumber],
                     [PatientId]
                    )
            VALUES
                    (@MessageNumber,
                     @PatientMrn,
                     @PatientVisitNumber,
                     NULL
                    );
            RAISERROR (N'Unit "%s" is not Licensed for MessageControlId="%s".',16,1,@PatientPointOfCare,@MessageControlId);
            RETURN;
        END;
    END TRY
    BEGIN CATCH
        UPDATE
            [dbo].[HL7InboundMessage]
        SET
            [MessageStatus] = N'E'
        WHERE
            [MessageNo] = @MessageNumber;
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;
        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage,@ErrorSeverity,@ErrorState);
        RETURN;
    END CATCH;
    
    BEGIN TRY
        BEGIN TRAN;

        -- Get patient GenderCode from the Int_misc_code
        DECLARE @PatientGenderCodeId INT;
        IF (@PatientSex IS NOT NULL)
        BEGIN
            EXEC [dbo].[usp_GetCodeByCategoryCode] @categoryCd = 'SEX', @MethodCd = N'HL7', @Code = @PatientSex, @OrganizationId = @FacilityId, @SendingSysId = @SendingSysId, @CodeId = @PatientGenderCodeId OUT;
            IF (@PatientGenderCodeId IS NULL
                AND @DynamicallyAddUSID = 1
                )
            BEGIN
                SET @PatientGenderCodeId = (SELECT
                                                CAST(RAND() * 10000 AS INT) AS [RandomNumber]
                                           );
                WHILE ((SELECT
                            [code_id]
                        FROM
                            [dbo].[int_misc_code]
                        WHERE
                            [code_id] = @PatientGenderCodeId
                       ) IS NOT NULL)
                BEGIN
                    SET @PatientGenderCodeId = @PatientGenderCodeId + 1;
                END;

                EXEC [dbo].[usp_InsertMiscCodeDetails] @PatientGenderCodeId, @FacilityId, @SendingSysId, 'SEX', N'HL7', @PatientSex;
            END; 
        END;

        -- Get patient Class from the Int_misc_code
        DECLARE @PatientClassCId INT;
        EXEC [dbo].[usp_GetCodeByCategoryCode] @categoryCd = 'PCLS', @MethodCd = 'HL7', @Code = @PatientClass, @OrganizationId = @FacilityId, @SendingSysId = @SendingSysId, @CodeId = @PatientClassCId OUT;
        IF (@PatientClassCId IS NULL
            AND @DynamicallyAddUSID = 1
            )
        BEGIN
            SET @PatientClassCId = (SELECT
                                        CAST(RAND() * 10000 AS INT) AS [RandomNumber]
                                   );
            WHILE ((SELECT
                        [code_id]
                    FROM
                        [dbo].[int_misc_code]
                    WHERE
                        [code_id] = @PatientClassCId
                   ) IS NOT NULL)
            BEGIN
                SET @PatientClassCId = @PatientClassCId + 1;
            END;

            EXEC [dbo].[usp_InsertMiscCodeDetails] @PatientClassCId, @FacilityId, @SendingSysId, 'PCLS', 'HL7', @PatientClass;     
        END; 

        -- Process Patient Demographic Information
        DECLARE
            @PatientId BIGINT,
            @AcctId BIGINT;
        EXEC [dbo].[usp_HL7_SavePatientDemographicInformation] @PatientTypeAccountNo, @PatientMrn, @PatientAccount, @FacilityId, @PatientGivenName, @PatientFamilyName, @PatientMiddleName, @PatientDob, @PatientGenderCodeId, @PatientId OUT, @AcctId OUT;
        --IF (@PatientMrn IS NOT NULL)
        --BEGIN
        --IF(@AccountPatientId IS NOT NULL)
        --BEGIN
        ----link these 2 records in int_mrn_map.
        --END

        -- Process Patient Visit Information
        EXEC [dbo].[usp_HL7_SavePatientVisitInformation] @UniqueVisitNumber, @UnitId, @FacilityId, @PatientId, @SendingSysId, @PatientClassCId, @PatientPointOfCare, @PatientVisitNumber, @MessageNumber, @PatientRoom, @PatientBed, @AcctId, @VIPIndicator, @AdmitDateTime, @DischargeDateTime;

        -- Link the HL7 message no and patient mrn
        INSERT  INTO [dbo].[HL7PatientLink]
                ([MessageNo],
                 [PatientMrn],
                 [PatientVisitNumber],
                 [PatientId]
                )
        VALUES
                (@MessageNumber,
                 @PatientMrn,
                 @PatientVisitNumber,
                 @PatientId
                );

        -- Update the HL7 Temp table status to received
        UPDATE
            [dbo].[HL7InboundMessage]
        SET
            [MessageStatus] = 'R',
            [MessageProcessedDate] = GETDATE()
        WHERE
            [MessageNo] = @MessageNumber;

        COMMIT TRAN;
    END TRY
    BEGIN CATCH
        ROLLBACK TRAN;

        -- Update the HL7 Temp table status to Error--
        UPDATE
            [dbo].[HL7InboundMessage]
        SET
            [MessageStatus] = 'E'
        WHERE
            [MessageNo] = @MessageNumber;
        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        -- Use RAISERROR inside the CATCH block to return error
        -- information about the original error that caused
        -- execution to jump to the CATCH block.
        RAISERROR (@ErrorMessage, -- Message text.
            @ErrorSeverity, -- Severity.
            @ErrorState -- State.
            );
    END CATCH;
END;
GO
PRINT N'Creating [dbo].[usp_PM_CopyETVitalsAndWaveforms]...';


GO
CREATE PROCEDURE [dbo].[usp_PM_CopyETVitalsAndWaveforms]
AS
BEGIN
    BEGIN TRANSACTION;

    EXEC [dbo].[usp_PM_CopyETWaveformData];

    EXEC [dbo].[usp_PM_CopyETVitalsData];

    COMMIT TRANSACTION;
END;
GO
PRINT N'Creating [Caption]...';


GO
EXECUTE sp_addextendedproperty @name = N'Caption', @value = N'Spacelabs Healthcare ICS Portal database';


GO
PRINT N'Creating [Version]...';


GO
EXECUTE sp_addextendedproperty @name = N'Version', @value = N'5.02.03';


GO
PRINT N'Creating [dbo].[GetPatientsList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientsList';


GO
PRINT N'Creating [dbo].[GetRawECGData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetRawECGData';


GO
PRINT N'Creating [dbo].[usp_HL7_InsertInboundFacility].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This procedure returns the organization_id, if the sending facility exists in the category code ''F''.  If not exists and Dynamically Add Organizations is set to True, it will add the organization in the table.
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertInboundFacility';


GO
PRINT N'Creating [dbo].[usp_HL7_InsertInboundSendingSystem].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This procedure returns the SendingSystemId from the sending system table with organization id.  If it does not exist and Dynamically sending system is set to True, it will add the system system in the table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertInboundSendingSystem';


GO
PRINT N'Creating [dbo].[usp_HL7_SaveADTMessage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Saves ADT A01 message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SaveADTMessage';


GO
PRINT N'Creating [dbo].[usp_HL7_SavePatientDemographicInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert/Update the patient information into respective tables.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SavePatientDemographicInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_SavePatientVisitInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Saves the patient visit Information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SavePatientVisitInformation';


GO
PRINT N'Creating [dbo].[usp_PM_CopyETVitalsAndWaveforms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Copies all alarm, vitals, and waveform data relating to ET alarms for printing and reprinting. Used by the ICS_PrintJobDataCopier SqlAgentJob.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_CopyETVitalsAndWaveforms';


GO
PRINT N'Creating [dbo].[usp_PM_CopyETVitalsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Copies vitals data related to ET Alarms for printing and reprinting. Used by the ICS_PrintJobDataCopier SqlAgentJob.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_CopyETVitalsData';


GO
PRINT N'Creating [dbo].[usp_PM_CopyETWaveformData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Copies waveform data relating to ET alarms for printing and reprinting. Used by the ICS_PrintJobDataCopier SqlAgentJob.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_CopyETWaveformData';


GO
PRINT N'Creating [dbo].[usp_PM_GetAlarmData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purpose: Retreives alarm data for a given alarm id.  @alarmId: The alarm id associated with the print job.  @locale: The two digit locale to translate the descriptions string into.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_GetAlarmData';


GO
PRINT N'Creating [dbo].[usp_PM_GetPatientVitalsByGDS].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves Patient Vital information from the copied ET Vitals data.  @gdsCodes: The alarm id associated with the print job.  @PatientId: The patient Id associated with the patient vitals to return.  @startTimeUTC: The start time in UTC to start grabbing vitals from.  @endTimeUTC:  The end time in UTC to finish grabbing vitals from.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_GetPatientVitalsByGDS';


GO
PRINT N'Creating [dbo].[usp_PM_GetPatientWaveformData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_GetPatientWaveformData';


GO
PRINT N'Creating [dbo].[usp_PurgeDlAlarmData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge DL alarm data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlAlarmData';


GO
PRINT N'Creating [dbo].[usp_PurgeDlEncounterData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge the data loader encounter data if the data is older than the specified purge date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlEncounterData';


GO
PRINT N'Creating [dbo].[usp_PurgeDlPrintJobsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlPrintJobsData';


GO
PRINT N'Creating [dbo].[usp_PurgeDlVitalsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge data loader vitals data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlVitalsData';


GO
PRINT N'Creating [dbo].[usp_PurgeDlWaveformData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge DL waveform data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlWaveformData';


GO
PRINT N'Creating [dbo].[usp_PurgeEventsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Remove rows from the EventsData table that are older than the purge date parameter.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeEventsData';


GO
PRINT N'Creating [dbo].[usp_PurgeTasks].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Execute all of the purging tasks with error handling and error reporting to Windows event log.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeTasks';


GO
PRINT N'Creating [dbo].[usp_RemoveTrailingLiveData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Remove the live data attached to a topic instance that is over 2.5 minutes old.  Then delete any live data that is more than 10 days old.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_RemoveTrailingLiveData';


GO
PRINT N'Creating [dbo].[usp_RemoveTrailingLiveWaveformData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Remove the waveform live data where start times are less than the latest end times per topic instance ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_RemoveTrailingLiveWaveformData';


GO
PRINT N'Creating [dbo].[usp_RetrieveConfigurationSection].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve Configuration data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_RetrieveConfigurationSection';


GO
PRINT N'Creating [dbo].[usp_SaveBeginDeviceSession].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveBeginDeviceSession';


GO
PRINT N'Creating [dbo].[usp_SaveBeginPatientSession].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveBeginPatientSession';


GO
PRINT N'Creating [dbo].[usp_SaveBeginTopicSession].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveBeginTopicSession';


GO
PRINT N'Creating [dbo].[usp_SaveBlobPrintRequestDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveBlobPrintRequestDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveCfgValues].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveCfgValues';


GO
PRINT N'Creating [dbo].[usp_SaveConfigurationSection].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to save Configuration data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveConfigurationSection';


GO
PRINT N'Creating [dbo].[usp_SaveDeviceInfoDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save device information data set.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveDeviceInfoDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveEndDeviceSession].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveEndDeviceSession';


GO
PRINT N'Creating [dbo].[usp_SaveEndPatientSession].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveEndPatientSession';


GO
PRINT N'Creating [dbo].[usp_SaveEndTopicSession].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveEndTopicSession';


GO
PRINT N'Creating [dbo].[usp_SaveEventsDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveEventsDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveGeneralAlarmsDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveGeneralAlarmsDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveLimitAlarmDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveLimitAlarmDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveLimitChangeDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveLimitChangeDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveLiveDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save the patient topic session live data from the caller via a table variable.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveLiveDataSet';


GO
PRINT N'Creating [dbo].[usp_SavePatientData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save patient data - name, gender, weight, etc.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SavePatientData';


GO
PRINT N'Creating [dbo].[usp_SavePrintRequestDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SavePrintRequestDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveStatusDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveStatusDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveVitalsDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveVitalsDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveWaveformAnnotationDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformAnnotationDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveWaveformDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveWaveformLiveDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save the patient topic session waveform live data from the caller via a table variable.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformLiveDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveWaveformPrintDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformPrintDataSet';


GO
PRINT N'Creating [dbo].[usp_SaveWaveformPrintRequestDataSet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformPrintRequestDataSet';


GO
PRINT N'Creating [dbo].[usp_UpdateApplicationSettingsInstanceId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Updates an the instance Id for a group of application settings in the database.  @applicationType: The application type of the instance id to update.  @oldInstanceId: The instance Id to update.  @newInstanceId: The new instance Id to replace the old one with', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateApplicationSettingsInstanceId';


GO
PRINT N'Creating [dbo].[usp_UpdateCEISettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateCEISettings';


GO
PRINT N'Creating [dbo].[usp_UpdateEncounter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateEncounter';


GO
PRINT N'Creating [dbo].[usp_UpdateGatewaySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateGatewaySettings';


GO
PRINT N'Creating [dbo].[usp_UpdateMiscCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateMiscCode';


GO
PRINT N'Creating [dbo].[usp_UpdateMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateMonitor';


GO
PRINT N'Creating [dbo].[usp_UpdateMrn].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateMrn';


GO
PRINT N'Creating [dbo].[usp_UpdateOrg].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateOrg';


GO
PRINT N'Creating [dbo].[usp_UpdateOrgRecord].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateOrgRecord';


GO
PRINT N'Creating [dbo].[usp_UpdatePatient].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdatePatient';


GO
PRINT N'Creating [dbo].[usp_UpdatePatientDemographicsToMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdatePatientDemographicsToMonitor';


GO
PRINT N'Creating [dbo].[usp_UpdatePerson].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdatePerson';


GO
PRINT N'Creating [dbo].[usp_UpdatePersonName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdatePersonName';


GO
PRINT N'Creating [dbo].[usp_UpdateSysParameter_debugSw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateSysParameter_debugSw';


GO
PRINT N'Creating [dbo].[usp_UpdateSysParameter_parmVal].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateSysParameter_parmVal';


GO
PRINT N'Creating [dbo].[WriteAnalysisTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteAnalysisTime';


GO
PRINT N'Creating [dbo].[WriteBeatTimeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteBeatTimeLog';


GO
PRINT N'Creating [dbo].[WriteBinInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteBinInfo';


GO
PRINT N'Creating [dbo].[WriteEventData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteEventData';


GO
PRINT N'Creating [dbo].[WritePacerSpikeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WritePacerSpikeLog';


GO
PRINT N'Creating [dbo].[WriteTemplateSetInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteTemplateSetInfo';


GO
PRINT N'Creating [dbo].[WriteTrendData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteTrendData';


GO
PRINT N'Creating [dbo].[WriteTwelveLeadData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteTwelveLeadData';


GO
PRINT N'Creating [dbo].[fntDateTimeToFileTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert UTC datetime format into local datetime format.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntDateTimeToFileTime';


GO
PRINT N'Creating [dbo].[fntFileTimeToDateTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert filetime format into local datetime format.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntFileTimeToDateTime';


GO
PRINT N'Creating [dbo].[fntFileTimeToUtc].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert filetime format into UTC datetime format.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntFileTimeToUtc';


GO
PRINT N'Creating [dbo].[fntUtcDateTimeToLocalTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert UTC datetime format into local datetime format.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntUtcDateTimeToLocalTime';


GO
PRINT N'Creating [dbo].[fntZeroIfBigger].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return 0 if value is greater than maxValue, otherwise return the value.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntZeroIfBigger';


GO
PRINT N'Creating [dbo].[ufnDeviceSessionInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the latest device information for a device session and device name.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'ufnDeviceSessionInfo';


GO
PRINT N'Creating [dbo].[fn_Split].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Split a text string using the delimiter into multiple rows', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fn_Split';


GO
PRINT N'Creating [dbo].[fn_Vital_Merge].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Merge vital values into a single string.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fn_Vital_Merge';


GO
PRINT N'Creating [dbo].[AssignUserRole].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Create a user and assign the role for the user.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'AssignUserRole';


GO
PRINT N'Creating [dbo].[Change_Starter_Set].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'Change_Starter_Set';


GO
PRINT N'Creating [dbo].[ChangeUserRole].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Change role for user.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'ChangeUserRole';


GO
PRINT N'Creating [dbo].[ClearAuditLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'ClearAuditLogData';


GO
PRINT N'Creating [dbo].[ClearEventLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Clear event log data for a patient or all patients where date less than start date or all dates if start date is null.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'ClearEventLogData';


GO
PRINT N'Creating [dbo].[CreateRole].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Create a role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'CreateRole';


GO
PRINT N'Creating [dbo].[CreateUser].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Create user and assign a role for the user.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'CreateUser';


GO
PRINT N'Creating [dbo].[DeleteAnalysisTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteAnalysisTime';


GO
PRINT N'Creating [dbo].[DeleteBeatTimeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteBeatTimeLog';


GO
PRINT N'Creating [dbo].[DeleteBinInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteBinInfo';


GO
PRINT N'Creating [dbo].[DeleteEventData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteEventData';


GO
PRINT N'Creating [dbo].[DeletePacerSpikeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeletePacerSpikeLog';


GO
PRINT N'Creating [dbo].[DeletePatientSavedEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeletePatientSavedEvent';


GO
PRINT N'Creating [dbo].[DeletePatientTwelveLeadReport].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeletePatientTwelveLeadReport';


GO
PRINT N'Creating [dbo].[DeleteRestrictedUnits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Delete all the restricted organizations based on role ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteRestrictedUnits';


GO
PRINT N'Creating [dbo].[DeleteRole].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Delete a User Role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteRole';


GO
PRINT N'Creating [dbo].[DeleteTemplateSetInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteTemplateSetInfo';


GO
PRINT N'Creating [dbo].[DeleteTrendData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteTrendData';


GO
PRINT N'Creating [dbo].[DeleteUnitSetting].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteUnitSetting';


GO
PRINT N'Creating [dbo].[DeleteUnitSettingByType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteUnitSettingByType';


GO
PRINT N'Creating [dbo].[DeleteUser].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Delete ICS user by user ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteUser';


GO
PRINT N'Creating [dbo].[Fix_FlowSheet_Detail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Fix flowsheet_detail rows the sub test test_code id from cmplus points to its parent''s test code had to generate new ones', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'Fix_FlowSheet_Detail';


GO
PRINT N'Creating [dbo].[GetAccessSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve the security settings of a Role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetAccessSettings';


GO
PRINT N'Creating [dbo].[GetAllRoles].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get all Roles.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetAllRoles';


GO
PRINT N'Creating [dbo].[GetAnalysisTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetAnalysisTime';


GO
PRINT N'Creating [dbo].[GetAuditLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetAuditLogData';


GO
PRINT N'Creating [dbo].[GetDefaultSettingNameList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetDefaultSettingNameList';


GO
PRINT N'Creating [dbo].[GetETAlarms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET alarms.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETAlarms';


GO
PRINT N'Creating [dbo].[GetETBeatTimeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the ET beat time log for the specified patient for a specified amount of time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETBeatTimeLog';


GO
PRINT N'Creating [dbo].[GetETEventsBySubtype].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET events by subtype.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETEventsBySubtype';


GO
PRINT N'Creating [dbo].[GetETEventsByType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve the ETR events by category and type for a specified date (file time) range.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETEventsByType';


GO
PRINT N'Creating [dbo].[GetETStatusEvents].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET status events.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETStatusEvents';


GO
PRINT N'Creating [dbo].[GetETTechAlarms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET tech alarms.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETTechAlarms';


GO
PRINT N'Creating [dbo].[GetFacilities].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetFacilities';


GO
PRINT N'Creating [dbo].[GetFacilityNameByUnitId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetFacilityNameByUnitId';


GO
PRINT N'Creating [dbo].[GetGDSChannelList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetGDSChannelList';


GO
PRINT N'Creating [dbo].[GetIntCfgValues].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetIntCfgValues';


GO
PRINT N'Creating [dbo].[GetLeadList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the list of leads for the specified patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLeadList';


GO
PRINT N'Creating [dbo].[GetLegacyPatientAlarms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get a list of alarms from a non enhanced tele patient', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientAlarms';


GO
PRINT N'Creating [dbo].[GetLegacyPatientChannelList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientChannelList';


GO
PRINT N'Creating [dbo].[GetLegacyPatientChannelTimes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the legacy patient channel times.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientChannelTimes';


GO
PRINT N'Creating [dbo].[GetLegacyPatientStartftFromVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientStartftFromVitals';


GO
PRINT N'Creating [dbo].[GetLegacyPatientVitalsByGDSCodes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get legacy patient vitals by GDS codes.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsByGDSCodes';


GO
PRINT N'Creating [dbo].[GetLegacyPatientVitalsByType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the vitals of one patient for one given type, only from the legacy tables.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsByType';


GO
PRINT N'Creating [dbo].[GetLegacyPatientVitalsByTypeUpdate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Dummy view creation for ET - Temp fix for resolving dependencies for smooth installation of the build. --Remove / Replace this with actual view when it becomes available. --Get vitals data for trends view in CA', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsByTypeUpdate';


GO
PRINT N'Creating [dbo].[GetLegacyPatientVitalsTimeUpdate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsTimeUpdate';


GO
PRINT N'Creating [dbo].[GetLegacyPatientVitalsTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsTypes';


GO
PRINT N'Creating [dbo].[GetLegacyPatientWaveFormDataByChannels].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientWaveFormDataByChannels';


GO
PRINT N'Creating [dbo].[GetLegacyPatientWaveFormTimeHistory].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientWaveFormTimeHistory';


GO
PRINT N'Creating [dbo].[GetLicensedPersonAndPatientDataByPatientId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DM3...', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLicensedPersonAndPatientDataByPatientId';


GO
PRINT N'Creating [dbo].[GetLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLogData';


GO
PRINT N'Creating [dbo].[GetMinMaxPatientTimes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the minimum and maximum patient (filetime) times from waveform data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetMinMaxPatientTimes';


GO
PRINT N'Creating [dbo].[GetMinMaxPatientTimesFromVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetMinMaxPatientTimesFromVitals';


GO
PRINT N'Creating [dbo].[GetNumLeadConfigs].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the number of leads configured for the specified patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetNumLeadConfigs';


GO
PRINT N'Creating [dbo].[GetNumProcStats].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the number of processed statistics for the specified patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetNumProcStats';


GO
PRINT N'Creating [dbo].[GetOrganizationData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the organization structure.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetOrganizationData';


GO
PRINT N'Creating [dbo].[GetOrganizationDataAsXml].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the organizational structure as XML.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetOrganizationDataAsXml';


GO
PRINT N'Creating [dbo].[GetPatientAlarms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get a list of alarms for an enhanced tele patient', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientAlarms';


GO
PRINT N'Creating [dbo].[GetPatientAlarmsByType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientAlarmsByType';


GO
PRINT N'Creating [dbo].[GetPatientAlarmTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientAlarmTypes';


GO
PRINT N'Creating [dbo].[GetPatientAuditLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientAuditLogData';


GO
PRINT N'Creating [dbo].[GetPatientByExternalID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientByExternalID';


GO
PRINT N'Creating [dbo].[GetPatientByExternalIdAndDevice].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient information by the external medical record ID and device name.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientByExternalIdAndDevice';


GO
PRINT N'Creating [dbo].[GetPatientChannelList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the list of channels with live data for an active patient', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientChannelList';


GO
PRINT N'Creating [dbo].[GetPatientChannelTimes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient channel times.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientChannelTimes';


GO
PRINT N'Creating [dbo].[GetPatientChannelTimesFromVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient channel start and end times from vitals.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientChannelTimesFromVitals';


GO
PRINT N'Creating [dbo].[GetPatientData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientData';


GO
PRINT N'Creating [dbo].[GetPatientEventsByType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientEventsByType';


GO
PRINT N'Creating [dbo].[GetPatientEventsCountByType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientEventsCountByType';


GO
PRINT N'Creating [dbo].[GetPatientEventTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientEventTypes';


GO
PRINT N'Creating [dbo].[GetPatientInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient demographics in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientInformation';


GO
PRINT N'Creating [dbo].[GetPatientLeadChangeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientLeadChangeLog';


GO
PRINT N'Creating [dbo].[GetPatientMonitorData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientMonitorData';


GO
PRINT N'Creating [dbo].[GetPatientSavedEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEvent';


GO
PRINT N'Creating [dbo].[GetPatientSavedEventCalipers].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventCalipers';


GO
PRINT N'Creating [dbo].[GetPatientSavedEventLeadLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventLeadLog';


GO
PRINT N'Creating [dbo].[GetPatientSavedEventMonitorLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventMonitorLog';


GO
PRINT N'Creating [dbo].[GetPatientSavedEventSummary].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventSummary';


GO
PRINT N'Creating [dbo].[GetPatientSavedEventVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventVitals';


GO
PRINT N'Creating [dbo].[GetPatientSavedEventVitalsNew].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventVitalsNew';


GO
PRINT N'Creating [dbo].[GetPatientSavedEventWaveForm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventWaveForm';


GO
PRINT N'Creating [dbo].[GetPatientsBySearch].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Search for patients by last name, first name, medical record number (MRN), VIP status and restricted unit.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientsBySearch';


GO
PRINT N'Creating [dbo].[GetPatientStartftFromVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientStartftFromVitals';


GO
PRINT N'Creating [dbo].[GetPatientTimeOfDay].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient waveform time of day given a starting file time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTimeOfDay';


GO
PRINT N'Creating [dbo].[GetPatientTimes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient waveform starting and ending file times.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTimes';


GO
PRINT N'Creating [dbo].[GetPatientTwelveLeadReport].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTwelveLeadReport';


GO
PRINT N'Creating [dbo].[GetPatientTwelveLeadReportNew].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTwelveLeadReportNew';


GO
PRINT N'Creating [dbo].[GetPatientTwelveLeadReports].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTwelveLeadReports';


GO
PRINT N'Creating [dbo].[GetPatientVitalsByGDSCodes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient vitals by GDS codes.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsByGDSCodes';


GO
PRINT N'Creating [dbo].[GetPatientVitalsByType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the patients'' vitals by type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsByType';


GO
PRINT N'Creating [dbo].[GetPatientVitalsByTypeUpdate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the patients'' vitals by type after sequence number and after date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsByTypeUpdate';


GO
PRINT N'Creating [dbo].[GetPatientVitalSignByChannels].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalSignByChannels';


GO
PRINT N'Creating [dbo].[GetPatientVitalsTimeHistory].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patients'' vitals time history.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsTimeHistory';


GO
PRINT N'Creating [dbo].[GetPatientVitalsTimeUpdate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patients'' vitals time update.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsTimeUpdate';


GO
PRINT N'Creating [dbo].[GetPatientVitalsTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the patients'' vitals types, codes and units.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsTypes';


GO
PRINT N'Creating [dbo].[GetPatientWaveFormDataByChannels].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientWaveFormDataByChannels';


GO
PRINT N'Creating [dbo].[GetPatientWaveFormTimeHistory].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patients'' waveform time history starting date time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientWaveFormTimeHistory';


GO
PRINT N'Creating [dbo].[GetPatientWaveFormTimeUpdate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient waveform starting time and file time after a specified file time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientWaveFormTimeUpdate';


GO
PRINT N'Creating [dbo].[GetProcStatList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get processed list of statistics for the specified patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetProcStatList';


GO
PRINT N'Creating [dbo].[GetProductAccess].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetProductAccess';


GO
PRINT N'Creating [dbo].[GetQryLivePatientVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get live patient vitals.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetQryLivePatientVitals';


GO
PRINT N'Creating [dbo].[GetQryLivePatientVitalsByMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get Live Patient Vitals By Monitor', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetQryLivePatientVitalsByMonitor';


GO
PRINT N'Creating [dbo].[GetRecvSendAndOrderInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetRecvSendAndOrderInfo';


GO
PRINT N'Creating [dbo].[GetRestrictedUnitList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get all the restricted units of role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetRestrictedUnitList';


GO
PRINT N'Creating [dbo].[GetSavedEventBeatTimeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetSavedEventBeatTimeLog';


GO
PRINT N'Creating [dbo].[GetSavedEventWaveFormType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetSavedEventWaveFormType';


GO
PRINT N'Creating [dbo].[GetSaveEventArrhythmiaEventTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetSaveEventArrhythmiaEventTime';


GO
PRINT N'Creating [dbo].[GetTwelveLeadReports].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetTwelveLeadReports';


GO
PRINT N'Creating [dbo].[GetUnitAutoCollectInterval].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUnitAutoCollectInterval';


GO
PRINT N'Creating [dbo].[GetUnitsByFacility].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUnitsByFacility';


GO
PRINT N'Creating [dbo].[GetUserByGuid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve User details by User ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserByGuid';


GO
PRINT N'Creating [dbo].[GetUserByName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve User details by User Login Name.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserByName';


GO
PRINT N'Creating [dbo].[GetUserByUsId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve User details by user security identifier.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserByUsId';


GO
PRINT N'Creating [dbo].[GetUserPatientsList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserPatientsList';


GO
PRINT N'Creating [dbo].[GetUsers].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUsers';


GO
PRINT N'Creating [dbo].[GetUserSettingByType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserSettingByType';


GO
PRINT N'Creating [dbo].[GetVersionNumber].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns the latest version number of the ICS database using the new CreateDate column to break the possible tie.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetVersionNumber';


GO
PRINT N'Creating [dbo].[GetvsvAccess].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetvsvAccess';


GO
PRINT N'Creating [dbo].[GetWaveFormTimes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient waveform times for analysis service given 2 channel codes.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetWaveFormTimes';


GO
PRINT N'Creating [dbo].[InsertAdminAuditLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by ICS Admin to log information to audit log.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'InsertAdminAuditLogData';


GO
PRINT N'Creating [dbo].[InsertAuditLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert information into the AuditLogData table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'InsertAuditLogData';


GO
PRINT N'Creating [dbo].[InsertEventLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'InsertEventLogData';


GO
PRINT N'Creating [dbo].[InsertPatientInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the patient Information from any component.  @PatientId is mandatory and the remaining are optional with default NULL values.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'InsertPatientInformation';


GO
PRINT N'Creating [dbo].[p_Duplicated_Patient_List].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Duplicated_Patient_List';


GO
PRINT N'Creating [dbo].[p_enc_det_drs].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_enc_det_drs';


GO
PRINT N'Creating [dbo].[p_Encounters_det].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Encounters_det';


GO
PRINT N'Creating [dbo].[p_Encounters_Detail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Encounters_Detail';


GO
PRINT N'Creating [dbo].[p_fs_Distrib].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_fs_Distrib';


GO
PRINT N'Creating [dbo].[p_fs_Results].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_fs_Results';


GO
PRINT N'Creating [dbo].[p_Get_cfg_Values].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Get_cfg_Values';


GO
PRINT N'Creating [dbo].[p_Get_Lang].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Get_Lang';


GO
PRINT N'Creating [dbo].[p_gts_Channels_Info].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_Channels_Info';


GO
PRINT N'Creating [dbo].[p_gts_Input_Rate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_Input_Rate';


GO
PRINT N'Creating [dbo].[p_gts_mp_List].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_mp_List';


GO
PRINT N'Creating [dbo].[p_gts_Purge_gts_Tables].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_Purge_gts_Tables';


GO
PRINT N'Creating [dbo].[p_gts_WaveForm_Index_Rate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_WaveForm_Index_Rate';


GO
PRINT N'Creating [dbo].[p_HL7_Status].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_HL7_Status';


GO
PRINT N'Creating [dbo].[p_Ins_Guarantor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Ins_Guarantor';


GO
PRINT N'Creating [dbo].[p_Ins_Plcys].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Ins_Plcys';


GO
PRINT N'Creating [dbo].[p_Load_fs_Detail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Load_fs_Detail';


GO
PRINT N'Creating [dbo].[p_Loader_Pat_Poll].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Loader_Pat_Poll';


GO
PRINT N'Creating [dbo].[p_ml_Delete_Duplicate_Info].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Delete_Duplicate_Info';


GO
PRINT N'Creating [dbo].[p_ml_Insert_Duplicate_Info].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Insert_Duplicate_Info';


GO
PRINT N'Creating [dbo].[p_ml_Is_Id_On_Monitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Is_Id_On_Monitor';


GO
PRINT N'Creating [dbo].[p_ml_Load_Monitor_By_Gateway_Info].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Load_Monitor_By_Gateway_Info';


GO
PRINT N'Creating [dbo].[p_ml_Load_Monitor_By_Id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Load_Monitor_By_Id';


GO
PRINT N'Creating [dbo].[p_ml_Load_Patient_By_Pat_Id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Load_Patient_By_Pat_Id';


GO
PRINT N'Creating [dbo].[p_Newest_fs_Result_Date].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Newest_fs_Result_Date';


GO
PRINT N'Creating [dbo].[p_Node_Distrib].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Node_Distrib';


GO
PRINT N'Creating [dbo].[p_Node_Results].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Node_Results';


GO
PRINT N'Creating [dbo].[p_Nok].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Nok';


GO
PRINT N'Creating [dbo].[p_On_Monitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_On_Monitor';


GO
PRINT N'Creating [dbo].[p_Parents].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Parents';


GO
PRINT N'Creating [dbo].[p_Pat_Summary].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Pat_Summary';


GO
PRINT N'Creating [dbo].[p_Purge].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge';


GO
PRINT N'Creating [dbo].[p_Purge_12Lead_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_12Lead_Data';


GO
PRINT N'Creating [dbo].[p_Purge_Alarm_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Alarm_Data';


GO
PRINT N'Creating [dbo].[p_Purge_All_Patient_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_All_Patient_Data';


GO
PRINT N'Creating [dbo].[p_Purge_CEI_Log_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_CEI_Log_Data';


GO
PRINT N'Creating [dbo].[p_Purge_ch_Audit_Log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'CH Audit Logs purge.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_ch_Audit_Log';


GO
PRINT N'Creating [dbo].[p_Purge_ch_Log_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_ch_Log_Data';


GO
PRINT N'Creating [dbo].[p_Purge_ch_Patient_Settings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'CH Patient Settings purge', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_ch_Patient_Settings';


GO
PRINT N'Creating [dbo].[p_Purge_Encounter_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge encounter data which is no longer needed or allowed by licensing.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Encounter_Data';


GO
PRINT N'Creating [dbo].[p_Purge_ETPrintJobs_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purges old alarm report data previously saved for ET Print Jobs.  Used by the ICS_PurgeData SqlAgentJob.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_ETPrintJobs_Data';


GO
PRINT N'Creating [dbo].[p_Purge_eval].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_eval';


GO
PRINT N'Creating [dbo].[p_Purge_Get_Task].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Get_Task';


GO
PRINT N'Creating [dbo].[p_Purge_Get_Task_List].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge - get task list.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Get_Task_List';


GO
PRINT N'Creating [dbo].[p_Purge_Get_wf_Hours].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge Waveform Hours.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Get_wf_Hours';


GO
PRINT N'Creating [dbo].[p_Purge_HL7_Error].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_HL7_Error';


GO
PRINT N'Creating [dbo].[p_Purge_HL7_Not_Read].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_HL7_Not_Read';


GO
PRINT N'Creating [dbo].[p_Purge_HL7_Pending].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_HL7_Pending';


GO
PRINT N'Creating [dbo].[p_Purge_HL7_Success].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_HL7_Success';


GO
PRINT N'Creating [dbo].[p_Purge_Input_Rate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Input_Rate';


GO
PRINT N'Creating [dbo].[p_Purge_msg_Log_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_msg_Log_Data';


GO
PRINT N'Creating [dbo].[p_Purge_Print_Job_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Print_Job_Data';


GO
PRINT N'Creating [dbo].[p_Purge_Release_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Release_Data';


GO
PRINT N'Creating [dbo].[p_Purge_Result_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge old int_results data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Result_Data';


GO
PRINT N'Creating [dbo].[p_Purge_Set_Task].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Set_Task';


GO
PRINT N'Creating [dbo].[p_Purge_WaveForm_Data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge old waveform, analysis and patient channel data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_WaveForm_Data';


GO
PRINT N'Creating [dbo].[p_rel_CleanUp].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_rel_CleanUp';


GO
PRINT N'Creating [dbo].[p_Set_cfg_Values].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Set_cfg_Values';


GO
PRINT N'Creating [dbo].[p_Set_Lang].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Set_Lang';


GO
PRINT N'Creating [dbo].[p_Test_Groups].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Test_Groups';


GO
PRINT N'Creating [dbo].[p_ugTest].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ugTest';


GO
PRINT N'Creating [dbo].[p_update_vital_live_temp].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_update_vital_live_temp';


GO
PRINT N'Creating [dbo].[PurgerParameters].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'PurgerParameters';


GO
PRINT N'Creating [dbo].[PurgerwaveformParameters].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'PurgerwaveformParameters';


GO
PRINT N'Creating [dbo].[RemoveAlarm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RemoveAlarm';


GO
PRINT N'Creating [dbo].[RestrictUnit].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save the restricted organization of a role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RestrictUnit';


GO
PRINT N'Creating [dbo].[RetrieveBeatTimeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveBeatTimeLog';


GO
PRINT N'Creating [dbo].[RetrieveBeatTimeLogWithSampleRate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveBeatTimeLogWithSampleRate';


GO
PRINT N'Creating [dbo].[RetrieveBinInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveBinInfo';


GO
PRINT N'Creating [dbo].[RetrievePacerSpikeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrievePacerSpikeLog';


GO
PRINT N'Creating [dbo].[RetrieveTemplateSetInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveTemplateSetInfo';


GO
PRINT N'Creating [dbo].[RetrieveTrendData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveTrendData';


GO
PRINT N'Creating [dbo].[SaveArrhythmiaEventTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveArrhythmiaEventTime';


GO
PRINT N'Creating [dbo].[SaveEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEvent';


GO
PRINT N'Creating [dbo].[SaveEventBeatTimeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventBeatTimeLog';


GO
PRINT N'Creating [dbo].[SaveEventCalipers].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventCalipers';


GO
PRINT N'Creating [dbo].[SaveEventLeadLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventLeadLog';


GO
PRINT N'Creating [dbo].[SaveEventMonitorEventLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventMonitorEventLog';


GO
PRINT N'Creating [dbo].[SaveEventVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventVitals';


GO
PRINT N'Creating [dbo].[SaveEventWaveForm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventWaveForm';


GO
PRINT N'Creating [dbo].[SendRequestPatientTwelveLeadReport].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SendRequestPatientTwelveLeadReport';


GO
PRINT N'Creating [dbo].[SetPatientDataCollect].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SetPatientDataCollect';


GO
PRINT N'Creating [dbo].[UpdateAnalysisInsertDt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update analysis insert date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdateAnalysisInsertDt';


GO
PRINT N'Creating [dbo].[UpdatePatientSavedEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdatePatientSavedEvent';


GO
PRINT N'Creating [dbo].[UpdatePatientTwelveLeadReport].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdatePatientTwelveLeadReport';


GO
PRINT N'Creating [dbo].[UpdatePatientTwelveLeadReportNew].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdatePatientTwelveLeadReportNew';


GO
PRINT N'Creating [dbo].[UpdateRole].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update Role and Security tables', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdateRole';


GO
PRINT N'Creating [dbo].[UpdateUserSetting].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdateUserSetting';


GO
PRINT N'Creating [dbo].[UpdateXmlValue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdateXmlValue';


GO
PRINT N'Creating [dbo].[usp_AddApplicationSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add application settings.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_AddApplicationSettings';


GO
PRINT N'Creating [dbo].[usp_AddNewGatewaySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_AddNewGatewaySettings';


GO
PRINT N'Creating [dbo].[usp_CA_CheckETSession].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Check the latest electronic transmitter sequence number for a patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_CheckETSession';


GO
PRINT N'Creating [dbo].[usp_CA_Get12LeadPrintJobByPatientnPrintJobsIDs].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_Get12LeadPrintJobByPatientnPrintJobsIDs';


GO
PRINT N'Creating [dbo].[usp_CA_Get12LeadPrintJobByPatientnReportIDs].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_Get12LeadPrintJobByPatientnReportIDs';


GO
PRINT N'Creating [dbo].[usp_CA_GetEtPrintJobs].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns the ET print alarm job information.  If an unknown or invalid locale is specified, English will be used.  @PatientId: The unique patient identifier to get print jobs associated with.  @alarmStartMinUTC: The minimum/earliest alarm start date time to retrieve (for retrieving alarms in a window/range) in UTC.  @alarmStartMaxUTC: The maximum/lastest alarm start date time to retrieve (for retrieving alarms in a window/range) in UTC.  @locale: The two digit locale to translate the descriptions string into.  Returns: [AlarmId]: The unique alarm identifier associated with the print job, [Description]: A localized and formatted alarm description, [AlarmStartTimeUTC]: The date/time that the alarm was created/started in UTC, [NumPages]: The estimated number of pages of this et print alarm print report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetEtPrintJobs';


GO
PRINT N'Creating [dbo].[usp_CA_GetFactorySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetFactorySettings';


GO
PRINT N'Creating [dbo].[usp_CA_GetGlobalSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the global settings', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetGlobalSettings';


GO
PRINT N'Creating [dbo].[usp_CA_GetLegacyPatientWaveForms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get Clinical Access legacy patient waveforms.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetLegacyPatientWaveForms';


GO
PRINT N'Creating [dbo].[usp_CA_GetPatientSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the patient settings.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPatientSettings';


GO
PRINT N'Creating [dbo].[usp_CA_GetPatientWaveForms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the waveform data for the given list of channels from which to make Waveform requests.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPatientWaveForms';


GO
PRINT N'Creating [dbo].[usp_CA_GetPrintJobBitMapByJobIDnPageNo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPrintJobBitMapByJobIDnPageNo';


GO
PRINT N'Creating [dbo].[usp_CA_GetPrintJobByPatientnPrintJobIDsnPageNo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPrintJobByPatientnPrintJobIDsnPageNo';


GO
PRINT N'Creating [dbo].[usp_CA_GetPrintJobsListByPatientIDnStartnEndDt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPrintJobsListByPatientIDnStartnEndDt';


GO
PRINT N'Creating [dbo].[usp_CA_GetPrintJobWaveformData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPrintJobWaveformData';


GO
PRINT N'Creating [dbo].[usp_CA_GetProcStatList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetProcStatList';


GO
PRINT N'Creating [dbo].[usp_CA_GetUnitSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the unit settings.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetUnitSettings';


GO
PRINT N'Creating [dbo].[usp_CA_SaveConfigurationSetting].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Saves the configuration setting.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_SaveConfigurationSetting';


GO
PRINT N'Creating [dbo].[usp_CEI_DL_GetLiveVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_DL_GetLiveVitals';


GO
PRINT N'Creating [dbo].[usp_CEI_GetAlarmTextAnd12SecWaveForm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetAlarmTextAnd12SecWaveForm';


GO
PRINT N'Creating [dbo].[usp_CEI_GetAlarmTextAnd6SecWaveForm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetAlarmTextAnd6SecWaveForm';


GO
PRINT N'Creating [dbo].[usp_CEI_GetAlarmTextOnly].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'CEI Procedures - QueryTextOnly - GetAlarmTextOnly', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetAlarmTextOnly';


GO
PRINT N'Creating [dbo].[usp_CEI_GetAlarmWaveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the waveforms for the Alarm in CEI.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetAlarmWaveform';


GO
PRINT N'Creating [dbo].[usp_CEI_GetLatestAlarms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the latest Alarms for CEI.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetLatestAlarms';


GO
PRINT N'Creating [dbo].[usp_CEI_GetLicense].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetLicense';


GO
PRINT N'Creating [dbo].[usp_CEI_GetLicenseUnits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetLicenseUnits';


GO
PRINT N'Creating [dbo].[usp_CEI_GetQueryCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetQueryCode';


GO
PRINT N'Creating [dbo].[usp_CEI_GetSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetSettings';


GO
PRINT N'Creating [dbo].[usp_CEI_GetTwo6SecWaveSeperate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetTwo6SecWaveSeperate';


GO
PRINT N'Creating [dbo].[usp_CEI_GetVitalSigns].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetVitalSigns';


GO
PRINT N'Creating [dbo].[usp_CEI_InsertLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_InsertLog';


GO
PRINT N'Creating [dbo].[usp_CEI_UpdateLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_UpdateLog';


GO
PRINT N'Creating [dbo].[usp_CheckCodeUnique].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CheckCodeUnique';


GO
PRINT N'Creating [dbo].[usp_CheckNewIDUnique].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CheckNewIDUnique';


GO
PRINT N'Creating [dbo].[usp_Delete_OrganizationEntityByCategory].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_Delete_OrganizationEntityByCategory';


GO
PRINT N'Creating [dbo].[usp_DeleteApplicationSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Stored procedure for removing all application settings for a specific ApplicationType and optionally filtered by instanceId and/or key. If instanceId is specified then only application settings for that specific instanceId will be deleted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteApplicationSettings';


GO
PRINT N'Creating [dbo].[usp_DeleteFacilityWithChildren].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteFacilityWithChildren';


GO
PRINT N'Creating [dbo].[usp_DeleteGatewayDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteGatewayDetails';


GO
PRINT N'Creating [dbo].[usp_DeleteGatewayServerDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteGatewayServerDetails';


GO
PRINT N'Creating [dbo].[usp_DeleteMiscCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteMiscCode';


GO
PRINT N'Creating [dbo].[usp_DeleteMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Delete UV or XTR monitor from the appropriate table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteMonitor';


GO
PRINT N'Creating [dbo].[usp_DeleteSendSys].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteSendSys';


GO
PRINT N'Creating [dbo].[usp_DL_ETR_AddGatewaySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_ETR_AddGatewaySettings';


GO
PRINT N'Creating [dbo].[usp_DL_ETR_DeleteGatewayDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_ETR_DeleteGatewayDetails';


GO
PRINT N'Creating [dbo].[usp_DL_ETR_GetGatewaySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_ETR_GetGatewaySettings';


GO
PRINT N'Creating [dbo].[usp_DL_ETR_UpdateGatewaySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_ETR_UpdateGatewaySettings';


GO
PRINT N'Creating [dbo].[usp_DL_UV_AddGatewaySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_UV_AddGatewaySettings';


GO
PRINT N'Creating [dbo].[usp_DL_UV_DeleteGatewayDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_UV_DeleteGatewayDetails';


GO
PRINT N'Creating [dbo].[usp_DL_UV_GetGatewaySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_UV_GetGatewaySettings';


GO
PRINT N'Creating [dbo].[usp_DL_UV_UpdateGatewaySettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_UV_UpdateGatewaySettings';


GO
PRINT N'Creating [dbo].[usp_DM3_AddMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddMonitor';


GO
PRINT N'Creating [dbo].[usp_DM3_AddorUpdateVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddorUpdateVitals';


GO
PRINT N'Creating [dbo].[usp_DM3_AddPatient].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddPatient';


GO
PRINT N'Creating [dbo].[usp_DM3_AddPatientMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add or Update Encounter Table values in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddPatientMonitor';


GO
PRINT N'Creating [dbo].[usp_DM3_AddPatientOrder].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add or Update Encounter Table values in DM3 Loader', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddPatientOrder';


GO
PRINT N'Creating [dbo].[usp_DM3_AddPerson].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddPerson';


GO
PRINT N'Creating [dbo].[usp_DM3_AddResults].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add or Update Encounter Table values in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddResults';


GO
PRINT N'Creating [dbo].[usp_DM3_DeleteVitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_DeleteVitals';


GO
PRINT N'Creating [dbo].[usp_DM3_DischargePatient].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_DischargePatient';


GO
PRINT N'Creating [dbo].[usp_DM3_GetChannelType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetChannelType';


GO
PRINT N'Creating [dbo].[usp_DM3_GetCodeID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetCodeID';


GO
PRINT N'Creating [dbo].[usp_DM3_GetGatewayDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetGatewayDetails';


GO
PRINT N'Creating [dbo].[usp_DM3_GetMonitorEncounter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetMonitorEncounter';


GO
PRINT N'Creating [dbo].[usp_DM3_GetPatientInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetPatientInformation';


GO
PRINT N'Creating [dbo].[usp_DM3_GetPatientMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetPatientMonitor';


GO
PRINT N'Creating [dbo].[usp_DM3_GetPatientOrder].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetPatientOrder';


GO
PRINT N'Creating [dbo].[usp_DM3_GetproductAccessDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetproductAccessDetails';


GO
PRINT N'Creating [dbo].[usp_DM3_UpdateActive_sw_EncounterId_in_PatientMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateActive_sw_EncounterId_in_PatientMonitor';


GO
PRINT N'Creating [dbo].[usp_DM3_UpdateActive_sw_in_PatientMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateActive_sw_in_PatientMonitor';


GO
PRINT N'Creating [dbo].[usp_DM3_UpdateDateInEncounter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update MonitorId and EncounterId in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateDateInEncounter';


GO
PRINT N'Creating [dbo].[usp_DM3_UpdateLastPoleDate_ResultDate_in_patientmonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateLastPoleDate_ResultDate_in_patientmonitor';


GO
PRINT N'Creating [dbo].[usp_DM3_UpdateMrnMap].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateMrnMap';


GO
PRINT N'Creating [dbo].[usp_DM3_UpdatePerson].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add or Update Encounter Table values in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdatePerson';


GO
PRINT N'Creating [dbo].[usp_GatewayServerDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GatewayServerDetails';


GO
PRINT N'Creating [dbo].[usp_Get_AuditLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_Get_AuditLog';


GO
PRINT N'Creating [dbo].[usp_Get_AuditLogDefault].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_Get_AuditLogDefault';


GO
PRINT N'Creating [dbo].[usp_GetAllProducts].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetAllProducts';


GO
PRINT N'Creating [dbo].[usp_GetApplicationSettingInstances].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve all Instance Ids for a given ApplicationSettings Application Type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetApplicationSettingInstances';


GO
PRINT N'Creating [dbo].[usp_GetApplicationSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve all application settings for a specific ApplicationType optionally filtered by instanceId and/or key.  If instanceId is specified then only application settings for that specific instanceId will be returned.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetApplicationSettings';


GO
PRINT N'Creating [dbo].[usp_GetCEISettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCEISettings';


GO
PRINT N'Creating [dbo].[usp_GetCodeAndCategoryList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCodeAndCategoryList';


GO
PRINT N'Creating [dbo].[usp_GetCodeByCategoryCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets code id by category code.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCodeByCategoryCode';


GO
PRINT N'Creating [dbo].[usp_GetCodeIDByName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCodeIDByName';


GO
PRINT N'Creating [dbo].[usp_GetCodeList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCodeList';


GO
PRINT N'Creating [dbo].[usp_GetDebugSettings_FromDb].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetDebugSettings_FromDb';


GO
PRINT N'Creating [dbo].[usp_GetEventList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetEventList';


GO
PRINT N'Creating [dbo].[usp_GetEventLogDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetEventLogDetails';


GO
PRINT N'Creating [dbo].[usp_GetFacility].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetFacility';


GO
PRINT N'Creating [dbo].[usp_GetFeaturelstForProducts].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetFeaturelstForProducts';


GO
PRINT N'Creating [dbo].[usp_GetGatewayDetailsByCategoryAndMethod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetGatewayDetailsByCategoryAndMethod';


GO
PRINT N'Creating [dbo].[usp_GetGatewayDetailsByCategoryCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetGatewayDetailsByCategoryCode';


GO
PRINT N'Creating [dbo].[usp_GetGateWaySettingsByDeviceType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetGateWaySettingsByDeviceType';


GO
PRINT N'Creating [dbo].[usp_GetGender].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetGender';


GO
PRINT N'Creating [dbo].[usp_GetHL7LogInQueue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogInQueue';


GO
PRINT N'Creating [dbo].[usp_GetHL7LogList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogList';


GO
PRINT N'Creating [dbo].[usp_GetHL7LogListBoth].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogListBoth';


GO
PRINT N'Creating [dbo].[usp_GetHL7LogListInbound].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogListInbound';


GO
PRINT N'Creating [dbo].[usp_GetHL7LogListOutbound].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get HL7 Log List Outbound', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogListOutbound';


GO
PRINT N'Creating [dbo].[usp_GetHL7LogOutQueue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogOutQueue';


GO
PRINT N'Creating [dbo].[usp_GetKeyvalue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetKeyvalue';


GO
PRINT N'Creating [dbo].[usp_GetMethodCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetMethodCode';


GO
PRINT N'Creating [dbo].[usp_GetMonitorList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve an optionally filtered list of the monitors attached to the ICS System.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetMonitorList';


GO
PRINT N'Creating [dbo].[usp_GetNetwork].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetNetwork';


GO
PRINT N'Creating [dbo].[usp_GetOrganization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetOrganization';


GO
PRINT N'Creating [dbo].[usp_GetOrganizationInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Fetch the organization details based on the Organization code or Category Code.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetOrganizationInformation';


GO
PRINT N'Creating [dbo].[usp_GetPatientIdentificationType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets the Patient Identification for the ICS Application.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPatientIdentificationType';


GO
PRINT N'Creating [dbo].[usp_GetPatientInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Inline queries to SPs/ICS Admin Component.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPatientInfo';


GO
PRINT N'Creating [dbo].[usp_GetPatientInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get basic patient information for a list of devices.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPatientInformation';


GO
PRINT N'Creating [dbo].[usp_GetPatientList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPatientList';


GO
PRINT N'Creating [dbo].[usp_GetPrintJobList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPrintJobList';


GO
PRINT N'Creating [dbo].[usp_GetProductSecurity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetProductSecurity';


GO
PRINT N'Creating [dbo].[usp_GetSelectedProducts].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetSelectedProducts';


GO
PRINT N'Creating [dbo].[usp_GetSendSystemList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetSendSystemList';


GO
PRINT N'Creating [dbo].[usp_GetSysgenDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetSysgenDetails';


GO
PRINT N'Creating [dbo].[usp_GetSystemLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetSystemLog';


GO
PRINT N'Creating [dbo].[usp_GetUnit].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve a list of unit names for use in ICS Admin.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetUnit';


GO
PRINT N'Creating [dbo].[usp_GetUnitDetail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetUnitDetail';


GO
PRINT N'Creating [dbo].[usp_GetUnitLicense].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get Unit license by Unit Code Or Unit Id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetUnitLicense';


GO
PRINT N'Creating [dbo].[usp_GetVersionList].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetVersionList';


GO
PRINT N'Creating [dbo].[usp_GetVisits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetVisits';


GO
PRINT N'Creating [dbo].[usp_HL7_GetAttendingHcpData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get attending HCP data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetAttendingHcpData';


GO
PRINT N'Creating [dbo].[usp_HL7_GetCommonOrderData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the common order information for a given patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetCommonOrderData';


GO
PRINT N'Creating [dbo].[usp_HL7_GetInboundMessages].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient details inserted from ADTA01.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetInboundMessages';


GO
PRINT N'Creating [dbo].[usp_HL7_GetLegacyGdsCodes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve the legacy Gds codes.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetLegacyGdsCodes';


GO
PRINT N'Creating [dbo].[usp_HL7_GetLiveVitalsAndPatientDataByQuery].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the vitals and other patient data of all the active patients to generate the Oru messages', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetLiveVitalsAndPatientDataByQuery';


GO
PRINT N'Creating [dbo].[usp_HL7_GetLiveVitalsAndPatientDataForOru].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the vitals and other patient data of all the active patients to generate the Oru messages', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetLiveVitalsAndPatientDataForOru';


GO
PRINT N'Creating [dbo].[usp_HL7_GetObservationRequestData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get HL7 observation request data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetObservationRequestData';


GO
PRINT N'Creating [dbo].[usp_HL7_GetObservationsByPatientId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retreive the patient observations by patient id.  @PatientId is mandatory.  If @StartTime and @EndTime are passed it will return the observations between the given time span', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetObservationsByPatientId';


GO
PRINT N'Creating [dbo].[usp_HL7_GetPatientVisitInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient visit data.  1) Query by Patient Id  2) Query by Patient Id and Monitor Id', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetPatientVisitInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_GetPersonAndPatientDataByPatientID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient details by patient id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetPersonAndPatientDataByPatientID';


GO
PRINT N'Creating [dbo].[usp_HL7_GetPV1SegmentDataFromADTMsg].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient details by Account Number.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetPV1SegmentDataFromADTMsg';


GO
PRINT N'Creating [dbo].[usp_HL7_GetUnitLicense].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get Unit license by Unit Code Or Unit ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetUnitLicense';


GO
PRINT N'Creating [dbo].[usp_HL7_InsertHL7Ack].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert HL7 Ack Message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertHL7Ack';


GO
PRINT N'Creating [dbo].[usp_HL7_InsertHL7InboundMessage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert HL7 inbound message', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertHL7InboundMessage';


GO
PRINT N'Creating [dbo].[usp_HL7_InsertHL7OutMessage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the HL7 outbound message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertHL7OutMessage';


GO
PRINT N'Creating [dbo].[usp_HL7_InsertInboundMessage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'To link the HL7InboundMessage table with HL7 patients.  HL7_InsertInboundMessage is used to insert inbound messages of type ADT and QRY.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertInboundMessage';


GO
PRINT N'Creating [dbo].[usp_HL7_QueryPatientDataAndResults].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the patient data and results for the given HL7 QRY02.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_QueryPatientDataAndResults';


GO
PRINT N'Creating [dbo].[usp_HL7_SaveOruMessages].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the legacy Gds codes', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SaveOruMessages';


GO
PRINT N'Creating [dbo].[usp_HL7_SavePatientInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert HL7 patient information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SavePatientInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_SetAddressInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the HL7 address information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SetAddressInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_SetHL7InboundMessage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update HL7INQUEUE.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SetHL7InboundMessage';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdateAccountInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the patient Account Information from HL7 component.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateAccountInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdateEncounterInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateEncounterInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdateEncounterMapInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateEncounterMapInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdateHCPInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateHCPInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdateInboundMessageResponse].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update status of inbound messages of type ADT and QRY.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateInboundMessageResponse';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdateInboundMessageStatus].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the Inbound Response message of type ADT and QRY.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateInboundMessageStatus';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdateMrnInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateMrnInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdatePatientInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Updates patient Demographics related to HL7 tables.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdatePatientInfo';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdatePatientInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdatePatientInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdatePatientVisitInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the patients Visit Information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdatePatientVisitInformation';


GO
PRINT N'Creating [dbo].[usp_HL7_UpdatePersonDemographics].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the persons demographics.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdatePersonDemographics';


GO
PRINT N'Creating [dbo].[usp_IcsPrintSvc_GetActivePrintItem].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_IcsPrintSvc_GetActivePrintItem';


GO
PRINT N'Creating [dbo].[usp_IcsPrintSvc_LoadPrintItems].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_IcsPrintSvc_LoadPrintItems';


GO
PRINT N'Creating [dbo].[usp_InsertAccountInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert Account Information from any component @AccountId, @orgId, @accountNumber are mandatory and the remaining are optional with default NULL values', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertAccountInformation';


GO
PRINT N'Creating [dbo].[usp_InsertEncounterInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert Encounter information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertEncounterInformation';


GO
PRINT N'Creating [dbo].[usp_InsertEncounterMapInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert Encounter map information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertEncounterMapInformation';


GO
PRINT N'Creating [dbo].[usp_InsertMiscCodeDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertMiscCodeDetails';


GO
PRINT N'Creating [dbo].[usp_InsertMrnInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the patient MRN Information from any component @organizationId, @mrn1 is mandatory and the remaining are optional with default NULL values', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertMrnInformation';


GO
PRINT N'Creating [dbo].[usp_InsertOrganizationInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the Organization Information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertOrganizationInformation';


GO
PRINT N'Creating [dbo].[usp_InsertPersonDemographics].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the persons demographic information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertPersonDemographics';


GO
PRINT N'Creating [dbo].[usp_InsertSendingSystemInformation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the sending system details.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertSendingSystemInformation';


GO
PRINT N'Creating [dbo].[usp_InsertSendSysDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertSendSysDetails';


GO
PRINT N'Creating [dbo].[usp_IsVIPPatient].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_IsVIPPatient';


GO
PRINT N'Creating [dbo].[fn_HL7_GetPatientIdFromQueryItemType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'To get the patient details inserted from ADTA01 FOR QRY - HL7 BEGIN - Retrieves the patient Id from given query item type (MRN, ACC, NODE ID or NODE NAME)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fn_HL7_GetPatientIdFromQueryItemType';


GO
PRINT N'Creating [dbo].[fnDateTimeToFileTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert datetime to filetime format', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnDateTimeToFileTime';


GO
PRINT N'Creating [dbo].[fnFileTimeToDateTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert filetime to local datetime format', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnFileTimeToDateTime';


GO
PRINT N'Creating [dbo].[fnLocalDateTimeToUtcTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert the local datetime to UTC datetime.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnLocalDateTimeToUtcTime';


GO
PRINT N'Creating [dbo].[fnMarkIdAsDuplicate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Mark ID as duplicate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnMarkIdAsDuplicate';


GO
PRINT N'Creating [dbo].[fnUtcDateTimeToLocalTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert the UTC datetime to the local datetime.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnUtcDateTimeToLocalTime';


GO
PRINT N'Creating [dbo].[fnZeroIfBigger].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return 0 if value is greater than maxValue, otherwise return the value.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnZeroIfBigger';


GO
PRINT N'Creating [dbo].[FQDN].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve the fully qualified domain name in which the SQL Server resides.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'FQDN';


GO
PRINT N'Creating [dbo].[AlarmResources].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AlarmResources';


GO
PRINT N'Creating [dbo].[AlarmsStatusData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AlarmsStatusData';


GO
PRINT N'Creating [dbo].[AnalysisEvents].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains arrhythmia events. Has additional PK of ''type'' because it contains one row for each type of event for that analysis', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AnalysisEvents';


GO
PRINT N'Creating [dbo].[AnalysisTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains the start and end time of the analysis (one row for each user/patient analysis)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AnalysisTime';


GO
PRINT N'Creating [dbo].[ApplicationSettings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Application settings', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ApplicationSettings';


GO
PRINT N'Creating [dbo].[AuditLogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains audit log information', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AuditLogData';


GO
PRINT N'Creating [dbo].[cdr_document_group].[node_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A system assigned random ID for this node.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group', @level2type = N'COLUMN', @level2name = N'node_id';


GO
PRINT N'Creating [dbo].[cdr_document_group].[node_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name that is displayed in the tree.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group', @level2type = N'COLUMN', @level2name = N'node_name';


GO
PRINT N'Creating [dbo].[cdr_document_group].[parent_node_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Defines the parent node for this node. If NULL this is a root level node. (can have multiple root level nodes).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group', @level2type = N'COLUMN', @level2name = N'parent_node_id';


GO
PRINT N'Creating [dbo].[cdr_document_group].[rank].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Defines the order of the nodes in the tree. They are loaded in this order.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group', @level2type = N'COLUMN', @level2name = N'rank';


GO
PRINT N'Creating [dbo].[cdr_document_group].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines a grouping of documents for document imaging. A site defines a "tree" structure that documents are mapped into. This table defines that tree.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group';


GO
PRINT N'Creating [dbo].[cdr_navigation_button].[descr].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Text to be displayed on button', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'descr';


GO
PRINT N'Creating [dbo].[cdr_navigation_button].[form_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of form to display if button clicked', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'form_name';


GO
PRINT N'Creating [dbo].[cdr_navigation_button].[image_index].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Index to button image list which tells which image to display on button', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'image_index';


GO
PRINT N'Creating [dbo].[cdr_navigation_button].[node_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to TEST_GROUP. if form is a result screen, the node_id of result to display.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'node_id';


GO
PRINT N'Creating [dbo].[cdr_navigation_button].[position].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Order of the button on screen (1,2,3..) 1 is the first button on the left side of the screen.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'position';


GO
PRINT N'Creating [dbo].[cdr_navigation_button].[shortcut].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Short cut key for the button', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'shortcut';


GO
PRINT N'Creating [dbo].[cdr_navigation_button].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table holds the information about the navigation buttons for the front end application. This includes the color, image, whether it is visible or not and what form name is associated with the button.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button';


GO
PRINT N'Creating [dbo].[cdr_restricted_organization].[organization_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The id of the unit which is restricted for given user_category_id. FK to ORGANIZATION', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_restricted_organization', @level2type = N'COLUMN', @level2name = N'organization_id';


GO
PRINT N'Creating [dbo].[cdr_restricted_organization].[user_role_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'User category id restricted in the given unit.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_restricted_organization', @level2type = N'COLUMN', @level2name = N'user_role_id';


GO
PRINT N'Creating [dbo].[cdr_restricted_organization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The RESTRICTED_ORGANIZATION table identifies Nursing Units whose patient related information is secured from the general user population. The users under the given user category id are not allowed to access the patients in the given department code (unless they are given ability to view patients on restricted units).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_restricted_organization';


GO
PRINT N'Creating [dbo].[cfgValuesFactory].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains factory defaults for CH settings. ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cfgValuesFactory';


GO
PRINT N'Creating [dbo].[cfgValuesGlobal].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains global CH settings (gets populated if user goes into ICS Admin and overwrites factory defaults). type_cd and cfg_name should be PKs.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cfgValuesGlobal';


GO
PRINT N'Creating [dbo].[cfgValuesPatient].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains CH patient settings (gets populated if user goes into CH and modifies settings). type_cd, cfg_name, and patient_id should be PKs.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cfgValuesPatient';


GO
PRINT N'Creating [dbo].[cfgValuesUnit].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains CH unit settings (gets populated if user goes into ICS Admin and modifies settings for a given unit). type_cd, cfg_name, and unit_id should be PKs.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cfgValuesUnit';


GO
PRINT N'Creating [dbo].[ChannelInfoData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ChannelInfoData';


GO
PRINT N'Creating [dbo].[DeviceInfoData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DeviceInfoData';


GO
PRINT N'Creating [dbo].[Devices].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Devices';


GO
PRINT N'Creating [dbo].[DeviceSessions].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Device session', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DeviceSessions';


GO
PRINT N'Creating [dbo].[Enums].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Enums';


GO
PRINT N'Creating [dbo].[EventsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Data from the XTR/ETR receivers.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'EventsData';


GO
PRINT N'Creating [dbo].[GdsCodeMap].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'GdsCodeMap';


GO
PRINT N'Creating [dbo].[GeneralAlarmsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains information about general alarms for patient topic sessions.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'GeneralAlarmsData';


GO
PRINT N'Creating [dbo].[gts_input_rate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Stores input rate for monitored tables. This data can be used to evaluate for possible DataLoader problems', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'gts_input_rate';


GO
PRINT N'Creating [dbo].[gts_waveform_index_rate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Tracks input rate per channel and can be used to evaluate problems with waveform collection', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'gts_waveform_index_rate';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[HL7_text_long].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original HL7 message (if > 255 characters long).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'HL7_text_long';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[HL7_text_short].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original HL7 message (if <= 255 characters long)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'HL7_text_short';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[msg_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The internal ID for the HL7 message that was replayed. FK to the HL7_in_queue table (although it may be purged from that table).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'msg_no';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[msg_status].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The status of the original HL/7 message (before replaying).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'msg_status';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[outb_analyzed_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Not used', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'outb_analyzed_dt';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[processed_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the original message was processed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'processed_dt';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[processed_dur].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The duration (in milliseconds) that the original HL7 message took to process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'processed_dur';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[queued_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the original HL7 message was queued. When a message is replayed, this date is updated to the new time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'queued_dt';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[rec_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sequence # (if replayed multiple times).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'rec_id';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[thread_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The thread ID that the HL7 message was processed on. This is helpful for debugging.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'thread_id';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[who].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The person who caused the replay (either a login ID or name).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'who';


GO
PRINT N'Creating [dbo].[HL7_in_qhist].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores a history of any HL/7 messages that are replayed in order to correct data issues. The HL7 services provides a mechanism to replay an HL/7 message (with changes) in order to fix data problems. This table ensures any such replays are audited.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[HL7_text_long].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The actual HL7 message (if > 255 characters)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'HL7_text_long';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[HL7_text_short].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The actual HL7 message (if <= 255 characters)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'HL7_text_short';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msg_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A system generated number for this HL7 message. This number is incremented and guarantees that if sorted ascending, you will get the messages in the same order received from the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msg_no';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msg_status].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A status that represents the current state of this message. "N" = Not Read (not processed by loader yet) "R" = Processed by loader and no errors "E" = Processed by loader and error(s) occurred "any other value" = Ignored by loader', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msg_status';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msh_ack_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The ACK code in the MSH segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_ack_cd';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msh_control_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The control ID (Number that the external system identifies this message by). Control ID in the MSH segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_control_id';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msh_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time of the message (DateTime in the MSH segment). Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_dt';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msh_event_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The event code in the MSH segment (A08, R01, etc). Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_event_cd';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msh_msg_type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Message Type in the MSH segment (ADT, ORU, etc) . Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_msg_type';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msh_organization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sending organization (the organization in the MSH segment). Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_organization';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msh_system].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sending system (The sending system in the MSH segment) Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_system';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[msh_version].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Version field in the MSH segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_version';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[outb_analyzed_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Not used.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'outb_analyzed_dt';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient ID in the PID segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[pid_mrn].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The MRN field in the PID segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'pid_mrn';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[processed_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time the DataLoader finished processing a message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'processed_dt';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[processed_dur].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The # milliseconds that the DataLoader took to process this message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'processed_dur';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[pv1_visit_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Visit Number field in the PV1 segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'pv1_visit_no';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[queued_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time that this message was inserted into this table (within milliseconds of receiving it in the communicator).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'queued_dt';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[thread_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The thread # within the DataLoader that processed this message. It is generally a requirement that all messages for a given patient get processed in the same thread (otherwise they may get processed out of order).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'thread_id';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[who].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Not used.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'who';


GO
PRINT N'Creating [dbo].[HL7_in_queue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is the primary queuing table for inbound HL/7 messages. All messages that are destined for any Intesys product are stored in this table. The message is originally inserted into this table with a status of "N" (not read) and later the DataLoader takes the message and does the real work of parsing it and storing the data in the appropriate tables. If it succeeds, then it changes the status to "R" (read), otherwise it flags it with a status of "E" (error). Note: Usually sites are configured to purge all successful ("R") messages after several weeks. Keeping all HL/7 messages indefinitely is generally not practical.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[ack_msg_control_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column defines ACK message control id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'ack_msg_control_id';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[ack_organization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column contains information on Sending Facility from ACK message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'ack_organization';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[ack_system].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column contains information on Sending Application from ACK message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'ack_system';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[clientIP].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column indicates IP address of client to whom outbound message was send and from whom ACK should be received.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'clientIP';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[msg_control_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Message control id included in outbound messages.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'msg_control_id';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[msg_status].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This information indicates if valid ACK message was received from the client. The status can be R or E.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'msg_status';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[notes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field is not in use.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'notes';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[num_retries].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This information indicates how many from user-defined time message was sent to the client (error case).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'num_retries';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[received_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column indicates the DateTime ACK message was received from client system.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'received_dt';


GO
PRINT N'Creating [dbo].[HL7_msg_ack].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table keeps tracks of information from which client valid ACK was received on previously send outbound message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack';


GO
PRINT N'Creating [dbo].[HL7_msg_list].[list_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name assigned to this list. This is the value that is passed to the DataLoader to only process a certain list.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_list', @level2type = N'COLUMN', @level2name = N'list_name';


GO
PRINT N'Creating [dbo].[HL7_msg_list].[msg_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The msg_no in the HL7_in_queue table that is part of this list.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_list', @level2type = N'COLUMN', @level2name = N'msg_no';


GO
PRINT N'Creating [dbo].[HL7_msg_list].[seq].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sequence # (starting at 1) of this HL7 message within a list. The DataLoader processes them according to this sequence.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_list', @level2type = N'COLUMN', @level2name = N'seq';


GO
PRINT N'Creating [dbo].[HL7_msg_list].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table allows the creation of temporary "lists" of HL7 messages. The DataLoader can then be configured to only process a certain list. This is usefull for debugging DataLoaders, since DataLoaders normally process all unprocessed messages in the order they were queued.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_list';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[HL7_text_long].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'If an HL/7 message is more than 255 chars, then this represents the complete HL/7 message (most will be in here).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'HL7_text_long';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[HL7_text_short].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'If the HL/7 message is less than 255 chars, then the message is stored here.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'HL7_text_short';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[msg_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A system generated number for this message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msg_no';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[msg_status].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The status of the outbound HL/7 message (whether it has been sent or not) "N" = not sent yet "R" = sent "E" = error sending message', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msg_status';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[msh_event_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The HL/7 event code of this message (ex: A01, R01, etc).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msh_event_cd';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[msh_msg_type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This higher-level type of message (ex: ADT, ORU).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msh_msg_type';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[msh_organization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Organization identifier used in the MSH of the outbound message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msh_organization';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[msh_system].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sending system that is in the MSH of the outbound message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msh_system';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the patient table. This is the patient this message was generated for.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[queued_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time this HL/7 message was inserted into this table. Depending on the polling cycle and how backed up the receiver is, it may be a while before it is actually sent.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'queued_dt';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[sent_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time the message was successfully sent to the receiver.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'sent_dt';


GO
PRINT N'Creating [dbo].[HL7_out_queue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is a queue for outbound HL/7 messages. Any messages that are being sent to another system are first copied here. Once they are sent, the status of the message is changed. A batch process can remove rows from here once messages are sent.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue';


GO
PRINT N'Creating [dbo].[HL7InboundMessage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7InboundMessage';


GO
PRINT N'Creating [dbo].[HL7PatientLink].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7PatientLink';


GO
PRINT N'Creating [dbo].[int_12lead_report].[export_sw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether the report is active or not(?!?)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'export_sw';


GO
PRINT N'Creating [dbo].[int_12lead_report].[monitor_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The monitor ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'monitor_id';


GO
PRINT N'Creating [dbo].[int_12lead_report].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Original patient ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_12lead_report].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying a patient. Foreign key to the int_patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_12lead_report].[report_data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The 12 lead report data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'report_data';


GO
PRINT N'Creating [dbo].[int_12lead_report].[report_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time of the 12 lead report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'report_dt';


GO
PRINT N'Creating [dbo].[int_12lead_report].[report_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying a 12 lead report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'report_id';


GO
PRINT N'Creating [dbo].[int_12lead_report].[report_number].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Report sequence number used along with patient_id and report_dt to create unique ID for 12-Leads reports', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'report_number';


GO
PRINT N'Creating [dbo].[int_12lead_report].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the 12 lead reports collected from the monitor. Each record is uniquely identified by the report_id. The data in this table is populated by the monitor loader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[age].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient age.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'age';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[birthdate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient birthdate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'birthdate';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[height].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient height.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'height';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[id_number].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient MRN.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'id_number';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[insert_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time the row was inserted into the table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'insert_dt';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[interpretation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Description.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'interpretation';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[p_axis].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'P-axis for heart rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'p_axis';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[patient_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the patient on the 12-lead report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'patient_name';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[pr_interval].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'PR interval for heart rate', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'pr_interval';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[qrs_axis].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'QRS-axis for heart rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'qrs_axis';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[qrs_duration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'QRS duration for heart rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'qrs_duration';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[qt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'QT interval for heart rate', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'qt';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[qtc].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'QT interval corrected for heart rate', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'qtc';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[report_date].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Report date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'report_date';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[report_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying a 12-lead report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'report_id';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[report_time].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Report time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'report_time';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[sex].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient sex.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'sex';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[t_axis].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'T-axis for heart rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N't_axis';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[user_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying the user who added the 12-lead report edits', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'user_id';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[vent_rate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Ventilation rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'vent_rate';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[version_number].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The version number of the 12-lead report edits.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'version_number';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[weight].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient weight.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'weight';


GO
PRINT N'Creating [dbo].[int_12lead_report_edit].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores 12-lead report text edits. Each record is uniquely identified by the report_id and insert_dt. The data in this table is populated by the patsrv process. New records are added and no records are deleted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit';


GO
PRINT N'Creating [dbo].[int_12lead_report_new].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains 12-lead demographics, measurements, interpretation, and waveform data. The int_report column matches that in the int_12lead_report table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_new';


GO
PRINT N'Creating [dbo].[int_account].[account_close_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field identifies the date the account was closed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_close_dt';


GO
PRINT N'Creating [dbo].[int_account].[account_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID for this account. It is a system generated GUID that is guaranteed to always be unique.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_id';


GO
PRINT N'Creating [dbo].[int_account].[account_open_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field identifies the date the account was opened.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_open_dt';


GO
PRINT N'Creating [dbo].[int_account].[account_status_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the state that the ACCOUNT is in. This is defined in HL/7 (PV1).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_status_cid';


GO
PRINT N'Creating [dbo].[int_account].[account_xid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The external ACCOUNT number within the ORGANIZATION that owns the ACCOUNT. This is the account number that the facility/organization knows.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_xid';


GO
PRINT N'Creating [dbo].[int_account].[bad_debt_sw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A YES/NO flag that identifies an ACCOUNT is in delinquent status. If the transfer amount is greater than zero, the BAD_DEBT_SW will be set to (1). This is defined in the PV1 segment.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'bad_debt_sw';


GO
PRINT N'Creating [dbo].[int_account].[cur_bal_amt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount due for an ENCOUNTER. Sometimes referred to as the ''ACCOUNT BALANCE''. Defined in HL/7 (PV1)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'cur_bal_amt';


GO
PRINT N'Creating [dbo].[int_account].[organization_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization this account belongs to (one that created the account). FK to the organization table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'organization_id';


GO
PRINT N'Creating [dbo].[int_account].[tot_adjs_amt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount that was adjusted towards a unique ACCOUNT. Defined in HL/7 (PV1)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'tot_adjs_amt';


GO
PRINT N'Creating [dbo].[int_account].[tot_charges_amt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount that contains the total amount of charges for an ACCOUNT Defined in HL/7 (PV1)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'tot_charges_amt';


GO
PRINT N'Creating [dbo].[int_account].[tot_payments_amt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The total amount paid to a unique ACCOUNT. Defined in HL/7 (PV1).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'tot_payments_amt';


GO
PRINT N'Creating [dbo].[int_account].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores accounts associated with patients. HL/7 defines most of the account information in the PV1 segment. While P01 events contain the account details, summary level information is contained in the PV1 (which this table stores).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account';


GO
PRINT N'Creating [dbo].[int_address].[active_sw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether an address is active or not.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'active_sw';


GO
PRINT N'Creating [dbo].[int_address].[addr_loc_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the type of ADDRESS (business or residential) for this occurrence.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'addr_loc_cd';


GO
PRINT N'Creating [dbo].[int_address].[addr_type_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the category of the ADDRESS being described (e.g. billing, Mailing, Temporary, etc.). For Billing information, this value is routing information between the bill and the ENTITY.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'addr_type_cd';


GO
PRINT N'Creating [dbo].[int_address].[address_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The associated person, NOK, organization, etc. This is a FK to either the person/patient table, external_organization, NOK, etc. table. It is not easy to trace back who the owner for a given address is (because it could reside in one of several tables).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'address_id';


GO
PRINT N'Creating [dbo].[int_address].[city_nm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name of a city that identifies where the ADDRESS is located.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'city_nm';


GO
PRINT N'Creating [dbo].[int_address].[country_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name of the country that identifies where the ADDRESS is located. This is a FK to the MISC_CODE table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'country_cid';


GO
PRINT N'Creating [dbo].[int_address].[county_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code of the county that identifies where the ADDRESS is located. A code_id that references a code for the county where the ADDRESS is located, if null the ADDRESS This is a FK to the MISC_CODE table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'county_cid';


GO
PRINT N'Creating [dbo].[int_address].[line1_dsc].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description that identifies the line of an ADDRESS. First line of the address.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'line1_dsc';


GO
PRINT N'Creating [dbo].[int_address].[line2_dsc].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description that identifies the line of an ADDRESS. Second line of the address.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'line2_dsc';


GO
PRINT N'Creating [dbo].[int_address].[line3_dsc].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description that identifies the line of an ADDRESS. Third line of the address.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'line3_dsc';


GO
PRINT N'Creating [dbo].[int_address].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient ID (if linked). Used by MPI logic to "unlink" a patient if necessary.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_address].[seq_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the sequence or order of the ADDRESS. This allows multiple addresses of the same type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'seq_no';


GO
PRINT N'Creating [dbo].[int_address].[start_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When this data became active (i.e. when the data became valid for the given patient, etc).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'start_dt';


GO
PRINT N'Creating [dbo].[int_address].[state_code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The common postal authority approved code that represents the state or province where the address exists. This field is not a code_id since these codes are issued by the government or the region and generally do not change.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'state_code';


GO
PRINT N'Creating [dbo].[int_address].[zip_code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the postal/area code.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'zip_code';


GO
PRINT N'Creating [dbo].[int_address].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Store addresses for patients, NOK''s, guarantors, external organizations, etc. Any/all addresses stored for entities are stored in this table. The PK of this table is always a FK to another entity (such as the patient or organization). There really isn''t a way to go "out" from this table and determine what the address is for (i.e. it is not easy to determine what is the parent of any given address). Normal access is always from the "owner" record to the address(es).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address';


GO
PRINT N'Creating [dbo].[int_alarm].[alarm_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A text value representing the alarm Subtype (ie Vfib).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'alarm_cd';


GO
PRINT N'Creating [dbo].[int_alarm].[alarm_dsc].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The alarm annotation text.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'alarm_dsc';


GO
PRINT N'Creating [dbo].[int_alarm].[alarm_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying an alarm', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'alarm_id';


GO
PRINT N'Creating [dbo].[int_alarm].[alarm_level].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Alarm severity level', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'alarm_level';


GO
PRINT N'Creating [dbo].[int_alarm].[end_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date of the alarm', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'end_dt';


GO
PRINT N'Creating [dbo].[int_alarm].[end_ft].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The bigint representation of the utc end date of the alarm.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'end_ft';


GO
PRINT N'Creating [dbo].[int_alarm].[is_level_changed].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates if alarm level has changed during it''s lifetime', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'is_level_changed';


GO
PRINT N'Creating [dbo].[int_alarm].[is_stacked].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates if alarm type has changed during it''s lifetime', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'is_stacked';


GO
PRINT N'Creating [dbo].[int_alarm].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Original patient Id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_alarm].[patient_channel_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying a channel type. Foreign key to the int_channel_type table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'patient_channel_id';


GO
PRINT N'Creating [dbo].[int_alarm].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID indentifying a patient. Foreign key to the int_patient table', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_alarm].[start_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The start time of the alarm', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'start_dt';


GO
PRINT N'Creating [dbo].[int_alarm].[start_ft].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The bigint representation of the utc start time of the alarm', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'start_ft';


GO
PRINT N'Creating [dbo].[int_alarm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores alarm events collected from the monitor. Each record is uniquely identified by alarm_id. The data in this table is populated by the MonitorLoader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm';


GO
PRINT N'Creating [dbo].[int_alarm_retrieved].[alarm_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the int_alarm_event table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved', @level2type = N'COLUMN', @level2name = N'alarm_id';


GO
PRINT N'Creating [dbo].[int_alarm_retrieved].[annotation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Explanation of the event', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved', @level2type = N'COLUMN', @level2name = N'annotation';


GO
PRINT N'Creating [dbo].[int_alarm_retrieved].[insert_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the alarm event was retrieved.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved', @level2type = N'COLUMN', @level2name = N'insert_dt';


GO
PRINT N'Creating [dbo].[int_alarm_retrieved].[retrieved].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 - not retrieved 1 - retrieved.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved', @level2type = N'COLUMN', @level2name = N'retrieved';


GO
PRINT N'Creating [dbo].[int_alarm_retrieved].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores information about alarm event retrieval.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved';


GO
PRINT N'Creating [dbo].[int_alarm_waveform].[alarm_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the int_alarm_event table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'alarm_id';


GO
PRINT N'Creating [dbo].[int_alarm_waveform].[insert_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the alarm data was taken.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'insert_dt';


GO
PRINT N'Creating [dbo].[int_alarm_waveform].[retrieved].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 - not retrieved 1 - retrieved.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'retrieved';


GO
PRINT N'Creating [dbo].[int_alarm_waveform].[seq_num].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequential number of the data: 1, 2', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'seq_num';


GO
PRINT N'Creating [dbo].[int_alarm_waveform].[waveform_data].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Raw waveform data is stored here. It is in an unprocessed state from the monitor.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'waveform_data';


GO
PRINT N'Creating [dbo].[int_alarm_waveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the raw waveform data of the alarm event (ECG). It refers to the int_alarm_event table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform';


GO
PRINT N'Creating [dbo].[int_allergy].[active_sw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether this allergy is still active. Allergies can be "deactivated" if the allergy no longer persists.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'active_sw';


GO
PRINT N'Creating [dbo].[int_allergy].[allergy_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The allergy code id for the patient/encounter. FK to the MISC_CODE table (cat_code = ''ALGRY''). For each pat_ent_id/enc_ent_id this  code id will be unique. HL7: Seg AL1, Item# 00205.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'allergy_cid';


GO
PRINT N'Creating [dbo].[int_allergy].[allergy_type_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of allergy. For example:   DA Drug Allergy   FA  Food Allergy   MA  Misc Allergy   MC  Misc Contraindication', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'allergy_type_cid';


GO
PRINT N'Creating [dbo].[int_allergy].[identification_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the allergy was identified. HL7 - Seg AL1, Item# 00208.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'identification_dt';


GO
PRINT N'Creating [dbo].[int_allergy].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient ID (if linked). Used by MPI logic to "unlink" a patient if necessary.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_allergy].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient this allergy belongs to. FK to the PATIENT table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_allergy].[reaction].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Short textual description of the specific allergy reaction (convulsions, sneeze, rash, etc.). HL7 - Seg AL1, Item# 00207.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'reaction';


GO
PRINT N'Creating [dbo].[int_allergy].[severity_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The severity of the allergy. For example:   SV  Severe   MO Moderate   MI   Mild. FK to the misc code table (cat = "ALGSEV"). HL7 - Seg AL1, Item# 00206.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'severity_cid';


GO
PRINT N'Creating [dbo].[int_allergy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data for allergies on a patient for an encounter. It can also store "lifetime" or permanent allergies (ones that are independent of encounters).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy';


GO
PRINT N'Creating [dbo].[int_audit_log].[application_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The application that triggered the log entry. It may be NULL if the portal generated the entry or some other non-product specific action caused the entry.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'application_id';


GO
PRINT N'Creating [dbo].[int_audit_log].[audit_descr].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The description of the audit event. Some key data may be encoded in the description.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'audit_descr';


GO
PRINT N'Creating [dbo].[int_audit_log].[audit_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time the event was logged (not necessary the exact time the event occurred).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'audit_dt';


GO
PRINT N'Creating [dbo].[int_audit_log].[audit_type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code (number) of the type of security event.  These are hard-coded in each application (module). They are not codified in a database table at this time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'audit_type';


GO
PRINT N'Creating [dbo].[int_audit_log].[detail_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The result detail record that this audit event occurred for (if known). FK to the results table(s).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'detail_id';


GO
PRINT N'Creating [dbo].[int_audit_log].[device_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The IP Address of the machine where the information was accessed. Either the hostname or the Address. OR, this could be some other meaningful description of where the data was accessed (in the browser, it may be whatever the web server has access to).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'device_name';


GO
PRINT N'Creating [dbo].[int_audit_log].[encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this audit event occurred on (if known). FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'encounter_id';


GO
PRINT N'Creating [dbo].[int_audit_log].[login_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The user that triggered this audit log entry. FK to their int_user table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'login_id';


GO
PRINT N'Creating [dbo].[int_audit_log].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_audit_log].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient record that was accessed. It is possible that this log entry is not patient related in which case this column will be NULL. FK to the patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_audit_log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table logs information that pertains to PATIENT access. Any time the USER accesses a PATIENT, the middle tier will log the accessing information.This information is logged everytime the USER goes beyond the PATIENT_LIST screen. This log is also used for any other logged activities that involve data access (i.e. VIP overrides, search overrides, etc.). Certain modules may have additional log tables to handle unique or high-volume audit requirements. This is intended to only store user-generated events that need to be recorded for very long time periods (or indefinitely).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log';


GO
PRINT N'Creating [dbo].[int_autoupdate].[action].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The actual action text to perform. Some examples are: download,cowboys,jeffk,horse,Setup.exe,/cdrversions/5.10.14,$carewindows" downloadrun,cowboys,jeffk,horse,Setup.exe,/cdrversions/5.10.14,$temp" regfile,cowboys,jeffk,horse,Reg1.Reg,/RegFiles,$temp" ReplaceSelf,cowboys,jeffk,horse,/AutoUpdater" regfile,cowboys,jeffk,horse,chgtime.reg,/Regfiles,$temp" message,300,Carewindows will exit in 10 seconds to be replaced with a new version" kill,carewindows" download,cowboys,jeffk,horse,carewindows.exe,/cdrversions/jefftest,$CAREWINDOWS" run,False,$CAREWINDOWS,carewindows.exe" run,False,$CAREWINDOWS,cwcfg.exe" download,cowboys,jeffk,horse,carewindows.exe,/carewindows/55,$carewindows"', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate', @level2type = N'COLUMN', @level2name = N'action';


GO
PRINT N'Creating [dbo].[int_autoupdate].[disabled].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'NULL or zero if you want to have the autoupdate server tell the clients to skip over updating this action. Instead of sending the acton text associated with the aciton, autoupdate server just sends NOP if disabled is greater than zero.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate', @level2type = N'COLUMN', @level2name = N'disabled';


GO
PRINT N'Creating [dbo].[int_autoupdate].[prod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Product for auto update like CDR, CPI, ... Field 2 of primary key.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate', @level2type = N'COLUMN', @level2name = N'prod';


GO
PRINT N'Creating [dbo].[int_autoupdate].[seq].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequences the autoupdate actions  Field 1 of primary key.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate', @level2type = N'COLUMN', @level2name = N'seq';


GO
PRINT N'Creating [dbo].[int_autoupdate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains update information read by the autoupdate service that is then sent out to each client on demand. Each product has update actions that are in order by sequence. When a client want the first update action for CDR, he asks for CDR update 0. When the update action completes successfully, update 1 is next....', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate';


GO
PRINT N'Creating [dbo].[int_autoupdate_log].[action_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date action was applied to machine', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'action_dt';


GO
PRINT N'Creating [dbo].[int_autoupdate_log].[machine].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'IP address or NT network name of machine that update was for.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'machine';


GO
PRINT N'Creating [dbo].[int_autoupdate_log].[prod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Product that action applied to like CDR, CPI, ...', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'prod';


GO
PRINT N'Creating [dbo].[int_autoupdate_log].[reason].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains the error text passed from the client of action failed to be applied to that client. Example : Couldnt overwrite file Carewindow.exe, file in use.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'reason';


GO
PRINT N'Creating [dbo].[int_autoupdate_log].[success].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'1 if action was ACKed 0 if action was NACKed', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'success';


GO
PRINT N'Creating [dbo].[int_autoupdate_log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table logs all successful and unsuccessful autoupdate attempts. Each client sends either an ACK or a NACK to the service, and the service then puts the appropriate row in the database. The intention is to use the OCX I wrote which views the log within MMC to have a realtime viewer of system updates.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log';


GO
PRINT N'Creating [dbo].[int_beat_time_log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains beat time log information (one row for each user/patient analysis)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_beat_time_log';


GO
PRINT N'Creating [dbo].[int_bin_info].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains template/bin information. It contains 2 additional PKs:  template_set_index and template_index. The template_set_index column will refer back to a template set in the int_template_set_info table. This table will contain multiple rows per user/patient analysis (one row for each template). I think we should consider renaming it to int_template_info (or some variation of that).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_bin_info';


GO
PRINT N'Creating [dbo].[int_broadcast_msg].[disable_autoprocs].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether to disable all automatic processes from running.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'disable_autoprocs';


GO
PRINT N'Creating [dbo].[int_broadcast_msg].[keep_out].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether to keep ALL users from logging into the CDR.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'keep_out';


GO
PRINT N'Creating [dbo].[int_broadcast_msg].[log_out_minutes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'How many minutes to wait before forcing ALL users to exit the CDR. If 0 then it will not force them out.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'log_out_minutes';


GO
PRINT N'Creating [dbo].[int_broadcast_msg].[login_msg].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A message to display to ALL users attempting to login to the CDR.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'login_msg';


GO
PRINT N'Creating [dbo].[int_broadcast_msg].[timer_msg].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Message to display to ALL users ASAP. Periodically, every Carewindow that is running checks this table for a message to display. This table has at most 1 record (or no records if there are no messages to display).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'timer_msg';


GO
PRINT N'Creating [dbo].[int_broadcast_msg].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The table is used to store the system broadcast message to be sent to users. It also contains a message to display to users on login. This table has at most 1 record in it (if there is any kind of message to display).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg';


GO
PRINT N'Creating [dbo].[int_cfg_values].[keyname].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Configuration parameter''s name', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_cfg_values', @level2type = N'COLUMN', @level2name = N'keyname';


GO
PRINT N'Creating [dbo].[int_cfg_values].[keyvalue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Parameter''s value', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_cfg_values', @level2type = N'COLUMN', @level2name = N'keyvalue';


GO
PRINT N'Creating [dbo].[int_cfg_values].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains information about system''s configurations values.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_cfg_values';


GO
PRINT N'Creating [dbo].[int_channel_type].[channel_code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code of the channel.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'channel_code';


GO
PRINT N'Creating [dbo].[int_channel_type].[channel_type_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique ID representing a channel type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'channel_type_id';


GO
PRINT N'Creating [dbo].[int_channel_type].[color].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The color of display.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'color';


GO
PRINT N'Creating [dbo].[int_channel_type].[freq].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'How many values per second this channel produces.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'freq';


GO
PRINT N'Creating [dbo].[int_channel_type].[gds_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The GDS code identifying the channel. Foreign key to the int_misc_code table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'gds_cid';


GO
PRINT N'Creating [dbo].[int_channel_type].[label].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The channel''s label.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'label';


GO
PRINT N'Creating [dbo].[int_channel_type].[max_value].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Maximum value for a channel', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'max_value';


GO
PRINT N'Creating [dbo].[int_channel_type].[min_value].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Minimum value for the channel', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'min_value';


GO
PRINT N'Creating [dbo].[int_channel_type].[priority].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The order the channel is displayed in the vital sign viewer. The vital signs viewer only has room to display so many channels, so this column also determines which channels are displayed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'priority';


GO
PRINT N'Creating [dbo].[int_channel_type].[sweep_speed].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The default sweeping speed for the vital signs viewer waveforms display.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'sweep_speed';


GO
PRINT N'Creating [dbo].[int_channel_type].[type_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of channel. WAVEFORM or NUMBER.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'type_cd';


GO
PRINT N'Creating [dbo].[int_channel_type].[units].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Units to use when displaying data in vital signs viewer.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'units';


GO
PRINT N'Creating [dbo].[int_channel_type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data about channel types. Each row is uniquely identified by the channel_type_id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type';


GO
PRINT N'Creating [dbo].[int_channel_vital].[format_string].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'How to display a vital on a given channel.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_vital', @level2type = N'COLUMN', @level2name = N'format_string';


GO
PRINT N'Creating [dbo].[int_channel_vital].[gds_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The GDS code that is on a channel. Foreign key to the int_misc_code. The format is: <label>|{|$>|<S|M|L>|<B|R>|<L|C|R> #=direct replacement for a value $=has coding associated with it S= small size M=medium size L=large size B=Bold R=Regular L=Left align C=Center align R=Right align', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_vital', @level2type = N'COLUMN', @level2name = N'gds_cid';


GO
PRINT N'Creating [dbo].[int_channel_vital].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data about which vitals are displayed for a given channel. Each record represents one vital collected on the channel.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_vital';


GO
PRINT N'Creating [dbo].[int_client_map].[map_type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of mapping. Generally this is just used for IP address (or workstation ID) mappings to a particular unit.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_client_map', @level2type = N'COLUMN', @level2name = N'map_type';


GO
PRINT N'Creating [dbo].[int_client_map].[map_val].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the value of the mapping (i.e. the actual IP address or workstation name)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_client_map', @level2type = N'COLUMN', @level2name = N'map_val';


GO
PRINT N'Creating [dbo].[int_client_map].[unit_nm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the Unit (code) that this value is mapped to.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_client_map', @level2type = N'COLUMN', @level2name = N'unit_nm';


GO
PRINT N'Creating [dbo].[int_client_map].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the legal code categories used in the int_misc_code table. It is primarily a documentation tool, since very little logic requires these values. It is also used in System Administration. This table is pre-loaded with a set of rows that does not change for a given release.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_client_map';


GO
PRINT N'Creating [dbo].[int_cmtry_report].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_cmtry_report';


GO
PRINT N'Creating [dbo].[int_code_category].[cat_code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code "category". This has the list of values used in the "cat_code" column in the int_misc_code table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_code_category', @level2type = N'COLUMN', @level2name = N'cat_code';


GO
PRINT N'Creating [dbo].[int_code_category].[cat_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the code category (how it is used).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_code_category', @level2type = N'COLUMN', @level2name = N'cat_name';


GO
PRINT N'Creating [dbo].[int_code_category].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the legal code categories used in the int_misc_code table. It is primarily a documentation tool, since very little logic requires these values. It is also used in System Administration. This table is pre-loaded with a set of rows that does not change for a given release.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_code_category';


GO
PRINT N'Creating [dbo].[int_DataLoader_ETR_Temp_Settings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_DataLoader_ETR_Temp_Settings';


GO
PRINT N'Creating [dbo].[int_DataLoader_UV_Temp_Settings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_DataLoader_UV_Temp_Settings';


GO
PRINT N'Creating [dbo].[int_db_ver].[CreateDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time the row was inserted into the table. Also can be used to help select the latest version number inserted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'CreateDate';


GO
PRINT N'Creating [dbo].[int_db_ver].[install_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date this version was installed (and became active).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'install_dt';


GO
PRINT N'Creating [dbo].[int_db_ver].[install_pgm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'install_pgm';


GO
PRINT N'Creating [dbo].[int_db_ver].[install_pgm_flags].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'install_pgm_flags';


GO
PRINT N'Creating [dbo].[int_db_ver].[post_install_pgm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'post_install_pgm';


GO
PRINT N'Creating [dbo].[int_db_ver].[post_install_pgm_flags].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'post_install_pgm_flags';


GO
PRINT N'Creating [dbo].[int_db_ver].[pre_install_pgm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'pre_install_pgm';


GO
PRINT N'Creating [dbo].[int_db_ver].[pre_install_pgm_flags].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'pre_install_pgm_flags';


GO
PRINT N'Creating [dbo].[int_db_ver].[status_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The status of the release. Currently only "Complete" is used. There can be multiple records with "Complete", so the one with the most recent install_dt is the currently active release.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'status_cd';


GO
PRINT N'Creating [dbo].[int_db_ver].[ver_code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code of the version. Ex: 1.01.03. This should match the version of code running on the servers (one with most recent install_dt)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'ver_code';


GO
PRINT N'Creating [dbo].[int_db_ver].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the current version of the database as well as the history of prior versions. As the Clinical Browser is installed/upgraded over time, new records will be inserted into this table. The current version of the database schema is the record with the latest install_dt with a status of "Complete".', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver';


GO
PRINT N'Creating [dbo].[int_diagnosis].[attestation_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field contains the timestamp that indicates the date that the attestation was signed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'attestation_dt';


GO
PRINT N'Creating [dbo].[int_diagnosis].[class_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field indicates if the patient information  is for a diagnosis or a non-diagnosis code.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'class_cid';


GO
PRINT N'Creating [dbo].[int_diagnosis].[confidential_ind].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field indicates whether the diagnosis is confidential. 1=Confidential', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'confidential_ind';


GO
PRINT N'Creating [dbo].[int_diagnosis].[diagnosis_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the MISC_CODE table (cat_code=''xxxx''). A code that identifies the PATIENT problem into a specific category. This could be an ICD-9 code. This can be NULL because the diagnosis may not be codified (may be a textual diagnosis that is stored in the dsc column).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'diagnosis_cid';


GO
PRINT N'Creating [dbo].[int_diagnosis].[diagnosis_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field contains the date/time that the diagnosis was determined.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'diagnosis_dt';


GO
PRINT N'Creating [dbo].[int_diagnosis].[diagnosis_type_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that indicates the type of ENC_DIAGNOSIS. See permitted values. Examples include (Admit, final, etc).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'diagnosis_type_cid';


GO
PRINT N'Creating [dbo].[int_diagnosis].[dsc].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The non-codified diagnosis (if the diagnosis_cid is NULL). This can be a free-formatted description of the diagnosis. Some sites may never use this and only allow codified diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'dsc';


GO
PRINT N'Creating [dbo].[int_diagnosis].[encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this result is associated with. FK to the ENCOUNTER table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'encounter_id';


GO
PRINT N'Creating [dbo].[int_diagnosis].[inactive_sw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' A yes/no flag to indicate the state or status of the row associated with this column. When the value is (1), this means that the  diagnosis has a new value from the DB Loader and this current value is no longer an active diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'inactive_sw';


GO
PRINT N'Creating [dbo].[int_diagnosis].[seq_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sequence of this diagnosis for the given encounter. Each encounter can have multiple diagnosis of the same type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'seq_no';


GO
PRINT N'Creating [dbo].[int_diagnosis].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The determination in the nature of the disease or problem. It is made form the study of the signs and symptoms of the disease or problem. The diagnosis can either be codified (ex: ICD9 or they can be free-formated text). This table is designed to track the various diagnosis associated with a given ENCOUNTER and PATIENT. The primary key of this table is a combination of the encounter_id, diagnosis_type_cid, and seq_no. This is because an encounter can have multiple diagnosis (including multiple of each type). The sequence # quarantees uniqueness.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[account_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The account associated with this DRG. FK to the account table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'account_id';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[desc_key].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A descending key to guarantee uniqueness for this table (part of the PK). Also used to get the most recent record.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'desc_key';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[drg_approval_ind].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code to indicate if an ACCOUNT_DRG has been approved. Defined in HL/7', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_approval_ind';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[drg_assignment_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the ACCOUNT_DRG was assigned to a specific group.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_assignment_dt';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[drg_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the Diagnostic Related Group (DRG) for the ACCOUNT. Defined in HL/7.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_cid';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[drg_grper_rvw_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code to indicate what type of assignment has taken place. Ex: A - Admit        P - Preliminary        F - Final Defined in HL/7', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_grper_rvw_cid';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[drg_grper_ver_type_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field relates to the broad category for a disease type. Defined in HL/7 (DG1)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_grper_ver_type_cid';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[drg_outlier_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' A code that categorizes the reason for the DRG OUTLIER DAYS NO. Defined in HL/7', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_outlier_cid';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[drg_outlier_cost_amt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' The amount that is allocated to a DRG Outlier', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_outlier_cost_amt';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[drg_outlier_days_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of days as defined by the DRG outlier.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_outlier_days_no';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter associated with this DRG. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'encounter_id';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient associated with this DRG. FK to the patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_diagnosis_drg].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A classification of diagnosis in which a particular ACCOUNT can be tracked for one or more ENCOUNTERs. This is a snapshot of codes at a given point in time. DRG information takes a snapshot of existing diagnosis. Contains code, description, when it was calculated, age, sex, who calculated. Physicians have to sign attestatinos that codes are assigned in correct sequence. DRG''s are applied at the end of the ENCOUNTER. Interim DRG''s are only performed to know how a hospital is doing against average Length Of Stay (LOS), etc. DRG codes appl to inpatient accounts. (Outpatient accounts do not yet have a set of codes for this purpose. Ambulatory product groups is most likely to become the coding scheme for outpatient.) DRG coding scheme contains regional norms, local norms, and adjustment for age. This table contains diagnostic related group (DRG) information specific to the combination entered in the PAT_ACCT_ENC_INT table. The DRG information is the standard HL7 required DRG information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg';


GO
PRINT N'Creating [dbo].[int_diagnosis_hcp_int].[desc_key].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This allows multiple HCP''s for each diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'desc_key';


GO
PRINT N'Creating [dbo].[int_diagnosis_hcp_int].[diagnosis_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'diagnosis_dt';


GO
PRINT N'Creating [dbo].[int_diagnosis_hcp_int].[diagnosis_seq_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this diagnosis/HCP refers to. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'diagnosis_seq_no';


GO
PRINT N'Creating [dbo].[int_diagnosis_hcp_int].[diagnosis_type_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this diagnosis/HCP refers to. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'diagnosis_type_cid';


GO
PRINT N'Creating [dbo].[int_diagnosis_hcp_int].[encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this diagnosis/HCP refers to. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'encounter_id';


GO
PRINT N'Creating [dbo].[int_diagnosis_hcp_int].[hcp_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The HCP that is "linked" to the diagnosis. FK to the HCP table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'hcp_id';


GO
PRINT N'Creating [dbo].[int_diagnosis_hcp_int].[inactive_sw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether this relationship is active or not (0/NULL=active, 1=inactive).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'inactive_sw';


GO
PRINT N'Creating [dbo].[int_diagnosis_hcp_int].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table allows for multiple diagnosis clinicians for each encounter diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int';


GO
PRINT N'Creating [dbo].[int_encounter].[account_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The account associated with this encounter. FK to the account table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'account_id';


GO
PRINT N'Creating [dbo].[int_encounter].[admit_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The admission date and time in which the PATIENT interacts with an HEALTHCARE PROVIDER. For Pre-admit class, it is the scheduled admit date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'admit_dt';


GO
PRINT N'Creating [dbo].[int_encounter].[admit_hcp_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The admitting HCP for this encounter. FK to the HCP table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'admit_hcp_id';


GO
PRINT N'Creating [dbo].[int_encounter].[ambul_status_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that indicates the PATIENT''s transportation capabilities. Refer to HL7, table 0009 for all values and  descriptions.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'ambul_status_cid';


GO
PRINT N'Creating [dbo].[int_encounter].[attend_hcp_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the HCP table. The attending HCP.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'attend_hcp_id';


GO
PRINT N'Creating [dbo].[int_encounter].[baby_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether the patient is a baby.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'baby_cd';


GO
PRINT N'Creating [dbo].[int_encounter].[bed].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The bed that the patient is in (or was last in).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'bed';


GO
PRINT N'Creating [dbo].[int_encounter].[begin_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date from the MSH segment for the message that actually caused the encounter row to get inserted into the database.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'begin_dt';


GO
PRINT N'Creating [dbo].[int_encounter].[comment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A comment that can be associated with this encounter.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'comment';


GO
PRINT N'Creating [dbo].[int_encounter].[diet_type_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field indicates a special diet type for a patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'diet_type_cid';


GO
PRINT N'Creating [dbo].[int_encounter].[discharge_dispo_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the int_misc_code table. The discharge disposition of this encounter.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'discharge_dispo_cid';


GO
PRINT N'Creating [dbo].[int_encounter].[discharge_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time the patient was discharged.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'discharge_dt';


GO
PRINT N'Creating [dbo].[int_encounter].[encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the unique system-generated ID for each encounter. It is a random GUID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'encounter_id';


GO
PRINT N'Creating [dbo].[int_encounter].[med_svc_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the medical service that is provided. Ex: MED, SUR, OBS, NUR, EYE, CLI', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'med_svc_cid';


GO
PRINT N'Creating [dbo].[int_encounter].[mod_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The last date/time the encounter was modified.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'mod_dt';


GO
PRINT N'Creating [dbo].[int_encounter].[monitor_created].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'If True (1), then this encounter was created by a Monitor Loader (gateway). This is helpful when trying to re-locate a specific encounter associated with a connection epsiode.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'monitor_created';


GO
PRINT N'Creating [dbo].[int_encounter].[organization_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the ORGANIZATION table. This is the facility where the encounter was "serviced".', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'organization_id';


GO
PRINT N'Creating [dbo].[int_encounter].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_encounter].[patient_class_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the PATIENT category at the time of the ENCOUNTER.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'patient_class_cid';


GO
PRINT N'Creating [dbo].[int_encounter].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient this encounter is associated with. FK to the patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_encounter].[patient_type_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field contains site-specific values that identify the patient type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'patient_type_cid';


GO
PRINT N'Creating [dbo].[int_encounter].[primary_care_hcp_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The primary care physician of the patient at the time of this encounter. FK to the HCP table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'primary_care_hcp_id';


GO
PRINT N'Creating [dbo].[int_encounter].[protection_type_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field id''s the person''s protection that determines, in turn, whether access to info. abut this person should be kept from unauthorized users.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'protection_type_cid';


GO
PRINT N'Creating [dbo].[int_encounter].[publicity_cid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains a code that defines what level of publicity is allowed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'publicity_cid';


GO
PRINT N'Creating [dbo].[int_encounter].[recurring_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field indicates whether the treatment is continuous.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'recurring_cd';


GO
PRINT N'Creating [dbo].[int_encounter].[referring_hcp_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the HCP table. The referring HCP.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'referring_hcp_id';


GO
PRINT N'Creating [dbo].[int_encounter].[rm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The room that the patient is currently in (or was last in) for the encounter.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'rm';


GO
PRINT N'Creating [dbo].[int_encounter].[status_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the type of ENCOUNTER.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'status_cd';


GO
PRINT N'Creating [dbo].[int_encounter].[unit_org_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the location of the PATIENT at the time that the ENCOUNTER is ''assigned''. This includes the Nursing Unit, Ancillary Departments, or temporary locations.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'unit_org_id';


GO
PRINT N'Creating [dbo].[int_encounter].[vip_sw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether person is a VIP.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'vip_sw';


GO
PRINT N'Creating [dbo].[int_encounter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all encounters for each patient. Most of this information comes from the HL/7 PV1 & PV2 segments. Usually an encounter represents a single "visit" or "stay" at a facility. Although a site can define an encounter to be broader (i.e. multiple actual visits) or a sub-set of an entire "visit". 99% of the time, encounter and visit are synonymous.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter';


GO
PRINT N'Creating [dbo].[int_encounter_map].[account_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The account that is associated with this encounter link.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'account_id';


GO
PRINT N'Creating [dbo].[int_encounter_map].[encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this result is associated with. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'encounter_id';


GO
PRINT N'Creating [dbo].[int_encounter_map].[encounter_xid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The external ID for the encounter (encounter number). These numbers must be unique for each organization.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'encounter_xid';


GO
PRINT N'Creating [dbo].[int_encounter_map].[event_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' A code that identifies the action that was processed  Probably not currently used', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'event_cd';


GO
PRINT N'Creating [dbo].[int_encounter_map].[organization_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization that this external ID is assigned by.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'organization_id';


GO
PRINT N'Creating [dbo].[int_encounter_map].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_encounter_map].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient this encounter is associated with. FK to the patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_encounter_map].[seq_no].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequence # guarantees a unique record.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'seq_no';


GO
PRINT N'Creating [dbo].[int_encounter_map].[status_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the state in which the occurrence was created.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'status_cd';


GO
PRINT N'Creating [dbo].[int_encounter_map].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A table that assigns an external visit number to an internal encounter record. This table allows an organization''s specific healthcare identifier (i.e. visit) to be mapped into a unique internal identifier (encounter_id). Within a specific organization, their identifiers for an encounter must be unique.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization that the encounter that was moved/merged is associated with.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'encounter_id';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[encounter_xid].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An attribute that uniquely identifies the External Visit Number assigned by the ENCOUNTER assigning ORGANIZATION. This is usually the patient number or billing number for simple  encounter/account relationships. Whenever an external system provides an identifier to  the system, that eXternal IDentifier is referred to as an XID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'encounter_xid';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[event_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the action that was processed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'event_cd';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[organization_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization that the encounter that was moved/merged is associated with.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'organization_id';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[orig_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'orig_patient_id';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient associated with the transfer (not necessarily the source or destination).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[status_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the state in which the occurrence was created.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'status_cd';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[tfr_txn_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time in which the transfer has taken place.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfr_txn_dt';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[tfrd_from_encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time in which the transfer has taken place.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfrd_from_encounter_id';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[tfrd_from_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This attribute identifies the ENCOUNTER ENTITY IDENTIFICATION for the non-surviving PATIENT.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfrd_from_patient_id';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[tfrd_to_encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This attribute identifies the ENCOUNTER ENTITY IDENTIFICATION for the surviving ENCOUNTER.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfrd_to_encounter_id';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[tfrd_to_patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This attribute identifies the Patient (patient_id) for the surviving PATIENT.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfrd_to_patient_id';


GO
PRINT N'Creating [dbo].[int_encounter_tfr_history].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A table that tracks the moving and merging of encounters within the Database. When an encounter move or merge takes place, this table will capture the surviving and non-surviving patient and encounter ID''s.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history';


GO
PRINT N'Creating [dbo].[int_encounter_to_hcp_int].[active_sw].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether this relationship is active (or whether it was unlinked). 1=Active, 0=No longer active', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'active_sw';


GO
PRINT N'Creating [dbo].[int_encounter_to_hcp_int].[encounter_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this result is associated with. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'encounter_id';


GO
PRINT N'Creating [dbo].[int_encounter_to_hcp_int].[end_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date and time that the association takes place.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'end_dt';


GO
PRINT N'Creating [dbo].[int_encounter_to_hcp_int].[hcp_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The HCP that is associated with this encounter. FK to the HCP table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'hcp_id';


GO
PRINT N'Creating [dbo].[int_encounter_to_hcp_int].[hcp_role_cd].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the MISC_CODE table (cat_code = xxx). A code that indicates the type of role (category/specialty) for the HEALTHCARE PROVIDER and this particular ENCOUNTER. This is any HEALTHCARE PROVIDER who participates in the care of a PATIENT for a specific episode of care. Ex: Radiologist, Cardiologist, GP, Resident, RN, LPN, LCSW, etc.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'hcp_role_cd';


GO
PRINT N'Creating [dbo].[int_encounter_to_hcp_int].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the relationship of HCP''s to Encounters. It defines the role(s) a HCP plays for a specific encounter (or multiple HCP''s for a single encounter). Currently, only Consulting physician information is stored (attending, admitting and referring are stored in the encounter table). That is because in HL/7, the only type of physician that there can me multiple is the consulting physician.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int';


GO
PRINT N'Creating [dbo].[int_environment].[display_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Name of environment', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_environment', @level2type = N'COLUMN', @level2name = N'display_name';


GO
PRINT N'Creating [dbo].[int_environment].[env_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique identifier for each environment', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_environment', @level2type = N'COLUMN', @level2name = N'env_id';


GO
PRINT N'Creating [dbo].[int_environment].[seq].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequence to list environments in', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_environment', @level2type = N'COLUMN', @level2name = N'seq';


GO
PRINT N'Creating [dbo].[int_environment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to store the "Environments" that a site has defined. Environments are shown on the CB homepage and allow a site to customize behaviour. Environments are a lot like products (e.x. L&D, NICU, ED, etc). Usually each environment has a patient list that is specific to the way that department works.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_environment';


GO
PRINT N'Creating [dbo].[int_event_config].[alarm_notification_mode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Alarm mode', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'alarm_notification_mode';


GO
PRINT N'Creating [dbo].[int_event_config].[alarm_polling_interval].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Interval (min.) of polling information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'alarm_polling_interval';


GO
PRINT N'Creating [dbo].[int_event_config].[port_number].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Port number', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'port_number';


GO
PRINT N'Creating [dbo].[int_event_config].[track_alarm_execution].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Flag: 1 = alarm execution', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'track_alarm_execution';


GO
PRINT N'Creating [dbo].[int_event_config].[track_vitals_update_execution].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Flag: 1 = update vital  signs', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'track_vitals_update_execution';


GO
PRINT N'Creating [dbo].[int_event_config].[vitals_update_interval].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Interval (min.) of updating', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'vitals_update_interval';


GO
PRINT N'Creating [dbo].[int_event_config].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the information about configuration of alarm handling events.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config';


GO
PRINT N'Creating [dbo].[int_event_log].[client].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Client name', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'client';


GO
PRINT N'Creating [dbo].[int_event_log].[description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Description of the event', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'description';


GO
PRINT N'Creating [dbo].[int_event_log].[event_dt].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date of the event', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'event_dt';


GO
PRINT N'Creating [dbo].[int_event_log].[event_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Event Id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'event_id';


GO
PRINT N'Creating [dbo].[int_event_log].[patient_id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Status', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'patient_id';


GO
PRINT N'Creating [dbo].[int_event_log].[seq_num].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequential number', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'seq_num';


GO
PRINT N'Creating [dbo].[int_event_log].[status].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Status', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'status';


GO
PRINT N'Creating [dbo].[int_event_log].[type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Event type', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'type';


GO
PRINT N'Creating [dbo].[int_event_log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores information about events.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log';


GO
PRINT N'Creating [dbo].[int_external_organization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all "external" organizations. External organizations have been separated from internal organizations. External organizations are organizations that are not located within the hospital or facility such as insurance companies and employers. Internal organizations are those that are part of the hospital or facility such as  units.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_external_organization';


GO
PRINT N'Creating [dbo].[int_feature].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains a list of features the ICW product has. A product has many features. If no access was given to a product then all of the features in the product are turned off.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_feature';


GO
PRINT N'Creating [dbo].[int_flowsheet].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all "flowsheets" defined by the site. A flowsheet is a high-level grouping of tests, results, values. Usually each department has unique flowsheets and sometimes types of doctors may have their own (i.e. Cardiologists). It is very similar to to concept of Test Groups but is geared towards data entry as opposed to display.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet';


GO
PRINT N'Creating [dbo].[int_flowsheet_detail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines what tests and results should show on a given flowsheet. It is the detail table for the int_flowsheet table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet_detail';


GO
PRINT N'Creating [dbo].[int_flowsheet_entry].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to control validation of each field (for data entry). It is used in conjunction with the int_flowsheet_detail table to drive the display/input logic.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet_entry';


GO
PRINT N'Creating [dbo].[int_flowsheet_list].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the list of drop-down fields. It is the parent record for the int_flowsheet_list_detail table. There will be one record in this table for every drop-down (and one row in int_flowsheet_list_detail for every item in the drop-down).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet_list';


GO
PRINT N'Creating [dbo].[int_flowsheet_list_detail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the "Valid Values" for a given field. It is the drop-down list of choices for each field. It is tied to a int_flowsheet_list record. This is the child records of a list. Every entry in the drop-down list will have a record in this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet_list_detail';


GO
PRINT N'Creating [dbo].[int_gateway].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The int_gateway table stores configuration information about all known "gateways". Gateways provide connectivity to monitors (SLMD, S5, Cosmos, etc). Each gateway is responsible for keeping the database current for the monitors it knows about. It is also responsible for updating monitors when patient changes are made to the database.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_gateway';


GO
PRINT N'Creating [dbo].[int_gateway_server].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data about the S5 central workstations.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_gateway_server';


GO
PRINT N'Creating [dbo].[int_guarantor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores guarantor information supplied in the GT1 segment of HL/7.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_guarantor';


GO
PRINT N'Creating [dbo].[int_hcp].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The HCP table stores all HCP''s referenced in HL/7 messages. HCP''s are any individuals who perform a role as a clinical employee, provider or authorized affiliates of a Healthcare ORGANIZATION. The HCP''s name (first name, last name, middle initial, and degree) are carried as redundant data within the HCP table in order to eliminate a join back to the PERSON_NAME table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp';


GO
PRINT N'Creating [dbo].[int_hcp_contact].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the contact information for HCP''s. This includes phone #''s, pagers, e-mail addresses, etc.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp_contact';


GO
PRINT N'Creating [dbo].[int_hcp_license].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all certification(s) associated with each HCP. A certification that is acquired by a HEALTHCARE PROFESSIONAL to provide a service in a Healthcare FACILITY/ORGANIZATION.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp_license';


GO
PRINT N'Creating [dbo].[int_hcp_map].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table maps the external id for an HCP to the internal id (HCP_ID). An HCP may have multiple external id''s so this table is required. However, within an organization, ID''s must be unique.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp_map';


GO
PRINT N'Creating [dbo].[int_hcp_specialty].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the specialty(s) for each HCP. It includes information about what group/board certified the HCP.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp_specialty';


GO
PRINT N'Creating [dbo].[int_insurance_plan].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the insurance plan information used by patients. This stores the actual plans that are used by insurance policies. An insurance policy refers to a plan. An account refers to an insurance policy.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_insurance_plan';


GO
PRINT N'Creating [dbo].[int_insurance_policy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the insurance policies that are referenced in patient accounts.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_insurance_policy';


GO
PRINT N'Creating [dbo].[int_loader_parameter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all parameters used to control the HL/7 loader. A site can customize the behavior of the Loader by adding/modifying values in this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_loader_parameter';


GO
PRINT N'Creating [dbo].[int_loader_stats].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores statistics for the back-end processing of HL/7 messages. It stores temporary data in this table to help keep track of how many HL/7 messages have been processed since startup, etc. Data in this table is not critical and can be truncated if the back-end is not running.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_loader_stats';


GO
PRINT N'Creating [dbo].[int_misc_code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores multiple code sets (miscellaneous codes). It stores many of the codified fields that HL/7 defines. All of these codes can be dynamically added by the back-end (DataLoader). However to ensure good descriptions of the code (for display), it is necessary for the administrator to update these dynamically added codes. Codes are unique for a given organization, feeder system and category (cat_code).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_misc_code';


GO
PRINT N'Creating [dbo].[int_mon_request].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the request for monitors'' information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_mon_request';


GO
PRINT N'Creating [dbo].[int_monitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all monitors known by all gateways. Records are dynamically added/updated in this table as the monitor Loader service(s) run. Monitor records are NOT dynamically removed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_monitor';


GO
PRINT N'Creating [dbo].[int_mrn_map].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to uniquely identify a medical record number to a PATIENT. This table allows the tracking of the MRNs assigned to a given PATIENT across time. This table takes an ORGANIZATION, their identifier and maps it into a uniquely generated patient ID (GUID). The assumption is that no matter how many MRN''s a patient is know by, there will only be one patient_id for that patient (especially since the MPI should handle minor inconsistencies with data-entry).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_mrn_map';


GO
PRINT N'Creating [dbo].[int_msg_log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores messages that are produced from the system back-end. It is used to log messages that may or may not be related to HL/7 processing. Most of the rows in this table come about from informational msgs or errors related to HL/7 processing. Purging of this table may need to be done periodically (or done with the purging of the HL7_in_queue table).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_msg_log';


GO
PRINT N'Creating [dbo].[int_msg_template].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the "template" for all error/warning messages displayed to the user. The DataLoader and communicator will report any warnings or errors using this template. Parameters to the message can be passed and substituted anywere in the message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_msg_template';


GO
PRINT N'Creating [dbo].[int_nok].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the Next of Kin for patients. Every patient can have Next of Kin (as defined in the NK1 segment in HL/7). NOK''s are not encounter based, they are patient based. However there can be multiple NOK''s for each patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_nok';


GO
PRINT N'Creating [dbo].[int_nxt_ascending_key].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to keep track of the next ascending key. Certain tables use the concept of an ascending key. Ascending keys must be unique and always counting up. This table keeps track of the last one assigned. In general, the Clinical Browser has reduced its need on these types of keys since they are a single point of locks.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_nxt_ascending_key';


GO
PRINT N'Creating [dbo].[int_nxt_descending_key].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to keep track of the next descending key. Certain tables use the concept of an descending key. Descending keys must be unique and always counting down. This table keeps track of the last one assigned. In general, the Clinical Browser has reduced its need on these types of keys since they are a single point of locks.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_nxt_descending_key';


GO
PRINT N'Creating [dbo].[int_order].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all orders for every patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order';


GO
PRINT N'Creating [dbo].[int_order_group].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the grouping of orders and how they should appear in the order index. The Order Index displays groups of USID''s and this table defines those groups.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order_group';


GO
PRINT N'Creating [dbo].[int_order_group_detail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is a detail table for the int_order_group table. It defines the USID''s that belong to a given order group. A USID can appear in multiple order groups.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order_group_detail';


GO
PRINT N'Creating [dbo].[int_order_line].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The request for a specific service. One detailed entry of an ORDER requesting an instance of a service. The ORDER_LINE entity type is used to hold individual orderable items within an ORDER. It is the detail of an order. Deleted Columns: priority_code_id, ord_cntl_code_id', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order_line';


GO
PRINT N'Creating [dbo].[int_order_map].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table''s purpose is to take the ORGANZATION_ENTITY_ID, SYSTEM_ENTITY_ID, and ORDER_EXTERNAL_ENTITY_ID and from these values create a unique ORDER_ID (ORD_ID). This entity type is used to capture the external order number from feeder system and cross check with the internal order number. Also capture information about where the ORDER originated from. This table takes an ORGANIZATION, their identifier and map into a unique CDR generated FK.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order_map';


GO
PRINT N'Creating [dbo].[int_org_shift_sched].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table identifies the work schedule for a unit (schedule of work, determined by the SHIFT_START_TM for the ORGANIZATION). This information will initially be used by the front-end to calculate volumes for nursing asessments. It will be maintained by a System Administration tool.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_org_shift_sched';


GO
PRINT N'Creating [dbo].[int_organization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the organizational structure of the enterprise. It describes a "tree structure" which includes the organization, facilities and units. This table must be defined before HL7 messages are played in since Feeder systems are defined as part of each Facility.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_organization';


GO
PRINT N'Creating [dbo].[int_outbound_queue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The int_outbound_queue table is used to start the outbound messaging process. A row is inserted into the int_outbound_queue telling the backend processes that an HL7 message needs to be generated for the corresponding patient_id and order_id. A msg_status of N means the request has not been processed. A msg_status of R means the request has been processed. A msg_status of E means the request errored when trying to process. Generally only not processed (N) or Errored (E) records are kept in this table. Processed records imply a HL/7 message was successfully placed into the HL7_out_queue.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_outbound_queue';


GO
PRINT N'Creating [dbo].[int_param_timetag].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores time tag events (lead change events and module status events). Each record is uniquely identified by patient_id, param_type, timetag_type, and param_ft. The data in this table is populated by teh MonitorLoader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_param_timetag';


GO
PRINT N'Creating [dbo].[int_patient].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores each patient record. Every patient is assigned a unique internal ID (GUID) that can never be duplicated. This table also has MPI specific fields used by the MPI engine to ensure that patients are not duplicated because of minor data-entry errors.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient';


GO
PRINT N'Creating [dbo].[int_patient_channel].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains channel data active for a given patient. Each record is uniquely identified by the patient_channel_id, monitor_id and patient_id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_channel';


GO
PRINT N'Creating [dbo].[int_patient_document].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table links document images (Optika) to a patient. And indexing application would insert into this table linking the document to the patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_document';


GO
PRINT N'Creating [dbo].[int_patient_image].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Links Dome medical images to each patient. OrderId links the image to a specific order so that when viewing a report detail screen, we can display an image button if an image is present. The image button then displays all images for the current order.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_image';


GO
PRINT N'Creating [dbo].[int_patient_link].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table tracks all patients that have been linked or merged. It allows patients to be linked (i.e. they are identified to be the same patient). It also allows patients to later be unlinked if they were mistakenly linked.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_link';


GO
PRINT N'Creating [dbo].[int_patient_list].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is the "master" list for the patient lists. It contains an entry for each list (not for each entry on those lists). The detail of which patients belong on the list is contained in int_patient_list_detail. A patient list is any logical collection of patients that can not be generated quickly enough through a direct query from other tables. It is also sometimes under the user control (for example user lists that the user can add/remove patients manually to). Other lists are system maintained by "events" such as admits/discharges (like practicing lists).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_list';


GO
PRINT N'Creating [dbo].[int_patient_list_detail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the patients that exist on a given patient list. It is the detail for a patient list. It therefore contains all patient entries for all patient lists (Unit, practicing, personal, etc.) It does not contain entries for the Search or Group lists (these are generated at run-time).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_list_detail';


GO
PRINT N'Creating [dbo].[int_patient_list_link].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table allows a user (usually a physician) to allow other users to view their patients. One typical usage is when a physician takes vacation and needs to "assign" patients to another physician for coverage. This table allows either complete assignment (all patients), or individual patients.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_list_link';


GO
PRINT N'Creating [dbo].[int_patient_monitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is the key table that tracks what patients are currently connected to monitors. It maintains records ONLY for patients that the gateways believe to be on monitor. It does NOT maintain history of who was connected (that is in the int_encounter table). As the monitor loaders communicate to the monitors through the gateways, this table is kept 100% current with the real-world. Patients are created/updated as necessary. And encounters are created/updated as necessary. Purging this table should have no real consequences because the data will be rebuilt by the loaders (with the exception of any manually overriden collection intervals).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_monitor';


GO
PRINT N'Creating [dbo].[int_patient_procedure].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains information relative to various types of procedures that can be performed on a patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_procedure';


GO
PRINT N'Creating [dbo].[int_person].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores information that is common to certain types of people in the database. This includes patients, gurantors, NOK''s. It does NOT have entries for users (even though they are people). This table only contains attributes (columns) for data that is likely to available for NOK''s, guarantor''s, etc. Data that is generally only known for patients is in the int_patient table. A person''s current/primary name, telephone and address is de-normalized into this table for quick access. However, all names, addresses, and phone #''s are available in the int_address, int_telephone and int_person_name tables.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_person';


GO
PRINT N'Creating [dbo].[int_person_name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all names.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_person_name';


GO
PRINT N'Creating [dbo].[int_pref].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores preferences for all users, roles and global. These preferences are stored as an XML string that each application defines. The XML hierarchy allows each application to have a very large number of preferences and to add/remove values without requiring a database change. Preferences are any user configuration values that do NOT deal with security AND are generally available for the user to change. Preferences and security are arranged into a 3-tier hierarchy (Global->Role->User). There is the capability for a lower level to override a higher level. There is also the ability for the higher level to lock down the value (prevent lower-level overrides).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_pref';


GO
PRINT N'Creating [dbo].[int_pref_diff].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines "Differences" that occur when a lower-level value is changed. This only occurs when a user or role value is changed. It is used to quickly display a change indicator at the global or role level if a lower-level value is different from the higher-level value. These records are only removed if a push-down is applied for a specific level in the XML.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_pref_diff';


GO
PRINT N'Creating [dbo].[int_pref_lock].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores any locks that are applied (at any level). Locks prevent lower levels from having different values than the current level. For example, if a value is locked at global, then all user_role''s and users must have the same value. This allows a site to prevent users from changing certain preferences. By default, users can change any preference unless they are locked.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_pref_lock';


GO
PRINT N'Creating [dbo].[int_pref_pushdown].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores "pushdowns". A pushdown is an attempt by the administrator to push-out a value to all users of the global or user_role level. When a change is made by the administrator to a preference at the global or category level, the default is to "push out" the new value to all users affected by that level. However, there are times when an administrator may want to make a change to the value for a level, but leave the current user''s value alone. This is particularly true when talking about display preferences for sorting, etc. By changing a value and not pushing it out, the administrator is changing new users (before they have a chance to set/save their prefs). A pushdown record is removed once a user logs in. Pushdown''s could be proprogated to the actual int_pref table as soon as possible, but this would require a lot of processing time during each change made at the global or category levels.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_pref_pushdown';


GO
PRINT N'Creating [dbo].[int_print_job].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the printing job information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job';


GO
PRINT N'Creating [dbo].[int_print_job_et_alarm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job_et_alarm';


GO
PRINT N'Creating [dbo].[int_print_job_et_vitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job_et_vitals';


GO
PRINT N'Creating [dbo].[int_print_job_et_waveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job_et_waveform';


GO
PRINT N'Creating [dbo].[int_print_job_waveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the waveform printing job information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job_waveform';


GO
PRINT N'Creating [dbo].[int_procedure].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains information relative to various types of procedures that can be performed on a patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_procedure';


GO
PRINT N'Creating [dbo].[int_procedure_hcp_int].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the HCP(s) that were involved in a procedure. There can multiple HCP(s) for each procedure and multiple types of HCP(s).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_procedure_hcp_int';


GO
PRINT N'Creating [dbo].[int_product].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data containing the product codes used in the ICW product suite. A product contains features that can be turned on an off. Each record is uniquely identified by the product_cd.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_product';


GO
PRINT N'Creating [dbo].[int_product_access].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the product access information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_product_access';


GO
PRINT N'Creating [dbo].[int_product_map].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An associative table between the int_product table and the int_feature table. This table contains each feature within a given product. Each row is uniquely identified by the product_cd and feature_cd.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_product_map';


GO
PRINT N'Creating [dbo].[int_reference_range].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains the results value ranges that are associated with a specific RESULT.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_reference_range';


GO
PRINT N'Creating [dbo].[int_result].[Sequence].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Seuqence of data insertion', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_result', @level2type = N'COLUMN', @level2name = N'Sequence';


GO
PRINT N'Creating [dbo].[int_result].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Result-based information, most of which comes from OBX segments. The CUR_RSLT_xxxx table holds all current results, hence the name. When a result is updated the original CUR_RSLT_xxxx is copied into the HIST_RSLT_xxxx table. The two tables are exactly the same to facilitate easily coping one table to the other. Seven current result data stores are used by CDR: - CUR_RSLT_LAB (Laboratory/Microbiology) - CUR_RSLT_RAD (Radiology/X-ray/Nuclear Medicine) - CUR_RSLT_VITL (Vital Signs/Statistics) - CUR_RSLT_RPT (Reports/Transcriptions/Progress Reports) - CUR_RSLT_IO (Intake/Ouput) - CUR_RSLT_ASSMT (Nursing Assessments) - CUR_RSLT_ECG (Ecg) In the HIST_RSLT_xxxx table the DESC_KEY should be used to display reverse chronological history of changes. Note that the DESC_KEY is a surrogate primary key for all result tables. HL7 to database mappings: ORC -> ORDER_TBL OBR -> ORDER_LINE,SPECIMEN OBX -> CUR_RSLT_xxxx Relationship between tests and results: Panels and Test Groups: Panels and Test Groups must be transmitted in OBR segments, since the ORC does not contain any type of identifier or name, the ORC is entirely optional in ORUs, and the OBX only contains TEST/RESULTS. In the database, we do not deal with these since HL7 does not transmit enough information to determine the relationships necessary. The ORDER_TBL has two fields that attempt to deal with order groups at a gross level, PARENT_ORD_ID and CHILD_ORD_SW. When ORDER ENTRY is developed this will need to be re-investigated. Batteries: Batteries are collections of tests that are given a single name and are generally ordered (i.e. OBR''s). An HL7 battery is equivalent to a display panel. Each battery processed by CDR will have a unique battery_id value', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_result';


GO
PRINT N'Creating [dbo].[int_result_flag].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the information about indication of abnormal result flags to be displayed by the front end. Whenever an abnormal result ''flag'' is sent by a feeder system identified by ''sys_ent_id'', the front end will use this table to decide if a text message is to be displayed in front or back of the result or the result is to be colored with the ''color'' or a bitmap is to be placed in front or back of the result.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_result_flag';


GO
PRINT N'Creating [dbo].[int_saved_event].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores events manually saved by the user. Each record is uniquely identified by patient_id, event_id and insert_dt. The data in this table is populated by the Patsrvr process. New records are added and no records are deleted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_saved_event';


GO
PRINT N'Creating [dbo].[int_saved_event_waveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores base waveform information, raw waveform data, and timelog data for each waveform within a saved event. Each record is uniquely identified by event_id and wave_index. The data in this table is populated by the Patsrvr process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_saved_event_waveform';


GO
PRINT N'Creating [dbo].[int_SavedEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains general information about the saved event. It should have patient_id and event_id as PKs. There will be one row for each saved event.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_SavedEvent';


GO
PRINT N'Creating [dbo].[int_savedevent_beat_time_log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_beat_time_log';


GO
PRINT N'Creating [dbo].[int_savedevent_calipers].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_calipers';


GO
PRINT N'Creating [dbo].[int_savedevent_event_log].[end_ms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by monitor event log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'end_ms';


GO
PRINT N'Creating [dbo].[int_savedevent_event_log].[lead_type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by lead change log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'lead_type';


GO
PRINT N'Creating [dbo].[int_savedevent_event_log].[monitor_event_type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by monitor event log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'monitor_event_type';


GO
PRINT N'Creating [dbo].[int_savedevent_event_log].[primary_channel].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by lead change log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'primary_channel';


GO
PRINT N'Creating [dbo].[int_savedevent_event_log].[start_ms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by lead change and monitor event log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'start_ms';


GO
PRINT N'Creating [dbo].[int_savedevent_event_log].[timetag_type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by lead change and monitor events log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'timetag_type';


GO
PRINT N'Creating [dbo].[int_savedevent_event_log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is designed to save savedevent lead changes and monitor events logs (lead changed log timetag_type = 12289   monitor event log timetag_type = 12290)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log';


GO
PRINT N'Creating [dbo].[int_savedevent_vitals].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_vitals';


GO
PRINT N'Creating [dbo].[int_savedevent_waveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains waveform data for a given saved event. It should have patient_id, event_id, and wave_index as PKs. The event_id column corresponds to the event_id column in the SavedEvent table. There can be several rows in this table for a given saved event (one for each waveform in the saved event).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_waveform';


GO
PRINT N'Creating [dbo].[int_security].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores security settings for all users, roles and global. These security settings are stored as an XML string that each application defines. The XML hierarchy allows each application to have a very large number of security settings and to add/remove values without requiring a database change. Security settings are any setting that controls access to data and/or applications that are defined and controlled by administrators. Preferences and security are arranged into a 3-tier hierarchy (Global->Role->User). There is the capability for a lower level to override a higher level. There is also the ability for the higher level to lock down the value (prevent lower-level overrides).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_security';


GO
PRINT N'Creating [dbo].[int_security_diff].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines "Differences" that occur when a lower-level value is changed. This only occurs when a user or role value is changed. It is used to quickly display a change indicator at the global or role level if a lower-level value is different from the higher-level value. These records are only removed if a push-down is applied for a specific level in the XML.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_security_diff';


GO
PRINT N'Creating [dbo].[int_security_lock].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores any locks that are applied (at any level). Locks prevent lower levels from having different values than the current level. For example, if a value is locked at global, then all user_role''s and users must have the same value. This allows a site to ensure all security settings are the same for everyone. Locks are really used very little (if any) for security since the end-user can not generally change any security settings. However it can be useful to prevent system administrators from accidentally setting a lower-level value.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_security_lock';


GO
PRINT N'Creating [dbo].[int_security_pushdown].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores "pushdown''s". A pushdown is an attempt by the administrator to push-out a value to all users of the global or user_role level. When a change is made by the administrator to a security setting at the global or category level, the default is to "push out" the new value to all users affected by that level. However, there are times when an administrator may want to make a change to the value for a level, but leave the current user''s value alone. A pushdown record is removed once a user logs in. Pushdown''s could be proprogated to the actual int_security table as soon as possible, but this would require a lot of processing time during each change made at the global or category levels.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_security_pushdown';


GO
PRINT N'Creating [dbo].[int_send_sys].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains information for each system sending messages to be stored in the CIS database. Specifically, all system codes defined in the message header (MSH) Sending Application and Receiving Application fields must be loaded in this table. All system codes that are sent as application id''s for placer order numbers and filler order number (see HL7 segments ORC, OBR, and OBX) must be loaded into this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_send_sys';


GO
PRINT N'Creating [dbo].[int_site_link].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the links (URL''s) that appear on the left-hand side of the Clinical Browser homepage. A site can customize the homepage by adding links and groupings of links. The system administration module has screens to allow a site to maintain this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_site_link';


GO
PRINT N'Creating [dbo].[int_specimen].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to capture information of the SPECIMEN that is associated with the performable test. The important information are the type, source, and when the SPECIMEN was collected. The test processing generally is categorized by the SPECIMEN type. Blood related SPECIMEN usually process in hemetology section, etc.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_specimen';


GO
PRINT N'Creating [dbo].[int_specimen_group].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity type is used in the displaying and presentation of specimen information as it relates to a specific result. One of the functions of this entity type is to optionally allow an entry for no specimen type so it can be mapped to a group. It also defines a standard method to map multiple specimen types to one code. The short description of the code we map to will then be used for display. If a specific value is not sent, default back to the specimen code. ''DEFAULT'' should not be an allowable specimen type or specimen group because it is a potential entry in the TGM with specific functionality associated. This table is not currently used in the CDR.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_specimen_group';


GO
PRINT N'Creating [dbo].[int_starter_set].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used strictly for internationalizing the CB. It contains words within the starter data set that must be translated. This is done as part of configuring the site. Whenever the language of a site is changed, this table will drive the translation process. This is generally a one-time thing for each site. This is slightly different than the int_translate table which is being used 100% of the time to translate tags on web pages. This table is only referenced when the language of a site is changed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_starter_set';


GO
PRINT N'Creating [dbo].[int_sysgen].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the system generation information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_sysgen';


GO
PRINT N'Creating [dbo].[int_sysgen_audit].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the system licensing information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_sysgen_audit';


GO
PRINT N'Creating [dbo].[int_sysgen_comment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores comments about system generation.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_sysgen_comment';


GO
PRINT N'Creating [dbo].[int_system_parameter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the parameters for system processes such as number of days past admit/discharge date for trimming pre-admit/inpatient visits OR table name, index name for dbcc/update stats process. It stores parameters that are used by system processes (backend services).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_system_parameter';


GO
PRINT N'Creating [dbo].[int_tech_map].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table maps technicians (lab technicians, x-ray techs, etc). All technicians in HL/7 messages have codes or ID''s that identify them. This table maps the external code to an internal person_id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_tech_map';


GO
PRINT N'Creating [dbo].[int_telephone].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores ALL telephone numbers for patients, NOK''s, guarantor''s, external organizations, etc. While the current/primary phone # for a patient is de-normalized into the int_person table for performance reasons, all current and historical phone #''s are in this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_telephone';


GO
PRINT N'Creating [dbo].[int_template_set_info].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains template set information. Can have up to 4 template sets per user/patient analysis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_template_set_info';


GO
PRINT N'Creating [dbo].[int_test_group].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the display structure of the test hierarchy on the result screen. The test results can be grouped together in a tree type of display structure and each row of this table defines a non-leaf node in the tree display structure. The leaf node information is stored in test_group_detail table. Typically a nonleaf node in the tree is a Department (e.g.. LAB,RAD,ECG,..etc) or a Group (e.g.. Common Chemistry,XRAY etc) A leaf node will be the actual result test code or a universal service code (K-Sodium, NA-Potassium, Albumin, CHEM23 etc.) An example result display structure is: LAB test_group Common Chemistry test_group K test_group_detail NA test_group_detail ALBUMIN test_group_detail CHEM23 test_group_detail Specific Chemistry test_group A test_group_detail B test_group_detail RAD test_group XRAY test_group Chest x-ray test_group_detail', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_test_group';


GO
PRINT N'Creating [dbo].[int_test_group_detail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the leaf nodes of the display structure of the test hierarchy on the result screen. The test results can be grouped together in a tree type of display structure and each row of the test_group table defines a non-leaf node in the tree display structure. The leaf node information is stored in test_group_detail table. Typically a non-leaf node in the tree is a Department (e.g.. LAB,RAD,ECG,..etc) or a Group (e.g.. CommonChemistry,X=RAY etc) A leaf node will be the actual result test code or a universal service code (K-Sodium, NA-Potassium, Albumin, CHEM23 etc.) An example result display structure is: LAB test_group Common Chemistry test_group K test_group_detail NA test_group_detail ALBUMIN test_group_detail CHEM23 test_group_detail Specific Chemistry test_group A test_group_detail B test_group_detail RAD test_group XRAY test_group Chest x-ray test_group_detail', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_test_group_detail';


GO
PRINT N'Creating [dbo].[int_translate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to support internationalization of the Clinical Browser. Every literal string in the entire system has an entry in this table. Each language that is supported by the Clinical Browser has a column in this table. At run-time, the web server translates the literals into the appropriate language based upon a registry entry on the server.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_translate';


GO
PRINT N'Creating [dbo].[int_translate_list].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is a temporary table used to pass data from a given web page to the editor used to edit tags. You can truncate this table at any time (that language tags are not being edited).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_translate_list';


GO
PRINT N'Creating [dbo].[int_user].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The table contains an entry for every user of the Intesys products. All Intesys modules that share the common schema will use the same user record regardless of what modules a user has access. Entries in this table are managed by user role administration module in ICS Admin', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user';


GO
PRINT N'Creating [dbo].[int_user_contact].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Table used to store contact information for a given user. It allows the system to have information about the address, phone #, etc for each user. It also allows multiple phone #''s and addresses.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_contact';


GO
PRINT N'Creating [dbo].[int_user_group].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the groups that are available for user groups. Each user can be a member of zero, one or multiple user groups. Users are assigned to groups to allow coverage or access to the practicing lists of the other members in the group. It is used for any "clinical grouping" that needs to occur for each application and is somewhat application defined.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_group';


GO
PRINT N'Creating [dbo].[int_user_group_member].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the members of a user group. Each user can be a member of zero, one or multiple groups.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_group_member';


GO
PRINT N'Creating [dbo].[int_user_password].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains password history for users whenever they change their password. It is only used if the security option to keep password history has been enabled. It stores previous passwords to prevent users from re-using a password within a certain number of times. The current password for a user is NOT stored in this table (only prior values).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_password';


GO
PRINT N'Creating [dbo].[int_user_role].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to group users into roles. This grouping is only used for security and preferences. Each user in the system must belong to one and only one user role. Users are also grouped by user groups (which is used for clinical grouping such as practicing groups).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_role';


GO
PRINT N'Creating [dbo].[int_user_settings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old Intesys user settings table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_settings';


GO
PRINT N'Creating [dbo].[int_vital_live].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_vital_live';


GO
PRINT N'Creating [dbo].[int_vital_live_temp].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_vital_live_temp';


GO
PRINT N'Creating [dbo].[int_waveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains the waveform data collected and stored over time. A waveform is uniquely identified by patient_id, patient_channel_id, and start_ft. Each row contains a pre-defined amount of waveform data. As new waveform data is collected, the new waveform data is appended to the end of the existing data block, until the pre-defined amount of data is reached. A new row is then created. The data in this table is populated by the MonitorLoader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_waveform';


GO
PRINT N'Creating [dbo].[int_waveform_live].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains the waveform data for a given patient and channel. Each patient_id, channel_id row will be unique. When new data comes in for a patient on a channel the waveform_data is updated. A new record is NOT inserted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_waveform_live';


GO
PRINT N'Creating [dbo].[LeadConfiguration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LeadConfiguration';


GO
PRINT N'Creating [dbo].[LimitAlarmsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains information about limit alarms for patient topic sessions.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LimitAlarmsData';


GO
PRINT N'Creating [dbo].[LimitChangeData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Records changes to limit values.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LimitChangeData';


GO
PRINT N'Creating [dbo].[LiveData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the live feed data for a patient topic session.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LiveData';


GO
PRINT N'Creating [dbo].[LogData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains error log information', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LogData';


GO
PRINT N'Creating [dbo].[MetaData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'MetaData';


GO
PRINT N'Creating [dbo].[ml_duplicate_info].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ml_duplicate_info';


GO
PRINT N'Creating [dbo].[mpi_decision_field].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the results of the score for each field for each decision_log row. These scores are combined to create a total score that is stored in the decision_log record.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_decision_field';


GO
PRINT N'Creating [dbo].[mpi_decision_log].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the results of scoring for each inexact search. Any patients that score above a certain threshold will cause records to be added to this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_decision_log';


GO
PRINT N'Creating [dbo].[mpi_decision_queue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patients that needs to be "scored"(i.e. similar patients (if any) need to be located). An MPI search is necessary to be run against this patient. If similar patients are found, then row(s) are inserted into the decision_log table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_decision_queue';


GO
PRINT N'Creating [dbo].[mpi_patient_link].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to track patients that have been linked (i.e. are really the same patient). For a lot of reasons, a patient may have multiple patient records. Linking allows these duplicate records to be merged in such a way that allows them to later be "unlinked".', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_patient_link';


GO
PRINT N'Creating [dbo].[mpi_search_field].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains all fields you can do a MPI search on. You can change the weights that control how important each field is in the search. This table is used in the MPI search (either by the end user or during the background MPI lookup).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_search_field';


GO
PRINT N'Creating [dbo].[mpi_search_results].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_search_results';


GO
PRINT N'Creating [dbo].[mpi_search_work].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Work table that is used when searching the master patient index for a patient. The rows in this table are deleted after the search is finished.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_search_work';


GO
PRINT N'Creating [dbo].[PacerSpikeLog].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains pacer spike information (one row for each user/patient analysis)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PacerSpikeLog';


GO
PRINT N'Creating [dbo].[PatientData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PatientData';


GO
PRINT N'Creating [dbo].[PatientSessions].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PatientSessions';


GO
PRINT N'Creating [dbo].[PatientSessionsMap].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PatientSessionsMap';


GO
PRINT N'Creating [dbo].[PrintBlobData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintBlobData';


GO
PRINT N'Creating [dbo].[PrintJobs].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintJobs';


GO
PRINT N'Creating [dbo].[PrintRequestData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintRequestData';


GO
PRINT N'Creating [dbo].[PrintRequestDescriptions].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintRequestDescriptions';


GO
PRINT N'Creating [dbo].[PrintRequests].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintRequests';


GO
PRINT N'Creating [dbo].[RemovedAlarms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'RemovedAlarms';


GO
PRINT N'Creating [dbo].[ResourceStrings].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ResourceStrings';


GO
PRINT N'Creating [dbo].[StatusData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Status Data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'StatusData';


GO
PRINT N'Creating [dbo].[StatusDataSets].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'StatusDataSets';


GO
PRINT N'Creating [dbo].[tbl_ConfigurationData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_ConfigurationData';


GO
PRINT N'Creating [dbo].[TopicFeedTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TopicFeedTypes';


GO
PRINT N'Creating [dbo].[TopicSessions].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TopicSessions';


GO
PRINT N'Creating [dbo].[TopicTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Topic Types', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TopicTypes';


GO
PRINT N'Creating [dbo].[TrendData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains histogram information (one row for each user/patient analysis)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TrendData';


GO
PRINT N'Creating [dbo].[VitalsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient vital sign data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'VitalsData';


GO
PRINT N'Creating [dbo].[WaveformAnnotationData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'WaveformAnnotationData';


GO
PRINT N'Creating [dbo].[WaveformData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'WaveformData';


GO
PRINT N'Creating [dbo].[WaveformLiveData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the waveform live feed data for a patient topic session.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'WaveformLiveData';


GO
PRINT N'Creating [dbo].[WaveformPrintData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Information for printing waveforms', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'WaveformPrintData';


GO
PRINT N'Creating [dbo].[v_ActivePatientChannels].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets the latest channel types from waveforms and topics from non-waveform.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_ActivePatientChannels';


GO
PRINT N'Creating [dbo].[v_AvailableDataTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_AvailableDataTypes';


GO
PRINT N'Creating [dbo].[v_CombinedEncounters].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_CombinedEncounters';


GO
PRINT N'Creating [dbo].[v_DevicePatientIdActive].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DevicePatientIdActive';


GO
PRINT N'Creating [dbo].[v_DeviceSessionAssignment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DeviceSessionAssignment';


GO
PRINT N'Creating [dbo].[v_DeviceSessionInfo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DeviceSessionInfo';


GO
PRINT N'Creating [dbo].[v_DeviceSessionOrganization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DeviceSessionOrganization';


GO
PRINT N'Creating [dbo].[v_DiscardedOverlappingLegacyWaveformData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Consolidate the patient channel information for the data between the start and end dates.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DiscardedOverlappingLegacyWaveformData';


GO
PRINT N'Creating [dbo].[v_DiscardedOverlappingWaveformData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DiscardedOverlappingWaveformData';


GO
PRINT N'Creating [dbo].[v_FeedGdsCodes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_FeedGdsCodes';


GO
PRINT N'Creating [dbo].[v_GeneralAlarms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_GeneralAlarms';


GO
PRINT N'Creating [dbo].[v_GeneralAlarmsLite].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_GeneralAlarmsLite';


GO
PRINT N'Creating [dbo].[v_LegacyChannelTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyChannelTypes';


GO
PRINT N'Creating [dbo].[v_LegacyMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyMonitor';


GO
PRINT N'Creating [dbo].[v_LegacyMonitorCombined].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyMonitorCombined';


GO
PRINT N'Creating [dbo].[v_LegacyPatientMonitor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyPatientMonitor';


GO
PRINT N'Creating [dbo].[v_LegacyPatientMonitorCombined].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyPatientMonitorCombined';


GO
PRINT N'Creating [dbo].[v_LegacyWaveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyWaveform';


GO
PRINT N'Creating [dbo].[v_LimitAlarms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Limit alarms view', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LimitAlarms';


GO
PRINT N'Creating [dbo].[v_LimitAlarmsLite].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LimitAlarmsLite';


GO
PRINT N'Creating [dbo].[v_LiveVitalsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LiveVitalsData';


GO
PRINT N'Creating [dbo].[v_MetaData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_MetaData';


GO
PRINT N'Creating [dbo].[v_Monitors].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_Monitors';


GO
PRINT N'Creating [dbo].[v_PatientChannelLegacy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientChannelLegacy';


GO
PRINT N'Creating [dbo].[v_PatientDaysSinceLastDischarge].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the patient ID''s and the number of days since each patients'' last discharge.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientDaysSinceLastDischarge';


GO
PRINT N'Creating [dbo].[v_Patients].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_Patients';


GO
PRINT N'Creating [dbo].[v_PatientSessionOrganization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientSessionOrganization';


GO
PRINT N'Creating [dbo].[v_PatientSessions].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientSessions';


GO
PRINT N'Creating [dbo].[v_PatientTopicSessions].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientTopicSessions';


GO
PRINT N'Creating [dbo].[v_PrintJobs].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PrintJobs';


GO
PRINT N'Creating [dbo].[v_PrintJobsWaveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PrintJobsWaveform';


GO
PRINT N'Creating [dbo].[v_StatusData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_StatusData';


GO
PRINT N'Creating [dbo].[v_StitchedPatients].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_StitchedPatients';


GO
PRINT N'Creating [dbo].[v_TopicTypes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_TopicTypes';


GO
PRINT N'Creating [dbo].[v_VitalsData].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets the vitals data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_VitalsData';


GO
PRINT N'Creating [dbo].[v_WaveformSampleRate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets the waveform sample rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_WaveformSampleRate';


GO
PRINT N'Update complete.';


GO
