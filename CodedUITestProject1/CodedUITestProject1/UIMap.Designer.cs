// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// ClinicalAccessOpenPatientClickAround - Use 'ClinicalAccessOpenPatientClickAroundParams' to pass parameters into this method.
        /// </summary>
        public void ClinicalAccessOpenPatientClickAround()
        {
            #region Variable Declarations
            WinTitleBar uICLINICALACCESSUnknowTitleBar = this.UICLINICALACCESSUnknowWindow.UICLINICALACCESSUnknowTitleBar;
            WinButton uIBtnSelectPatientButton = this.UICLINICALACCESSUnknowWindow.UIBtnSelectPatientWindow.UIBtnSelectPatientButton;
            WinCell uIGILABCell = this.UIPatientSelectDialogWindow.UIDgvUnitsWindow.UIDataGridViewTable.UIRow5Row.UIGILABCell;
            WinCell uIHeartORCell = this.UIPatientSelectDialogWindow.UIDgvUnitsWindow.UIDataGridViewTable.UIRow6Row.UIHeartORCell;
            WinCell uIPADUCell = this.UIPatientSelectDialogWindow.UIDgvUnitsWindow.UIDataGridViewTable.UIRow12Row.UIPADUCell;
            WinCell uISICUCell = this.UIPatientSelectDialogWindow.UIDgvUnitsWindow.UIDataGridViewTable.UIRow14Row.UISICUCell;
            WinCell uISIC07Cell = this.UIPatientSelectDialogWindow.UIDgvPatientsWindow.UIDataGridViewTable.UIRow0Row.UISIC07Cell;
            WinRadioButton uIArrhythmiaRadioButton = this.UICLINICALACCESSUnknowWindow.UIArrhythmiaWindow.UIArrhythmiaRadioButton;
            WinRadioButton uIAlarmsRadioButton = this.UICLINICALACCESSUnknowWindow.UIAlarmsWindow.UIAlarmsRadioButton;
            WinRadioButton uISavedEventsRadioButton = this.UICLINICALACCESSUnknowWindow.UISavedEventsWindow.UISavedEventsRadioButton;
            WinRadioButton uIItem12LeadRadioButton = this.UICLINICALACCESSUnknowWindow.UIItem12LeadWindow.UIItem12LeadRadioButton;
            WinRadioButton uITrendsRadioButton = this.UICLINICALACCESSUnknowWindow.UITrendsWindow.UITrendsRadioButton;
            WinRadioButton uIPrintJobsRadioButton = this.UICLINICALACCESSUnknowWindow.UIPrintJobsWindow.UIPrintJobsRadioButton;
            WinButton uIAnalyzeButton = this.UICLINICALACCESSUnknowWindow.UIAnalyzeWindow.UIAnalyzeButton;
            WinButton uIOKButton = this.UISelectTimeWindow.UIOKWindow.UIOKButton;
            WinRadioButton uIWaveformsRadioButton = this.UICLINICALACCESSUnknowWindow.UIWaveformsWindow.UIWaveformsRadioButton;
            WinButton uISettingsButton = this.UICLINICALACCESSUnknowWindow.UISettingsWindow.UISettingsButton;
            WinClient uIGvParameterClient = this.UIDisplaySettingsWindow.UIGvParameterWindow.UIGvParameterClient;
            WinRadioButton uICalipersRadioButton = this.UICLINICALACCESSUnknowWindow.UICalipersWindow.UICalipersRadioButton;
            WinButton uIIgnoreButton = this.UICLINICALACCESSUnknowWindow.UIIgnoreWindow.UIIgnoreButton;
            WinButton uIWaveformignoremessagButton = this.UIWaveformignoremessagWindow.UIMCloseButtonWindow.UIWaveformignoremessagButton;
            WinButton uIRestoreButton = this.UICLINICALACCESSUnknowWindow.UIRestoreWindow.UIRestoreButton;
            WinButton uIWaveformrestoremessaButton = this.UIWaveformrestoremessaWindow.UIMCloseButtonWindow.UIWaveformrestoremessaButton;
            WinButton uISaveButton = this.UICLINICALACCESSUnknowWindow.UISaveWindow.UISaveButton;
            WinButton uIInformationButton = this.UIInformationWindow.UIMCloseButtonWindow.UIInformationButton;
            WinButton uIPrintButton = this.UICLINICALACCESSUnknowWindow.UIPrintWindow.UIPrintButton;
            WinButton uIPrintReportButton = this.UICLINICALACCESSUnknowWindow.UIPrintReportWindow.UIPrintReportButton;
            WinClient uIItem130201781040PMClient = this.UICLINICALACCESSUnknowWindow.UIWaveformControlWindow.UIItem130201781040PMClient;
            WinButton uISettingsButton1 = this.UICLINICALACCESSUnknowWindow.UISettingsWindow1.UISettingsButton;
            WinRadioButton uICalipersRadioButton1 = this.UICLINICALACCESSUnknowWindow.UICalipersWindow1.UICalipersRadioButton;
            WinButton uIRemoveButton = this.UICLINICALACCESSUnknowWindow.UIRemoveWindow.UIRemoveButton;
            WinButton uISaveButton1 = this.UICLINICALACCESSUnknowWindow.UISaveWindow1.UISaveButton;
            WinButton uIOKButton1 = this.UISaveWindow.UIOKWindow.UIOKButton;
            WinButton uIPrintButton1 = this.UICLINICALACCESSUnknowWindow.UIPrintWindow1.UIPrintButton;
            WinButton uIPrintButton2 = this.UIPrintWindow.UIMCloseButtonWindow.UIPrintButton;
            WinButton uIPrintReportButton1 = this.UICLINICALACCESSUnknowWindow.UIPrintReportWindow1.UIPrintReportButton;
            WinButton uIPrintReportButton2 = this.UIPrintReportWindow.UIMCloseButtonWindow.UIPrintReportButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            ApplicationUnderTest.Launch(@"D:\TFSWS\TG_ICSG2_Dev\BuildOutput\Debug\x86\ClinicalHistoryXP.exe");

            // Click 'CLINICAL ACCESS - Unknown [SIC07]' title bar
            Mouse.Click(uICLINICALACCESSUnknowTitleBar, new Point(713, 11));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'btnSelectPatient' button
            Mouse.Click(uIBtnSelectPatientButton, new Point(60, 15));

            // Click 'GI LAB' cell
            Mouse.Click(uIGILABCell, new Point(67, 4));

            // Click 'Heart OR' cell
            Mouse.Click(uIHeartORCell, new Point(61, 12));

            // Click 'PADU' cell
            Mouse.Click(uIPADUCell, new Point(52, 9));

            // Click 'SICU' cell
            Mouse.Click(uISICUCell, new Point(50, 10));

            // Click 'SIC07' cell
            Mouse.Click(uISIC07Cell, new Point(68, 9));

            // Select 'Arrhythmia' radio button
            uIArrhythmiaRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UIArrhythmiaRadioButtonSelected;

            // Select 'Alarms' radio button
            uIAlarmsRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UIAlarmsRadioButtonSelected;

            // Select 'Saved Events' radio button
            uISavedEventsRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UISavedEventsRadioButtonSelected;

            // Select '12-Lead' radio button
            uIItem12LeadRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UIItem12LeadRadioButtonSelected;

            // Select 'Trends' radio button
            uITrendsRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UITrendsRadioButtonSelected;

            // Select 'Print Jobs' radio button
            uIPrintJobsRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UIPrintJobsRadioButtonSelected;

            // Select 'Arrhythmia' radio button
            uIArrhythmiaRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UIArrhythmiaRadioButtonSelected1;

            // Click 'Analyze' button
            Mouse.Click(uIAnalyzeButton, new Point(110, 20));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(81, 31));

            // Select 'Waveforms' radio button
            uIWaveformsRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UIWaveformsRadioButtonSelected;

            // Click 'Settings' button
            Mouse.Click(uISettingsButton, new Point(65, 17));

            // Type '{Escape}' in 'gvParameter' client
            Keyboard.SendKeys(uIGvParameterClient, this.ClinicalAccessOpenPatientClickAroundParams.UIGvParameterClientSendKeys, ModifierKeys.None);

            // Select 'Calipers' radio button
            uICalipersRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UICalipersRadioButtonSelected;

            // Type '{Escape}' in 'Calipers' radio button
            Keyboard.SendKeys(uICalipersRadioButton, this.ClinicalAccessOpenPatientClickAroundParams.UICalipersRadioButtonSendKeys, ModifierKeys.None);

            // Click 'Ignore' button
            Mouse.Click(uIIgnoreButton, new Point(59, 10));

            // Type '{Escape}' in 'Waveform ignore message' button
            Keyboard.SendKeys(uIWaveformignoremessagButton, this.ClinicalAccessOpenPatientClickAroundParams.UIWaveformignoremessagButtonSendKeys, ModifierKeys.None);

            // Click 'Restore' button
            Mouse.Click(uIRestoreButton, new Point(59, 18));

            // Type '{Escape}' in 'Waveform restore message' button
            Keyboard.SendKeys(uIWaveformrestoremessaButton, this.ClinicalAccessOpenPatientClickAroundParams.UIWaveformrestoremessaButtonSendKeys, ModifierKeys.None);

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(47, 18));

            // Type '{Escape}' in 'Information' button
            Keyboard.SendKeys(uIInformationButton, this.ClinicalAccessOpenPatientClickAroundParams.UIInformationButtonSendKeys, ModifierKeys.None);

            // Click 'Print' button
            Mouse.Click(uIPrintButton, new Point(55, 14));

            // Type '{Escape}' in 'Information' button
            Keyboard.SendKeys(uIInformationButton, this.ClinicalAccessOpenPatientClickAroundParams.UIInformationButtonSendKeys1, ModifierKeys.None);

            // Click 'Print Report' button
            Mouse.Click(uIPrintReportButton, new Point(47, 20));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(59, 13));

            // The control is not available or not valid.

            // Select 'Arrhythmia' radio button
            uIArrhythmiaRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UIArrhythmiaRadioButtonSelected2;

            // Select 'Alarms' radio button
            uIAlarmsRadioButton.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UIAlarmsRadioButtonSelected1;

            // Click '1/30/2017 8:10:40 PM' client
            Mouse.Click(uIItem130201781040PMClient, new Point(146, 29));

            // Click 'Settings' button
            Mouse.Click(uISettingsButton1, new Point(95, 28));

            // Type '{Escape}' in 'gvParameter' client
            Keyboard.SendKeys(uIGvParameterClient, this.ClinicalAccessOpenPatientClickAroundParams.UIGvParameterClientSendKeys1, ModifierKeys.None);

            // Select 'Calipers' radio button
            uICalipersRadioButton1.Selected = this.ClinicalAccessOpenPatientClickAroundParams.UICalipersRadioButtonSelected1;

            // Type '{Escape}' in 'Calipers' radio button
            Keyboard.SendKeys(uICalipersRadioButton1, this.ClinicalAccessOpenPatientClickAroundParams.UICalipersRadioButtonSendKeys1, ModifierKeys.None);

            // Click 'Remove' button
            Mouse.Click(uIRemoveButton, new Point(86, 16));

            // Type '{Escape}' in 'Remove' button
            Keyboard.SendKeys(uIRemoveButton, this.ClinicalAccessOpenPatientClickAroundParams.UIRemoveButtonSendKeys, ModifierKeys.None);

            // Click 'Save' button
            Mouse.Click(uISaveButton1, new Point(78, 14));

            // Type '{Escape}' in 'OK' button
            Keyboard.SendKeys(uIOKButton1, this.ClinicalAccessOpenPatientClickAroundParams.UIOKButtonSendKeys, ModifierKeys.None);

            // Click 'Print' button
            Mouse.Click(uIPrintButton1, new Point(73, 17));

            // Type '{Escape}' in 'Print' button
            Keyboard.SendKeys(uIPrintButton2, this.ClinicalAccessOpenPatientClickAroundParams.UIPrintButtonSendKeys, ModifierKeys.None);

            // Click 'Print Report' button
            Mouse.Click(uIPrintReportButton1, new Point(63, 26));

            // Type '{Escape}' in 'Print Report' button
            Keyboard.SendKeys(uIPrintReportButton2, this.ClinicalAccessOpenPatientClickAroundParams.UIPrintReportButtonSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual ClinicalAccessOpenPatientClickAroundParams ClinicalAccessOpenPatientClickAroundParams
        {
            get
            {
                if ((this.mClinicalAccessOpenPatientClickAroundParams == null))
                {
                    this.mClinicalAccessOpenPatientClickAroundParams = new ClinicalAccessOpenPatientClickAroundParams();
                }
                return this.mClinicalAccessOpenPatientClickAroundParams;
            }
        }
        
        public UICLINICALACCESSUnknowWindow UICLINICALACCESSUnknowWindow
        {
            get
            {
                if ((this.mUICLINICALACCESSUnknowWindow == null))
                {
                    this.mUICLINICALACCESSUnknowWindow = new UICLINICALACCESSUnknowWindow();
                }
                return this.mUICLINICALACCESSUnknowWindow;
            }
        }
        
        public UIPatientSelectDialogWindow UIPatientSelectDialogWindow
        {
            get
            {
                if ((this.mUIPatientSelectDialogWindow == null))
                {
                    this.mUIPatientSelectDialogWindow = new UIPatientSelectDialogWindow();
                }
                return this.mUIPatientSelectDialogWindow;
            }
        }
        
        public UISelectTimeWindow UISelectTimeWindow
        {
            get
            {
                if ((this.mUISelectTimeWindow == null))
                {
                    this.mUISelectTimeWindow = new UISelectTimeWindow();
                }
                return this.mUISelectTimeWindow;
            }
        }
        
        public UIDisplaySettingsWindow UIDisplaySettingsWindow
        {
            get
            {
                if ((this.mUIDisplaySettingsWindow == null))
                {
                    this.mUIDisplaySettingsWindow = new UIDisplaySettingsWindow();
                }
                return this.mUIDisplaySettingsWindow;
            }
        }
        
        public UIWaveformignoremessagWindow UIWaveformignoremessagWindow
        {
            get
            {
                if ((this.mUIWaveformignoremessagWindow == null))
                {
                    this.mUIWaveformignoremessagWindow = new UIWaveformignoremessagWindow();
                }
                return this.mUIWaveformignoremessagWindow;
            }
        }
        
        public UIWaveformrestoremessaWindow UIWaveformrestoremessaWindow
        {
            get
            {
                if ((this.mUIWaveformrestoremessaWindow == null))
                {
                    this.mUIWaveformrestoremessaWindow = new UIWaveformrestoremessaWindow();
                }
                return this.mUIWaveformrestoremessaWindow;
            }
        }
        
        public UIInformationWindow UIInformationWindow
        {
            get
            {
                if ((this.mUIInformationWindow == null))
                {
                    this.mUIInformationWindow = new UIInformationWindow();
                }
                return this.mUIInformationWindow;
            }
        }
        
        public UISaveWindow2 UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow2();
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIPrintWindow2 UIPrintWindow
        {
            get
            {
                if ((this.mUIPrintWindow == null))
                {
                    this.mUIPrintWindow = new UIPrintWindow2();
                }
                return this.mUIPrintWindow;
            }
        }
        
        public UIPrintReportWindow2 UIPrintReportWindow
        {
            get
            {
                if ((this.mUIPrintReportWindow == null))
                {
                    this.mUIPrintReportWindow = new UIPrintReportWindow2();
                }
                return this.mUIPrintReportWindow;
            }
        }
        #endregion
        
        #region Fields
        private ClinicalAccessOpenPatientClickAroundParams mClinicalAccessOpenPatientClickAroundParams;
        
        private UICLINICALACCESSUnknowWindow mUICLINICALACCESSUnknowWindow;
        
        private UIPatientSelectDialogWindow mUIPatientSelectDialogWindow;
        
        private UISelectTimeWindow mUISelectTimeWindow;
        
        private UIDisplaySettingsWindow mUIDisplaySettingsWindow;
        
        private UIWaveformignoremessagWindow mUIWaveformignoremessagWindow;
        
        private UIWaveformrestoremessaWindow mUIWaveformrestoremessaWindow;
        
        private UIInformationWindow mUIInformationWindow;
        
        private UISaveWindow2 mUISaveWindow;
        
        private UIPrintWindow2 mUIPrintWindow;
        
        private UIPrintReportWindow2 mUIPrintReportWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClinicalAccessOpenPatientClickAround'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ClinicalAccessOpenPatientClickAroundParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Arrhythmia' radio button
        /// </summary>
        public bool UIArrhythmiaRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Alarms' radio button
        /// </summary>
        public bool UIAlarmsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Saved Events' radio button
        /// </summary>
        public bool UISavedEventsRadioButtonSelected = true;
        
        /// <summary>
        /// Select '12-Lead' radio button
        /// </summary>
        public bool UIItem12LeadRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Trends' radio button
        /// </summary>
        public bool UITrendsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Print Jobs' radio button
        /// </summary>
        public bool UIPrintJobsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Arrhythmia' radio button
        /// </summary>
        public bool UIArrhythmiaRadioButtonSelected1 = true;
        
        /// <summary>
        /// Select 'Waveforms' radio button
        /// </summary>
        public bool UIWaveformsRadioButtonSelected = true;
        
        /// <summary>
        /// Type '{Escape}' in 'gvParameter' client
        /// </summary>
        public string UIGvParameterClientSendKeys = "{Escape}";
        
        /// <summary>
        /// Select 'Calipers' radio button
        /// </summary>
        public bool UICalipersRadioButtonSelected = true;
        
        /// <summary>
        /// Type '{Escape}' in 'Calipers' radio button
        /// </summary>
        public string UICalipersRadioButtonSendKeys = "{Escape}";
        
        /// <summary>
        /// Type '{Escape}' in 'Waveform ignore message' button
        /// </summary>
        public string UIWaveformignoremessagButtonSendKeys = "{Escape}";
        
        /// <summary>
        /// Type '{Escape}' in 'Waveform restore message' button
        /// </summary>
        public string UIWaveformrestoremessaButtonSendKeys = "{Escape}";
        
        /// <summary>
        /// Type '{Escape}' in 'Information' button
        /// </summary>
        public string UIInformationButtonSendKeys = "{Escape}";
        
        /// <summary>
        /// Type '{Escape}' in 'Information' button
        /// </summary>
        public string UIInformationButtonSendKeys1 = "{Escape}";
        
        /// <summary>
        /// Select 'Arrhythmia' radio button
        /// </summary>
        public bool UIArrhythmiaRadioButtonSelected2 = true;
        
        /// <summary>
        /// Select 'Alarms' radio button
        /// </summary>
        public bool UIAlarmsRadioButtonSelected1 = true;
        
        /// <summary>
        /// Type '{Escape}' in 'gvParameter' client
        /// </summary>
        public string UIGvParameterClientSendKeys1 = "{Escape}";
        
        /// <summary>
        /// Select 'Calipers' radio button
        /// </summary>
        public bool UICalipersRadioButtonSelected1 = true;
        
        /// <summary>
        /// Type '{Escape}' in 'Calipers' radio button
        /// </summary>
        public string UICalipersRadioButtonSendKeys1 = "{Escape}";
        
        /// <summary>
        /// Type '{Escape}' in 'Remove' button
        /// </summary>
        public string UIRemoveButtonSendKeys = "{Escape}";
        
        /// <summary>
        /// Type '{Escape}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Escape}";
        
        /// <summary>
        /// Type '{Escape}' in 'Print' button
        /// </summary>
        public string UIPrintButtonSendKeys = "{Escape}";
        
        /// <summary>
        /// Type '{Escape}' in 'Print Report' button
        /// </summary>
        public string UIPrintReportButtonSendKeys = "{Escape}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICLINICALACCESSUnknowWindow : WinWindow
    {
        
        public UICLINICALACCESSUnknowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CLINICAL ACCESS - Unknown [SIC07]";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UICLINICALACCESSUnknowTitleBar
        {
            get
            {
                if ((this.mUICLINICALACCESSUnknowTitleBar == null))
                {
                    this.mUICLINICALACCESSUnknowTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICLINICALACCESSUnknowTitleBar.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUICLINICALACCESSUnknowTitleBar;
            }
        }
        
        public UIBtnSelectPatientWindow UIBtnSelectPatientWindow
        {
            get
            {
                if ((this.mUIBtnSelectPatientWindow == null))
                {
                    this.mUIBtnSelectPatientWindow = new UIBtnSelectPatientWindow(this);
                }
                return this.mUIBtnSelectPatientWindow;
            }
        }
        
        public UIArrhythmiaWindow UIArrhythmiaWindow
        {
            get
            {
                if ((this.mUIArrhythmiaWindow == null))
                {
                    this.mUIArrhythmiaWindow = new UIArrhythmiaWindow(this);
                }
                return this.mUIArrhythmiaWindow;
            }
        }
        
        public UIAlarmsWindow UIAlarmsWindow
        {
            get
            {
                if ((this.mUIAlarmsWindow == null))
                {
                    this.mUIAlarmsWindow = new UIAlarmsWindow(this);
                }
                return this.mUIAlarmsWindow;
            }
        }
        
        public UISavedEventsWindow UISavedEventsWindow
        {
            get
            {
                if ((this.mUISavedEventsWindow == null))
                {
                    this.mUISavedEventsWindow = new UISavedEventsWindow(this);
                }
                return this.mUISavedEventsWindow;
            }
        }
        
        public UIItem12LeadWindow UIItem12LeadWindow
        {
            get
            {
                if ((this.mUIItem12LeadWindow == null))
                {
                    this.mUIItem12LeadWindow = new UIItem12LeadWindow(this);
                }
                return this.mUIItem12LeadWindow;
            }
        }
        
        public UITrendsWindow UITrendsWindow
        {
            get
            {
                if ((this.mUITrendsWindow == null))
                {
                    this.mUITrendsWindow = new UITrendsWindow(this);
                }
                return this.mUITrendsWindow;
            }
        }
        
        public UIPrintJobsWindow UIPrintJobsWindow
        {
            get
            {
                if ((this.mUIPrintJobsWindow == null))
                {
                    this.mUIPrintJobsWindow = new UIPrintJobsWindow(this);
                }
                return this.mUIPrintJobsWindow;
            }
        }
        
        public UIAnalyzeWindow UIAnalyzeWindow
        {
            get
            {
                if ((this.mUIAnalyzeWindow == null))
                {
                    this.mUIAnalyzeWindow = new UIAnalyzeWindow(this);
                }
                return this.mUIAnalyzeWindow;
            }
        }
        
        public UIWaveformsWindow UIWaveformsWindow
        {
            get
            {
                if ((this.mUIWaveformsWindow == null))
                {
                    this.mUIWaveformsWindow = new UIWaveformsWindow(this);
                }
                return this.mUIWaveformsWindow;
            }
        }
        
        public UISettingsWindow UISettingsWindow
        {
            get
            {
                if ((this.mUISettingsWindow == null))
                {
                    this.mUISettingsWindow = new UISettingsWindow(this);
                }
                return this.mUISettingsWindow;
            }
        }
        
        public UICalipersWindow UICalipersWindow
        {
            get
            {
                if ((this.mUICalipersWindow == null))
                {
                    this.mUICalipersWindow = new UICalipersWindow(this);
                }
                return this.mUICalipersWindow;
            }
        }
        
        public UIIgnoreWindow UIIgnoreWindow
        {
            get
            {
                if ((this.mUIIgnoreWindow == null))
                {
                    this.mUIIgnoreWindow = new UIIgnoreWindow(this);
                }
                return this.mUIIgnoreWindow;
            }
        }
        
        public UIRestoreWindow UIRestoreWindow
        {
            get
            {
                if ((this.mUIRestoreWindow == null))
                {
                    this.mUIRestoreWindow = new UIRestoreWindow(this);
                }
                return this.mUIRestoreWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIPrintWindow UIPrintWindow
        {
            get
            {
                if ((this.mUIPrintWindow == null))
                {
                    this.mUIPrintWindow = new UIPrintWindow(this);
                }
                return this.mUIPrintWindow;
            }
        }
        
        public UIPrintReportWindow UIPrintReportWindow
        {
            get
            {
                if ((this.mUIPrintReportWindow == null))
                {
                    this.mUIPrintReportWindow = new UIPrintReportWindow(this);
                }
                return this.mUIPrintReportWindow;
            }
        }
        
        public UIWaveformControlWindow UIWaveformControlWindow
        {
            get
            {
                if ((this.mUIWaveformControlWindow == null))
                {
                    this.mUIWaveformControlWindow = new UIWaveformControlWindow(this);
                }
                return this.mUIWaveformControlWindow;
            }
        }
        
        public UISettingsWindow1 UISettingsWindow1
        {
            get
            {
                if ((this.mUISettingsWindow1 == null))
                {
                    this.mUISettingsWindow1 = new UISettingsWindow1(this);
                }
                return this.mUISettingsWindow1;
            }
        }
        
        public UICalipersWindow1 UICalipersWindow1
        {
            get
            {
                if ((this.mUICalipersWindow1 == null))
                {
                    this.mUICalipersWindow1 = new UICalipersWindow1(this);
                }
                return this.mUICalipersWindow1;
            }
        }
        
        public UIRemoveWindow UIRemoveWindow
        {
            get
            {
                if ((this.mUIRemoveWindow == null))
                {
                    this.mUIRemoveWindow = new UIRemoveWindow(this);
                }
                return this.mUIRemoveWindow;
            }
        }
        
        public UISaveWindow1 UISaveWindow1
        {
            get
            {
                if ((this.mUISaveWindow1 == null))
                {
                    this.mUISaveWindow1 = new UISaveWindow1(this);
                }
                return this.mUISaveWindow1;
            }
        }
        
        public UIPrintWindow1 UIPrintWindow1
        {
            get
            {
                if ((this.mUIPrintWindow1 == null))
                {
                    this.mUIPrintWindow1 = new UIPrintWindow1(this);
                }
                return this.mUIPrintWindow1;
            }
        }
        
        public UIPrintReportWindow1 UIPrintReportWindow1
        {
            get
            {
                if ((this.mUIPrintReportWindow1 == null))
                {
                    this.mUIPrintReportWindow1 = new UIPrintReportWindow1(this);
                }
                return this.mUIPrintReportWindow1;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUICLINICALACCESSUnknowTitleBar;
        
        private UIBtnSelectPatientWindow mUIBtnSelectPatientWindow;
        
        private UIArrhythmiaWindow mUIArrhythmiaWindow;
        
        private UIAlarmsWindow mUIAlarmsWindow;
        
        private UISavedEventsWindow mUISavedEventsWindow;
        
        private UIItem12LeadWindow mUIItem12LeadWindow;
        
        private UITrendsWindow mUITrendsWindow;
        
        private UIPrintJobsWindow mUIPrintJobsWindow;
        
        private UIAnalyzeWindow mUIAnalyzeWindow;
        
        private UIWaveformsWindow mUIWaveformsWindow;
        
        private UISettingsWindow mUISettingsWindow;
        
        private UICalipersWindow mUICalipersWindow;
        
        private UIIgnoreWindow mUIIgnoreWindow;
        
        private UIRestoreWindow mUIRestoreWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UIPrintWindow mUIPrintWindow;
        
        private UIPrintReportWindow mUIPrintReportWindow;
        
        private UIWaveformControlWindow mUIWaveformControlWindow;
        
        private UISettingsWindow1 mUISettingsWindow1;
        
        private UICalipersWindow1 mUICalipersWindow1;
        
        private UIRemoveWindow mUIRemoveWindow;
        
        private UISaveWindow1 mUISaveWindow1;
        
        private UIPrintWindow1 mUIPrintWindow1;
        
        private UIPrintReportWindow1 mUIPrintReportWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBtnSelectPatientWindow : WinWindow
    {
        
        public UIBtnSelectPatientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSelectPatient";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnSelectPatientButton
        {
            get
            {
                if ((this.mUIBtnSelectPatientButton == null))
                {
                    this.mUIBtnSelectPatientButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnSelectPatientButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIBtnSelectPatientButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnSelectPatientButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIArrhythmiaWindow : WinWindow
    {
        
        public UIArrhythmiaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnArrhythmiaReview";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIArrhythmiaRadioButton
        {
            get
            {
                if ((this.mUIArrhythmiaRadioButton == null))
                {
                    this.mUIArrhythmiaRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIArrhythmiaRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Arrhythmia";
                    this.mUIArrhythmiaRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIArrhythmiaRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIArrhythmiaRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAlarmsWindow : WinWindow
    {
        
        public UIAlarmsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAlarmHistory";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIAlarmsRadioButton
        {
            get
            {
                if ((this.mUIAlarmsRadioButton == null))
                {
                    this.mUIAlarmsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIAlarmsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Alarms";
                    this.mUIAlarmsRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIAlarmsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIAlarmsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISavedEventsWindow : WinWindow
    {
        
        public UISavedEventsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSavedEventReview";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UISavedEventsRadioButton
        {
            get
            {
                if ((this.mUISavedEventsRadioButton == null))
                {
                    this.mUISavedEventsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUISavedEventsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Saved Events";
                    this.mUISavedEventsRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUISavedEventsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUISavedEventsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItem12LeadWindow : WinWindow
    {
        
        public UIItem12LeadWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btn12Lead";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIItem12LeadRadioButton
        {
            get
            {
                if ((this.mUIItem12LeadRadioButton == null))
                {
                    this.mUIItem12LeadRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIItem12LeadRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "12-Lead";
                    this.mUIItem12LeadRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIItem12LeadRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIItem12LeadRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITrendsWindow : WinWindow
    {
        
        public UITrendsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnTrends";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UITrendsRadioButton
        {
            get
            {
                if ((this.mUITrendsRadioButton == null))
                {
                    this.mUITrendsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUITrendsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Trends";
                    this.mUITrendsRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUITrendsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUITrendsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPrintJobsWindow : WinWindow
    {
        
        public UIPrintJobsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPrintManager";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIPrintJobsRadioButton
        {
            get
            {
                if ((this.mUIPrintJobsRadioButton == null))
                {
                    this.mUIPrintJobsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIPrintJobsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Print Jobs";
                    this.mUIPrintJobsRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIPrintJobsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIPrintJobsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAnalyzeWindow : WinWindow
    {
        
        public UIAnalyzeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAnalyze";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIAnalyzeButton
        {
            get
            {
                if ((this.mUIAnalyzeButton == null))
                {
                    this.mUIAnalyzeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAnalyzeButton.SearchProperties[WinButton.PropertyNames.Name] = "Analyze";
                    this.mUIAnalyzeButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIAnalyzeButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAnalyzeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWaveformsWindow : WinWindow
    {
        
        public UIWaveformsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnWaveformReview";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIWaveformsRadioButton
        {
            get
            {
                if ((this.mUIWaveformsRadioButton == null))
                {
                    this.mUIWaveformsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIWaveformsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Waveforms";
                    this.mUIWaveformsRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIWaveformsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIWaveformsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettingsWindow : WinWindow
    {
        
        public UISettingsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDispSettings";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UISettingsButton
        {
            get
            {
                if ((this.mUISettingsButton == null))
                {
                    this.mUISettingsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISettingsButton.SearchProperties[WinButton.PropertyNames.Name] = "Settings";
                    this.mUISettingsButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUISettingsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISettingsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICalipersWindow : WinWindow
    {
        
        public UICalipersWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCalipers";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UICalipersRadioButton
        {
            get
            {
                if ((this.mUICalipersRadioButton == null))
                {
                    this.mUICalipersRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUICalipersRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Calipers";
                    this.mUICalipersRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUICalipersRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUICalipersRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIIgnoreWindow : WinWindow
    {
        
        public UIIgnoreWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnIgnore";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIIgnoreButton
        {
            get
            {
                if ((this.mUIIgnoreButton == null))
                {
                    this.mUIIgnoreButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIgnoreButton.SearchProperties[WinButton.PropertyNames.Name] = "Ignore";
                    this.mUIIgnoreButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIIgnoreButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIgnoreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRestoreWindow : WinWindow
    {
        
        public UIRestoreWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRestore";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIRestoreButton
        {
            get
            {
                if ((this.mUIRestoreButton == null))
                {
                    this.mUIRestoreButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRestoreButton.SearchProperties[WinButton.PropertyNames.Name] = "Restore";
                    this.mUIRestoreButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIRestoreButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRestoreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSave";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPrintWindow : WinWindow
    {
        
        public UIPrintWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPrint";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrintButton
        {
            get
            {
                if ((this.mUIPrintButton == null))
                {
                    this.mUIPrintButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrintButton.SearchProperties[WinButton.PropertyNames.Name] = "Print";
                    this.mUIPrintButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIPrintButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrintButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPrintReportWindow : WinWindow
    {
        
        public UIPrintReportWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPrintReport";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrintReportButton
        {
            get
            {
                if ((this.mUIPrintReportButton == null))
                {
                    this.mUIPrintReportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrintReportButton.SearchProperties[WinButton.PropertyNames.Name] = "Print Report";
                    this.mUIPrintReportButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIPrintReportButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrintReportButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWaveformControlWindow : WinWindow
    {
        
        public UIWaveformControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "WaveformControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "20";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinClient UIItem130201781040PMClient
        {
            get
            {
                if ((this.mUIItem130201781040PMClient == null))
                {
                    this.mUIItem130201781040PMClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItem130201781040PMClient.SearchProperties[WinControl.PropertyNames.Name] = "1/30/2017 8:10:40 PM";
                    this.mUIItem130201781040PMClient.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIItem130201781040PMClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItem130201781040PMClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISettingsWindow1 : WinWindow
    {
        
        public UISettingsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dispOptionsBtn";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UISettingsButton
        {
            get
            {
                if ((this.mUISettingsButton == null))
                {
                    this.mUISettingsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISettingsButton.SearchProperties[WinButton.PropertyNames.Name] = "Settings";
                    this.mUISettingsButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUISettingsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISettingsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICalipersWindow1 : WinWindow
    {
        
        public UICalipersWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "calipersBtn";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UICalipersRadioButton
        {
            get
            {
                if ((this.mUICalipersRadioButton == null))
                {
                    this.mUICalipersRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUICalipersRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Calipers";
                    this.mUICalipersRadioButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUICalipersRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUICalipersRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRemoveWindow : WinWindow
    {
        
        public UIRemoveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "removeBtn";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIRemoveButton
        {
            get
            {
                if ((this.mUIRemoveButton == null))
                {
                    this.mUIRemoveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRemoveButton.SearchProperties[WinButton.PropertyNames.Name] = "Remove";
                    this.mUIRemoveButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIRemoveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRemoveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow1 : WinWindow
    {
        
        public UISaveWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "saveBtn";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPrintWindow1 : WinWindow
    {
        
        public UIPrintWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "printBtn";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrintButton
        {
            get
            {
                if ((this.mUIPrintButton == null))
                {
                    this.mUIPrintButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrintButton.SearchProperties[WinButton.PropertyNames.Name] = "Print";
                    this.mUIPrintButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIPrintButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrintButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPrintReportWindow1 : WinWindow
    {
        
        public UIPrintReportWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "printReportBtn";
            this.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrintReportButton
        {
            get
            {
                if ((this.mUIPrintReportButton == null))
                {
                    this.mUIPrintReportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrintReportButton.SearchProperties[WinButton.PropertyNames.Name] = "Print Report";
                    this.mUIPrintReportButton.WindowTitles.Add("CLINICAL ACCESS - Unknown [SIC07]");
                    #endregion
                }
                return this.mUIPrintReportButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrintReportButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPatientSelectDialogWindow : WinWindow
    {
        
        public UIPatientSelectDialogWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Patient Select Dialog";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public UIDgvUnitsWindow UIDgvUnitsWindow
        {
            get
            {
                if ((this.mUIDgvUnitsWindow == null))
                {
                    this.mUIDgvUnitsWindow = new UIDgvUnitsWindow(this);
                }
                return this.mUIDgvUnitsWindow;
            }
        }
        
        public UIDgvPatientsWindow UIDgvPatientsWindow
        {
            get
            {
                if ((this.mUIDgvPatientsWindow == null))
                {
                    this.mUIDgvPatientsWindow = new UIDgvPatientsWindow(this);
                }
                return this.mUIDgvPatientsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDgvUnitsWindow mUIDgvUnitsWindow;
        
        private UIDgvPatientsWindow mUIDgvPatientsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDgvUnitsWindow : WinWindow
    {
        
        public UIDgvUnitsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvUnits";
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public UIRow5Row UIRow5Row
        {
            get
            {
                if ((this.mUIRow5Row == null))
                {
                    this.mUIRow5Row = new UIRow5Row(this);
                }
                return this.mUIRow5Row;
            }
        }
        
        public UIRow6Row UIRow6Row
        {
            get
            {
                if ((this.mUIRow6Row == null))
                {
                    this.mUIRow6Row = new UIRow6Row(this);
                }
                return this.mUIRow6Row;
            }
        }
        
        public UIRow12Row UIRow12Row
        {
            get
            {
                if ((this.mUIRow12Row == null))
                {
                    this.mUIRow12Row = new UIRow12Row(this);
                }
                return this.mUIRow12Row;
            }
        }
        
        public UIRow14Row UIRow14Row
        {
            get
            {
                if ((this.mUIRow14Row == null))
                {
                    this.mUIRow14Row = new UIRow14Row(this);
                }
                return this.mUIRow14Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow5Row mUIRow5Row;
        
        private UIRow6Row mUIRow6Row;
        
        private UIRow12Row mUIRow12Row;
        
        private UIRow14Row mUIRow14Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow5Row : WinRow
    {
        
        public UIRow5Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "GI LAB";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public WinCell UIGILABCell
        {
            get
            {
                if ((this.mUIGILABCell == null))
                {
                    this.mUIGILABCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIGILABCell.SearchProperties[WinCell.PropertyNames.Value] = "GI LAB";
                    this.mUIGILABCell.WindowTitles.Add("Patient Select Dialog");
                    #endregion
                }
                return this.mUIGILABCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIGILABCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow6Row : WinRow
    {
        
        public UIRow6Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Heart OR";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public WinCell UIHeartORCell
        {
            get
            {
                if ((this.mUIHeartORCell == null))
                {
                    this.mUIHeartORCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHeartORCell.SearchProperties[WinCell.PropertyNames.Value] = "Heart OR";
                    this.mUIHeartORCell.WindowTitles.Add("Patient Select Dialog");
                    #endregion
                }
                return this.mUIHeartORCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHeartORCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow12Row : WinRow
    {
        
        public UIRow12Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "PADU";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public WinCell UIPADUCell
        {
            get
            {
                if ((this.mUIPADUCell == null))
                {
                    this.mUIPADUCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPADUCell.SearchProperties[WinCell.PropertyNames.Value] = "PADU";
                    this.mUIPADUCell.WindowTitles.Add("Patient Select Dialog");
                    #endregion
                }
                return this.mUIPADUCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIPADUCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow14Row : WinRow
    {
        
        public UIRow14Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "SICU";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public WinCell UISICUCell
        {
            get
            {
                if ((this.mUISICUCell == null))
                {
                    this.mUISICUCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISICUCell.SearchProperties[WinCell.PropertyNames.Value] = "SICU";
                    this.mUISICUCell.WindowTitles.Add("Patient Select Dialog");
                    #endregion
                }
                return this.mUISICUCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISICUCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDgvPatientsWindow : WinWindow
    {
        
        public UIDgvPatientsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvPatients";
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable1 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable1(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable1 mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDataGridViewTable1 : WinTable
    {
        
        public UIDataGridViewTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public UIRow0Row UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row(this);
                }
                return this.mUIRow0Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row mUIRow0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRow0Row : WinRow
    {
        
        public UIRow0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "SIC07;Unknown;11873872;(null);(null);1/28/2017 9:23 AM;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public WinCell UISIC07Cell
        {
            get
            {
                if ((this.mUISIC07Cell == null))
                {
                    this.mUISIC07Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUISIC07Cell.SearchProperties[WinCell.PropertyNames.Value] = "SIC07";
                    this.mUISIC07Cell.WindowTitles.Add("Patient Select Dialog");
                    #endregion
                }
                return this.mUISIC07Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISIC07Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISelectTimeWindow : WinWindow
    {
        
        public UISelectTimeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Time";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Select Time");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "BtnOk";
            this.WindowTitles.Add("Select Time");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Select Time");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDisplaySettingsWindow : WinWindow
    {
        
        public UIDisplaySettingsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Display Settings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Display Settings");
            #endregion
        }
        
        #region Properties
        public UIGvParameterWindow UIGvParameterWindow
        {
            get
            {
                if ((this.mUIGvParameterWindow == null))
                {
                    this.mUIGvParameterWindow = new UIGvParameterWindow(this);
                }
                return this.mUIGvParameterWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIGvParameterWindow mUIGvParameterWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGvParameterWindow : WinWindow
    {
        
        public UIGvParameterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "gvParameter";
            this.WindowTitles.Add("Display Settings");
            #endregion
        }
        
        #region Properties
        public WinClient UIGvParameterClient
        {
            get
            {
                if ((this.mUIGvParameterClient == null))
                {
                    this.mUIGvParameterClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIGvParameterClient.WindowTitles.Add("Display Settings");
                    #endregion
                }
                return this.mUIGvParameterClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGvParameterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWaveformignoremessagWindow : WinWindow
    {
        
        public UIWaveformignoremessagWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Waveform ignore message";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Waveform ignore message");
            #endregion
        }
        
        #region Properties
        public UIMCloseButtonWindow UIMCloseButtonWindow
        {
            get
            {
                if ((this.mUIMCloseButtonWindow == null))
                {
                    this.mUIMCloseButtonWindow = new UIMCloseButtonWindow(this);
                }
                return this.mUIMCloseButtonWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMCloseButtonWindow mUIMCloseButtonWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMCloseButtonWindow : WinWindow
    {
        
        public UIMCloseButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mCloseButton";
            this.WindowTitles.Add("Waveform ignore message");
            #endregion
        }
        
        #region Properties
        public WinButton UIWaveformignoremessagButton
        {
            get
            {
                if ((this.mUIWaveformignoremessagButton == null))
                {
                    this.mUIWaveformignoremessagButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIWaveformignoremessagButton.SearchProperties[WinButton.PropertyNames.Name] = "Waveform ignore message";
                    this.mUIWaveformignoremessagButton.WindowTitles.Add("Waveform ignore message");
                    #endregion
                }
                return this.mUIWaveformignoremessagButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIWaveformignoremessagButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWaveformrestoremessaWindow : WinWindow
    {
        
        public UIWaveformrestoremessaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Waveform restore message";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Waveform restore message");
            #endregion
        }
        
        #region Properties
        public UIMCloseButtonWindow1 UIMCloseButtonWindow
        {
            get
            {
                if ((this.mUIMCloseButtonWindow == null))
                {
                    this.mUIMCloseButtonWindow = new UIMCloseButtonWindow1(this);
                }
                return this.mUIMCloseButtonWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMCloseButtonWindow1 mUIMCloseButtonWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMCloseButtonWindow1 : WinWindow
    {
        
        public UIMCloseButtonWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mCloseButton";
            this.WindowTitles.Add("Waveform restore message");
            #endregion
        }
        
        #region Properties
        public WinButton UIWaveformrestoremessaButton
        {
            get
            {
                if ((this.mUIWaveformrestoremessaButton == null))
                {
                    this.mUIWaveformrestoremessaButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIWaveformrestoremessaButton.SearchProperties[WinButton.PropertyNames.Name] = "Waveform restore message";
                    this.mUIWaveformrestoremessaButton.WindowTitles.Add("Waveform restore message");
                    #endregion
                }
                return this.mUIWaveformrestoremessaButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIWaveformrestoremessaButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInformationWindow : WinWindow
    {
        
        public UIInformationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Information";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Information");
            #endregion
        }
        
        #region Properties
        public UIMCloseButtonWindow2 UIMCloseButtonWindow
        {
            get
            {
                if ((this.mUIMCloseButtonWindow == null))
                {
                    this.mUIMCloseButtonWindow = new UIMCloseButtonWindow2(this);
                }
                return this.mUIMCloseButtonWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMCloseButtonWindow2 mUIMCloseButtonWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMCloseButtonWindow2 : WinWindow
    {
        
        public UIMCloseButtonWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mCloseButton";
            this.WindowTitles.Add("Information");
            #endregion
        }
        
        #region Properties
        public WinButton UIInformationButton
        {
            get
            {
                if ((this.mUIInformationButton == null))
                {
                    this.mUIInformationButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIInformationButton.SearchProperties[WinButton.PropertyNames.Name] = "Information";
                    this.mUIInformationButton.WindowTitles.Add("Information");
                    #endregion
                }
                return this.mUIInformationButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIInformationButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow2 : WinWindow
    {
        
        public UISaveWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cButtonOK";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPrintWindow2 : WinWindow
    {
        
        public UIPrintWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Print";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Print");
            #endregion
        }
        
        #region Properties
        public UIMCloseButtonWindow3 UIMCloseButtonWindow
        {
            get
            {
                if ((this.mUIMCloseButtonWindow == null))
                {
                    this.mUIMCloseButtonWindow = new UIMCloseButtonWindow3(this);
                }
                return this.mUIMCloseButtonWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMCloseButtonWindow3 mUIMCloseButtonWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMCloseButtonWindow3 : WinWindow
    {
        
        public UIMCloseButtonWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mCloseButton";
            this.WindowTitles.Add("Print");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrintButton
        {
            get
            {
                if ((this.mUIPrintButton == null))
                {
                    this.mUIPrintButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrintButton.SearchProperties[WinButton.PropertyNames.Name] = "Print";
                    this.mUIPrintButton.WindowTitles.Add("Print");
                    #endregion
                }
                return this.mUIPrintButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrintButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPrintReportWindow2 : WinWindow
    {
        
        public UIPrintReportWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Print Report";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Print Report");
            #endregion
        }
        
        #region Properties
        public UIMCloseButtonWindow4 UIMCloseButtonWindow
        {
            get
            {
                if ((this.mUIMCloseButtonWindow == null))
                {
                    this.mUIMCloseButtonWindow = new UIMCloseButtonWindow4(this);
                }
                return this.mUIMCloseButtonWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMCloseButtonWindow4 mUIMCloseButtonWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMCloseButtonWindow4 : WinWindow
    {
        
        public UIMCloseButtonWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mCloseButton";
            this.WindowTitles.Add("Print Report");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrintReportButton
        {
            get
            {
                if ((this.mUIPrintReportButton == null))
                {
                    this.mUIPrintReportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrintReportButton.SearchProperties[WinButton.PropertyNames.Name] = "Print Report";
                    this.mUIPrintReportButton.WindowTitles.Add("Print Report");
                    #endregion
                }
                return this.mUIPrintReportButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrintReportButton;
        #endregion
    }
}
