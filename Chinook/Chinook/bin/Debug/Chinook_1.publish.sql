/*
Deployment script for ChinookTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ChinookTest"
:setvar DefaultFilePrefix "ChinookTest"
:setvar DefaultDataPath "D:\SQLDATA\"
:setvar DefaultLogPath "D:\SQLDATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                ENABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Album]...';


GO
CREATE TABLE [dbo].[Album] (
    [AlbumId]  INT            IDENTITY (1, 1) NOT NULL,
    [Title]    NVARCHAR (160) NOT NULL,
    [ArtistId] INT            NOT NULL,
    CONSTRAINT [PK_Album] PRIMARY KEY CLUSTERED ([AlbumId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[Album].[IFK_AlbumArtistId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_AlbumArtistId]
    ON [dbo].[Album]([ArtistId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[Artist]...';


GO
CREATE TABLE [dbo].[Artist] (
    [ArtistId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]     NVARCHAR (120) NULL,
    CONSTRAINT [PK_Artist] PRIMARY KEY CLUSTERED ([ArtistId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [CustomerId]   INT           IDENTITY (1, 1) NOT NULL,
    [FirstName]    NVARCHAR (40) NOT NULL,
    [LastName]     NVARCHAR (20) NOT NULL,
    [Company]      NVARCHAR (80) NULL,
    [Address]      NVARCHAR (70) NULL,
    [City]         NVARCHAR (40) NULL,
    [State]        NVARCHAR (40) NULL,
    [Country]      NVARCHAR (40) NULL,
    [PostalCode]   NVARCHAR (10) NULL,
    [Phone]        NVARCHAR (24) NULL,
    [Fax]          NVARCHAR (24) NULL,
    [Email]        NVARCHAR (60) NOT NULL,
    [SupportRepId] INT           NULL,
    CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED ([CustomerId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[Customer].[IFK_CustomerSupportRepId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_CustomerSupportRepId]
    ON [dbo].[Customer]([SupportRepId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[Employee]...';


GO
CREATE TABLE [dbo].[Employee] (
    [EmployeeId] INT           IDENTITY (1, 1) NOT NULL,
    [LastName]   NVARCHAR (20) NOT NULL,
    [FirstName]  NVARCHAR (20) NOT NULL,
    [Title]      NVARCHAR (30) NULL,
    [ReportsTo]  INT           NULL,
    [BirthDate]  DATETIME      NULL,
    [HireDate]   DATETIME      NULL,
    [Address]    NVARCHAR (70) NULL,
    [City]       NVARCHAR (40) NULL,
    [State]      NVARCHAR (40) NULL,
    [Country]    NVARCHAR (40) NULL,
    [PostalCode] NVARCHAR (10) NULL,
    [Phone]      NVARCHAR (24) NULL,
    [Fax]        NVARCHAR (24) NULL,
    [Email]      NVARCHAR (60) NULL,
    CONSTRAINT [PK_Employee] PRIMARY KEY CLUSTERED ([EmployeeId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[Employee].[IFK_EmployeeReportsTo]...';


GO
CREATE NONCLUSTERED INDEX [IFK_EmployeeReportsTo]
    ON [dbo].[Employee]([ReportsTo] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[Genre]...';


GO
CREATE TABLE [dbo].[Genre] (
    [GenreId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]    NVARCHAR (120) NULL,
    CONSTRAINT [PK_Genre] PRIMARY KEY CLUSTERED ([GenreId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[Invoice]...';


GO
CREATE TABLE [dbo].[Invoice] (
    [InvoiceId]         INT             IDENTITY (1, 1) NOT NULL,
    [CustomerId]        INT             NOT NULL,
    [InvoiceDate]       DATETIME        NOT NULL,
    [BillingAddress]    NVARCHAR (70)   NULL,
    [BillingCity]       NVARCHAR (40)   NULL,
    [BillingState]      NVARCHAR (40)   NULL,
    [BillingCountry]    NVARCHAR (40)   NULL,
    [BillingPostalCode] NVARCHAR (10)   NULL,
    [Total]             NUMERIC (10, 2) NOT NULL,
    CONSTRAINT [PK_Invoice] PRIMARY KEY CLUSTERED ([InvoiceId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[Invoice].[IFK_InvoiceCustomerId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_InvoiceCustomerId]
    ON [dbo].[Invoice]([CustomerId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[InvoiceLine]...';


GO
CREATE TABLE [dbo].[InvoiceLine] (
    [InvoiceLineId] INT             IDENTITY (1, 1) NOT NULL,
    [InvoiceId]     INT             NOT NULL,
    [TrackId]       INT             NOT NULL,
    [UnitPrice]     NUMERIC (10, 2) NOT NULL,
    [Quantity]      INT             NOT NULL,
    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY CLUSTERED ([InvoiceLineId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[InvoiceLine].[IFK_InvoiceLineInvoiceId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_InvoiceLineInvoiceId]
    ON [dbo].[InvoiceLine]([InvoiceId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[InvoiceLine].[IFK_InvoiceLineTrackId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_InvoiceLineTrackId]
    ON [dbo].[InvoiceLine]([TrackId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[MediaType]...';


GO
CREATE TABLE [dbo].[MediaType] (
    [MediaTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (120) NULL,
    CONSTRAINT [PK_MediaType] PRIMARY KEY CLUSTERED ([MediaTypeId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[Playlist]...';


GO
CREATE TABLE [dbo].[Playlist] (
    [PlaylistId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (120) NULL,
    CONSTRAINT [PK_Playlist] PRIMARY KEY CLUSTERED ([PlaylistId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[PlaylistTrack]...';


GO
CREATE TABLE [dbo].[PlaylistTrack] (
    [PlaylistId] INT NOT NULL,
    [TrackId]    INT NOT NULL,
    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY NONCLUSTERED ([PlaylistId] ASC, [TrackId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[PlaylistTrack].[IFK_PlaylistTrackTrackId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_PlaylistTrackTrackId]
    ON [dbo].[PlaylistTrack]([TrackId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[Track]...';


GO
CREATE TABLE [dbo].[Track] (
    [TrackId]      INT             IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (200)  NOT NULL,
    [AlbumId]      INT             NULL,
    [MediaTypeId]  INT             NOT NULL,
    [GenreId]      INT             NULL,
    [Composer]     NVARCHAR (220)  NULL,
    [Milliseconds] INT             NOT NULL,
    [Bytes]        INT             NULL,
    [UnitPrice]    NUMERIC (10, 2) NOT NULL,
    CONSTRAINT [PK_Track] PRIMARY KEY CLUSTERED ([TrackId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [dbo].[Track].[IFK_TrackAlbumId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_TrackAlbumId]
    ON [dbo].[Track]([AlbumId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[Track].[IFK_TrackGenreId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_TrackGenreId]
    ON [dbo].[Track]([GenreId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[Track].[IFK_TrackMediaTypeId]...';


GO
CREATE NONCLUSTERED INDEX [IFK_TrackMediaTypeId]
    ON [dbo].[Track]([MediaTypeId] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[FK_AlbumArtistId]...';


GO
ALTER TABLE [dbo].[Album]
    ADD CONSTRAINT [FK_AlbumArtistId] FOREIGN KEY ([ArtistId]) REFERENCES [dbo].[Artist] ([ArtistId]);


GO
PRINT N'Creating [dbo].[FK_CustomerSupportRepId]...';


GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [FK_CustomerSupportRepId] FOREIGN KEY ([SupportRepId]) REFERENCES [dbo].[Employee] ([EmployeeId]);


GO
PRINT N'Creating [dbo].[FK_EmployeeReportsTo]...';


GO
ALTER TABLE [dbo].[Employee]
    ADD CONSTRAINT [FK_EmployeeReportsTo] FOREIGN KEY ([ReportsTo]) REFERENCES [dbo].[Employee] ([EmployeeId]);


GO
PRINT N'Creating [dbo].[FK_InvoiceCustomerId]...';


GO
ALTER TABLE [dbo].[Invoice]
    ADD CONSTRAINT [FK_InvoiceCustomerId] FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([CustomerId]);


GO
PRINT N'Creating [dbo].[FK_InvoiceLineInvoiceId]...';


GO
ALTER TABLE [dbo].[InvoiceLine]
    ADD CONSTRAINT [FK_InvoiceLineInvoiceId] FOREIGN KEY ([InvoiceId]) REFERENCES [dbo].[Invoice] ([InvoiceId]);


GO
PRINT N'Creating [dbo].[FK_InvoiceLineTrackId]...';


GO
ALTER TABLE [dbo].[InvoiceLine]
    ADD CONSTRAINT [FK_InvoiceLineTrackId] FOREIGN KEY ([TrackId]) REFERENCES [dbo].[Track] ([TrackId]);


GO
PRINT N'Creating [dbo].[FK_PlaylistTrackPlaylistId]...';


GO
ALTER TABLE [dbo].[PlaylistTrack]
    ADD CONSTRAINT [FK_PlaylistTrackPlaylistId] FOREIGN KEY ([PlaylistId]) REFERENCES [dbo].[Playlist] ([PlaylistId]);


GO
PRINT N'Creating [dbo].[FK_PlaylistTrackTrackId]...';


GO
ALTER TABLE [dbo].[PlaylistTrack]
    ADD CONSTRAINT [FK_PlaylistTrackTrackId] FOREIGN KEY ([TrackId]) REFERENCES [dbo].[Track] ([TrackId]);


GO
PRINT N'Creating [dbo].[FK_TrackAlbumId]...';


GO
ALTER TABLE [dbo].[Track]
    ADD CONSTRAINT [FK_TrackAlbumId] FOREIGN KEY ([AlbumId]) REFERENCES [dbo].[Album] ([AlbumId]);


GO
PRINT N'Creating [dbo].[FK_TrackGenreId]...';


GO
ALTER TABLE [dbo].[Track]
    ADD CONSTRAINT [FK_TrackGenreId] FOREIGN KEY ([GenreId]) REFERENCES [dbo].[Genre] ([GenreId]);


GO
PRINT N'Creating [dbo].[FK_TrackMediaTypeId]...';


GO
ALTER TABLE [dbo].[Track]
    ADD CONSTRAINT [FK_TrackMediaTypeId] FOREIGN KEY ([MediaTypeId]) REFERENCES [dbo].[MediaType] ([MediaTypeId]);


GO
PRINT N'Creating [dbo].[uspDeleteCustomer]...';


GO
--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--GO


--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--GO
CREATE PROCEDURE [uspDeleteCustomer] (@CustomerID INT)
-- WITH ENCRYPTION, RECOMPILE, EXECUTE AS CALLER|SELF|OWNER| 'user_name'
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[Customer]
    WHERE
        [CustomerId] = @CustomerID;
END;
GO
PRINT N'Creating [dbo].[uspGetCustomer]...';


GO


CREATE PROCEDURE [uspGetCustomer] (@CustomerID INT)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        [CustomerId],
        [FirstName],
        [LastName],
        [Company],
        [Address],
        [City],
        [State],
        [Country],
        [PostalCode],
        [Phone],
        [Fax],
        [Email],
        [SupportRepId]
    FROM
        [dbo].[Customer]
    WHERE
        [CustomerId] = @CustomerID;
END;
GO
PRINT N'Creating [dbo].[uspGetCustomers]...';


GO


CREATE PROCEDURE [uspGetCustomers]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        [CustomerId],
        [FirstName],
        [LastName],
        [Company],
        [Address],
        [City],
        [State],
        [Country],
        [PostalCode],
        [Phone],
        [Fax],
        [Email],
        [SupportRepId]
    FROM
        [dbo].[Customer];
END;
GO
PRINT N'Creating [dbo].[uspInsertCustomer]...';


GO


--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--GO
CREATE PROCEDURE [uspInsertCustomer]
    (
     @FirstName NVARCHAR(40),
     @LastName NVARCHAR(20),
     @Company NVARCHAR(80),
     @Address NVARCHAR(70),
     @City NVARCHAR(40),
     @State NVARCHAR(40),
     @Country NVARCHAR(40),
     @PostalCode NVARCHAR(10),
     @Phone NVARCHAR(24),
     @Fax NVARCHAR(24),
     @Email NVARCHAR(60),
     @SupportRepId INT
    )
-- WITH ENCRYPTION, RECOMPILE, EXECUTE AS CALLER|SELF|OWNER| 'user_name'
AS
BEGIN
    SET NOCOUNT ON;

    INSERT  INTO [dbo].[Customer]
            ([FirstName],
             [LastName],
             [Company],
             [Address],
             [City],
             [State],
             [Country],
             [PostalCode],
             [Phone],
             [Fax],
             [Email],
             [SupportRepId])
    VALUES
            (N'', -- FirstName - nvarchar(40)
             N'', -- LastName - nvarchar(20)
             N'', -- Company - nvarchar(80)
             N'', -- Address - nvarchar(70)
             N'', -- City - nvarchar(40)
             N'', -- State - nvarchar(40)
             N'', -- Country - nvarchar(40)
             N'', -- PostalCode - nvarchar(10)
             N'', -- Phone - nvarchar(24)
             N'', -- Fax - nvarchar(24)
             N'', -- Email - nvarchar(60)
             0  -- SupportRepId - int
             );
END;
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
