CREATE TABLE [dbo].[AlarmResources] (
    [EnumGroupId]    UNIQUEIDENTIFIER NULL,
    [IDEnumValue]    INT              NULL,
    [Label]          NVARCHAR (250)   NULL,
    [StrMessage]     NVARCHAR (250)   NULL,
    [StrLimitFormat] NVARCHAR (250)   NULL,
    [StrValueFormat] NVARCHAR (250)   NULL,
    [Locale]         VARCHAR (7)      NULL,
    [Message]        NVARCHAR (250)   NULL,
    [LimitFormat]    NVARCHAR (250)   NULL,
    [ValueFormat]    NVARCHAR (250)   NULL,
    [AlarmTypeName]  NVARCHAR (50)    NULL
);

GO
CREATE TABLE [dbo].[AlarmsStatusData] (
    [Id]                  UNIQUEIDENTIFIER NOT NULL,
    [AlarmId]             UNIQUEIDENTIFIER NOT NULL,
    [StatusTimeout]       TINYINT          NULL,
    [StatusValue]         INT              NOT NULL,
    [AcquiredDateTimeUTC] DATETIME         NOT NULL,
    [Leads]               INT              NOT NULL,
    [WaveformFeedTypeId]  UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId]      UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]          UNIQUEIDENTIFIER NOT NULL,
    [IDEnumValue]         INT              NOT NULL,
    [EnumGroupId]         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_AlarmsStatusData_Id] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[AnalysisEvents] (
    [patient_id]  UNIQUEIDENTIFIER NOT NULL,
    [user_id]     UNIQUEIDENTIFIER NOT NULL,
    [type]        INT              NOT NULL,
    [num_events]  INT              NOT NULL,
    [sample_rate] SMALLINT         NOT NULL,
    [event_data]  IMAGE            NULL,
    CONSTRAINT [PK_AnalysisEvents_patient_id_user_id_type] PRIMARY KEY CLUSTERED ([patient_id] ASC, [user_id] ASC, [type] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_AnalysisEvents_AnalysisTime_user_id_patient_id] FOREIGN KEY ([user_id], [patient_id]) REFERENCES [dbo].[AnalysisTime] ([user_id], [patient_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[AnalysisTime] (
    [user_id]       UNIQUEIDENTIFIER NOT NULL,
    [patient_id]    UNIQUEIDENTIFIER NOT NULL,
    [start_ft]      BIGINT           NULL,
    [end_ft]        BIGINT           NULL,
    [analysis_type] INT              NOT NULL,
    [insert_dt]     DATETIME         CONSTRAINT [DEF_AnalysisTime_insert_dt] DEFAULT (GETDATE()) NOT NULL,
    CONSTRAINT [PK_AnalysisTime_user_id_patient_id] PRIMARY KEY CLUSTERED ([user_id] ASC, [patient_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[ApplicationSettings] (
    [ApplicationType] VARCHAR (50)   NOT NULL,
    [InstanceId]      VARCHAR (50)   NOT NULL,
    [Key]             VARCHAR (50)   NOT NULL,
    [Value]           VARCHAR (5000) NULL,
    CONSTRAINT [PK_ApplicationSettings_ApplicationType_InstanceId_Key] PRIMARY KEY CLUSTERED ([ApplicationType] ASC, [InstanceId] ASC, [Key] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[AuditLogData] (
    [AuditId]       UNIQUEIDENTIFIER NOT NULL,
    [DateTime]      DATETIME         NOT NULL,
    [PatientID]     VARCHAR (256)    NOT NULL,
    [Application]   NVARCHAR (256)   NULL,
    [DeviceName]    NVARCHAR (256)   NULL,
    [Message]       NVARCHAR (MAX)   NOT NULL,
    [ItemName]      NVARCHAR (256)   NOT NULL,
    [OriginalValue] NVARCHAR (MAX)   NOT NULL,
    [NewValue]      NVARCHAR (MAX)   NOT NULL,
    [ChangedBy]     NVARCHAR (64)    NOT NULL,
    [HashedValue]   BINARY (20)      NOT NULL,
    CONSTRAINT [PK_AuditLogData_AuditId] PRIMARY KEY CLUSTERED ([AuditId] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[cdr_document_group] (
    [node_id]        INT           NULL,
    [rank]           INT           NULL,
    [parent_node_id] INT           NULL,
    [node_name]      NVARCHAR (80) NULL
);

GO
CREATE TABLE [dbo].[cdr_navigation_button] (
    [descr]       NVARCHAR (80) NOT NULL,
    [image_index] INT           NULL,
    [position]    INT           NOT NULL,
    [form_name]   VARCHAR (255) NOT NULL,
    [node_id]     INT           NULL,
    [shortcut]    NCHAR (1)     NULL
);

GO
CREATE TABLE [dbo].[cdr_restricted_organization] (
    [organization_id] UNIQUEIDENTIFIER NOT NULL,
    [user_role_id]    UNIQUEIDENTIFIER NOT NULL
);

GO
CREATE TABLE [dbo].[cfgValuesFactory] (
    [type_cd]       VARCHAR (25)        NOT NULL,
    [cfg_name]      VARCHAR (40)        NOT NULL,
    [cfg_value]     [dbo].[DCFG_VALUES] NULL,
    [cfg_xml_value] XML                 NULL,
    [value_type]    VARCHAR (20)        NOT NULL,
    [global_type]   BIT                 NOT NULL,
    CONSTRAINT [PK_ValuesFactoryConst_type_cd_cfg_name] PRIMARY KEY CLUSTERED ([type_cd] ASC, [cfg_name] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[cfgValuesGlobal] (
    [type_cd]       VARCHAR (25)        NOT NULL,
    [cfg_name]      VARCHAR (40)        NOT NULL,
    [cfg_value]     [dbo].[DCFG_VALUES] NULL,
    [cfg_xml_value] XML                 NULL,
    [value_type]    VARCHAR (20)        NOT NULL,
    [global_type]   BIT                 NOT NULL,
    CONSTRAINT [PK_ValuesGlobalConst_type_cd_cfg_name] PRIMARY KEY CLUSTERED ([type_cd] ASC, [cfg_name] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[cfgValuesPatient] (
    [patient_id]    UNIQUEIDENTIFIER    NOT NULL,
    [type_cd]       VARCHAR (25)        NOT NULL,
    [cfg_name]      VARCHAR (40)        NOT NULL,
    [cfg_value]     [dbo].[DCFG_VALUES] NULL,
    [cfg_xml_value] XML                 NULL,
    [value_type]    VARCHAR (20)        NOT NULL,
    [timestamp]     DATETIME            CONSTRAINT [DEF_cfgValuesPatient_timestamp] DEFAULT (GETDATE()) NOT NULL,
    CONSTRAINT [PK_ValuesPatientConst_patient_id_type_cd_cfg_name] PRIMARY KEY CLUSTERED ([patient_id] ASC, [type_cd] ASC, [cfg_name] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[cfgValuesUnit] (
    [unit_id]       UNIQUEIDENTIFIER    NOT NULL,
    [type_cd]       VARCHAR (25)        NOT NULL,
    [cfg_name]      VARCHAR (40)        NOT NULL,
    [cfg_value]     [dbo].[DCFG_VALUES] NULL,
    [cfg_xml_value] XML                 NULL,
    [value_type]    VARCHAR (20)        NOT NULL,
    CONSTRAINT [PK_ValuesUnitConst_unit_id_type_cd_cfg_name] PRIMARY KEY CLUSTERED ([unit_id] ASC, [type_cd] ASC, [cfg_name] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[ChannelInfoData] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId]     UNIQUEIDENTIFIER NOT NULL,
    [ChannelIndex]       INT              NOT NULL,
    [IsPrimaryECG]       BIT              NOT NULL,
    [IsSecondaryECG]     BIT              NOT NULL,
    [IsNonWaveformType]  BIT              NOT NULL,
    [SampleRate]         INT              NULL,
    [Scale]              INT              NULL,
    [ScaleValue]         FLOAT (53)       NULL,
    [ScaleMin]           FLOAT (53)       NULL,
    [ScaleMax]           FLOAT (53)       NULL,
    [ScaleTypeEnumValue] INT              NULL,
    [Baseline]           INT              NULL,
    [YPointsPerUnit]     INT              NULL,
    [ChannelType]        INT              NOT NULL
);

GO
CREATE TABLE [dbo].[DeviceInfoData] (
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [DeviceSessionId] UNIQUEIDENTIFIER NOT NULL,
    [Name]            NCHAR (25)       NOT NULL,
    [Value]           NCHAR (100)      NULL,
    [TimestampUTC]    DATETIME         NOT NULL,
    CONSTRAINT [PK_DeviceInfoData_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[Devices] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [Name]        VARCHAR (50)     NOT NULL,
    [Description] VARCHAR (50)     NULL,
    [Room]        VARCHAR (12)     NULL
);

GO
CREATE TABLE [dbo].[DeviceSessions] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [DeviceId]     UNIQUEIDENTIFIER NULL,
    [BeginTimeUTC] DATETIME         NULL,
    [EndTimeUTC]   DATETIME         NULL,
    CONSTRAINT [PK_DeviceSessions_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[Enums] (
    [GroupId]     UNIQUEIDENTIFIER NOT NULL,
    [Name]        VARCHAR (50)     NOT NULL,
    [Value]       INT              NOT NULL,
    [Comment]     NVARCHAR (250)   NOT NULL,
    [TopicTypeId] UNIQUEIDENTIFIER NULL,
    [GroupName]   VARCHAR (50)     NULL,
    [MetadataId]  UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Enums_GroupId_Name_Value] PRIMARY KEY CLUSTERED ([GroupId] ASC, [Name] ASC, [Value] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[EventsData] (
    [Sequence]       BIGINT           IDENTITY (-9223372036854775808, 1) NOT NULL,
    [CategoryValue]  INT              NOT NULL,
    [Type]           INT              NOT NULL,
    [Subtype]        INT              NOT NULL,
    [Value1]         REAL             NOT NULL,
    [Value2]         REAL             NOT NULL,
    [Status]         INT              NOT NULL,
    [Valid_Leads]    INT              NOT NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]     UNIQUEIDENTIFIER NOT NULL,
    [TimestampUTC]   DATETIME         NOT NULL,
    CONSTRAINT [PK_EventsData_Sequence] PRIMARY KEY CLUSTERED ([Sequence] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[GdsCodeMap] (
    [FeedTypeId]  UNIQUEIDENTIFIER NOT NULL,
    [Name]        VARCHAR (25)     NOT NULL,
    [GdsCode]     VARCHAR (25)     NOT NULL,
    [CodeId]      INT              NOT NULL,
    [Units]       VARCHAR (25)     NULL,
    [Description] NVARCHAR (50)    NULL,
    CONSTRAINT [PK_GdsCodeMap_FeedTypeId_Name] PRIMARY KEY CLUSTERED ([FeedTypeId] ASC, [Name] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[GeneralAlarmsData] (
    [AlarmId]             UNIQUEIDENTIFIER NOT NULL,
    [StatusTimeout]       TINYINT          NULL,
    [StartDateTime]       DATETIME         NOT NULL,
    [EndDateTime]         DATETIME         NULL,
    [StatusValue]         INT              NOT NULL,
    [PriorityWeightValue] INT              NOT NULL,
    [AcquiredDateTimeUTC] DATETIME         NOT NULL,
    [Leads]               INT              NOT NULL,
    [WaveformFeedTypeId]  UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId]      UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]          UNIQUEIDENTIFIER NOT NULL,
    [IDEnumValue]         INT              NOT NULL,
    [EnumGroupId]         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_GeneralAlarmsData_AlarmId] PRIMARY KEY NONCLUSTERED ([AlarmId] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[gts_input_rate] (
    [input_rate_id] BIGINT       IDENTITY (0, 1) NOT NULL,
    [input_type]    VARCHAR (20) NOT NULL,
    [period_start]  DATETIME     NOT NULL,
    [period_len]    INT          NOT NULL,
    [rate_counter]  INT          NOT NULL,
    [creation_date] DATETIME     CONSTRAINT [DF_gts_input_rate_creation_date] DEFAULT (GETDATE()) NOT NULL,
    CONSTRAINT [PK_gts_input_rate_input_rate_id] PRIMARY KEY CLUSTERED ([input_rate_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[gts_waveform_index_rate] (
    [index_rate_id]     BIGINT   IDENTITY (0, 1) NOT NULL,
    [Wave_Rate_Index]   INT      NOT NULL,
    [Current_Wavecount] INT      NOT NULL,
    [Active_Waveform]   INT      NOT NULL,
    [period_start]      DATETIME NOT NULL,
    [period_len]        INT      NOT NULL,
    [creation_date]     DATETIME CONSTRAINT [DF_gts_waveform_index_rate_creation_date] DEFAULT (GETDATE()) NOT NULL,
    CONSTRAINT [PK_gts_waveform_index_rate] PRIMARY KEY CLUSTERED ([index_rate_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[HL7_in_qhist] (
    [msg_no]           NUMERIC (10)   NOT NULL,
    [rec_id]           INT            NOT NULL,
    [msg_status]       NCHAR (1)      NOT NULL,
    [queued_dt]        DATETIME       NOT NULL,
    [outb_analyzed_dt] DATETIME       NULL,
    [HL7_text_short]   NVARCHAR (255) NULL,
    [HL7_text_long]    NTEXT          NULL,
    [processed_dt]     DATETIME       NULL,
    [processed_dur]    INT            NULL,
    [thread_id]        INT            NULL,
    [who]              NVARCHAR (20)  NULL
);

GO
CREATE TABLE [dbo].[HL7_in_queue] (
    [msg_no]           NUMERIC (10)   IDENTITY (0, 1) NOT NULL,
    [msg_status]       NCHAR (1)      CONSTRAINT [DF_HL7_in_queue_msg_status] DEFAULT ('N') NOT NULL,
    [queued_dt]        DATETIME       NOT NULL,
    [outb_analyzed_dt] DATETIME       NULL,
    [msh_msg_type]     NCHAR (3)      NOT NULL,
    [msh_event_cd]     NCHAR (3)      NOT NULL,
    [msh_organization] NVARCHAR (36)  NOT NULL,
    [msh_system]       NVARCHAR (36)  NOT NULL,
    [msh_dt]           DATETIME       NOT NULL,
    [msh_control_id]   NVARCHAR (36)  NOT NULL,
    [msh_ack_cd]       NCHAR (2)      NULL,
    [msh_version]      NVARCHAR (5)   NOT NULL,
    [pid_mrn]          NVARCHAR (20)  NULL,
    [pv1_visit_no]     NVARCHAR (50)  NULL,
    [patient_id]       NUMERIC (10)   NULL,
    [HL7_text_short]   NVARCHAR (255) NULL,
    [HL7_text_long]    NTEXT          NULL,
    [processed_dt]     DATETIME       NULL,
    [processed_dur]    INT            NULL,
    [thread_id]        INT            NULL,
    [who]              NVARCHAR (20)  NULL
);

GO
CREATE TABLE [dbo].[HL7_msg_ack] (
    [msg_control_id]     NCHAR (20)    NOT NULL,
    [msg_status]         NCHAR (10)    NOT NULL,
    [clientIP]           NCHAR (30)    NOT NULL,
    [ack_msg_control_id] NCHAR (20)    NULL,
    [ack_system]         NCHAR (50)    NULL,
    [ack_organization]   NCHAR (50)    NULL,
    [received_dt]        DATETIME      NULL,
    [notes]              NVARCHAR (80) NULL,
    [num_retries]        INT           NULL
);

GO
CREATE TABLE [dbo].[HL7_msg_list] (
    [list_name] NVARCHAR (20) NOT NULL,
    [msg_no]    INT           NOT NULL,
    [seq]       INT           NOT NULL
);

GO
CREATE TABLE [dbo].[HL7_out_queue] (
    [msg_status]       NCHAR (10)     NOT NULL,
    [msg_no]           CHAR (20)      NOT NULL,
    [HL7_text_long]    NTEXT          NULL,
    [HL7_text_short]   NVARCHAR (255) NULL,
    [patient_id]       NVARCHAR (60)  NULL,
    [msh_system]       NVARCHAR (50)  NOT NULL,
    [msh_organization] NVARCHAR (50)  NOT NULL,
    [msh_event_cd]     NCHAR (10)     NOT NULL,
    [msh_msg_type]     NCHAR (10)     NOT NULL,
    [sent_dt]          DATETIME       NULL,
    [queued_dt]        DATETIME       NOT NULL
);

GO
CREATE TABLE [dbo].[HL7InboundMessage] (
    [MessageNo]                 INT            IDENTITY (1, 1) NOT NULL,
    [MessageStatus]             NCHAR (1)      NOT NULL,
    [HL7Message]                NVARCHAR (MAX) NOT NULL,
    [HL7MessageResponse]        NVARCHAR (MAX) NULL,
    [MessageSendingApplication] NVARCHAR (180) NOT NULL,
    [MessageSendingFacility]    NVARCHAR (180) NOT NULL,
    [MessageType]               NCHAR (3)      NOT NULL,
    [MessageTypeEventCode]      NCHAR (3)      NOT NULL,
    [MessageControlId]          NVARCHAR (20)  NOT NULL,
    [MessageVersion]            NVARCHAR (60)  NOT NULL,
    [MessageHeaderDate]         DATETIME       NOT NULL,
    [MessageQueuedDate]         DATETIME       NOT NULL,
    [MessageProcessedDate]      DATETIME       NULL,
    CONSTRAINT [PK_HL7InboundMessage_MessageNo] PRIMARY KEY CLUSTERED ([MessageNo] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[HL7PatientLink] (
    [MessageNo]          INT              NOT NULL,
    [PatientMrn]         NVARCHAR (20)    NOT NULL,
    [PatientVisitNumber] NVARCHAR (20)    NOT NULL,
    [PatientId]          UNIQUEIDENTIFIER NULL,
    CONSTRAINT [FK_HL7PatientLink_HL7InboundMessage_MessageNo] FOREIGN KEY ([MessageNo]) REFERENCES [dbo].[HL7InboundMessage] ([MessageNo])
);

GO
CREATE TABLE [dbo].[int_12lead_report] (
    [report_id]       UNIQUEIDENTIFIER NOT NULL,
    [patient_id]      UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [monitor_id]      UNIQUEIDENTIFIER NOT NULL,
    [report_number]   INT              NOT NULL,
    [report_dt]       DATETIME         NOT NULL,
    [export_sw]       TINYINT          NULL,
    [report_data]     IMAGE            NOT NULL,
    CONSTRAINT [PK_int_12lead_report_report_id_patient_id] PRIMARY KEY CLUSTERED ([report_id] ASC, [patient_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_12lead_report_edit] (
    [report_id]      UNIQUEIDENTIFIER NOT NULL,
    [insert_dt]      DATETIME         NOT NULL,
    [user_id]        UNIQUEIDENTIFIER NULL,
    [version_number] SMALLINT         NULL,
    [patient_name]   VARCHAR (80)     NULL,
    [report_date]    VARCHAR (80)     NULL,
    [report_time]    VARCHAR (80)     NULL,
    [id_number]      VARCHAR (80)     NULL,
    [birthdate]      VARCHAR (80)     NULL,
    [age]            VARCHAR (80)     NULL,
    [sex]            VARCHAR (80)     NULL,
    [height]         VARCHAR (80)     NULL,
    [weight]         VARCHAR (80)     NULL,
    [vent_rate]      INT              NULL,
    [pr_interval]    INT              NULL,
    [qt]             INT              NULL,
    [qtc]            INT              NULL,
    [qrs_duration]   INT              NULL,
    [p_axis]         INT              NULL,
    [qrs_axis]       INT              NULL,
    [t_axis]         INT              NULL,
    [interpretation] TEXT             NULL
);

GO
CREATE TABLE [dbo].[int_12lead_report_new] (
    [patient_id]           UNIQUEIDENTIFIER NOT NULL,
    [report_id]            UNIQUEIDENTIFIER NOT NULL,
    [report_dt]            DATETIME         NOT NULL,
    [version_number]       SMALLINT         NULL,
    [patient_name]         NVARCHAR (50)    NULL,
    [id_number]            NVARCHAR (20)    NULL,
    [birthdate]            NVARCHAR (15)    NULL,
    [age]                  NVARCHAR (15)    NULL,
    [sex]                  NVARCHAR (1)     NULL,
    [height]               NVARCHAR (15)    NULL,
    [weight]               NVARCHAR (15)    NULL,
    [report_date]          NVARCHAR (15)    NULL,
    [report_time]          NVARCHAR (15)    NULL,
    [vent_rate]            INT              NULL,
    [pr_interval]          INT              NULL,
    [qt]                   INT              NULL,
    [qtc]                  INT              NULL,
    [qrs_duration]         INT              NULL,
    [p_axis]               INT              NULL,
    [qrs_axis]             INT              NULL,
    [t_axis]               INT              NULL,
    [interpretation]       NTEXT            NULL,
    [sample_rate]          INT              NOT NULL,
    [sample_count]         INT              NOT NULL,
    [num_Ypoints]          INT              NOT NULL,
    [baseline]             INT              NOT NULL,
    [Ypoints_per_unit]     INT              NOT NULL,
    [waveform_data]        IMAGE            NULL,
    [send_request]         SMALLINT         NULL,
    [send_complete]        SMALLINT         NULL,
    [send_dt]              DATETIME         NULL,
    [interpretation_edits] NTEXT            NULL,
    [user_id]              UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_int_12lead_report_new_patient_id_report_id] PRIMARY KEY CLUSTERED ([patient_id] ASC, [report_id] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_int_12lead_report_new_12lead_report_int_report_id_patient_id] FOREIGN KEY ([report_id], [patient_id]) REFERENCES [dbo].[int_12lead_report] ([report_id], [patient_id]) ON DELETE CASCADE ON UPDATE CASCADE
);

GO
CREATE TABLE [dbo].[int_account] (
    [account_id]         UNIQUEIDENTIFIER NOT NULL,
    [organization_id]    UNIQUEIDENTIFIER NOT NULL,
    [account_xid]        NVARCHAR (40)    NOT NULL,
    [account_status_cid] INT              NULL,
    [bad_debt_sw]        TINYINT          NULL,
    [tot_payments_amt]   SMALLMONEY       NULL,
    [tot_charges_amt]    SMALLMONEY       NULL,
    [tot_adjs_amt]       SMALLMONEY       NULL,
    [cur_bal_amt]        SMALLMONEY       NULL,
    [account_open_dt]    DATETIME         NULL,
    [account_close_dt]   DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_address] (
    [address_id]      UNIQUEIDENTIFIER NOT NULL,
    [addr_loc_cd]     NCHAR (1)        NOT NULL,
    [addr_type_cd]    NCHAR (1)        NOT NULL,
    [seq_no]          INT              NOT NULL,
    [active_sw]       TINYINT          NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [line1_dsc]       NVARCHAR (80)    NULL,
    [line2_dsc]       NVARCHAR (80)    NULL,
    [line3_dsc]       NVARCHAR (80)    NULL,
    [city_nm]         NVARCHAR (30)    NULL,
    [county_cid]      INT              NULL,
    [state_code]      NVARCHAR (3)     NULL,
    [country_cid]     INT              NULL,
    [zip_code]        NVARCHAR (15)    NULL,
    [start_dt]        DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_alarm] (
    [alarm_id]           UNIQUEIDENTIFIER NOT NULL,
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]    UNIQUEIDENTIFIER NULL,
    [patient_channel_id] UNIQUEIDENTIFIER NOT NULL,
    [start_dt]           DATETIME         NOT NULL,
    [end_dt]             DATETIME         NULL,
    [start_ft]           BIGINT           NULL,
    [end_ft]             BIGINT           NULL,
    [alarm_cd]           NVARCHAR (50)    NULL,
    [alarm_dsc]          NVARCHAR (255)   NULL,
    [removed]            TINYINT          NULL,
    [alarm_level]        TINYINT          NULL,
    [is_stacked]         VARCHAR (1)      NULL,
    [is_level_changed]   VARCHAR (1)      NULL,
    CONSTRAINT [PK_int_alarm_alarm_id_patient_id_patient_channel_id] PRIMARY KEY NONCLUSTERED ([alarm_id] ASC, [patient_id] ASC, [patient_channel_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_alarm_retrieved] (
    [alarm_id]   UNIQUEIDENTIFIER NOT NULL,
    [annotation] VARCHAR (120)    NULL,
    [retrieved]  TINYINT          NULL,
    [insert_dt]  DATETIME         NOT NULL
);

GO
CREATE TABLE [dbo].[int_alarm_waveform] (
    [alarm_id]      UNIQUEIDENTIFIER NOT NULL,
    [retrieved]     TINYINT          NULL,
    [waveform_data] TEXT             NULL,
    [seq_num]       INT              NOT NULL,
    [insert_dt]     DATETIME         NOT NULL
);

GO
CREATE TABLE [dbo].[int_allergy] (
    [patient_id]        UNIQUEIDENTIFIER NOT NULL,
    [allergy_cid]       INT              NOT NULL,
    [orig_patient_id]   UNIQUEIDENTIFIER NULL,
    [allergy_type_cid]  INT              NULL,
    [severity_cid]      INT              NULL,
    [reaction]          NVARCHAR (255)   NULL,
    [identification_dt] DATETIME         NULL,
    [active_sw]         NCHAR (1)        NULL
);

GO
CREATE TABLE [dbo].[int_audit_log] (
    [login_id]        NVARCHAR (256)   NULL,
    [application_id]  NVARCHAR (50)    NULL,
    [patient_id]      NVARCHAR (50)    NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [audit_type]      NVARCHAR (160)   NULL,
    [device_name]     NVARCHAR (64)    NULL,
    [audit_descr]     NVARCHAR (500)   NULL,
    [audit_dt]        DATETIME         NOT NULL,
    [encounter_id]    UNIQUEIDENTIFIER NULL,
    [detail_id]       UNIQUEIDENTIFIER NULL
);

GO
CREATE TABLE [dbo].[int_autoupdate] (
    [prod]     CHAR (3)      NULL,
    [seq]      INT           NULL,
    [action]   VARCHAR (255) NOT NULL,
    [disabled] TINYINT       NULL
);

GO
CREATE TABLE [dbo].[int_autoupdate_log] (
    [machine]   NVARCHAR (50) NOT NULL,
    [action_dt] DATETIME      NOT NULL,
    [prod]      CHAR (3)      NOT NULL,
    [success]   TINYINT       NOT NULL,
    [reason]    NVARCHAR (80) NULL
);

GO
CREATE TABLE [dbo].[int_beat_time_log] (
    [user_id]     UNIQUEIDENTIFIER NOT NULL,
    [patient_id]  UNIQUEIDENTIFIER NOT NULL,
    [start_ft]    BIGINT           NOT NULL,
    [num_beats]   INT              NOT NULL,
    [sample_rate] SMALLINT         NOT NULL,
    [beat_data]   IMAGE            NULL,
    CONSTRAINT [PK_int_beat_time_log_user_id_patient_id_sample_rate] PRIMARY KEY CLUSTERED ([user_id] ASC, [patient_id] ASC, [sample_rate] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_int_beat_time_log_AnalysisTime_user_id_patient_id] FOREIGN KEY ([user_id], [patient_id]) REFERENCES [dbo].[AnalysisTime] ([user_id], [patient_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[int_bin_info] (
    [user_id]                UNIQUEIDENTIFIER NOT NULL,
    [patient_id]             UNIQUEIDENTIFIER NOT NULL,
    [template_set_index]     INT              NOT NULL,
    [template_index]         INT              NOT NULL,
    [bin_number]             INT              NOT NULL,
    [source]                 INT              NOT NULL,
    [beat_count]             INT              NOT NULL,
    [first_beat_number]      INT              NOT NULL,
    [non_ignored_count]      INT              NOT NULL,
    [first_non_ignored_beat] INT              NOT NULL,
    [iso_offset]             INT              NOT NULL,
    [st_offset]              INT              NOT NULL,
    [i_point]                INT              NOT NULL,
    [j_point]                INT              NOT NULL,
    [st_class]               INT              NOT NULL,
    [singles_bin]            INT              NOT NULL,
    [edit_bin]               INT              NOT NULL,
    [subclass_number]        INT              NOT NULL,
    [bin_image]              IMAGE            NULL,
    CONSTRAINT [PK_int_bin_info_user_id_patient_id_template_set_index_template_index] PRIMARY KEY CLUSTERED ([user_id] ASC, [patient_id] ASC, [template_set_index] ASC, [template_index] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_int_bin_info_int_template_set_info_user_id_patient_id_template_set_index] FOREIGN KEY ([user_id], [patient_id], [template_set_index]) REFERENCES [dbo].[int_template_set_info] ([user_id], [patient_id], [template_set_index]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[int_broadcast_msg] (
    [timer_msg]         NVARCHAR (255) NULL,
    [login_msg]         NVARCHAR (255) NULL,
    [log_out_minutes]   INT            NULL,
    [keep_out]          INT            NULL,
    [disable_autoprocs] INT            NULL
);

GO
CREATE TABLE [dbo].[int_cfg_values] (
    [keyname]  VARCHAR (40)  NOT NULL,
    [keyvalue] VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_int_cfg_values_keyname] PRIMARY KEY CLUSTERED ([keyname] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_channel_type] (
    [channel_type_id] UNIQUEIDENTIFIER NOT NULL,
    [channel_code]    INT              NOT NULL,
    [gds_cid]         INT              NULL,
    [label]           VARCHAR (20)     NULL,
    [freq]            SMALLINT         NULL,
    [min_value]       SMALLINT         NULL,
    [max_value]       SMALLINT         NULL,
    [sweep_speed]     FLOAT (53)       NULL,
    [priority]        TINYINT          NULL,
    [type_cd]         VARCHAR (10)     NULL,
    [color]           VARCHAR (25)     NULL,
    [units]           VARCHAR (10)     NULL
);

GO
CREATE TABLE [dbo].[int_channel_vital] (
    [channel_type_id] UNIQUEIDENTIFIER NOT NULL,
    [gds_cid]         INT              NOT NULL,
    [format_string]   VARCHAR (50)     NOT NULL
);

GO
CREATE TABLE [dbo].[int_client_map] (
    [map_type] NVARCHAR (20) NOT NULL,
    [map_val]  NVARCHAR (40) NOT NULL,
    [unit_nm]  NVARCHAR (50) NOT NULL
);

GO
CREATE TABLE [dbo].[int_cmtry_report] (
    [patient_id]      UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [report_name]     NVARCHAR (50)    NOT NULL,
    [report_data]     IMAGE            NOT NULL
);

GO
CREATE TABLE [dbo].[int_code_category] (
    [cat_code] CHAR (4)      NOT NULL,
    [cat_name] NVARCHAR (80) NULL
);

GO
CREATE TABLE [dbo].[int_DataLoader_ETR_Temp_Settings] (
    [gateway_id]                UNIQUEIDENTIFIER NOT NULL,
    [gateway_type]              NVARCHAR (10)    NULL,
    [farm_name]                 NVARCHAR (5)     NULL,
    [network]                   NVARCHAR (30)    NULL,
    [et_do_not_store_waveforms] TINYINT          NULL,
    [include_trans_chs]         NVARCHAR (255)   NULL,
    [exclude_trans_chs]         NVARCHAR (255)   NULL,
    [et_print_alarms]           TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_DataLoader_UV_Temp_Settings] (
    [gateway_id]                UNIQUEIDENTIFIER NOT NULL,
    [gateway_type]              NVARCHAR (20)    NULL,
    [network_name]              NVARCHAR (20)    NULL,
    [network_id]                NVARCHAR (30)    NULL,
    [node_name]                 CHAR (5)         NULL,
    [node_id]                   CHAR (1024)      NULL,
    [uv_organization_id]        UNIQUEIDENTIFIER NULL,
    [uv_unit_id]                UNIQUEIDENTIFIER NULL,
    [include_nodes]             NVARCHAR (255)   NULL,
    [exclude_nodes]             NVARCHAR (255)   NULL,
    [uv_do_not_store_waveforms] TINYINT          NULL,
    [print_requests]            TINYINT          NULL,
    [make_time_master]          TINYINT          NULL,
    [auto_assign_id]            TINYINT          NULL,
    [new_mrn_format]            NVARCHAR (30)    NULL,
    [uv_print_alarms]           TINYINT          NULL,
    [debug_level]               INT              NULL
);

GO
CREATE TABLE [dbo].[int_db_ver] (
    [ver_code]               VARCHAR (30)  NOT NULL,
    [install_dt]             DATETIME      NOT NULL,
    [status_cd]              VARCHAR (30)  NULL,
    [pre_install_pgm]        VARCHAR (255) NULL,
    [pre_install_pgm_flags]  VARCHAR (30)  NULL,
    [install_pgm]            VARCHAR (255) NULL,
    [install_pgm_flags]      VARCHAR (30)  NULL,
    [post_install_pgm]       VARCHAR (255) NULL,
    [post_install_pgm_flags] VARCHAR (30)  NULL,
    [CreateDate]             DATETIME2 (7) CONSTRAINT [DF_int_db_ver_CreateDate] DEFAULT SYSDATETIME() NOT NULL,
    CONSTRAINT [PK_int_db_ver_ver_code] PRIMARY KEY CLUSTERED ([ver_code] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_diagnosis] (
    [encounter_id]       UNIQUEIDENTIFIER NOT NULL,
    [diagnosis_type_cid] INT              NOT NULL,
    [seq_no]             INT              NOT NULL,
    [diagnosis_cid]      INT              NULL,
    [inactive_sw]        TINYINT          NULL,
    [diagnosis_dt]       DATETIME         NULL,
    [class_cid]          INT              NULL,
    [confidential_ind]   TINYINT          NULL,
    [attestation_dt]     DATETIME         NULL,
    [dsc]                NVARCHAR (255)   NULL,
    CONSTRAINT [PK_int_diagnosis_encounter_id] PRIMARY KEY CLUSTERED ([encounter_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_diagnosis_drg] (
    [patient_id]             UNIQUEIDENTIFIER NOT NULL,
    [encounter_id]           UNIQUEIDENTIFIER NOT NULL,
    [account_id]             UNIQUEIDENTIFIER NOT NULL,
    [desc_key]               INT              NOT NULL,
    [orig_patient_id]        UNIQUEIDENTIFIER NULL,
    [drg_cid]                INT              NULL,
    [drg_assignment_dt]      DATETIME         NULL,
    [drg_approval_ind]       NCHAR (2)        NULL,
    [drg_grper_rvw_cid]      INT              NULL,
    [drg_outlier_cid]        INT              NULL,
    [drg_outlier_days_no]    INT              NULL,
    [drg_outlier_cost_amt]   SMALLMONEY       NULL,
    [drg_grper_ver_type_cid] INT              NULL
);

GO
CREATE TABLE [dbo].[int_diagnosis_hcp_int] (
    [encounter_id]       UNIQUEIDENTIFIER NOT NULL,
    [diagnosis_type_cid] INT              NOT NULL,
    [diagnosis_seq_no]   INT              NOT NULL,
    [inactive_sw]        TINYINT          NULL,
    [diagnosis_dt]       DATETIME         NULL,
    [desc_key]           INT              NOT NULL,
    [hcp_id]             UNIQUEIDENTIFIER NULL
);

GO
CREATE TABLE [dbo].[int_encounter] (
    [encounter_id]        UNIQUEIDENTIFIER NOT NULL,
    [organization_id]     UNIQUEIDENTIFIER NULL,
    [mod_dt]              DATETIME         NULL,
    [patient_id]          UNIQUEIDENTIFIER NULL,
    [orig_patient_id]     UNIQUEIDENTIFIER NULL,
    [account_id]          UNIQUEIDENTIFIER NULL,
    [status_cd]           NVARCHAR (3)     NULL,
    [publicity_cid]       INT              NULL,
    [diet_type_cid]       INT              NULL,
    [patient_class_cid]   INT              NULL,
    [protection_type_cid] INT              NULL,
    [vip_sw]              NCHAR (2)        NULL,
    [isolation_type_cid]  INT              NULL,
    [security_type_cid]   INT              NULL,
    [patient_type_cid]    INT              NULL,
    [admit_hcp_id]        UNIQUEIDENTIFIER NULL,
    [med_svc_cid]         INT              NULL,
    [referring_hcp_id]    UNIQUEIDENTIFIER NULL,
    [unit_org_id]         UNIQUEIDENTIFIER NULL,
    [attend_hcp_id]       UNIQUEIDENTIFIER NULL,
    [primary_care_hcp_id] UNIQUEIDENTIFIER NULL,
    [fall_risk_type_cid]  INT              NULL,
    [begin_dt]            DATETIME         NULL,
    [ambul_status_cid]    INT              NULL,
    [admit_dt]            DATETIME         NULL,
    [baby_cd]             NCHAR (1)        NULL,
    [rm]                  NVARCHAR (80)    NULL,
    [recurring_cd]        NCHAR (1)        NULL,
    [bed]                 NCHAR (80)       NULL,
    [discharge_dt]        DATETIME         NULL,
    [newborn_sw]          NCHAR (1)        NULL,
    [discharge_dispo_cid] INT              NULL,
    [monitor_created]     TINYINT          NULL,
    [comment]             NTEXT            NULL
);

GO
CREATE TABLE [dbo].[int_encounter_map] (
    [encounter_xid]   NVARCHAR (40)    NOT NULL,
    [organization_id] UNIQUEIDENTIFIER NOT NULL,
    [encounter_id]    UNIQUEIDENTIFIER NOT NULL,
    [patient_id]      UNIQUEIDENTIFIER NOT NULL,
    [seq_no]          INT              NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [status_cd]       NCHAR (1)        NULL,
    [event_cd]        NVARCHAR (4)     NULL,
    [account_id]      UNIQUEIDENTIFIER NULL
);

GO
CREATE TABLE [dbo].[int_encounter_tfr_history] (
    [encounter_xid]          NVARCHAR (30)    NOT NULL,
    [organization_id]        UNIQUEIDENTIFIER NOT NULL,
    [encounter_id]           UNIQUEIDENTIFIER NOT NULL,
    [patient_id]             UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]        UNIQUEIDENTIFIER NULL,
    [tfr_txn_dt]             DATETIME         NULL,
    [tfrd_from_encounter_id] UNIQUEIDENTIFIER NULL,
    [tfrd_to_encounter_id]   UNIQUEIDENTIFIER NULL,
    [tfrd_from_patient_id]   UNIQUEIDENTIFIER NULL,
    [tfrd_to_patient_id]     UNIQUEIDENTIFIER NULL,
    [status_cd]              NCHAR (1)        NULL,
    [event_cd]               NVARCHAR (4)     NULL
);

GO
CREATE TABLE [dbo].[int_encounter_to_hcp_int] (
    [encounter_id] UNIQUEIDENTIFIER NOT NULL,
    [hcp_id]       UNIQUEIDENTIFIER NOT NULL,
    [hcp_role_cd]  NCHAR (1)        NOT NULL,
    [end_dt]       DATETIME         NULL,
    [active_sw]    TINYINT          NOT NULL
);

GO
CREATE TABLE [dbo].[int_environment] (
    [env_id]       UNIQUEIDENTIFIER NOT NULL,
    [display_name] NVARCHAR (50)    NOT NULL,
    [url]          NVARCHAR (200)   NULL,
    [seq]          INT              NOT NULL
);

GO
CREATE TABLE [dbo].[int_event_config] (
    [alarm_notification_mode]       INT     NOT NULL,
    [vitals_update_interval]        INT     NOT NULL,
    [alarm_polling_interval]        INT     NOT NULL,
    [port_number]                   INT     NOT NULL,
    [track_alarm_execution]         TINYINT NULL,
    [track_vitals_update_execution] TINYINT NULL
);

GO
CREATE TABLE [dbo].[int_event_log] (
    [event_id]    UNIQUEIDENTIFIER NOT NULL,
    [patient_id]  UNIQUEIDENTIFIER NULL,
    [type]        NVARCHAR (30)    NULL,
    [event_dt]    DATETIME         NULL,
    [seq_num]     INT              NOT NULL,
    [client]      NVARCHAR (50)    NULL,
    [description] NVARCHAR (300)   NULL,
    [status]      INT              NULL
);

GO
CREATE TABLE [dbo].[int_external_organization] (
    [ext_organization_id]        UNIQUEIDENTIFIER NOT NULL,
    [cat_code]                   NCHAR (1)        NULL,
    [organization_nm]            NVARCHAR (50)    NULL,
    [parent_ext_organization_id] UNIQUEIDENTIFIER NULL,
    [organization_cd]            NVARCHAR (30)    NULL,
    [company_cons]               NVARCHAR (50)    NULL
);

GO
CREATE TABLE [dbo].[int_feature] (
    [feature_cd] VARCHAR (25)  NOT NULL,
    [descr]      VARCHAR (120) NULL
);

GO
CREATE TABLE [dbo].[int_flowsheet] (
    [flowsheet_id]    UNIQUEIDENTIFIER NULL,
    [flowsheet_type]  NVARCHAR (50)    NOT NULL,
    [owner_id]        UNIQUEIDENTIFIER NULL,
    [name]            NVARCHAR (50)    NULL,
    [description]     NVARCHAR (50)    NULL,
    [seq]             INT              NULL,
    [display_in_menu] TINYINT          CONSTRAINT [DF_int_flowsheet_display_in_menu] DEFAULT ((1)) NULL
);

GO
CREATE TABLE [dbo].[int_flowsheet_detail] (
    [flowsheet_detail_id] UNIQUEIDENTIFIER NULL,
    [flowsheet_id]        UNIQUEIDENTIFIER NULL,
    [name]                NVARCHAR (80)    NULL,
    [detail_type]         NVARCHAR (50)    NULL,
    [parent_id]           UNIQUEIDENTIFIER NULL,
    [seq]                 INT              NULL,
    [test_cid]            INT              NULL,
    [show_only_when_data] TINYINT          NULL,
    [is_compressed]       TINYINT          NULL,
    [is_visible]          TINYINT          NULL,
    [flowsheet_entry_id]  UNIQUEIDENTIFIER NULL
);

GO
CREATE TABLE [dbo].[int_flowsheet_entry] (
    [flowsheet_entry_id]  UNIQUEIDENTIFIER NULL,
    [test_cid]            INT              NULL,
    [data_type]           NVARCHAR (50)    NULL,
    [select_list_id]      INT              NULL,
    [units]               NVARCHAR (50)    NULL,
    [normal_float]        FLOAT (53)       NULL,
    [absolute_float_high] FLOAT (53)       NULL,
    [absolute_float_low]  FLOAT (53)       NULL,
    [warning_float_high]  FLOAT (53)       NULL,
    [warning_float_low]   FLOAT (53)       NULL,
    [critical_float_high] FLOAT (53)       NULL,
    [critical_float_low]  FLOAT (53)       NULL,
    [normal_int]          INT              NULL,
    [absolute_int_high]   INT              NULL,
    [absolute_int_low]    INT              NULL,
    [warning_int_high]    INT              NULL,
    [warning_int_low]     INT              NULL,
    [critical_int_high]   INT              NULL,
    [critical_int_low]    INT              NULL,
    [normal_string]       NVARCHAR (50)    NULL,
    [max_length]          INT              NULL
);

GO
CREATE TABLE [dbo].[int_flowsheet_list] (
    [list_id]            INT          NULL,
    [name]               VARCHAR (30) NULL,
    [description]        VARCHAR (41) NULL,
    [allow_multi_select] TINYINT      NULL,
    [allow_free_text]    TINYINT      NULL
);

GO
CREATE TABLE [dbo].[int_flowsheet_list_detail] (
    [list_detail_id] INT          NULL,
    [list_id]        INT          NULL,
    [name]           VARCHAR (30) NULL,
    [description]    VARCHAR (41) NULL,
    [seq]            INT          NULL
);

GO
CREATE TABLE [dbo].[int_gateway] (
    [gateway_id]           UNIQUEIDENTIFIER NOT NULL,
    [gateway_type]         CHAR (4)         NULL,
    [network_id]           NVARCHAR (30)    NULL,
    [hostname]             NVARCHAR (80)    NULL,
    [enable_sw]            TINYINT          NULL,
    [recv_app]             NVARCHAR (30)    NULL,
    [send_app]             NVARCHAR (30)    NULL,
    [reconnect_secs]       INT              NULL,
    [organization_id]      UNIQUEIDENTIFIER NULL,
    [send_sys_id]          UNIQUEIDENTIFIER NULL,
    [results_usid]         INT              NULL,
    [sleep_secs]           INT              NULL,
    [add_monitors_sw]      TINYINT          NULL,
    [add_patients_sw]      TINYINT          NULL,
    [add_results_sw]       TINYINT          NULL,
    [debug_level]          INT              NULL,
    [unit_org_id]          UNIQUEIDENTIFIER NULL,
    [patient_id_type]      CHAR (4)         NULL,
    [auto_assign_id_sw]    TINYINT          NULL,
    [new_mrn_format]       NVARCHAR (80)    NULL,
    [auto_chan_attach_sw]  TINYINT          NULL,
    [live_vitals_sw]       TINYINT          NULL,
    [live_waveform_size]   INT              NULL,
    [decnet_node]          INT              NULL,
    [node_name]            CHAR (5)         NULL,
    [nodes_excluded]       NVARCHAR (255)   NULL,
    [nodes_included]       NVARCHAR (255)   NULL,
    [timemaster_sw]        TINYINT          NULL,
    [waveform_size]        INT              NULL,
    [print_enabled_sw]     TINYINT          NULL,
    [auto_record_alarm_sw] TINYINT          NULL,
    [collect_12_lead_sw]   TINYINT          NULL,
    [print_auto_record_sw] TINYINT          NULL,
    [encryption_status]    BIT              NULL
);

GO
CREATE TABLE [dbo].[int_gateway_server] (
    [gateway_id]  UNIQUEIDENTIFIER NOT NULL,
    [server_name] NVARCHAR (50)    NOT NULL,
    [port]        INT              NOT NULL
);

GO
CREATE TABLE [dbo].[int_guarantor] (
    [patient_id]          UNIQUEIDENTIFIER NOT NULL,
    [seq_no]              INT              NOT NULL,
    [type_cd]             NCHAR (2)        NOT NULL,
    [active_sw]           TINYINT          NOT NULL,
    [orig_patient_id]     UNIQUEIDENTIFIER NULL,
    [relationship_cid]    INT              NULL,
    [encounter_id]        UNIQUEIDENTIFIER NULL,
    [ext_organization_id] UNIQUEIDENTIFIER NULL,
    [guarantor_person_id] UNIQUEIDENTIFIER NULL,
    [employer_id]         UNIQUEIDENTIFIER NULL,
    [spouse_id]           UNIQUEIDENTIFIER NULL,
    [contact_id]          UNIQUEIDENTIFIER NULL
);

GO
CREATE TABLE [dbo].[int_hcp] (
    [hcp_id]           UNIQUEIDENTIFIER NOT NULL,
    [hcp_type_cid]     INT              NULL,
    [last_nm]          NVARCHAR (50)    NULL,
    [first_nm]         NVARCHAR (50)    NULL,
    [middle_nm]        NVARCHAR (50)    NULL,
    [degree]           NVARCHAR (20)    NULL,
    [verification_sw]  TINYINT          NULL,
    [doctor_ins_no_id] NVARCHAR (10)    NULL,
    [doctor_dea_no]    NVARCHAR (10)    NULL,
    [medicare_id]      NVARCHAR (12)    NULL,
    [medicaid_id]      NVARCHAR (20)    NULL
);

GO
CREATE TABLE [dbo].[int_hcp_contact] (
    [hcp_id]           UNIQUEIDENTIFIER NOT NULL,
    [contact_type_cid] INT              NOT NULL,
    [seq_no]           SMALLINT         NOT NULL,
    [hcp_contact_no]   NVARCHAR (40)    NOT NULL,
    [hcp_contact_ext]  NVARCHAR (12)    NOT NULL
);

GO
CREATE TABLE [dbo].[int_hcp_license] (
    [hcp_id]             UNIQUEIDENTIFIER NOT NULL,
    [license_type_cid]   INT              NOT NULL,
    [license_state_code] NVARCHAR (3)     NOT NULL,
    [license_xid]        NVARCHAR (10)    NULL,
    [effective_dt]       DATETIME         NULL,
    [expiration_dt]      DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_hcp_map] (
    [organization_id] UNIQUEIDENTIFIER NOT NULL,
    [hcp_xid]         NVARCHAR (20)    NOT NULL,
    [hcp_id]          UNIQUEIDENTIFIER NOT NULL
);

GO
CREATE TABLE [dbo].[int_hcp_specialty] (
    [hcp_id]             UNIQUEIDENTIFIER NOT NULL,
    [specialty_cid]      INT              NOT NULL,
    [govern_board]       NVARCHAR (50)    NULL,
    [certification_code] NVARCHAR (20)    NULL,
    [certification_dt]   DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_insurance_plan] (
    [plan_id]            UNIQUEIDENTIFIER NOT NULL,
    [plan_cd]            NVARCHAR (30)    NULL,
    [plan_type_cid]      INT              NULL,
    [ins_company_id]     UNIQUEIDENTIFIER NULL,
    [agreement_type_cid] INT              NULL,
    [notice_of_admit_sw] NCHAR (1)        NULL,
    [plan_xid]           NVARCHAR (20)    NULL,
    [preadmit_cert_cid]  INT              NULL
);

GO
CREATE TABLE [dbo].[int_insurance_policy] (
    [patient_id]                UNIQUEIDENTIFIER NOT NULL,
    [seq_no]                    SMALLINT         NOT NULL,
    [active_sw]                 TINYINT          NULL,
    [orig_patient_id]           UNIQUEIDENTIFIER NULL,
    [account_id]                UNIQUEIDENTIFIER NULL,
    [ins_policy_xid]            NVARCHAR (20)    NULL,
    [holder_id]                 UNIQUEIDENTIFIER NULL,
    [holder_rel_cid]            INT              NULL,
    [holder_emp_id]             UNIQUEIDENTIFIER NULL,
    [plan_id]                   UNIQUEIDENTIFIER NULL,
    [group_xid]                 NVARCHAR (20)    NULL,
    [group_nm]                  NVARCHAR (35)    NULL,
    [company_plan_cid]          NVARCHAR (8)     NULL,
    [plan_eff_dt]               DATETIME         NULL,
    [plan_exp_dt]               DATETIME         NULL,
    [verify_dt]                 DATETIME         NULL,
    [plcy_deductible_amt]       MONEY            NULL,
    [plcy_limit_amt]            MONEY            NULL,
    [plcy_limit_days_no]        SMALLINT         NULL,
    [rm_semi_private_rt]        MONEY            NULL,
    [rm_private_rt]             MONEY            NULL,
    [authorization_no]          NVARCHAR (20)    NULL,
    [authorization_dt]          DATETIME         NULL,
    [authorization_source]      NVARCHAR (4)     NULL,
    [authorization_cmt_id]      UNIQUEIDENTIFIER NULL,
    [cob_priority]              TINYINT          NULL,
    [cob_code]                  NCHAR (2)        NULL,
    [billing_status_code]       NCHAR (3)        NULL,
    [rpt_of_eligibility_sw]     TINYINT          NULL,
    [rpt_of_eligibility_dt]     DATETIME         NULL,
    [assignment_of_benefits_sw] NCHAR (2)        NULL,
    [notice_of_admit_dt]        DATETIME         NULL,
    [verify_id]                 UNIQUEIDENTIFIER NULL,
    [lifetm_reserve_days_no]    SMALLINT         NULL,
    [delay_before_lr_day_no]    SMALLINT         NULL,
    [ins_contact_id]            UNIQUEIDENTIFIER NULL,
    [plan_xid]                  NVARCHAR (20)    NULL
);

GO
CREATE TABLE [dbo].[int_loader_parameter] (
    [msg_event_code] CHAR (3)         NULL,
    [sys_id]         UNIQUEIDENTIFIER NULL,
    [code_id]        INT              NULL,
    [parm]           NVARCHAR (30)    NULL,
    [value]          NVARCHAR (80)    NULL
);

GO
CREATE TABLE [dbo].[int_loader_stats] (
    [stat_dt] DATETIME        NOT NULL,
    [stat_tx] NVARCHAR (1000) NULL
);

GO
CREATE TABLE [dbo].[int_misc_code] (
    [code_id]         INT              NOT NULL,
    [organization_id] UNIQUEIDENTIFIER NULL,
    [sys_id]          UNIQUEIDENTIFIER NULL,
    [category_cd]     CHAR (4)         NULL,
    [method_cd]       NVARCHAR (10)    NULL,
    [code]            NVARCHAR (80)    NULL,
    [verification_sw] TINYINT          NULL,
    [int_keystone_cd] NVARCHAR (80)    NULL,
    [short_dsc]       NVARCHAR (100)   NULL,
    [spc_pcs_code]    CHAR (1)         NULL
);

GO
CREATE TABLE [dbo].[int_mon_request] (
    [req_id]     INT              IDENTITY (0, 1) NOT NULL,
    [monitor_id] UNIQUEIDENTIFIER NOT NULL,
    [req_type]   NVARCHAR (10)    NOT NULL,
    [req_args]   NVARCHAR (100)   NULL,
    [status]     NVARCHAR (2)     NULL,
    [mod_utc_dt] DATETIME         CONSTRAINT [DEF_int_mon_request_mod_utc_dt] DEFAULT (GETUTCDATE()) NOT NULL
);

GO
CREATE TABLE [dbo].[int_monitor] (
    [monitor_id]      UNIQUEIDENTIFIER NOT NULL,
    [unit_org_id]     UNIQUEIDENTIFIER NULL,
    [network_id]      NVARCHAR (15)    NOT NULL,
    [node_id]         NVARCHAR (15)    NOT NULL,
    [bed_id]          NVARCHAR (3)     NOT NULL,
    [bed_cd]          NVARCHAR (20)    NULL,
    [room]            NVARCHAR (12)    NULL,
    [monitor_dsc]     NVARCHAR (50)    NULL,
    [monitor_name]    NVARCHAR (30)    NOT NULL,
    [monitor_type_cd] VARCHAR (5)      NULL,
    [subnet]          NVARCHAR (50)    NULL,
    [standby]         TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_mrn_map] (
    [organization_id]  UNIQUEIDENTIFIER NOT NULL,
    [mrn_xid]          NVARCHAR (30)    NOT NULL,
    [patient_id]       UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]  UNIQUEIDENTIFIER NULL,
    [merge_cd]         CHAR (1)         NOT NULL,
    [prior_patient_id] UNIQUEIDENTIFIER NULL,
    [mrn_xid2]         NVARCHAR (30)    NULL,
    [adt_adm_sw]       TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_msg_log] (
    [msg_log_id]      UNIQUEIDENTIFIER NOT NULL,
    [msg_dt]          DATETIME         NOT NULL,
    [product]         NVARCHAR (20)    NOT NULL,
    [msg_template_id] INT              NULL,
    [external_id]     VARCHAR (50)     NULL,
    [msg_text]        NTEXT            NULL,
    [type]            NVARCHAR (20)    NULL
);

GO
CREATE TABLE [dbo].[int_msg_template] (
    [msg_template_id] INT            NOT NULL,
    [msg_text]        NVARCHAR (255) NULL
);

GO
CREATE TABLE [dbo].[int_nok] (
    [patient_id]        UNIQUEIDENTIFIER NOT NULL,
    [seq_no]            INT              NOT NULL,
    [notify_seq_no]     INT              NOT NULL,
    [active_flag]       TINYINT          NOT NULL,
    [orig_patient_id]   UNIQUEIDENTIFIER NULL,
    [nok_person_id]     UNIQUEIDENTIFIER NOT NULL,
    [contact_person_id] UNIQUEIDENTIFIER NULL,
    [relationship_cid]  INT              NULL
);

GO
CREATE TABLE [dbo].[int_nxt_ascending_key] (
    [tbl_name]   CHAR (30)  NOT NULL,
    [ascend_key] INT        NOT NULL,
    [filler1]    CHAR (255) NOT NULL,
    [filler2]    CHAR (255) NOT NULL,
    [filler3]    CHAR (255) NOT NULL,
    [filler4]    CHAR (255) NOT NULL,
    [filler5]    CHAR (255) NOT NULL,
    [filler6]    CHAR (255) NOT NULL,
    [filler7]    CHAR (255) NOT NULL,
    [filler8]    CHAR (139) NOT NULL
);

GO
CREATE TABLE [dbo].[int_nxt_descending_key] (
    [tbl_name]    CHAR (30)  NOT NULL,
    [descend_key] INT        NOT NULL,
    [filler1]     CHAR (255) NOT NULL,
    [filler2]     CHAR (255) NOT NULL,
    [filler3]     CHAR (255) NOT NULL,
    [filler4]     CHAR (255) NOT NULL,
    [filler5]     CHAR (255) NOT NULL,
    [filler6]     CHAR (255) NOT NULL,
    [filler7]     CHAR (255) NOT NULL,
    [filler8]     CHAR (139) NOT NULL
);

GO
CREATE TABLE [dbo].[int_order] (
    [encounter_id]    UNIQUEIDENTIFIER NOT NULL,
    [order_id]        UNIQUEIDENTIFIER NOT NULL,
    [patient_id]      UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [priority_cid]    INT              NULL,
    [status_cid]      INT              NULL,
    [univ_svc_cid]    INT              NULL,
    [order_person_id] UNIQUEIDENTIFIER NULL,
    [order_dt]        DATETIME         NULL,
    [enter_id]        UNIQUEIDENTIFIER NULL,
    [verif_id]        UNIQUEIDENTIFIER NULL,
    [transcriber_id]  UNIQUEIDENTIFIER NULL,
    [parent_order_id] UNIQUEIDENTIFIER NULL,
    [child_order_sw]  TINYINT          NULL,
    [order_cntl_cid]  INT              NULL,
    [history_sw]      TINYINT          NULL,
    [monitor_sw]      TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_order_group] (
    [node_id]         INT           NOT NULL,
    [rank]            INT           NOT NULL,
    [parent_node_id]  INT           NULL,
    [node_name]       NVARCHAR (80) NOT NULL,
    [display_in_menu] TINYINT       NULL
);

GO
CREATE TABLE [dbo].[int_order_group_detail] (
    [node_id]      INT      NOT NULL,
    [univ_svc_cid] INT      NULL,
    [rank]         INT      NOT NULL,
    [display_type] CHAR (5) NULL
);

GO
CREATE TABLE [dbo].[int_order_line] (
    [order_id]           UNIQUEIDENTIFIER NOT NULL,
    [seq_no]             SMALLINT         NOT NULL,
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]    UNIQUEIDENTIFIER NULL,
    [status_cid]         INT              NULL,
    [prov_svc_cid]       INT              NULL,
    [univ_svc_cid]       INT              NULL,
    [transport_cid]      INT              NULL,
    [order_line_comment] NTEXT            NULL,
    [clin_info_comment]  NTEXT            NULL,
    [reason_comment]     NTEXT            NULL,
    [scheduled_dt]       DATETIME         NULL,
    [observ_dt]          DATETIME         NULL,
    [status_chg_dt]      DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_order_map] (
    [order_id]        UNIQUEIDENTIFIER NOT NULL,
    [patient_id]      UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [organization_id] UNIQUEIDENTIFIER NOT NULL,
    [sys_id]          UNIQUEIDENTIFIER NOT NULL,
    [order_xid]       NVARCHAR (30)    NOT NULL,
    [type_cd]         CHAR (1)         NULL,
    [seq_no]          INT              NOT NULL
);

GO
CREATE TABLE [dbo].[int_org_shift_sched] (
    [organization_id] UNIQUEIDENTIFIER NOT NULL,
    [shift_nm]        NVARCHAR (8)     NOT NULL,
    [shift_start_tm]  DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_organization] (
    [organization_id]        UNIQUEIDENTIFIER NOT NULL,
    [category_cd]            CHAR (1)         NULL,
    [parent_organization_id] UNIQUEIDENTIFIER NULL,
    [organization_cd]        NVARCHAR (180)   NULL,
    [organization_nm]        NVARCHAR (180)   NULL,
    [in_default_search]      TINYINT          NULL,
    [monitor_disable_sw]     TINYINT          NULL,
    [auto_collect_interval]  INT              NULL,
    [outbound_interval]      INT              NULL,
    [printer_name]           VARCHAR (255)    NULL,
    [alarm_printer_name]     VARCHAR (255)    NULL
);

GO
CREATE TABLE [dbo].[int_outbound_queue] (
    [outbound_id]  UNIQUEIDENTIFIER NOT NULL,
    [msg_event]    NVARCHAR (3)     NOT NULL,
    [queued_dt]    DATETIME         NOT NULL,
    [msg_status]   CHAR (1)         NOT NULL,
    [processed_dt] DATETIME         NULL,
    [patient_id]   UNIQUEIDENTIFIER NOT NULL,
    [order_id]     UNIQUEIDENTIFIER NULL,
    [obs_start_dt] DATETIME         NULL,
    [obs_end_dt]   DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_param_timetag] (
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]    UNIQUEIDENTIFIER NULL,
    [patient_channel_id] UNIQUEIDENTIFIER NOT NULL,
    [timetag_type]       INT              NOT NULL,
    [param_ft]           BIGINT           NOT NULL,
    [param_dt]           DATETIME         NOT NULL,
    [value1]             INT              NULL,
    [value2]             INT              NULL
);

GO
CREATE TABLE [dbo].[int_patient] (
    [patient_id]           UNIQUEIDENTIFIER NOT NULL,
    [new_patient_id]       UNIQUEIDENTIFIER NULL,
    [organ_donor_sw]       NCHAR (2)        NULL,
    [living_will_sw]       NCHAR (2)        NULL,
    [birth_order]          TINYINT          NULL,
    [veteran_status_cid]   INT              NULL,
    [birth_place]          NVARCHAR (50)    NULL,
    [ssn]                  NVARCHAR (15)    NULL,
    [mpi_ssn1]             INT              NULL,
    [mpi_ssn2]             INT              NULL,
    [mpi_ssn3]             INT              NULL,
    [mpi_ssn4]             INT              NULL,
    [driv_lic_no]          NVARCHAR (25)    NULL,
    [mpi_dl1]              NVARCHAR (3)     NULL,
    [mpi_dl2]              NVARCHAR (3)     NULL,
    [mpi_dl3]              NVARCHAR (3)     NULL,
    [mpi_dl4]              NVARCHAR (3)     NULL,
    [driv_lic_state_code]  NVARCHAR (3)     NULL,
    [dob]                  DATETIME         NULL,
    [death_dt]             DATETIME         NULL,
    [nationality_cid]      INT              NULL,
    [citizenship_cid]      INT              NULL,
    [ethnic_group_cid]     INT              NULL,
    [race_cid]             INT              NULL,
    [gender_cid]           INT              NULL,
    [primary_language_cid] INT              NULL,
    [marital_status_cid]   INT              NULL,
    [religion_cid]         INT              NULL,
    [monitor_interval]     INT              NULL,
    [height]               FLOAT (53)       NULL,
    [weight]               FLOAT (53)       NULL,
    [bsa]                  FLOAT (53)       NULL,
    CONSTRAINT [PK_int_patient_patient_id] PRIMARY KEY CLUSTERED ([patient_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_patient_channel] (
    [patient_channel_id] UNIQUEIDENTIFIER NOT NULL,
    [patient_monitor_id] UNIQUEIDENTIFIER NOT NULL,
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]    UNIQUEIDENTIFIER NULL,
    [monitor_id]         UNIQUEIDENTIFIER NOT NULL,
    [module_num]         INT              NOT NULL,
    [channel_num]        INT              NOT NULL,
    [channel_type_id]    UNIQUEIDENTIFIER NULL,
    [collect_sw]         TINYINT          NULL,
    [active_sw]          TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_patient_document] (
    [patient_id]      UNIQUEIDENTIFIER NULL,
    [seq_no]          INT              NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [document_id]     NVARCHAR (80)    NULL,
    [node_id]         INT              NULL,
    [document_dt]     DATETIME         NULL,
    [document_desc]   NVARCHAR (80)    NOT NULL
);

GO
CREATE TABLE [dbo].[int_patient_image] (
    [patient_id]      UNIQUEIDENTIFIER NULL,
    [order_id]        UNIQUEIDENTIFIER NULL,
    [seq_no]          SMALLINT         NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [image_type_cid]  INT              NULL,
    [image_path]      NVARCHAR (255)   NULL,
    [image]           IMAGE            NULL
);

GO
CREATE TABLE [dbo].[int_patient_link] (
    [orig_patient_id] UNIQUEIDENTIFIER NOT NULL,
    [new_patient_id]  UNIQUEIDENTIFIER NOT NULL,
    [user_id]         UNIQUEIDENTIFIER NULL,
    [monitor_id]      UNIQUEIDENTIFIER NULL,
    [mod_dt]          DATETIME         NOT NULL
);

GO
CREATE TABLE [dbo].[int_patient_list] (
    [patient_list_id] UNIQUEIDENTIFIER NOT NULL,
    [owner_id]        UNIQUEIDENTIFIER NULL,
    [type_cd]         CHAR (3)         NOT NULL,
    [list_name]       NVARCHAR (30)    NULL,
    [svc_cid]         INT              NULL
);

GO
CREATE TABLE [dbo].[int_patient_list_detail] (
    [patient_list_id]   UNIQUEIDENTIFIER NOT NULL,
    [patient_id]        UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]   UNIQUEIDENTIFIER NULL,
    [encounter_id]      UNIQUEIDENTIFIER NOT NULL,
    [deleted]           TINYINT          NOT NULL,
    [new_results]       CHAR (1)         NULL,
    [viewed_results_dt] DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_patient_list_link] (
    [master_owner_id]   UNIQUEIDENTIFIER NOT NULL,
    [transfer_owner_id] UNIQUEIDENTIFIER NOT NULL,
    [patient_id]        UNIQUEIDENTIFIER NULL,
    [start_dt]          DATETIME         NOT NULL,
    [end_dt]            DATETIME         NULL,
    [type_cd]           CHAR (1)         NOT NULL,
    [deleted]           TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_patient_monitor] (
    [patient_monitor_id]  UNIQUEIDENTIFIER NOT NULL,
    [patient_id]          UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]     UNIQUEIDENTIFIER NULL,
    [monitor_id]          UNIQUEIDENTIFIER NOT NULL,
    [monitor_interval]    INT              NULL,
    [poll_type]           CHAR (1)         NOT NULL,
    [monitor_connect_dt]  DATETIME         NULL,
    [monitor_connect_num] INT              NULL,
    [disable_sw]          TINYINT          NULL,
    [last_poll_dt]        DATETIME         NULL,
    [last_result_dt]      DATETIME         NULL,
    [last_episodic_dt]    DATETIME         NULL,
    [poll_start_dt]       DATETIME         NULL,
    [poll_end_dt]         DATETIME         NULL,
    [last_outbound_dt]    DATETIME         NULL,
    [monitor_status]      CHAR (3)         NULL,
    [monitor_error]       NVARCHAR (255)   NULL,
    [encounter_id]        UNIQUEIDENTIFIER NULL,
    [live_until_dt]       DATETIME         NULL,
    [active_sw]           TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_patient_procedure] (
    [enc_id]             UNIQUEIDENTIFIER NOT NULL,
    [proc_cid]           INT              NOT NULL,
    [seq_no]             SMALLINT         NOT NULL,
    [proc_dt]            DATETIME         NOT NULL,
    [proc_function_cid]  INT              NOT NULL,
    [proc_minutes]       SMALLINT         NOT NULL,
    [anesthesia_cid]     INT              NULL,
    [anesthesia_minutes] SMALLINT         NULL,
    [consent_cid]        INT              NOT NULL,
    [proc_priority]      TINYINT          NULL,
    [assoc_diag_cid]     INT              NOT NULL
);

GO
CREATE TABLE [dbo].[int_person] (
    [person_id]      UNIQUEIDENTIFIER NOT NULL,
    [new_patient_id] UNIQUEIDENTIFIER NULL,
    [first_nm]       NVARCHAR (50)    NULL,
    [middle_nm]      NVARCHAR (50)    NULL,
    [last_nm]        NVARCHAR (50)    NULL,
    [suffix]         NVARCHAR (5)     NULL,
    [tel_no]         NVARCHAR (40)    NULL,
    [line1_dsc]      NVARCHAR (80)    NULL,
    [line2_dsc]      NVARCHAR (80)    NULL,
    [line3_dsc]      NVARCHAR (80)    NULL,
    [city_nm]        NVARCHAR (30)    NULL,
    [state_code]     NVARCHAR (3)     NULL,
    [zip_code]       NVARCHAR (15)    NULL,
    [country_cid]    INT              NULL
);

GO
CREATE TABLE [dbo].[int_person_name] (
    [person_nm_id]    UNIQUEIDENTIFIER NOT NULL,
    [recognize_nm_cd] CHAR (2)         NOT NULL,
    [seq_no]          INT              NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [active_sw]       TINYINT          NOT NULL,
    [prefix]          NVARCHAR (4)     NULL,
    [first_nm]        NVARCHAR (50)    NULL,
    [middle_nm]       NVARCHAR (50)    NULL,
    [last_nm]         NVARCHAR (50)    NULL,
    [suffix]          NVARCHAR (5)     NULL,
    [degree]          NVARCHAR (20)    NULL,
    [mpi_lname_cons]  NVARCHAR (20)    NULL,
    [mpi_fname_cons]  NVARCHAR (20)    NULL,
    [mpi_mname_cons]  NVARCHAR (20)    NULL,
    [start_dt]        DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_pref] (
    [user_id]        UNIQUEIDENTIFIER NULL,
    [user_role_id]   UNIQUEIDENTIFIER NULL,
    [application_id] NCHAR (3)        NULL,
    [xml_data]       IMAGE            NOT NULL
);

GO
CREATE TABLE [dbo].[int_pref_diff] (
    [user_id]           UNIQUEIDENTIFIER NULL,
    [user_role_id]      UNIQUEIDENTIFIER NULL,
    [node_path]         NVARCHAR (255)   NOT NULL,
    [changed_at_global] TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_pref_lock] (
    [user_id]      UNIQUEIDENTIFIER NULL,
    [user_role_id] UNIQUEIDENTIFIER NULL,
    [node_path]    NVARCHAR (255)   NOT NULL
);

GO
CREATE TABLE [dbo].[int_pref_pushdown] (
    [user_id]      UNIQUEIDENTIFIER NULL,
    [user_role_id] UNIQUEIDENTIFIER NULL,
    [node_path]    NVARCHAR (255)   NOT NULL,
    [xml_data]     NVARCHAR (4000)  NOT NULL,
    [mod_dt]       DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_print_job] (
    [print_job_id]     UNIQUEIDENTIFIER NOT NULL,
    [page_number]      INT              NOT NULL,
    [patient_id]       UNIQUEIDENTIFIER NULL,
    [orig_patient_id]  UNIQUEIDENTIFIER NULL,
    [job_net_dt]       DATETIME         NOT NULL,
    [descr]            NVARCHAR (120)   NULL,
    [data_node]        INT              NOT NULL,
    [sweep_speed]      FLOAT (53)       NULL,
    [duration]         FLOAT (53)       NULL,
    [num_channels]     INT              NULL,
    [alarm_id]         UNIQUEIDENTIFIER NULL,
    [job_type]         VARCHAR (25)     NULL,
    [title]            VARCHAR (120)    NULL,
    [bed]              VARCHAR (25)     NULL,
    [recording_time]   VARCHAR (25)     NULL,
    [byte_height]      INT              NULL,
    [bitmap_height]    INT              NULL,
    [bitmap_width]     INT              NULL,
    [scale]            INT              NULL,
    [annotation1]      VARCHAR (120)    NULL,
    [annotation2]      VARCHAR (120)    NULL,
    [annotation3]      VARCHAR (120)    NULL,
    [annotation4]      VARCHAR (120)    NULL,
    [print_bitmap]     IMAGE            NULL,
    [twelve_lead_data] IMAGE            NULL,
    [end_of_job_sw]    TINYINT          NULL,
    [print_sw]         TINYINT          NULL,
    [printer_name]     VARCHAR (255)    NULL,
    [last_printed_dt]  DATETIME         NULL,
    [status_code]      CHAR (1)         NULL,
    [status_msg]       VARCHAR (500)    NULL,
    [start_rec]        IMAGE            NULL,
    [row_dt]           SMALLDATETIME    CONSTRAINT [DF_int_print_job_row_dt] DEFAULT (GETDATE()) NOT NULL,
    [row_id]           UNIQUEIDENTIFIER CONSTRAINT [DF_int_print_job_row_id] DEFAULT (NEWID()) NOT NULL,
    CONSTRAINT [PK_int_print_job_row_dt_row_id] PRIMARY KEY CLUSTERED ([row_dt] ASC, [row_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_print_job_et_alarm] (
    [AlarmId]           UNIQUEIDENTIFIER NOT NULL,
    [PatientId]         UNIQUEIDENTIFIER NULL,
    [TopicSessionId]    UNIQUEIDENTIFIER NOT NULL,
    [DeviceSessionId]   UNIQUEIDENTIFIER NOT NULL,
    [AlarmStartTimeUTC] DATETIME         NOT NULL,
    [AlarmEndTimeUTC]   DATETIME         NULL,
    [StrTitleLabel]     NVARCHAR (50)    NULL,
    [FirstName]         NVARCHAR (50)    NULL,
    [LastName]          NVARCHAR (50)    NULL,
    [FullName]          NVARCHAR (150)   NULL,
    [ID1]               NVARCHAR (30)    NULL,
    [ID2]               NVARCHAR (30)    NULL,
    [DOB]               NVARCHAR (40)    NULL,
    [FacilityName]      NVARCHAR (180)   NULL,
    [UnitName]          NVARCHAR (180)   NULL,
    [MonitorName]       NVARCHAR (255)   NOT NULL,
    [StrMessage]        NVARCHAR (120)   NOT NULL,
    [StrLimitFormat]    NVARCHAR (120)   NULL,
    [StrValueFormat]    NVARCHAR (120)   NULL,
    [ViolatingValue]    NVARCHAR (120)   NULL,
    [SettingViolated]   NVARCHAR (120)   NULL,
    [RowLastUpdatedOn]  SMALLDATETIME    NOT NULL,
    CONSTRAINT [PK_int_print_job_et_alarm_AlarmId] PRIMARY KEY CLUSTERED ([AlarmId] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_print_job_et_vitals] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PatientId]      UNIQUEIDENTIFIER NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [GDSCode]        VARCHAR (80)     NULL,
    [Name]           NVARCHAR (255)   NOT NULL,
    [Value]          NVARCHAR (255)   NULL,
    [ResultTimeUTC]  DATETIME         NOT NULL,
    CONSTRAINT [PK_int_print_job_et_vitals_Id] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_print_job_et_waveform] (
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [DeviceSessionId] UNIQUEIDENTIFIER NOT NULL,
    [StartTimeUTC]    DATETIME         NOT NULL,
    [EndTimeUTC]      DATETIME         NOT NULL,
    [SampleRate]      INT              NOT NULL,
    [WaveformData]    VARBINARY (MAX)  NOT NULL,
    [ChannelCode]     INT              NOT NULL,
    [CdiLabel]        VARCHAR (255)    NOT NULL,
    CONSTRAINT [PK_int_print_job_et_waveform_Id] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_print_job_waveform] (
    [print_job_id]            UNIQUEIDENTIFIER NOT NULL,
    [page_number]             INT              NOT NULL,
    [seq_no]                  INT              NOT NULL,
    [waveform_type]           VARCHAR (25)     NOT NULL,
    [duration]                FLOAT (53)       NULL,
    [channel_type]            VARCHAR (50)     NULL,
    [module_num]              INT              NULL,
    [channel_num]             INT              NULL,
    [sweep_speed]             FLOAT (53)       NULL,
    [label_min]               FLOAT (53)       NULL,
    [label_max]               FLOAT (53)       NULL,
    [show_units]              TINYINT          NULL,
    [annotation_channel_type] INT              NULL,
    [offset]                  INT              NULL,
    [scale]                   INT              NULL,
    [primary_annotation]      VARCHAR (50)     NULL,
    [secondary_annotation]    VARCHAR (50)     NULL,
    [waveform_data]           TEXT             NULL,
    [grid_type]               INT              NULL,
    [scale_labels]            VARCHAR (120)    NULL,
    [row_dt]                  SMALLDATETIME    CONSTRAINT [DF_int_print_job_waveform_row_dt] DEFAULT (GETDATE()) NOT NULL,
    [row_id]                  UNIQUEIDENTIFIER CONSTRAINT [DF_int_print_job_waveform_row_id] DEFAULT (NEWID()) NOT NULL,
    CONSTRAINT [PK_int_print_job_waveform_row_dt_row_id] PRIMARY KEY CLUSTERED ([row_dt] ASC, [row_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_procedure] (
    [encounter_id]           INT      NOT NULL,
    [procedure_cid]          INT      NOT NULL,
    [seq_no]                 BIT      NOT NULL,
    [procedure_dt]           DATETIME NOT NULL,
    [procedure_function_cid] INT      NOT NULL,
    [procedure_minutes]      BIT      NOT NULL,
    [anesthesia_cid]         INT      NULL,
    [anesthesia_minutes]     BIT      NULL,
    [consent_cid]            INT      NOT NULL,
    [procedure_priority]     BIT      NULL,
    [assoc_diag_cid]         INT      NOT NULL
);

GO
CREATE TABLE [dbo].[int_procedure_hcp_int] (
    [encounter_id]      UNIQUEIDENTIFIER NOT NULL,
    [procedure_cid]     INT              NOT NULL,
    [seq_no]            INT              NOT NULL,
    [desc_key]          INT              NOT NULL,
    [hcp_id]            UNIQUEIDENTIFIER NOT NULL,
    [proc_hcp_type_cid] INT              NOT NULL
);

GO
CREATE TABLE [dbo].[int_product] (
    [product_cd] VARCHAR (25)  NOT NULL,
    [descr]      VARCHAR (120) NULL,
    [has_access] SMALLINT      NOT NULL
);

GO
CREATE TABLE [dbo].[int_product_access] (
    [product_cd]      VARCHAR (25)     NOT NULL,
    [organization_id] UNIQUEIDENTIFIER NULL,
    [license_no]      VARCHAR (120)    NULL
);

GO
CREATE TABLE [dbo].[int_product_map] (
    [product_cd] VARCHAR (25) NOT NULL,
    [feature_cd] VARCHAR (25) NOT NULL
);

GO
CREATE TABLE [dbo].[int_reference_range] (
    [reference_range_id] INT           NOT NULL,
    [reference_range]    NVARCHAR (60) NOT NULL
);

GO
CREATE TABLE [dbo].[int_result] (
    [result_id]          UNIQUEIDENTIFIER NOT NULL,
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]    UNIQUEIDENTIFIER NULL,
    [obs_start_dt]       DATETIME         NULL,
    [order_id]           UNIQUEIDENTIFIER NOT NULL,
    [is_history]         TINYINT          NULL,
    [monitor_sw]         TINYINT          NULL,
    [univ_svc_cid]       INT              NOT NULL,
    [test_cid]           INT              NOT NULL,
    [history_seq]        INT              NULL,
    [test_sub_id]        NVARCHAR (20)    NULL,
    [order_line_seq_no]  SMALLINT         NULL,
    [test_result_seq_no] SMALLINT         NULL,
    [result_dt]          DATETIME         NULL,
    [value_type_cd]      NVARCHAR (10)    NULL,
    [specimen_id]        UNIQUEIDENTIFIER NULL,
    [source_cid]         INT              NULL,
    [status_cid]         INT              NULL,
    [last_normal_dt]     DATETIME         NULL,
    [probability]        FLOAT (53)       NULL,
    [obs_id]             UNIQUEIDENTIFIER NULL,
    [prin_rslt_intpr_id] UNIQUEIDENTIFIER NULL,
    [asst_rslt_intpr_id] UNIQUEIDENTIFIER NULL,
    [tech_id]            UNIQUEIDENTIFIER NULL,
    [trnscrbr_id]        UNIQUEIDENTIFIER NULL,
    [result_units_cid]   INT              NULL,
    [reference_range_id] INT              NULL,
    [abnormal_cd]        NVARCHAR (10)    NULL,
    [abnormal_nature_cd] NVARCHAR (10)    NULL,
    [prov_svc_cid]       INT              NULL,
    [nsurv_tfr_ind]      NVARCHAR (10)    NULL,
    [result_value]       NVARCHAR (255)   NULL,
    [result_text]        NTEXT            NULL,
    [result_comment]     NTEXT            NULL,
    [has_history]        TINYINT          NULL,
    [mod_dt]             DATETIME         NULL,
    [mod_user_id]        UNIQUEIDENTIFIER NULL,
    [Sequence]           BIGINT           IDENTITY (0, 1) NOT NULL,
    [result_ft]          BIGINT           NULL,
    CONSTRAINT [PK_int_result_Sequence] PRIMARY KEY CLUSTERED ([Sequence] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_result_flag] (
    [flag_id]          UNIQUEIDENTIFIER NOT NULL,
    [flag]             NVARCHAR (10)    NOT NULL,
    [display_front]    NVARCHAR (10)    NULL,
    [display_back]     NVARCHAR (10)    NULL,
    [bitmap_ndx_front] INT              NULL,
    [bitmap_ndx_back]  INT              NULL,
    [color_foreground] VARCHAR (20)     NULL,
    [color_background] VARCHAR (20)     NULL,
    [sys_id]           UNIQUEIDENTIFIER NULL,
    [comment]          NVARCHAR (30)    NULL,
    [legend_rank]      INT              NOT NULL,
    [severity_rank]    INT              NULL
);

GO
CREATE TABLE [dbo].[int_saved_event] (
    [patient_id]               UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]          UNIQUEIDENTIFIER NULL,
    [event_id]                 INT              NOT NULL,
    [insert_dt]                DATETIME         NOT NULL,
    [user_id]                  UNIQUEIDENTIFIER NOT NULL,
    [orig_event_category]      INT              NOT NULL,
    [orig_event_type]          INT              NOT NULL,
    [start_dt]                 DATETIME         NOT NULL,
    [start_ft]                 BIGINT           NOT NULL,
    [center_ft]                BIGINT           NULL,
    [duration]                 INT              NOT NULL,
    [value1]                   INT              NOT NULL,
    [divisor1]                 INT              NOT NULL,
    [value2]                   INT              NULL,
    [divisor2]                 INT              NULL,
    [print_format]             INT              NOT NULL,
    [title]                    NVARCHAR (50)    NULL,
    [type]                     NVARCHAR (50)    NULL,
    [rate_calipers]            TINYINT          NOT NULL,
    [measure_calipers]         TINYINT          NOT NULL,
    [caliper_start_ft]         BIGINT           NULL,
    [caliper_end_ft]           BIGINT           NULL,
    [caliper_top]              INT              NULL,
    [caliper_bottom]           INT              NULL,
    [caliper_top_wave_type]    INT              NULL,
    [caliper_bottom_wave_type] INT              NULL,
    [annotate_data]            TINYINT          NOT NULL,
    [num_waveforms]            INT              NOT NULL
);

GO
CREATE TABLE [dbo].[int_saved_event_waveform] (
    [patient_id]        UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]   UNIQUEIDENTIFIER NULL,
    [event_id]          INT              NOT NULL,
    [wave_index]        INT              NOT NULL,
    [waveform_category] INT              NOT NULL,
    [lead]              INT              NOT NULL,
    [resolution]        INT              NOT NULL,
    [height]            INT              NOT NULL,
    [waveform_type]     INT              NOT NULL,
    [visible]           TINYINT          NOT NULL,
    [scale]             FLOAT (53)       NOT NULL,
    [scale_units]       INT              NOT NULL,
    [scale_min]         INT              NOT NULL,
    [scale_max]         INT              NOT NULL,
    [duration]          INT              NOT NULL,
    [sample_rate]       INT              NOT NULL,
    [sample_count]      INT              NOT NULL,
    [num_Ypoints]       INT              NOT NULL,
    [baseline]          INT              NOT NULL,
    [Ypoints_per_unit]  FLOAT (53)       NOT NULL,
    [waveform_data]     IMAGE            NULL,
    [num_timelogs]      INT              NOT NULL,
    [timelog_data]      IMAGE            NULL
);

GO
CREATE TABLE [dbo].[int_SavedEvent] (
    [patient_id]          UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]     UNIQUEIDENTIFIER NULL,
    [event_id]            UNIQUEIDENTIFIER NOT NULL,
    [insert_dt]           DATETIME         NOT NULL,
    [user_id]             UNIQUEIDENTIFIER NOT NULL,
    [orig_event_category] INT              NOT NULL,
    [orig_event_type]     INT              NOT NULL,
    [start_dt]            DATETIME         NOT NULL,
    [start_ms]            BIGINT           NOT NULL,
    [center_ft]           BIGINT           NULL,
    [duration]            INT              NOT NULL,
    [value1]              FLOAT (53)       NOT NULL,
    [value2]              FLOAT (53)       NULL,
    [print_format]        INT              NOT NULL,
    [title]               NVARCHAR (50)    NULL,
    [comment]             [dbo].[DCOMMENT] NULL,
    [annotate_data]       TINYINT          NOT NULL,
    [beat_color]          TINYINT          NOT NULL,
    [num_waveforms]       INT              NOT NULL,
    [sweep_speed]         INT              NOT NULL,
    [minutes_per_page]    INT              NOT NULL,
    [thumbnailChannel]    INT              NULL,
    CONSTRAINT [PK_int_savedevent_patient_id_event_id] PRIMARY KEY CLUSTERED ([patient_id] ASC, [event_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_savedevent_beat_time_log] (
    [patient_id]       UNIQUEIDENTIFIER NOT NULL,
    [event_id]         UNIQUEIDENTIFIER NOT NULL,
    [patient_start_ft] BIGINT           NOT NULL,
    [start_ft]         BIGINT           NOT NULL,
    [num_beats]        INT              NOT NULL,
    [sample_rate]      SMALLINT         NOT NULL,
    [beat_data]        IMAGE            NOT NULL,
    CONSTRAINT [PK_int_savedevent_beat_time_log] PRIMARY KEY CLUSTERED ([patient_id] ASC, [event_id] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_int_savedevent_beat_time_log_int_savedevent_patient_id_event_id] FOREIGN KEY ([patient_id], [event_id]) REFERENCES [dbo].[int_SavedEvent] ([patient_id], [event_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[int_savedevent_calipers] (
    [patient_id]           UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]      UNIQUEIDENTIFIER NULL,
    [event_id]             UNIQUEIDENTIFIER NOT NULL,
    [channel_type]         INT              NOT NULL,
    [caliper_type]         INT              NOT NULL,
    [calipers_orientation] NCHAR (50)       NOT NULL,
    [caliper_text]         NVARCHAR (200)   NULL,
    [caliper_start_ms]     BIGINT           NOT NULL,
    [caliper_end_ms]       BIGINT           NOT NULL,
    [caliper_top]          INT              NOT NULL,
    [caliper_bottom]       INT              NOT NULL,
    [first_caliper_index]  INT              NULL,
    [second_caliper_index] INT              NULL,
    CONSTRAINT [PK_int_savedevent_calipers] PRIMARY KEY CLUSTERED ([patient_id] ASC, [event_id] ASC, [channel_type] ASC, [caliper_type] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_int_savedevent_calipers_int_savedevent_patient_id_event_id] FOREIGN KEY ([patient_id], [event_id]) REFERENCES [dbo].[int_SavedEvent] ([patient_id], [event_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[int_savedevent_event_log] (
    [patient_id]            UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]       UNIQUEIDENTIFIER NULL,
    [event_id]              UNIQUEIDENTIFIER NOT NULL,
    [primary_channel]       BIT              NULL,
    [timetag_type]          INT              NOT NULL,
    [lead_type]             INT              NULL,
    [monitor_event_type]    INT              NULL,
    [arrhythmia_event_type] INT              NULL,
    [start_ms]              BIGINT           NOT NULL,
    [end_ms]                BIGINT           NULL,
    CONSTRAINT [FK_int_savedevent_event_log_int_savedevent_patient_id_event_id] FOREIGN KEY ([patient_id], [event_id]) REFERENCES [dbo].[int_SavedEvent] ([patient_id], [event_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[int_savedevent_vitals] (
    [patient_id]   UNIQUEIDENTIFIER NOT NULL,
    [event_id]     UNIQUEIDENTIFIER NOT NULL,
    [gds_code]     NVARCHAR (80)    NOT NULL,
    [result_dt]    DATETIME         NULL,
    [result_value] NVARCHAR (200)   NULL,
    CONSTRAINT [PK_int_savedevent_vitals_patient_id_event_id_gds_code] PRIMARY KEY CLUSTERED ([patient_id] ASC, [event_id] ASC, [gds_code] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_int_savedevent_vitals_int_savedevent_patient_id_event_id] FOREIGN KEY ([patient_id], [event_id]) REFERENCES [dbo].[int_SavedEvent] ([patient_id], [event_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[int_savedevent_waveform] (
    [patient_id]        UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]   UNIQUEIDENTIFIER NULL,
    [event_id]          UNIQUEIDENTIFIER NOT NULL,
    [wave_index]        INT              NOT NULL,
    [waveform_category] INT              NOT NULL,
    [lead]              INT              NOT NULL,
    [resolution]        INT              NOT NULL,
    [height]            INT              NOT NULL,
    [waveform_type]     INT              NOT NULL,
    [visible]           TINYINT          NOT NULL,
    [channel_id]        UNIQUEIDENTIFIER NOT NULL,
    [scale]             FLOAT (53)       NOT NULL,
    [scale_type]        INT              NOT NULL,
    [scale_min]         INT              NOT NULL,
    [scale_max]         INT              NOT NULL,
    [scale_unit_type]   INT              NOT NULL,
    [duration]          INT              NOT NULL,
    [sample_rate]       INT              NOT NULL,
    [sample_count]      BIGINT           NOT NULL,
    [num_Ypoints]       INT              NOT NULL,
    [baseline]          INT              NOT NULL,
    [Ypoints_per_unit]  FLOAT (53)       NOT NULL,
    [waveform_data]     IMAGE            NULL,
    [num_timelogs]      INT              NOT NULL,
    [timelog_data]      IMAGE            NULL,
    [waveform_color]    VARCHAR (50)     NULL,
    CONSTRAINT [PK_int_savedevent_waveform_patient_id_event_id_channel_id] PRIMARY KEY CLUSTERED ([patient_id] ASC, [event_id] ASC, [channel_id] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_int_savedevent_waveform_int_savedevent_patient_id_event_id] FOREIGN KEY ([patient_id], [event_id]) REFERENCES [dbo].[int_SavedEvent] ([patient_id], [event_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[int_security] (
    [user_id]        UNIQUEIDENTIFIER NULL,
    [user_role_id]   UNIQUEIDENTIFIER NULL,
    [application_id] NCHAR (3)        NULL,
    [xml_data]       XML              NOT NULL
);

GO
CREATE TABLE [dbo].[int_security_diff] (
    [user_id]           UNIQUEIDENTIFIER NULL,
    [user_role_id]      UNIQUEIDENTIFIER NULL,
    [node_path]         NVARCHAR (255)   NOT NULL,
    [changed_at_global] TINYINT          NULL
);

GO
CREATE TABLE [dbo].[int_security_lock] (
    [user_id]      UNIQUEIDENTIFIER NULL,
    [user_role_id] UNIQUEIDENTIFIER NULL,
    [node_path]    NVARCHAR (255)   NOT NULL
);

GO
CREATE TABLE [dbo].[int_security_pushdown] (
    [user_id]      UNIQUEIDENTIFIER NULL,
    [user_role_id] UNIQUEIDENTIFIER NULL,
    [node_path]    NVARCHAR (255)   NOT NULL,
    [xml_data]     NVARCHAR (4000)  NOT NULL,
    [mod_dt]       DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_send_sys] (
    [sys_id]          UNIQUEIDENTIFIER NOT NULL,
    [organization_id] UNIQUEIDENTIFIER NOT NULL,
    [code]            NVARCHAR (180)   NOT NULL,
    [dsc]             NVARCHAR (180)   NULL
);

GO
CREATE TABLE [dbo].[int_site_link] (
    [link_id]      UNIQUEIDENTIFIER NOT NULL,
    [group_name]   NVARCHAR (100)   NOT NULL,
    [group_rank]   INT              NOT NULL,
    [display_name] NVARCHAR (100)   NOT NULL,
    [display_rank] INT              NOT NULL,
    [url]          NVARCHAR (100)   NULL
);

GO
CREATE TABLE [dbo].[int_specimen] (
    [specimen_id]              UNIQUEIDENTIFIER NOT NULL,
    [order_id]                 UNIQUEIDENTIFIER NOT NULL,
    [patient_id]               UNIQUEIDENTIFIER NULL,
    [orig_patient_id]          UNIQUEIDENTIFIER NULL,
    [univ_svc_cid]             INT              NULL,
    [status_cid]               INT              NULL,
    [encounter_id]             UNIQUEIDENTIFIER NULL,
    [collect_id]               UNIQUEIDENTIFIER NULL,
    [specimen_xid]             NVARCHAR (15)    NULL,
    [procedure_dt]             DATETIME         NULL,
    [source_cid]               INT              NULL,
    [body_site_cid]            INT              NULL,
    [comment_id]               UNIQUEIDENTIFIER NULL,
    [collect_dt]               DATETIME         NULL,
    [collect_vol_qty]          SMALLINT         NULL,
    [collect_vol_unit_code_id] CHAR (10)        NULL,
    [collect_method]           NVARCHAR (80)    NULL,
    [source_additive]          NVARCHAR (30)    NULL,
    [action_code_id]           CHAR (1)         NULL,
    [call_back_phone_cat_id]   INT              NULL,
    [fields_key]               INT              NULL,
    [receive_dt]               DATETIME         NULL,
    [handle_cid]               INT              NULL,
    [handle_cat_cid]           INT              NULL
);

GO
CREATE TABLE [dbo].[int_specimen_group] (
    [rank]           INT           NOT NULL,
    [source_cd]      NVARCHAR (30) NULL,
    [specimen_group] NVARCHAR (30) NULL
);

GO
CREATE TABLE [dbo].[int_starter_set] (
    [set_type_cd] NVARCHAR (255) NULL,
    [guid]        NVARCHAR (255) NULL,
    [int_id1]     FLOAT (53)     NULL,
    [int_id2]     FLOAT (53)     NULL,
    [int_id3]     FLOAT (53)     NULL,
    [enu]         NVARCHAR (255) NULL,
    [fra]         NVARCHAR (255) NULL,
    [deu]         NVARCHAR (255) NULL,
    [esp]         NVARCHAR (255) NULL,
    [ita]         NVARCHAR (255) NULL,
    [nld]         NVARCHAR (255) NULL,
    [chs]         NVARCHAR (255) NULL,
    [cze]         NVARCHAR (255) NULL,
    [pol]         NVARCHAR (255) NULL,
    [ptb]         NVARCHAR (255) NULL
);

GO
CREATE TABLE [dbo].[int_sysgen] (
    [Sequence]   INT          IDENTITY (1, 1) NOT NULL,
    [product_cd] VARCHAR (25) NOT NULL,
    [feature_cd] VARCHAR (25) NOT NULL,
    [setting]    VARCHAR (80) NULL,
    CONSTRAINT [PK_int_sysgen_Sequence] PRIMARY KEY NONCLUSTERED ([Sequence] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_sysgen_audit] (
    [Sequence] INT           IDENTITY (1, 1) NOT NULL,
    [audit_dt] DATETIME      NOT NULL,
    [audit]    VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_int_sysgen_audit_Sequence] PRIMARY KEY NONCLUSTERED ([Sequence] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_sysgen_comment] (
    [Sequence]   INT           IDENTITY (1, 1) NOT NULL,
    [comment_dt] DATETIME      NOT NULL,
    [comment]    VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_int_sysgen_comment_Sequence] PRIMARY KEY NONCLUSTERED ([Sequence] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_system_parameter] (
    [system_parameter_id] INT            NOT NULL,
    [name]                NVARCHAR (30)  NOT NULL,
    [parm_value]          NVARCHAR (80)  NULL,
    [active_flag]         TINYINT        NULL,
    [after_discharge_sw]  TINYINT        NULL,
    [debug_sw]            TINYINT        NULL,
    [descr]               NVARCHAR (255) NULL
);

GO
CREATE TABLE [dbo].[int_tech_map] (
    [tech_id]         UNIQUEIDENTIFIER NOT NULL,
    [tech_xid]        NVARCHAR (30)    NOT NULL,
    [organization_id] UNIQUEIDENTIFIER NOT NULL
);

GO
CREATE TABLE [dbo].[int_telephone] (
    [phone_id]        UNIQUEIDENTIFIER NOT NULL,
    [phone_loc_cd]    CHAR (1)         NOT NULL,
    [phone_type_cd]   CHAR (1)         NOT NULL,
    [seq_no]          INT              NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [active_sw]       TINYINT          NOT NULL,
    [tel_no]          NVARCHAR (40)    NULL,
    [ext_no]          NVARCHAR (12)    NULL,
    [areacode]        NVARCHAR (3)     NULL,
    [mpi_tel1]        SMALLINT         NULL,
    [mpi_tel2]        SMALLINT         NULL,
    [mpi_tel3]        SMALLINT         NULL,
    [start_dt]        DATETIME         NULL
);

GO
CREATE TABLE [dbo].[int_template_set_info] (
    [user_id]             UNIQUEIDENTIFIER NOT NULL,
    [patient_id]          UNIQUEIDENTIFIER NOT NULL,
    [template_set_index]  INT              NOT NULL,
    [lead_one]            INT              NOT NULL,
    [lead_two]            INT              NOT NULL,
    [number_of_bins]      INT              NOT NULL,
    [number_of_templates] INT              NOT NULL,
    CONSTRAINT [PK_int_template_set_info_user_id_patient_id_template_set_index] PRIMARY KEY CLUSTERED ([user_id] ASC, [patient_id] ASC, [template_set_index] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_int_template_set_info_AnalysisTime_user_id_patient_id] FOREIGN KEY ([user_id], [patient_id]) REFERENCES [dbo].[AnalysisTime] ([user_id], [patient_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[int_test_group] (
    [node_id]         INT           NOT NULL,
    [rank]            INT           NOT NULL,
    [display_in_all]  TINYINT       NULL,
    [parent_node_id]  INT           NULL,
    [display_type]    CHAR (5)      NULL,
    [node_name]       NVARCHAR (80) NOT NULL,
    [parm_str]        NVARCHAR (80) NULL,
    [display_in_menu] TINYINT       NULL
);

GO
CREATE TABLE [dbo].[int_test_group_detail] (
    [node_id]            INT           NOT NULL,
    [test_cid]           INT           NULL,
    [univ_svc_cid]       INT           NULL,
    [rank]               INT           NOT NULL,
    [display_type]       CHAR (5)      NULL,
    [nm]                 NVARCHAR (80) NOT NULL,
    [source_cid]         INT           NULL,
    [alias_test_cid]     INT           NULL,
    [alias_univ_svc_cid] INT           NULL
);

GO
CREATE TABLE [dbo].[int_translate] (
    [translate_cd] VARCHAR (70)   NOT NULL,
    [form_id]      VARCHAR (30)   NULL,
    [enu]          NVARCHAR (255) NULL,
    [fra]          NVARCHAR (255) NULL,
    [deu]          NVARCHAR (255) NULL,
    [esp]          NVARCHAR (255) NULL,
    [ita]          NVARCHAR (255) NULL,
    [nld]          NVARCHAR (255) NULL,
    [chs]          NVARCHAR (255) NULL,
    [insert_dt]    DATETIME       NOT NULL,
    [Pol]          NVARCHAR (255) NULL,
    [ptb]          NVARCHAR (255) NULL,
    [cze]          NVARCHAR (255) NULL
);

GO
CREATE TABLE [dbo].[int_translate_list] (
    [list_id]      UNIQUEIDENTIFIER NOT NULL,
    [translate_cd] VARCHAR (40)     NOT NULL
);

GO
CREATE TABLE [dbo].[int_user] (
    [user_id]      UNIQUEIDENTIFIER NOT NULL,
    [user_role_id] UNIQUEIDENTIFIER NOT NULL,
    [user_sid]     NVARCHAR (68)    NULL,
    [hcp_id]       UNIQUEIDENTIFIER NULL,
    [login_name]   NVARCHAR (64)    NULL,
    CONSTRAINT [PK_int_user_user_id] PRIMARY KEY CLUSTERED ([user_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_user_contact] (
    [user_id]        UNIQUEIDENTIFIER NOT NULL,
    [seq]            INT              NOT NULL,
    [contact_descr]  NVARCHAR (80)    NOT NULL,
    [phone_num]      NVARCHAR (80)    NULL,
    [address_1]      NVARCHAR (80)    NULL,
    [address_2]      NVARCHAR (80)    NULL,
    [address_3]      NVARCHAR (80)    NULL,
    [e_mail]         NVARCHAR (40)    NULL,
    [city]           NVARCHAR (50)    NULL,
    [state_province] NVARCHAR (30)    NULL,
    [zip_postal]     NVARCHAR (15)    NULL,
    [country]        NVARCHAR (20)    NULL,
    CONSTRAINT [PK_int_user_contact_user_id_seq] PRIMARY KEY CLUSTERED ([user_id] ASC, [seq] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_user_group] (
    [user_group_id] UNIQUEIDENTIFIER NOT NULL,
    [group_name]    NVARCHAR (10)    NOT NULL,
    [group_descr]   NVARCHAR (50)    NULL,
    CONSTRAINT [PK_int_user_group_user_group_id] PRIMARY KEY CLUSTERED ([user_group_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_user_group_member] (
    [user_group_id] UNIQUEIDENTIFIER NOT NULL,
    [user_id]       UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_int_user_group_member_user_id_user_group_id] PRIMARY KEY CLUSTERED ([user_id] ASC, [user_group_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_user_password] (
    [user_id]   UNIQUEIDENTIFIER NOT NULL,
    [password]  NVARCHAR (40)    NOT NULL,
    [change_dt] DATETIME         NOT NULL,
    CONSTRAINT [PK_int_user_password_user_id_password_change_dt] PRIMARY KEY CLUSTERED ([user_id] ASC, [password] ASC, [change_dt] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_user_role] (
    [user_role_id] UNIQUEIDENTIFIER NOT NULL,
    [role_name]    NVARCHAR (32)    NOT NULL,
    [role_desc]    NVARCHAR (255)   NULL,
    CONSTRAINT [PK_int_user_role_user_role_id] PRIMARY KEY CLUSTERED ([user_role_id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_user_settings] (
    [user_id]       UNIQUEIDENTIFIER NOT NULL,
    [cfg_name]      VARCHAR (40)     NOT NULL,
    [cfg_xml_value] XML              NOT NULL,
    CONSTRAINT [PK_int_user_settings_user_id_cfg_name] PRIMARY KEY CLUSTERED ([user_id] ASC, [cfg_name] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_vital_live] (
    [patient_id]      UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [monitor_id]      UNIQUEIDENTIFIER NOT NULL,
    [collect_dt]      DATETIME         NOT NULL,
    [vital_value]     VARCHAR (4000)   NOT NULL,
    [vital_time]      VARCHAR (3950)   NULL,
    CONSTRAINT [PK_int_vital_live_patient_id_monitor_id_collect_dt] PRIMARY KEY CLUSTERED ([patient_id] ASC, [monitor_id] ASC, [collect_dt] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[int_vital_live_temp] (
    [patient_id]      UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id] UNIQUEIDENTIFIER NULL,
    [monitor_id]      UNIQUEIDENTIFIER NOT NULL,
    [collect_dt]      DATETIME         NOT NULL,
    [vital_value]     VARCHAR (4000)   NOT NULL,
    [vital_time]      VARCHAR (3950)   NULL,
    [createdDT]       DATETIME         CONSTRAINT [DF_int_vital_live_temp_creattime] DEFAULT (GETDATE()) NULL
);

GO
CREATE TABLE [dbo].[int_waveform] (
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]    UNIQUEIDENTIFIER NULL,
    [patient_channel_id] UNIQUEIDENTIFIER NOT NULL,
    [start_dt]           DATETIME         NOT NULL,
    [end_dt]             DATETIME         NULL,
    [start_ft]           BIGINT           NOT NULL,
    [end_ft]             BIGINT           NOT NULL,
    [compress_method]    CHAR (8)         NULL,
    [waveform_data]      IMAGE            NOT NULL
);

GO
CREATE TABLE [dbo].[int_waveform_live] (
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]    UNIQUEIDENTIFIER NULL,
    [patient_channel_id] UNIQUEIDENTIFIER NOT NULL,
    [start_dt]           DATETIME         NOT NULL,
    [end_dt]             DATETIME         NULL,
    [start_ft]           BIGINT           NULL,
    [end_ft]             BIGINT           NULL,
    [compress_method]    CHAR (8)         NULL,
    [waveform_data]      IMAGE            NOT NULL
);

GO
CREATE TABLE [dbo].[LeadConfiguration] (
    [LeadName]           NVARCHAR (50) NULL,
    [MonitorLoaderValue] VARCHAR (20)  NULL,
    [DataLoaderValue]    VARCHAR (20)  NULL
);

GO
CREATE TABLE [dbo].[LimitAlarmsData] (
    [AlarmId]             UNIQUEIDENTIFIER NOT NULL,
    [SettingViolated]     VARCHAR (25)     NOT NULL,
    [ViolatingValue]      VARCHAR (25)     NOT NULL,
    [StartDateTime]       DATETIME         NOT NULL,
    [EndDateTime]         DATETIME         NULL,
    [StatusValue]         INT              NOT NULL,
    [DetectionTimestamp]  DATETIME         NULL,
    [Acknowledged]        BIT              NOT NULL,
    [PriorityWeightValue] INT              NOT NULL,
    [AcquiredDateTimeUTC] DATETIME         NOT NULL,
    [Leads]               INT              NOT NULL,
    [WaveformFeedTypeId]  UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId]      UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]          UNIQUEIDENTIFIER NOT NULL,
    [IDEnumValue]         INT              NOT NULL,
    [EnumGroupId]         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_LimitAlarmsData_AlarmId] PRIMARY KEY NONCLUSTERED ([AlarmId] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[LimitChangeData] (
    [Id]                  UNIQUEIDENTIFIER NOT NULL,
    [High]                VARCHAR (25)     NULL,
    [Low]                 VARCHAR (25)     NULL,
    [ExtremeHigh]         VARCHAR (25)     NULL,
    [ExtremeLow]          VARCHAR (25)     NULL,
    [Desat]               VARCHAR (25)     NULL,
    [AcquiredDateTimeUTC] DATETIME         NOT NULL,
    [TopicSessionId]      UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]          UNIQUEIDENTIFIER NOT NULL,
    [EnumGroupId]         UNIQUEIDENTIFIER NOT NULL,
    [IDEnumValue]         INT              NOT NULL
);

GO
CREATE TABLE [dbo].[LiveData] (
    [Sequence]        BIGINT           IDENTITY (1, 1) NOT NULL,
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [TopicInstanceId] UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]      UNIQUEIDENTIFIER NOT NULL,
    [Name]            VARCHAR (25)     NOT NULL,
    [Value]           VARCHAR (25)     NULL,
    [TimestampUTC]    DATETIME         NOT NULL,
    CONSTRAINT [PK_LiveData_Sequence] PRIMARY KEY CLUSTERED ([Sequence] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[LogData] (
    [LogId]            UNIQUEIDENTIFIER NOT NULL,
    [DateTime]         DATETIME         NOT NULL,
    [PatientID]        VARCHAR (256)    NULL,
    [Application]      NVARCHAR (256)   NULL,
    [DeviceName]       NVARCHAR (256)   NULL,
    [Message]          NVARCHAR (MAX)   NOT NULL,
    [LocalizedMessage] NVARCHAR (MAX)   NULL,
    [MessageId]        INT              NULL,
    [LogType]          NVARCHAR (64)    NOT NULL,
    CONSTRAINT [PK_LogData_LogId] PRIMARY KEY CLUSTERED ([LogId] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[MetaData] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             VARCHAR (50)     NOT NULL,
    [Value]            VARCHAR (MAX)    NOT NULL,
    [IsLookUp]         BIT              NULL,
    [MetaDataId]       UNIQUEIDENTIFIER NULL,
    [TopicTypeId]      UNIQUEIDENTIFIER NULL,
    [EntityName]       VARCHAR (50)     NULL,
    [EntityMemberName] VARCHAR (50)     NULL,
    [DisplayOnly]      BIT              NOT NULL,
    [TypeId]           UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_MetaData_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[ml_duplicate_info] (
    [Original_ID]       VARCHAR (20) NOT NULL,
    [Duplicate_Id]      VARCHAR (20) NOT NULL,
    [Original_Monitor]  VARCHAR (5)  NOT NULL,
    [Duplicate_Monitor] VARCHAR (5)  NOT NULL,
    [InsertDT]          DATETIME     CONSTRAINT [DEF_ml_duplicate_info_InsertDT] DEFAULT (GETDATE()) NOT NULL,
    [duplicate_rec_id]  BIGINT       IDENTITY (0, 1) NOT NULL,
    CONSTRAINT [PK_ml_duplicate_info] PRIMARY KEY CLUSTERED ([Original_ID] ASC, [Duplicate_Id] ASC, [Original_Monitor] ASC, [Duplicate_Monitor] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[mpi_decision_field] (
    [candidate_id] UNIQUEIDENTIFIER NOT NULL,
    [matched_id]   UNIQUEIDENTIFIER NOT NULL,
    [field_id]     INT              NOT NULL,
    [score]        TINYINT          NOT NULL
);

GO
CREATE TABLE [dbo].[mpi_decision_log] (
    [candidate_id] UNIQUEIDENTIFIER NOT NULL,
    [matched_id]   UNIQUEIDENTIFIER NOT NULL,
    [score]        INT              NOT NULL,
    [mod_dt]       DATETIME         NOT NULL,
    [status_code]  VARCHAR (3)      NULL
);

GO
CREATE TABLE [dbo].[mpi_decision_queue] (
    [candidate_id] UNIQUEIDENTIFIER NOT NULL,
    [mod_dt]       DATETIME         NOT NULL,
    [processed_dt] DATETIME         NULL
);

GO
CREATE TABLE [dbo].[mpi_patient_link] (
    [orig_patient_id] UNIQUEIDENTIFIER NOT NULL,
    [new_patient_id]  UNIQUEIDENTIFIER NOT NULL,
    [user_id]         UNIQUEIDENTIFIER NULL,
    [mod_dt]          DATETIME         NOT NULL
);

GO
CREATE TABLE [dbo].[mpi_search_field] (
    [field_name]    NVARCHAR (30)  NOT NULL,
    [col_name]      NVARCHAR (30)  NULL,
    [low]           SMALLINT       NOT NULL,
    [high]          SMALLINT       NOT NULL,
    [compare_type]  NCHAR (30)     NULL,
    [code_category] NVARCHAR (4)   NULL,
    [is_secondary]  INT            NULL,
    [is_primary]    INT            NULL,
    [HL7_field]     NVARCHAR (100) NULL
);

GO
CREATE TABLE [dbo].[mpi_search_results] (
    [spid]      INT              NULL,
    [person_id] UNIQUEIDENTIFIER NULL
);

GO
CREATE TABLE [dbo].[mpi_search_work] (
    [spid]      INT              NULL,
    [person_id] UNIQUEIDENTIFIER NULL
);

GO
CREATE TABLE [dbo].[PacerSpikeLog] (
    [user_id]     UNIQUEIDENTIFIER NOT NULL,
    [patient_id]  UNIQUEIDENTIFIER NOT NULL,
    [sample_rate] SMALLINT         NOT NULL,
    [start_ft]    BIGINT           NOT NULL,
    [num_spikes]  INT              NOT NULL,
    [spike_data]  IMAGE            NOT NULL,
    CONSTRAINT [PK_PacerSpikeLog_user_id_patient_id_sample_rate] PRIMARY KEY CLUSTERED ([user_id] ASC, [patient_id] ASC, [sample_rate] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_PacerSpikeLog_AnalysisTime_user_id_patient_id] FOREIGN KEY ([user_id], [patient_id]) REFERENCES [dbo].[AnalysisTime] ([user_id], [patient_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[PatientData] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [PatientSessionId] UNIQUEIDENTIFIER NOT NULL,
    [DeviceSessionId]  UNIQUEIDENTIFIER NULL,
    [LastName]         NVARCHAR (50)    NULL,
    [MiddleName]       NVARCHAR (50)    NULL,
    [FirstName]        NVARCHAR (50)    NULL,
    [FullName]         NVARCHAR (150)   NULL,
    [Gender]           NVARCHAR (50)    NULL,
    [ID1]              NVARCHAR (30)    NULL,
    [ID2]              NVARCHAR (30)    NULL,
    [DOB]              NVARCHAR (50)    NULL,
    [Weight]           NVARCHAR (25)    NULL,
    [WeightUOM]        NVARCHAR (25)    NULL,
    [Height]           NVARCHAR (25)    NULL,
    [HeightUOM]        NVARCHAR (25)    NULL,
    [BSA]              NVARCHAR (25)    NULL,
    [Location]         NVARCHAR (50)    NULL,
    [PatientType]      NVARCHAR (150)   NULL,
    [TimestampUTC]     DATETIME         NOT NULL,
    CONSTRAINT [PK_PatientData_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[PatientSessions] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [BeginTimeUTC] DATETIME         NOT NULL,
    [EndTimeUTC]   DATETIME         NULL,
    CONSTRAINT [PK_PatientSessions_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[PatientSessionsMap] (
    [PatientSessionId] UNIQUEIDENTIFIER NOT NULL,
    [PatientId]        UNIQUEIDENTIFIER NOT NULL,
    [Sequence]         BIGINT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_PatientSessionMap_PatientId_Sequence] PRIMARY KEY CLUSTERED ([PatientId] ASC, [Sequence] DESC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[PrintBlobData] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId] UNIQUEIDENTIFIER NOT NULL,
    [NumBytes]       INT              NOT NULL,
    [Value]          VARBINARY (MAX)  NOT NULL
);

GO
CREATE TABLE [dbo].[PrintJobs] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]     UNIQUEIDENTIFIER NOT NULL
);

GO
CREATE TABLE [dbo].[PrintRequestData] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId] UNIQUEIDENTIFIER NOT NULL,
    [Name]           VARCHAR (50)     NULL,
    [Value]          VARCHAR (MAX)    NULL
);

GO
CREATE TABLE [dbo].[PrintRequestDescriptions] (
    [RequestTypeEnumId]    UNIQUEIDENTIFIER NOT NULL,
    [RequestTypeEnumValue] INT              NOT NULL,
    [Value]                VARCHAR (25)     NOT NULL
);

GO
CREATE TABLE [dbo].[PrintRequests] (
    [Id]                   UNIQUEIDENTIFIER NOT NULL,
    [PrintJobId]           UNIQUEIDENTIFIER NOT NULL,
    [RequestTypeEnumId]    UNIQUEIDENTIFIER NOT NULL,
    [RequestTypeEnumValue] INT              NOT NULL,
    [TimestampUTC]         DATETIME         NOT NULL
);

GO
CREATE TABLE [dbo].[RemovedAlarms] (
    [AlarmId] UNIQUEIDENTIFIER NOT NULL,
    [Removed] TINYINT          NULL,
    CONSTRAINT [PK_RemovedAlarms_AlarmId] PRIMARY KEY CLUSTERED ([AlarmId] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[ResourceStrings] (
    [Name]    NVARCHAR (250) NOT NULL,
    [Value]   NVARCHAR (250) NULL,
    [Comment] NVARCHAR (250) NULL,
    [Locale]  NVARCHAR (50)  NOT NULL,
    CONSTRAINT [PK_ResourceStrings_Locale_Name] PRIMARY KEY CLUSTERED ([Locale] ASC, [Name] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[StatusData] (
    [Id]    UNIQUEIDENTIFIER NOT NULL,
    [SetId] UNIQUEIDENTIFIER NOT NULL,
    [Name]  VARCHAR (25)     NOT NULL,
    [Value] VARCHAR (25)     NULL,
    CONSTRAINT [PK_StatusData_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[StatusDataSets] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]     UNIQUEIDENTIFIER NOT NULL,
    [TimestampUTC]   DATETIME         NOT NULL,
    CONSTRAINT [PK_StatusDataSets_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[tbl_ConfigurationData] (
    [ApplicationName]     NVARCHAR (256) NOT NULL,
    [SectionName]         NVARCHAR (150) NOT NULL,
    [SectionData]         XML            NULL,
    [UpdatedTimeStampUTC] DATETIME       NULL,
    CONSTRAINT [PK_ConfigurationData_ApplicationName_SectionName] PRIMARY KEY CLUSTERED ([ApplicationName] ASC, [SectionName] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[TopicFeedTypes] (
    [FeedTypeId]    UNIQUEIDENTIFIER NOT NULL,
    [TopicTypeId]   UNIQUEIDENTIFIER NOT NULL,
    [ChannelCode]   INT              NOT NULL,
    [ChannelTypeId] UNIQUEIDENTIFIER NOT NULL,
    [SampleRate]    SMALLINT         NULL,
    [Label]         NVARCHAR (250)   NOT NULL,
    CONSTRAINT [PK_TopicFeedTypes_FeedTypeId] PRIMARY KEY CLUSTERED ([FeedTypeId] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[TopicSessions] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [TopicTypeId]      UNIQUEIDENTIFIER NULL,
    [TopicInstanceId]  UNIQUEIDENTIFIER NULL,
    [DeviceSessionId]  UNIQUEIDENTIFIER NULL,
    [PatientSessionId] UNIQUEIDENTIFIER NULL,
    [BeginTimeUTC]     DATETIME         NULL,
    [EndTimeUTC]       DATETIME         NULL,
    CONSTRAINT [PK_TopicSessions_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[TopicTypes] (
    [Id]      UNIQUEIDENTIFIER NOT NULL,
    [Name]    VARCHAR (50)     NOT NULL,
    [BaseId]  UNIQUEIDENTIFIER NULL,
    [Comment] NVARCHAR (250)   NULL,
    CONSTRAINT [PK_TopicTypes_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[TrendData] (
    [user_id]            UNIQUEIDENTIFIER NOT NULL,
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [total_categories]   INT              NOT NULL,
    [start_ft]           BIGINT           NOT NULL,
    [total_periods]      INT              NOT NULL,
    [samples_per_period] INT              NOT NULL,
    [trend_data]         IMAGE            NULL,
    CONSTRAINT [PK_TrendData_user_id_patient_id] PRIMARY KEY CLUSTERED ([user_id] ASC, [patient_id] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_TrendData_AnalysisTime_user_id_patient_id] FOREIGN KEY ([user_id], [patient_id]) REFERENCES [dbo].[AnalysisTime] ([user_id], [patient_id]) ON DELETE CASCADE
);

GO
CREATE TABLE [dbo].[VitalsData] (
    [ID]             BIGINT           IDENTITY (1, 1) NOT NULL,
    [SetId]          UNIQUEIDENTIFIER NOT NULL,
    [Name]           VARCHAR (25)     NOT NULL,
    [Value]          VARCHAR (25)     NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]     UNIQUEIDENTIFIER NOT NULL,
    [TimestampUTC]   DATETIME         NOT NULL,
    CONSTRAINT [PK_VitalsData_ID] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[WaveformAnnotationData] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId] UNIQUEIDENTIFIER NOT NULL,
    [ChannelIndex]   INT              NOT NULL,
    [Annotation]     VARCHAR (MAX)    NOT NULL
);

GO
CREATE TABLE [dbo].[WaveformData] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [SampleCount]    INT              NOT NULL,
    [TypeName]       VARCHAR (50)     NULL,
    [TypeId]         UNIQUEIDENTIFIER NULL,
    [Samples]        VARBINARY (MAX)  NOT NULL,
    [Compressed]     BIT              NOT NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [StartTimeUTC]   DATETIME         NOT NULL,
    [EndTimeUTC]     DATETIME         NOT NULL,
    CONSTRAINT [PK_WaveformData_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[WaveformLiveData] (
    [Sequence]        BIGINT           IDENTITY (1, 1) NOT NULL,
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [SampleCount]     INT              NOT NULL,
    [TypeName]        VARCHAR (50)     NULL,
    [TypeId]          UNIQUEIDENTIFIER NULL,
    [Samples]         VARBINARY (MAX)  NOT NULL,
    [TopicInstanceId] UNIQUEIDENTIFIER NOT NULL,
    [StartTimeUTC]    DATETIME         NOT NULL,
    [EndTimeUTC]      DATETIME         NOT NULL,
    CONSTRAINT [PK_WaveformLiveData_Sequence] PRIMARY KEY CLUSTERED ([Sequence] ASC) WITH (FILLFACTOR = 100)
);

GO
CREATE TABLE [dbo].[WaveformPrintData] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId] UNIQUEIDENTIFIER NOT NULL,
    [ChannelIndex]   INT              NOT NULL,
    [NumSamples]     INT              NOT NULL,
    [Samples]        VARCHAR (MAX)    NOT NULL
);

GO
CREATE VIEW [dbo].[v_ActivePatientChannels]
WITH SCHEMABINDING
AS
SELECT    [NonWaveformChannelTypes].[TypeId],
          [TopicTypeId],
          [PatientId],
          CASE WHEN [EndTimeUTC] IS NULL THEN 1 ELSE NULL END AS [Active]
FROM      (SELECT DISTINCT [TopicTypeId],
                           [v_PatientTopicSessions].[PatientId],
                           NULL AS [TypeId],
                           [EndTimeUTC]
           FROM   [dbo].[TopicSessions]
                  INNER JOIN
                  [dbo].[v_PatientTopicSessions]
                  ON [TopicSessions].[Id] = [v_PatientTopicSessions].[TopicSessionId]
           WHERE  [TopicTypeId] IN (SELECT [TopicTypeId]
                                    FROM   [dbo].[v_LegacyChannelTypes]
                                    WHERE  [TypeId] IS NULL)) AS [NonWaveformChannelTypes]
UNION ALL
(SELECT   [TypeId],
          [TopicTypeId],
          [v_PatientTopicSessions].[PatientId],
          CASE WHEN [TopicSessions].[EndTimeUTC] IS NULL THEN 1 ELSE NULL END AS [Active]
 FROM     [dbo].[WaveformLiveData] AS [WAVEFRM]
          INNER JOIN
          [dbo].[TopicSessions]
          ON [TopicSessions].[TopicInstanceId] = [WAVEFRM].[TopicInstanceId]
          INNER JOIN
          [dbo].[v_PatientTopicSessions]
          ON [TopicSessions].[Id] = [v_PatientTopicSessions].[TopicSessionId]
 GROUP BY [TypeId], [TopicTypeId], [PatientId], [TopicSessions].[EndTimeUTC]
 UNION
 SELECT   DISTINCT [TopicSessions].[TopicTypeId] AS [TypeId],
                   [TopicSessions].[TopicTypeId],
                   [v_PatientTopicSessions].[PatientId],
                   CASE WHEN [EndTimeUTC] IS NULL THEN 1 ELSE NULL END AS [Active]
 FROM     [dbo].[VitalsData]
          INNER JOIN
          [dbo].[TopicSessions]
          ON [TopicSessions].[Id] = [VitalsData].[TopicSessionId]
          INNER JOIN
          [dbo].[v_PatientTopicSessions]
          ON [TopicSessions].[Id] = [v_PatientTopicSessions].[TopicSessionId]
 WHERE    [TopicSessions].[TopicTypeId] NOT IN (SELECT DISTINCT [TopicTypeId]
                                                FROM   [dbo].[WaveformData]
                                                       INNER JOIN
                                                       [dbo].[TopicSessions] AS [ts]
                                                       ON [ts].[Id] = [WaveformData].[TopicSessionId])
          AND [TopicTypeId] IN (SELECT [TopicTypeId]
                                FROM   [dbo].[v_LegacyChannelTypes]
                                WHERE  [TypeId] IS NOT NULL));

GO
CREATE VIEW [dbo].[v_AvailableDataTypes]
WITH SCHEMABINDING
AS
SELECT  [NonWaveformChannelTypes].[TypeId],
        [TopicTypeId],
        [DeviceSessionId],
        [PatientId],
        CASE WHEN [EndTimeUTC] IS NULL THEN 1 ELSE NULL END AS [Active]
FROM    (SELECT DISTINCT [TopicTypeId],
                         [DeviceSessionId],
                         [PatientId],
                         NULL AS [TypeId],
                         [EndTimeUTC]
         FROM   [dbo].[TopicSessions]
                INNER JOIN
                [dbo].[v_PatientTopicSessions]
                ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id]
         WHERE  [TopicTypeId] IN (SELECT [TopicTypeId]
                                  FROM   [dbo].[v_LegacyChannelTypes]
                                  WHERE  [TypeId] IS NULL)) AS [NonWaveformChannelTypes]
UNION ALL
(SELECT DISTINCT [TypeId],
                 [TopicTypeId],
                 [DeviceSessionId],
                 [PatientId],
                 CASE WHEN [TopicSessions].[EndTimeUTC] IS NULL THEN 1 ELSE NULL END AS [Active]
 FROM   [dbo].[WaveformData]
        INNER JOIN
        [dbo].[TopicSessions]
        ON [TopicSessions].[Id] = [WaveformData].[TopicSessionId]
        INNER JOIN
        [dbo].[v_PatientTopicSessions]
        ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id]
 UNION ALL
 SELECT DISTINCT [TopicSessions].[TopicTypeId] AS [TypeId],
                 [TopicSessions].[TopicTypeId],
                 [DeviceSessionId],
                 [PatientId],
                 CASE WHEN [EndTimeUTC] IS NULL THEN 1 ELSE NULL END AS [Active]
 FROM   [dbo].[VitalsData]
        INNER JOIN
        [dbo].[TopicSessions]
        ON [TopicSessions].[Id] = [VitalsData].[TopicSessionId]
        INNER JOIN
        [dbo].[v_PatientTopicSessions]
        ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id]
 WHERE  [TopicSessions].[TopicTypeId] NOT IN (SELECT DISTINCT [TopicTypeId]
                                              FROM   [dbo].[WaveformData]
                                                     INNER JOIN
                                                     [dbo].[TopicSessions]
                                                     ON [TopicSessions].[Id] = [WaveformData].[TopicSessionId])
        AND [TopicTypeId] IN (SELECT [TopicTypeId]
                              FROM   [dbo].[v_LegacyChannelTypes]
                              WHERE  [TypeId] IS NOT NULL));

GO
CREATE VIEW [dbo].[v_CombinedEncounters]
WITH SCHEMABINDING
AS
SELECT [FIRST_NAME],
       [LAST_NAME],
       [MRN_ID],
       [ACCOUNT_ID],
       [DOB],
       [FACILITY_ID],
       [UNIT_ID],
       [ROOM],
       [BED],
       [MONITOR_NAME],
       [dbo].[fnUtcDateTimeToLocalTime]([LAST_RESULT_UTC]) AS [LAST_RESULT],
       [dbo].[fnUtcDateTimeToLocalTime]([ADMIT_TIME_UTC]) AS [ADMIT],
       [dbo].[fnUtcDateTimeToLocalTime]([DISCHARGED_TIME_UTC]) AS [DISCHARGED],
       [SUBNET],
       [patient_id],
       CASE [STATUS] WHEN 'A' THEN 'C' WHEN 'S' THEN 'C' ELSE 'D' END AS [STATUS_CD],
       1 AS [MONITOR_CREATED],
       [int_organization].[parent_organization_id] AS [FACILITY_PARENT_ID],
       [PATIENT_MONITOR_ID],
       'C' AS [MERGE_CD]
FROM   [dbo].[v_PatientSessions]
       INNER JOIN
       [dbo].[int_organization]
       ON [int_organization].[organization_id] = [FACILITY_ID]
UNION ALL
SELECT ISNULL([int_person].[first_nm], '') AS [FIRST_NAME],
       ISNULL([int_person].[last_nm], '') AS [LAST_NAME],
       [int_mrn_map].[mrn_xid] AS [MRN_ID],
       [int_mrn_map].[mrn_xid2] AS [ACCOUNT_ID],
       [int_patient].[dob] AS [DOB],
       [org1].[organization_id] AS [FACILITY_ID],
       [org2].[organization_id] AS [UNIT_ID],
       [int_encounter].[rm] AS [ROOM],
       [int_encounter].[bed] AS [BED],
       [int_monitor].[monitor_name] AS [MONITOR_NAME],
       [PM1].[last_result_dt] AS [LAST_RESULT],
       [int_encounter].[admit_dt] AS [ADMIT],
       [int_encounter].[discharge_dt] AS [DISCHARGED],
       [int_monitor].[subnet] AS [SUBNET],
       [int_mrn_map].[patient_id] AS [patient_id],
       [int_encounter].[status_cd] AS [STATUS_CD],
       [int_encounter].[monitor_created] AS [MONITOR_CREATED],
       [org1].[parent_organization_id] AS [FACILITY_PARENT_ID],
       [PM1].[patient_monitor_id] AS [PATIENT_MONITOR_ID],
       [int_mrn_map].[merge_cd] AS [MERGE_CD]
FROM   [dbo].[int_encounter]
       LEFT OUTER JOIN
       [dbo].[int_organization] AS [org1]
       ON ([int_encounter].[organization_id] = [org1].[organization_id])
       LEFT OUTER JOIN
       [dbo].[int_patient_monitor] AS [PM1]
       INNER JOIN
       [dbo].[int_monitor]
       ON ([PM1].[monitor_id] = [int_monitor].[monitor_id])
       ON ([int_encounter].[encounter_id] = [PM1].[encounter_id])
       LEFT OUTER JOIN
       [dbo].[int_patient_monitor] AS [PM2]
       ON [PM2].[patient_monitor_id] <> [PM1].[patient_monitor_id]
          AND [int_encounter].[encounter_id] = [PM2].[encounter_id]
          AND [PM1].[last_result_dt] < [PM2].[last_result_dt]
       INNER JOIN
       [dbo].[int_person]
       ON ([int_encounter].[patient_id] = [int_person].[person_id])
       INNER JOIN
       [dbo].[int_patient]
       ON ([int_person].[person_id] = [int_patient].[patient_id])
       INNER JOIN
       [dbo].[int_mrn_map]
       ON ([int_patient].[patient_id] = [int_mrn_map].[patient_id])
       INNER JOIN
       [dbo].[int_organization] AS [org2]
       ON ([int_encounter].[unit_org_id] = [org2].[organization_id])
WHERE  [PM2].[encounter_id] IS NULL;

GO
CREATE VIEW [dbo].[v_DevicePatientIdActive]
WITH SCHEMABINDING
AS
SELECT DISTINCT [LatestPatientAssignment].[DeviceId],
                [int_mrn_map].[mrn_xid] AS [ID1],
                [LatestPatientSessionsMap].[PatientId]
FROM   [dbo].[PatientSessions]
       INNER JOIN
       (SELECT [PatientSessionId],
               [DeviceId]
        FROM   (SELECT [PatientSessionId],
                       [DeviceId],
                       ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [RowNumber]
                FROM   [dbo].[PatientData]
                       INNER JOIN
                       [dbo].[DeviceSessions]
                       ON [DeviceSessions].[EndTimeUTC] IS NULL
                          AND [DeviceSessions].[Id] = [PatientData].[DeviceSessionId]) AS [PatientAssignmentSequence]
        WHERE  [PatientAssignmentSequence].[RowNumber] = 1) AS [LatestPatientAssignment]
       ON [LatestPatientAssignment].[PatientSessionId] = [PatientSessions].[Id]
       INNER JOIN
       (SELECT [PatientSessionId],
               [PatientId]
        FROM   (SELECT [PatientSessionId],
                       [PatientId],
                       ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [RowNumber]
                FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsMapSequence]
        WHERE  [PatientSessionsMapSequence].[RowNumber] = 1) AS [LatestPatientSessionsMap]
       ON [LatestPatientSessionsMap].[PatientSessionId] = [PatientSessions].[Id]
       INNER JOIN
       [dbo].[int_mrn_map]
       ON [int_mrn_map].[patient_id] = [LatestPatientSessionsMap].[PatientId];

GO
CREATE VIEW [dbo].[v_DeviceSessionAssignment]
WITH SCHEMABINDING
AS
SELECT [DeviceSessions].[Id] AS [DeviceSessionId],
       CASE WHEN CHARINDEX('+', [InfoUnit].[Value]) > 0 THEN LEFT([InfoUnit].[Value], CHARINDEX('+', [InfoUnit].[Value]) - 1) ELSE NULL END AS [FacilityName],
       CASE WHEN CHARINDEX('+', [InfoUnit].[Value]) > 0 THEN SUBSTRING([InfoUnit].[Value], CHARINDEX('+', [InfoUnit].[Value]) + 1, LEN([InfoUnit].[Value])) ELSE NULL END AS [UnitName],
       [InfoBed].[Value] AS [BedName],
       [InfoDeviceName].[Value] AS [MonitorName],
       [InfoTransmitter].[Value] AS [Channel]
FROM   [dbo].[DeviceSessions]
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [InfoBed]
       ON [InfoBed].[DeviceSessionId] = [DeviceSessions].[Id]
          AND [InfoBed].[Name] = 'Bed'
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [InfoDeviceName]
       ON [InfoDeviceName].[DeviceSessionId] = [DeviceSessions].[Id]
          AND [InfoDeviceName].[Name] = 'DeviceName'
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [InfoUnit]
       ON [InfoUnit].[DeviceSessionId] = [DeviceSessions].[Id]
          AND [InfoUnit].[Name] = 'Unit'
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [InfoTransmitter]
       ON [InfoTransmitter].[DeviceSessionId] = [DeviceSessions].[Id]
          AND [InfoTransmitter].[Name] = 'Transmitter';

GO
CREATE VIEW [dbo].[v_DeviceSessionInfo]
WITH SCHEMABINDING
AS
SELECT [DeviceSessionId],
       [Name],
       [Value],
       [TimestampUTC]
FROM   (SELECT [DeviceSessionId],
               [TimestampUTC],
               [Name],
               [Value],
               ROW_NUMBER() OVER (PARTITION BY [DeviceSessionId], [Name] ORDER BY [TimestampUTC] DESC) AS [RowNumber]
        FROM   [dbo].[DeviceInfoData]) AS [LatestDeviceInfo]
WHERE  [LatestDeviceInfo].[RowNumber] = 1;

GO
CREATE VIEW [dbo].[v_DeviceSessionOrganization]
WITH SCHEMABINDING
AS
SELECT [DeviceSessionId],
       [Units].[organization_id] AS [OrganizationId]
FROM   [dbo].[v_DeviceSessionAssignment]
       LEFT OUTER JOIN
       [dbo].[int_organization] AS [Facilities]
       ON [Facilities].[organization_nm] = [v_DeviceSessionAssignment].[FacilityName]
       LEFT OUTER JOIN
       [dbo].[int_organization] AS [Units]
       ON [Units].[organization_nm] = [v_DeviceSessionAssignment].[UnitName]
          AND [Units].[parent_organization_id] = [Facilities].[organization_id];

GO
CREATE VIEW [dbo].[v_DiscardedOverlappingLegacyWaveformData]
WITH SCHEMABINDING
AS
SELECT [WF1].[patient_id],
       [WF1].[patient_channel_id],
       [WF1].[start_ft],
       [WF1].[end_ft]
FROM   [dbo].[int_patient_channel] AS [PC1]
       INNER JOIN
       [dbo].[int_patient_monitor] AS [PM1]
       ON [PC1].[patient_monitor_id] = [PM1].[patient_monitor_id]
       INNER JOIN
       [dbo].[int_encounter] AS [E1]
       ON [PM1].[encounter_id] = [E1].[encounter_id]
       INNER JOIN
       [dbo].[int_patient_channel] AS [PC2]
       ON [PC1].[patient_id] = [PC2].[patient_id]
          AND [PC1].[patient_channel_id] <> [PC2].[patient_channel_id]
          AND [PC1].[channel_type_id] = [PC2].[channel_type_id]
          AND ([PC1].[monitor_id] <> [PC2].[monitor_id]
               OR [PC2].[module_num] < [PC1].[module_num])
       INNER JOIN
       [dbo].[int_patient_monitor] AS [PM2]
       ON [PC2].[patient_monitor_id] = [PM2].[patient_monitor_id]
       INNER JOIN
       [dbo].[int_encounter] AS [E2]
       ON [PM2].[encounter_id] = [E2].[encounter_id]
          AND [E1].[begin_dt] <= [E2].[begin_dt]
       INNER JOIN
       [dbo].[int_waveform] AS [WF1]
       ON [WF1].[patient_channel_id] = [PC1].[patient_channel_id]
       INNER JOIN
       [dbo].[int_waveform] AS [WF2]
       ON [WF2].[patient_channel_id] = [PC2].[patient_channel_id]
          AND [WF2].[start_ft] < [WF1].[end_ft]
          AND [WF1].[start_ft] < [WF2].[end_ft];

GO
CREATE VIEW [dbo].[v_DiscardedOverlappingWaveformData]
WITH SCHEMABINDING
AS
SELECT [WF1].[Id],
       [WF1].[TopicSessionId],
       [WF1].[FileTimeStampBeginUTC],
       [WF1].[FileTimeStampEndUTC]
FROM   [dbo].[v_LegacyWaveform] AS [WF1]
       INNER JOIN
       [dbo].[v_LegacyWaveform] AS [WF2]
       ON [WF1].[PatientId] = [WF2].[PatientId]
          AND [WF1].[TypeId] = [WF2].[TypeId]
          AND [WF1].[TopicSessionId] <> [WF2].[TopicSessionId]
          AND [WF1].[SessionBeginUTC] <= [WF2].[SessionBeginUTC]
          AND [WF2].[TimeStampBeginUTC] < [WF1].[TimeStampEndUTC]
          AND [WF1].[TimeStampBeginUTC] < [WF2].[TimeStampEndUTC];

GO
CREATE VIEW [dbo].[v_FeedGdsCodes]
AS
SELECT DISTINCT TypeId AS FeedTypeId,
                Value AS GdsCode
FROM   [dbo].[v_MetaData]
WHERE  Name = 'GdsCode';

GO
CREATE VIEW [dbo].[v_GeneralAlarms]
WITH SCHEMABINDING
AS
SELECT [EndAlarms].[AlarmId],
       [PatientId] AS [PatientId],
       [EndAlarms].[IDEnumValue] AS [AlarmTypeId],
       [Enums].[Name] AS [AlarmType],
       [Enums].[Name] AS [Title],
       [EndAlarms].[EnumGroupId],
       [EndAlarms].[StatusValue],
       [BeginAlarms].[PriorityWeightValue],
       [EndAlarms].[StartDateTime] AS [StartDateTimeUTC],
       [EndAlarms].[EndDateTime] AS [EndDateTimeUTC],
       [TopicSessions].[Id] AS [TopicSessionId],
       [DeviceSessionId],
       [TopicChannelCodes].[ChannelCode],
       [MDTopicLabel].[Value] AS [StrLabel],
       [BeginAlarms].[AcquiredDateTimeUTC],
       [EndAlarms].[Leads],
       [MDMessage].[PairValue] AS [StrMessage],
       [Removed]
FROM   (SELECT [EndAlarmPackets].[AlarmId],
               [EndAlarmPackets].[StartDateTime],
               [EndAlarmPackets].[EndDateTime],
               [EndAlarmPackets].[EnumGroupId],
               [EndAlarmPackets].[IDEnumValue],
               [EndAlarmPackets].[TopicSessionId],
               [EndAlarmPackets].[Leads],
               [EndAlarmPackets].[StatusValue]
        FROM   (SELECT ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] DESC) AS [RowNumber],
                       [AlarmId],
                       [StartDateTime],
                       [EndDateTime],
                       [EnumGroupId],
                       [IDEnumValue],
                       [TopicSessionId],
                       [Leads],
                       [StatusValue]
                FROM   [dbo].[GeneralAlarmsData]) AS [EndAlarmPackets]
        WHERE  [EndAlarmPackets].[RowNumber] = 1) AS [EndAlarms]
       INNER JOIN
       (SELECT [StartAlarmPackets].[AlarmId],
               [StartAlarmPackets].[PriorityWeightValue],
               [StartAlarmPackets].[AcquiredDateTimeUTC]
        FROM   (SELECT ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] ASC) AS [RowNumber],
                       [AlarmId],
                       [AcquiredDateTimeUTC],
                       [PriorityWeightValue]
                FROM   [dbo].[GeneralAlarmsData]) AS [StartAlarmPackets]
        WHERE  [StartAlarmPackets].[RowNumber] = 1) AS [BeginAlarms]
       ON [EndAlarms].[AlarmId] = [BeginAlarms].[AlarmId]
       INNER JOIN
       [dbo].[Enums]
       ON [GroupId] = [EndAlarms].[EnumGroupId]
          AND [EndAlarms].[IDEnumValue] = [Enums].[Value]
       LEFT OUTER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[Id] = [EndAlarms].[TopicSessionId]
       LEFT OUTER JOIN
       [dbo].[v_PatientTopicSessions]
       ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id]
       LEFT OUTER JOIN
       [dbo].[RemovedAlarms]
       ON [RemovedAlarms].[AlarmId] = [EndAlarms].[AlarmId]
       LEFT OUTER JOIN
       (SELECT [CorrespondingWaveformTypes].[TopicTypeId],
               [AllTypes].[label],
               [CorrespondingWaveformTypes].[ChannelCode]
        FROM   [dbo].[v_LegacyChannelTypes] AS [AllTypes]
               INNER JOIN
               (SELECT   [vlct].[TopicTypeId],
                         MIN([vlct].[ChannelCode]) AS [ChannelCode]
                FROM     [dbo].[v_LegacyChannelTypes] AS [vlct]
                GROUP BY [vlct].[TopicTypeId]) AS [CorrespondingWaveformTypes]
               ON [CorrespondingWaveformTypes].[ChannelCode] = [AllTypes].[ChannelCode]
                  AND [CorrespondingWaveformTypes].[TopicTypeId] = [AllTypes].[TopicTypeId]) AS [TopicChannelCodes]
       ON [TopicChannelCodes].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       (SELECT [EntityMemberName],
               [PairValue],
               [TopicTypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  [EntityName] = 'GeneralAlarms'
               AND [PairName] = 'Message') AS [MDMessage]
       ON [MDMessage].[EntityMemberName] = [Enums].[Name]
          AND [MDMessage].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       [dbo].[v_MetaData] AS [MDTopicLabel]
       ON [MDTopicLabel].[TopicTypeId] = [TopicSessions].[TopicTypeId]
          AND [MDTopicLabel].[EntityName] IS NULL
          AND [MDTopicLabel].[Name] = 'Label';

GO
CREATE VIEW [dbo].[v_GeneralAlarmsLite]
WITH SCHEMABINDING
AS
SELECT [EndAlarms].[AlarmId],
       [v_PatientTopicSessions].[PatientId] AS [PatientId],
       [IDEnumValue] AS [AlarmTypeId],
       [Enums].[Name] AS [AlarmType],
       [Enums].[Name] AS [Title],
       [EnumGroupId],
       [EndAlarms].[StatusValue],
       [EndAlarms].[PriorityWeightValue],
       [EndAlarms].[StartDateTime] AS [StartDateTimeUTC],
       [EndAlarms].[EndDateTime] AS [EndDateTimeUTC],
       [TopicSessions].[Id] AS [TopicSessionId],
       [TopicSessions].[DeviceSessionId],
       [TopicChannelCodes].[ChannelCode],
       [MDTopicLabel].[Value] AS [StrLabel],
       [EndAlarms].[AcquiredDateTimeUTC],
       [EndAlarms].[Leads],
       [MDMessage].[PairValue] AS [StrMessage],
       [Removed]
FROM   (SELECT [GeneralAlarmsData].[AlarmId],
               [StartDateTime],
               [EndDateTime],
               [EnumGroupId],
               [IDEnumValue],
               [TopicSessionId],
               [GeneralAlarmsData].[AcquiredDateTimeUTC],
               [Leads],
               [StatusValue],
               [PriorityWeightValue]
        FROM   [dbo].[GeneralAlarmsData]
               INNER JOIN
               (SELECT   [AlarmId],
                         MAX([gad].[AcquiredDateTimeUTC]) AS [AcquiredDateTimeUTC]
                FROM     [dbo].[GeneralAlarmsData] AS [gad]
                GROUP BY [AlarmId]) AS [MaxAlarms]
               ON [MaxAlarms].[AlarmId] = [GeneralAlarmsData].[AlarmId]
                  AND [MaxAlarms].[AcquiredDateTimeUTC] = [GeneralAlarmsData].[AcquiredDateTimeUTC]) AS [EndAlarms]
       INNER JOIN
       [dbo].[Enums]
       ON [Enums].[GroupId] = [EndAlarms].[EnumGroupId]
          AND [EndAlarms].[IDEnumValue] = [Enums].[Value]
       LEFT OUTER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[Id] = [EndAlarms].[TopicSessionId]
       LEFT OUTER JOIN
       [dbo].[v_PatientTopicSessions]
       ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id]
       LEFT OUTER JOIN
       [dbo].[RemovedAlarms]
       ON [RemovedAlarms].[AlarmId] = [EndAlarms].[AlarmId]
       LEFT OUTER JOIN
       (SELECT [CorrespondingWaveformTypes].[TopicTypeId],
               [label],
               [CorrespondingWaveformTypes].[ChannelCode]
        FROM   [dbo].[v_LegacyChannelTypes] AS [AllTypes]
               INNER JOIN
               (SELECT   [vlct].[TopicTypeId],
                         MIN([vlct].[ChannelCode]) AS [ChannelCode]
                FROM     [dbo].[v_LegacyChannelTypes] AS [vlct]
                GROUP BY [vlct].[TopicTypeId]) AS [CorrespondingWaveformTypes]
               ON [CorrespondingWaveformTypes].[ChannelCode] = [AllTypes].[ChannelCode]
                  AND [CorrespondingWaveformTypes].[TopicTypeId] = [AllTypes].[TopicTypeId]) AS [TopicChannelCodes]
       ON [TopicChannelCodes].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       (SELECT [vmd].[EntityMemberName],
               [vmd].[PairValue],
               [vmd].[TopicTypeId]
        FROM   [dbo].[v_MetaData] AS [vmd]
        WHERE  [vmd].[EntityName] = 'GeneralAlarms'
               AND [vmd].[PairName] = 'Message') AS [MDMessage]
       ON [MDMessage].[EntityMemberName] = [Enums].[Name]
          AND [MDMessage].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       [dbo].[v_MetaData] AS [MDTopicLabel]
       ON [MDTopicLabel].[TopicTypeId] = [TopicSessions].[TopicTypeId]
          AND [EntityName] IS NULL
          AND [MDTopicLabel].[Name] = 'Label';

GO
CREATE VIEW [dbo].[v_LegacyChannelTypes]
WITH SCHEMABINDING
AS
SELECT ISNULL([MDMax].[TypeId], [tt].[Id]) AS [ChannelTypeId],
       [tt].[Id] AS [TopicTypeId],
       [tt].[Name] AS [TopicName],
       [MDLabel].[Value] AS [CdiLabel],
       [MDMax].[PairEntityName] AS [TypeName],
       [MDMax].[TypeId],
       [MDSampleRate].[PairValue] AS [SampleRate],
       [MDChannelCode].[Value] AS [ChannelCode],
       [ict].[label]
FROM   [dbo].[TopicTypes] AS [tt]
       INNER JOIN
       (SELECT [meta].[Value],
               [meta].[TopicTypeId],
               [meta].[Name],
               [meta].[EntityName],
               [meta].[TypeId]
        FROM   [dbo].[v_MetaData] AS [meta]
        WHERE  [meta].[Name] = 'ChannelCode') AS [MDChannelCode]
       ON [MDChannelCode].[TopicTypeId] = [tt].[Id]
       LEFT OUTER JOIN
       (SELECT [Value],
               [TypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  [Name] = 'Label') AS [MDLabel]
       ON [MDLabel].[TypeId] = [MDChannelCode].[TypeId]
       LEFT OUTER JOIN
       (SELECT [PairValue],
               [TopicTypeId],
               [PairName],
               [PairEntityName],
               [PairEntityMember],
               [PairMetaDataId],
               [EntityName],
               [TypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  ([PairName] = 'ScaledMax')
               AND [DisplayOnly] = '0') AS [MDMax]
       ON [MDLabel].[TypeId] = [MDMax].[TypeId]
       LEFT OUTER JOIN
       (SELECT [meta].[PairValue],
               [meta].[PairMetaDataId]
        FROM   [dbo].[v_MetaData] AS [meta]
        WHERE  [meta].[PairName] = 'ScaledMin') AS [MDMin]
       ON [MDMin].[PairMetaDataId] = [MDMax].[PairMetaDataId]
       LEFT OUTER JOIN
       (SELECT [meta].[PairValue],
               [meta].[PairMetaDataId]
        FROM   [dbo].[v_MetaData] AS [meta]
        WHERE  [meta].[PairName] = 'SampleRate') AS [MDSampleRate]
       ON [MDSampleRate].[PairMetaDataId] = [MDMax].[PairMetaDataId]
       LEFT OUTER JOIN
       [dbo].[int_channel_type] AS [ict]
       ON [ict].[channel_code] = CAST ([MDChannelCode].[Value] AS INT);

GO
CREATE VIEW [dbo].[v_LegacyMonitor]
WITH SCHEMABINDING
AS
SELECT [Id],
       '6924FE52-54CC-11D3-A454-0060943F44D1' AS [UnitOrgId],
       'UVN_1' AS [NetworkId],
       NULL AS [NodeId],
       NULL AS [BedId],
       NULL AS [BedCd],
       NULL AS [Room],
       NULL AS [Description],
       [Name] AS [Name],
       'IP_0A' AS [Type],
       'SLISH' AS [Subnet]
FROM   [dbo].[Devices];

GO
CREATE VIEW [dbo].[v_LegacyMonitorCombined]
WITH SCHEMABINDING
AS
SELECT [Id] AS [monitor_id],
       [UnitOrgId] AS [unit_org_id],
       [NetworkId] AS [network_id],
       [NodeId] AS [node_id],
       [BedId] AS [bed_id],
       [BedCd] AS [bed_cd],
       [Room] AS [room],
       [Description] AS [monitor_dsc],
       [Name] AS [monitor_name],
       [Type] AS [monitor_type_cd],
       [Subnet] AS [subnet]
FROM   [dbo].[v_LegacyMonitor]
UNION ALL
SELECT [monitor_id],
       [unit_org_id],
       [network_id],
       [node_id],
       [bed_id],
       [bed_cd],
       [room],
       [monitor_dsc],
       [monitor_name],
       [monitor_type_cd],
       [subnet]
FROM   [dbo].[int_monitor];

GO
CREATE VIEW [dbo].[v_LegacyPatientMonitor]
WITH SCHEMABINDING
AS
SELECT DISTINCT [v_PatientTopicSessions].[PatientId] AS [PatientId],
                [DeviceSessions].[DeviceId],
                [DeviceSessions].[Id] AS [DeviceSessionsId],
                [DeviceSessions].[Id] AS [EncounterId],
                [DeviceSessions].[BeginTimeUTC] AS [SessionStartTimeUTC]
FROM   [dbo].[TopicSessions]
       INNER JOIN
       [dbo].[DeviceSessions]
       ON [TopicSessions].[DeviceSessionId] = [DeviceSessions].[Id]
       INNER JOIN
       [dbo].[v_PatientTopicSessions]
       ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id];

GO
CREATE VIEW [dbo].[v_LegacyPatientMonitorCombined]
WITH SCHEMABINDING
AS
SELECT [PatientId] AS [patient_monitor_id],
       [PatientId] AS [patient_id],
       NULL AS [orig_patient_id],
       [DeviceId] AS [monitor_id],
       '1' AS [monitor_interval],
       'P' AS [poll_type],
       [SessionStartTimeUTC] AS [monitor_connect_dt],
       NULL AS [monitor_connect_num],
       NULL AS [disable_sw],
       GETDATE() AS [last_poll_dt],
       GETDATE() AS [last_result_dt],
       GETDATE() AS [last_episodic_dt],
       NULL AS [poll_start_dt],
       NULL AS [poll_end_dt],
       NULL AS [last_outbound_dt],
       NULL AS [monitor_status],
       NULL AS [monitor_error],
       [EncounterId] AS [encounter_id],
       NULL AS [live_until_dt],
       '1' AS [active_sw]
FROM   [dbo].[v_LegacyPatientMonitor]
UNION ALL
SELECT [patient_monitor_id],
       [patient_id],
       [orig_patient_id],
       [monitor_id],
       [monitor_interval],
       [poll_type],
       [monitor_connect_dt],
       [monitor_connect_num],
       [disable_sw],
       [last_poll_dt],
       [last_result_dt],
       [last_episodic_dt],
       [poll_start_dt],
       [poll_end_dt],
       [last_outbound_dt],
       [monitor_status],
       [monitor_error],
       [encounter_id],
       [live_until_dt],
       [active_sw]
FROM   [dbo].[int_patient_monitor];

GO
CREATE VIEW [dbo].[v_LegacyWaveform]
WITH SCHEMABINDING
AS
SELECT [WaveformData].[Id],
       [WaveformData].[SampleCount],
       [v_WaveformSampleRate].[TypeName],
       [WaveformData].[TypeId],
       [WaveformData].[Samples] AS [WaveformData],
       [TopicSessions].[TopicTypeId],
       [WaveformData].[TopicSessionId],
       [TopicSessions].[DeviceSessionId],
       [TopicSessions].[BeginTimeUTC] AS [SessionBeginUTC],
       [WaveformData].[StartTimeUTC] AS [TimeStampBeginUTC],
       [WaveformData].[EndTimeUTC] AS [TimeStampEndUTC],
       [dbo].[fnDateTimeToFileTime]([WaveformData].[StartTimeUTC]) AS [FileTimeStampBeginUTC],
       [dbo].[fnDateTimeToFileTime]([WaveformData].[EndTimeUTC]) AS [FileTimeStampEndUTC],
       [v_WaveformSampleRate].[SampleRate],
       [v_PatientTopicSessions].[PatientId],
       [TopicSessions].[TopicInstanceId],
       CASE WHEN [WaveformData].[Compressed] = 0 THEN NULL ELSE 'WCTZLIB' END AS [CompressMethod]
FROM   [dbo].[WaveformData]
       INNER JOIN
       [dbo].[v_WaveformSampleRate]
       ON [v_WaveformSampleRate].[FeedTypeId] = [WaveformData].[TypeId]
       INNER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[Id] = [WaveformData].[TopicSessionId]
       INNER JOIN
       [dbo].[v_PatientTopicSessions]
       ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id];

GO
CREATE VIEW [dbo].[v_LimitAlarms]
WITH SCHEMABINDING
AS
SELECT [EndAlarms].[AlarmId],
       [vpts].[PatientId] AS [PatientId],
       [BeginAlarms].[SettingViolated],
       [BeginAlarms].[ViolatingValue],
       [IDEnumValue] AS [AlarmTypeId],
       [Enums].[Name] AS [AlarmType],
       [EndAlarms].[StatusValue],
       [PriorityWeightValue],
       [EndAlarms].[StartDateTime] AS [StartDateTimeUTC],
       [EndAlarms].[EndDateTime] AS [EndDateTimeUTC],
       [TopicSessions].[Id] AS [TopicSessionId],
       [TopicSessions].[DeviceSessionId],
       [TopicChannelCodes].[ChannelCode],
       [MDTopicLabel].[Value] AS [StrLabel],
       [BeginAlarms].[AcquiredDateTimeUTC],
       [EndAlarms].[Leads],
       [MDMessage].[PairValue] AS [StrMessage],
       [MDLimitFormat].[PairValue] AS [StrLimitFormat],
       [MDValueFormat].[PairValue] AS [StrValueFormat],
       [Removed]
FROM   (SELECT [AlarmId],
               [StartDateTime],
               [EndDateTime],
               [EnumGroupId],
               [IDEnumValue],
               [TopicSessionId],
               [Leads],
               [StatusValue]
        FROM   (SELECT ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] DESC) AS [RowNumber],
                       [AlarmId],
                       [StartDateTime],
                       [EndDateTime],
                       [EnumGroupId],
                       [IDEnumValue],
                       [TopicSessionId],
                       [Leads],
                       [StatusValue]
                FROM   [dbo].[LimitAlarmsData]) AS [EndAlarmPackets]
        WHERE  [EndAlarmPackets].[RowNumber] = 1) AS [EndAlarms]
       INNER JOIN
       (SELECT [AlarmId],
               [TopicSessionId],
               [ViolatingValue],
               [SettingViolated],
               [PriorityWeightValue],
               [AcquiredDateTimeUTC]
        FROM   (SELECT ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] ASC) AS [RowNumber],
                       [AlarmId],
                       [TopicSessionId],
                       [ViolatingValue],
                       [SettingViolated],
                       [PriorityWeightValue],
                       [AcquiredDateTimeUTC]
                FROM   [dbo].[LimitAlarmsData]) AS [StartAlarmPackets]
        WHERE  [StartAlarmPackets].[RowNumber] = 1) AS [BeginAlarms]
       ON [EndAlarms].[AlarmId] = [BeginAlarms].[AlarmId]
       INNER JOIN
       [dbo].[Enums]
       ON [Enums].[GroupId] = [EndAlarms].[EnumGroupId]
          AND [EndAlarms].[IDEnumValue] = [Enums].[Value]
       INNER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[Id] = [EndAlarms].[TopicSessionId]
       LEFT OUTER JOIN
       [dbo].[v_PatientTopicSessions] AS [vpts]
       ON [vpts].[TopicSessionId] = [TopicSessions].[Id]
       LEFT OUTER JOIN
       [dbo].[RemovedAlarms]
       ON [RemovedAlarms].[AlarmId] = [EndAlarms].[AlarmId]
       LEFT OUTER JOIN
       (SELECT [CorrespondingWaveformTypes].[TopicTypeId],
               [label],
               [CorrespondingWaveformTypes].[ChannelCode]
        FROM   [dbo].[v_LegacyChannelTypes] AS [AllTypes]
               INNER JOIN
               (SELECT   [vlct].[TopicTypeId],
                         MIN([vlct].[ChannelCode]) AS [ChannelCode]
                FROM     [dbo].[v_LegacyChannelTypes] AS [vlct]
                GROUP BY [vlct].[TopicTypeId]) AS [CorrespondingWaveformTypes]
               ON [CorrespondingWaveformTypes].[ChannelCode] = [AllTypes].[ChannelCode]
                  AND [CorrespondingWaveformTypes].[TopicTypeId] = [AllTypes].[TopicTypeId]) AS [TopicChannelCodes]
       ON [TopicChannelCodes].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       (SELECT [EntityMemberName],
               [PairValue],
               [TopicTypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  [EntityName] = 'LimitAlarms'
               AND [PairName] = 'Message') AS [MDMessage]
       ON [MDMessage].[EntityMemberName] = [Enums].[Name]
          AND [MDMessage].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       (SELECT [EntityMemberName],
               [PairValue],
               [TopicTypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  [EntityName] = 'LimitAlarms'
               AND [PairName] = 'LimitFormat') AS [MDLimitFormat]
       ON [MDLimitFormat].[EntityMemberName] = [Enums].[Name]
          AND [MDLimitFormat].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       (SELECT [EntityMemberName],
               [PairValue],
               [TopicTypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  [EntityName] = 'LimitAlarms'
               AND [PairName] = 'ValueFormat') AS [MDValueFormat]
       ON [MDValueFormat].[EntityMemberName] = [Enums].[Name]
          AND [MDValueFormat].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       [dbo].[v_MetaData] AS [MDTopicLabel]
       ON [MDTopicLabel].[TopicTypeId] = [TopicSessions].[TopicTypeId]
          AND [EntityName] IS NULL
          AND [MDTopicLabel].[Name] = 'Label';

GO
CREATE VIEW [dbo].[v_LimitAlarmsLite]
WITH SCHEMABINDING
AS
SELECT [EndAlarms].[AlarmId],
       [PatientId] AS [PatientId],
       [BeginAlarms].[SettingViolated],
       [BeginAlarms].[ViolatingValue],
       [EndAlarms].[IDEnumValue] AS [AlarmTypeId],
       [Enums].[Name] AS [AlarmType],
       [BeginAlarms].[PriorityWeightValue],
       [EndAlarms].[StartDateTime] AS [StartDateTimeUTC],
       [EndAlarms].[EndDateTime] AS [EndDateTimeUTC],
       [TopicSessions].[Id] AS [TopicSessionId],
       [TopicChannelCodes].[ChannelCode],
       [MDTopicLabel].[Value] AS [StrLabel],
       [EndAlarms].[Leads],
       [MDMessage].[PairValue] AS [StrMessage],
       [MDLimitFormat].[PairValue] AS [StrLimitFormat],
       [MDValueFormat].[PairValue] AS [StrValueFormat],
       [Removed]
FROM   (SELECT [LimitAlarmsData].[AlarmId],
               [StartDateTime],
               [EndDateTime],
               [EnumGroupId],
               [IDEnumValue],
               [TopicSessionId],
               [Leads]
        FROM   [dbo].[LimitAlarmsData]
               INNER JOIN
               (SELECT   [lad].[AlarmId],
                         MAX([lad].[AcquiredDateTimeUTC]) AS [AcquiredDateTimeUTC]
                FROM     [dbo].[LimitAlarmsData] AS [lad]
                GROUP BY [lad].[AlarmId]) AS [MaxAlarms]
               ON [MaxAlarms].[AlarmId] = [LimitAlarmsData].[AlarmId]
                  AND [LimitAlarmsData].[AcquiredDateTimeUTC] = [MaxAlarms].[AcquiredDateTimeUTC]) AS [EndAlarms]
       INNER JOIN
       (SELECT [LimitAlarmsData].[AlarmId],
               [TopicSessionId],
               [ViolatingValue],
               [SettingViolated],
               [PriorityWeightValue]
        FROM   [dbo].[LimitAlarmsData]
               INNER JOIN
               (SELECT   [lad].[AlarmId],
                         MIN([lad].[AcquiredDateTimeUTC]) AS [AcquiredDateTimeUTC]
                FROM     [dbo].[LimitAlarmsData] AS [lad]
                GROUP BY [lad].[AlarmId]) AS [MinAlarms]
               ON [MinAlarms].[AlarmId] = [LimitAlarmsData].[AlarmId]
                  AND [LimitAlarmsData].[AcquiredDateTimeUTC] = [MinAlarms].[AcquiredDateTimeUTC]) AS [BeginAlarms]
       ON [EndAlarms].[AlarmId] = [BeginAlarms].[AlarmId]
       INNER JOIN
       [dbo].[Enums]
       ON [GroupId] = [EndAlarms].[EnumGroupId]
          AND [EndAlarms].[IDEnumValue] = [Enums].[Value]
       INNER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[Id] = [EndAlarms].[TopicSessionId]
       INNER JOIN
       [dbo].[v_PatientTopicSessions]
       ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id]
       LEFT OUTER JOIN
       [dbo].[RemovedAlarms]
       ON [RemovedAlarms].[AlarmId] = [EndAlarms].[AlarmId]
       LEFT OUTER JOIN
       (SELECT [CorrespondingWaveformTypes].[TopicTypeId],
               [AllTypes].[label],
               [CorrespondingWaveformTypes].[ChannelCode]
        FROM   [dbo].[v_LegacyChannelTypes] AS [AllTypes]
               INNER JOIN
               (SELECT   [vlct].[TopicTypeId],
                         MIN([vlct].[ChannelCode]) AS [ChannelCode]
                FROM     [dbo].[v_LegacyChannelTypes] AS [vlct]
                GROUP BY [vlct].[TopicTypeId]) AS [CorrespondingWaveformTypes]
               ON [CorrespondingWaveformTypes].[ChannelCode] = [AllTypes].[ChannelCode]
                  AND [CorrespondingWaveformTypes].[TopicTypeId] = [AllTypes].[TopicTypeId]) AS [TopicChannelCodes]
       ON [TopicChannelCodes].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       (SELECT [EntityMemberName],
               [PairValue],
               [TopicTypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  [EntityName] = 'LimitAlarms'
               AND [PairName] = 'Message') AS [MDMessage]
       ON [MDMessage].[EntityMemberName] = [Enums].[Name]
          AND [MDMessage].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       (SELECT [EntityMemberName],
               [PairValue],
               [TopicTypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  [EntityName] = 'LimitAlarms'
               AND [PairName] = 'LimitFormat') AS [MDLimitFormat]
       ON [MDLimitFormat].[EntityMemberName] = [Enums].[Name]
          AND [MDLimitFormat].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       (SELECT [EntityMemberName],
               [PairValue],
               [TopicTypeId]
        FROM   [dbo].[v_MetaData]
        WHERE  [EntityName] = 'LimitAlarms'
               AND [PairName] = 'ValueFormat') AS [MDValueFormat]
       ON [MDValueFormat].[EntityMemberName] = [Enums].[Name]
          AND [MDValueFormat].[TopicTypeId] = [TopicSessions].[TopicTypeId]
       LEFT OUTER JOIN
       [dbo].[v_MetaData] AS [MDTopicLabel]
       ON [MDTopicLabel].[TopicTypeId] = [TopicSessions].[TopicTypeId]
          AND [MDTopicLabel].[EntityName] IS NULL
          AND [MDTopicLabel].[Name] = 'Label';

GO
CREATE VIEW [dbo].[v_LiveVitalsData]
WITH SCHEMABINDING
AS
SELECT [LiveData].[Name],
       [LiveData].[Value] AS [ResultValue],
       [TopicSessions].[TopicTypeId],
       [TopicSessions].[Id] AS [TopicSessionId],
       [v_PatientTopicSessions].[PatientId] AS [PatientId],
       [TopicSessions].[TopicInstanceId],
       CASE [LiveData].[Name] WHEN 'T1Value' THEN '4.6.' + CAST ((1 + CAST ([dbo].[fnZeroIfBigger]([vdt1].[Value], 32767) AS INT)) AS NVARCHAR (15)) + '.0' WHEN 'T2Value' THEN '4.7.' + CAST ((1 + CAST ([dbo].[fnZeroIfBigger]([vdt2].[Value], 32767) AS INT)) AS NVARCHAR (15)) + '.0' WHEN 'lead1Index' THEN '2.1.2.0' WHEN 'lead2Index' THEN '2.2.2.0' ELSE [GdsMetaData].[Value] END AS [GdsCode],
       [LiveData].[TimestampUTC] AS [DateTimeStampUTC],
       [dbo].[fnUtcDateTimeToLocalTime]([LiveData].[TimestampUTC]) AS [DateTimeStamp],
       [dbo].[fnDateTimeToFileTime]([LiveData].[TimestampUTC]) AS [FileDateTimeStamp],
       [LiveData].[FeedTypeId]
FROM   [dbo].[LiveData]
       INNER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[TopicInstanceId] = [LiveData].[TopicInstanceId]
          AND [TopicSessions].[EndTimeUTC] IS NULL
       INNER JOIN
       [dbo].[v_PatientTopicSessions]
       ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id]
       LEFT OUTER JOIN
       [dbo].[v_MetaData] AS [GdsMetaData]
       ON [GdsMetaData].[TypeId] = [LiveData].[FeedTypeId]
          AND [GdsMetaData].[EntityMemberName] = [LiveData].[Name]
          AND [GdsMetaData].[Name] = 'GdsCode'
       LEFT OUTER JOIN
       [dbo].[LiveData] AS [vdt1]
       ON [LiveData].[Id] = [vdt1].[Id]
          AND [vdt1].[Name] = 'T1Location'
       LEFT OUTER JOIN
       [dbo].[LiveData] AS [vdt2]
       ON [LiveData].[Id] = [vdt2].[Id]
          AND [vdt2].[Name] = 'T2Location';

GO
CREATE VIEW [dbo].[v_MetaData]
WITH SCHEMABINDING
AS
SELECT [meta].[Id],
       [meta].[Name],
       [meta].[Value],
       [meta].[TypeId],
       [meta].[IsLookUp],
       [meta].[TopicTypeId],
       [meta].[EntityName],
       [meta].[EntityMemberName],
       [meta].[DisplayOnly],
       [metaPairs].[Name] AS [PairName],
       [metaPairs].[Value] AS [PairValue],
       [metaPairs].[IsLookUp] AS [PairLookup],
       [metaPairs].[EntityName] AS [PairEntityName],
       [metaPairs].[EntityMemberName] AS [PairEntityMember],
       [metaPairs].[MetaDataId] AS [PairMetaDataId]
FROM   [dbo].[MetaData] AS [meta]
       LEFT OUTER JOIN
       [dbo].[MetaData] AS [metaPairs]
       ON [metaPairs].[MetaDataId] = [meta].[Id]
WHERE  [meta].[MetaDataId] IS NULL;

GO
CREATE VIEW [dbo].[v_Monitors]
WITH SCHEMABINDING
AS
SELECT [monitor_id],
       [unit_org_id],
       [network_id],
       [node_id],
       [bed_id],
       NULL AS [channel],
       [bed_cd],
       [room],
       [monitor_dsc],
       [monitor_name],
       [monitor_type_cd],
       [subnet],
       'ICS' AS [assignment_cd]
FROM   [dbo].[int_monitor]
UNION
SELECT [Devices].[Id] AS [monitor_id],
       [OrganizationId] AS [unit_org_id],
       [DeviceInfoFarm].[Value] AS [network_id],
       NULL AS [node_id],
       NULL AS [bed_id],
       [DeviceInfoTransmitter].[Value] AS [channel],
       [DeviceInfoBed].[Value] AS [bed_cd],
       [Devices].[Room] AS [room],
       [Devices].[Description] AS [monitor_dsc],
       [DeviceInfoDeviceName].[Value] AS [monitor_name],
       NULL AS [monitor_type_cd],
       NULL AS [subnet],
       CASE WHEN [DeviceInfoDeviceType].[Value] = 'ETtransmitter' THEN 'DEVICE' ELSE 'ICS' END AS [assignment_cd]
FROM   [dbo].[Devices]
       INNER JOIN
       (SELECT [Id] AS [DeviceSessionId],
               [DeviceId],
               ROW_NUMBER() OVER (PARTITION BY [DeviceId] ORDER BY [BeginTimeUTC] DESC) AS [RowNumber]
        FROM   [dbo].[DeviceSessions]) AS [LatestSession]
       ON [LatestSession].[RowNumber] = 1
          AND [LatestSession].[DeviceId] = [Devices].[Id]
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionOrganization]
       ON [v_DeviceSessionOrganization].[DeviceSessionId] = [LatestSession].[DeviceSessionId]
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [DeviceInfoDeviceType]
       ON [DeviceInfoDeviceType].[Name] = 'DeviceType'
          AND [DeviceInfoDeviceType].[DeviceSessionId] = [LatestSession].[DeviceSessionId]
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [DeviceInfoFarm]
       ON [DeviceInfoFarm].[Name] = 'Farm'
          AND [DeviceInfoFarm].[DeviceSessionId] = [LatestSession].[DeviceSessionId]
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [DeviceInfoTransmitter]
       ON [DeviceInfoTransmitter].[Name] = 'Transmitter'
          AND [DeviceInfoTransmitter].[DeviceSessionId] = [LatestSession].[DeviceSessionId]
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [DeviceInfoDeviceName]
       ON [DeviceInfoDeviceName].[Name] = 'DeviceName'
          AND [DeviceInfoDeviceName].[DeviceSessionId] = [LatestSession].[DeviceSessionId]
       LEFT OUTER JOIN
       [dbo].[v_DeviceSessionInfo] AS [DeviceInfoBed]
       ON [DeviceInfoBed].[Name] = 'Bed'
          AND [DeviceInfoBed].[DeviceSessionId] = [LatestSession].[DeviceSessionId];

GO
CREATE VIEW [dbo].[v_PatientChannelLegacy]
WITH SCHEMABINDING
AS
SELECT [DeviceSessionId] AS [DeviceSessionId],
       [PatientId],
       [DeviceId],
       [TypeId],
       [TopicTypeId],
       ISNULL([TypeId], [TopicTypeId]) AS [ChannelTypeId],
       [Active]
FROM   [dbo].[v_AvailableDataTypes]
       INNER JOIN
       [dbo].[DeviceSessions]
       ON [Id] = [DeviceSessionId];

GO
CREATE VIEW [dbo].[v_PatientDaysSinceLastDischarge]
AS
SELECT   [PatientId],
         MIN([DaysSinceLastDischarge]) AS [DaysSinceLastDischarge]
FROM     (SELECT   [patient_id] AS [PatientId],
                   MIN(DATEDIFF(day, ISNULL([discharge_dt], GETDATE()), GETDATE())) AS [DaysSinceLastDischarge]
          FROM     [dbo].[int_encounter]
          GROUP BY [patient_id]
          UNION ALL
          SELECT   [PatientId],
                   MIN(DATEDIFF(day, ISNULL([EndTimeUTC], GETUTCDATE()), GETUTCDATE())) AS [DaysSinceLastDischarge]
          FROM     [dbo].[PatientSessions]
                   INNER JOIN
                   (SELECT [PatientSessionId],
                           [PatientId]
                    FROM   (SELECT [PatientSessionId],
                                   [PatientId],
                                   ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [R]
                            FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionAssignmentSequence]
                    WHERE  [R] = 1) AS [LatestPatientSessionAssignment]
                   ON [LatestPatientSessionAssignment].[PatientSessionId] = [PatientSessions].[Id]
          GROUP BY [PatientId]) AS [CombinedView]
GROUP BY PatientId;

GO
CREATE VIEW [dbo].[v_Patients]
WITH SCHEMABINDING
AS
SELECT DISTINCT [patient_id],
                [FIRST_NAME],
                [MIDDLE_NAME],
                [LAST_NAME],
                [patient_name],
                [MRN_ID] AS [ID1],
                [ACCOUNT_ID] AS [ID2],
                [DOB],
                [FACILITY_NAME]
FROM   [dbo].[v_PatientSessions];

GO
CREATE VIEW [dbo].[v_PatientSessionOrganization]
WITH SCHEMABINDING
AS
SELECT DISTINCT [PatientData].[PatientSessionId],
                [OrganizationId] AS [UnitId]
FROM   [dbo].[PatientData]
       INNER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[PatientSessionId] = [PatientData].[PatientSessionId]
       INNER JOIN
       [dbo].[DeviceSessions]
       ON [DeviceSessions].[Id] = [TopicSessions].[DeviceSessionId]
       INNER JOIN
       [dbo].[v_DeviceSessionOrganization]
       ON [v_DeviceSessionOrganization].[DeviceSessionId] = [DeviceSessions].[Id];

GO
CREATE VIEW [dbo].[v_PatientSessions]
WITH SCHEMABINDING
AS
SELECT [LatestPatientSessionAssignment].[PatientId] AS [patient_id],
       ISNULL([int_person].[last_nm], '') + ', ' + ISNULL([int_person].[first_nm], '') AS [patient_name],
       [int_person].[first_nm] AS [FIRST_NAME],
       [int_person].[middle_nm] AS [MIDDLE_NAME],
       [int_person].[last_nm] AS [LAST_NAME],
       CASE WHEN [Assignment].[BedName] IS NULL
                 OR [Assignment].[MonitorName] IS NULL THEN [Devices].[Name] ELSE RTRIM([Assignment].[BedName]) + '(' + RTRIM([Assignment].[Channel]) + ')' END AS [MONITOR_NAME],
       [Units].[organization_nm] AS [UNIT_NAME],
       [Units].[organization_cd] AS [UNIT_CODE],
       [Units].[organization_id] AS [UNIT_ID],
       [Facilities].[organization_nm] AS [FACILITY_NAME],
       [Facilities].[organization_cd] AS [FACILITY_CODE],
       [Facilities].[organization_id] AS [FACILITY_ID],
       [int_mrn_map].[mrn_xid2] AS [ACCOUNT_ID],
       [int_mrn_map].[mrn_xid] AS [MRN_ID],
       [int_patient].[dob] AS [DOB],
       [PatientSessions].[BeginTimeUTC] AS [ADMIT_TIME_UTC],
       [PatientSessions].[EndTimeUTC] AS [DISCHARGED_TIME_UTC],
       [tsmax].[MaxTime] AS [LAST_RESULT_UTC],
       [PatientSessions].[Id] AS [PATIENT_MONITOR_ID],
       CASE WHEN [PatientSessions].[EndTimeUTC] IS NULL
                 AND ISNULL([MonitoringStatusSequence].[Value], N'Normal') <> N'Standby' THEN 'A' WHEN [PatientSessions].[EndTimeUTC] IS NULL
                                                                                                       AND ISNULL([MonitoringStatusSequence].[Value], N'Normal') = N'Standby' THEN 'S' ELSE 'D' END AS [STATUS],
       [Facilities].[parent_organization_id] AS [FACILITY_PARENT_ID],
       [Devices].[Room] AS [ROOM],
       [Assignment].[BedName] AS [BED],
       CAST (NULL AS NVARCHAR) AS [SUBNET],
       [DeviceSessions].[DeviceId] AS [DeviceId]
FROM   [dbo].[PatientSessions]
       INNER JOIN
       (SELECT [PatientSessionId],
               [PatientId]
        FROM   (SELECT [PatientSessionId],
                       [PatientId],
                       ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [RowNumber]
                FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsAssignmentSequence]
        WHERE  [PatientSessionsAssignmentSequence].[RowNumber] = 1) AS [LatestPatientSessionAssignment]
       ON [LatestPatientSessionAssignment].[PatientSessionId] = [PatientSessions].[Id]
       INNER JOIN
       (SELECT [PatientSessionId],
               [DeviceSessionId]
        FROM   (SELECT [PatientSessionId],
                       [DeviceSessionId],
                       ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [RowNumber]
                FROM   [dbo].[PatientData]) AS [PatientSessionsDeviceSequence]
        WHERE  [PatientSessionsDeviceSequence].[RowNumber] = 1) AS [LatestPatientSessionDevice]
       ON [LatestPatientSessionDevice].[PatientSessionId] = [PatientSessions].[Id]
       INNER JOIN
       [dbo].[DeviceSessions]
       ON [DeviceSessions].[Id] = [LatestPatientSessionDevice].[DeviceSessionId]
       INNER JOIN
       [dbo].[Devices]
       ON [DeviceSessions].[DeviceId] = [Devices].[Id]
       INNER JOIN
       [dbo].[v_DeviceSessionAssignment] AS [Assignment]
       ON [Assignment].[DeviceSessionId] = [LatestPatientSessionDevice].[DeviceSessionId]
       LEFT OUTER JOIN
       [dbo].[int_organization] AS [Facilities]
       ON [Facilities].[organization_nm] = [Assignment].[FacilityName]
          AND [Facilities].[category_cd] = 'F'
       LEFT OUTER JOIN
       [dbo].[int_organization] AS [Units]
       ON [Units].[organization_nm] = [Assignment].[UnitName]
          AND [Units].[parent_organization_id] = [Facilities].[organization_id]
       LEFT OUTER JOIN
       [dbo].[int_mrn_map]
       ON [int_mrn_map].[patient_id] = [LatestPatientSessionAssignment].[PatientId]
          AND [int_mrn_map].[merge_cd] = 'C'
       LEFT OUTER JOIN
       [dbo].[int_patient]
       ON [int_patient].[patient_id] = [LatestPatientSessionAssignment].[PatientId]
       LEFT OUTER JOIN
       [dbo].[int_person]
       ON [int_person].[person_id] = [LatestPatientSessionAssignment].[PatientId]
       LEFT OUTER JOIN
       (SELECT [DeviceSessionId],
               [Value],
               ROW_NUMBER() OVER (PARTITION BY [DeviceSessionId] ORDER BY [TimestampUTC] DESC) AS [RowNumber]
        FROM   [dbo].[DeviceInfoData]
        WHERE  [Name] = N'MonitoringStatus') AS [MonitoringStatusSequence]
       ON [MonitoringStatusSequence].[DeviceSessionId] = [DeviceSessions].[Id]
          AND [MonitoringStatusSequence].[RowNumber] = 1
       INNER JOIN
       (SELECT   [PatientSessionId],
                 MAX([vd].[MaxTime]) AS [MaxTime]
        FROM     [dbo].[TopicSessions]
                 LEFT OUTER JOIN
                 (SELECT   [TopicSessionId],
                           MAX([TimestampUTC]) AS [MaxTime]
                  FROM     [dbo].[VitalsData]
                  GROUP BY [TopicSessionId]) AS [vd]
                 ON [vd].[TopicSessionId] = [TopicSessions].[Id]
        GROUP BY [PatientSessionId]) AS [tsmax]
       ON [PatientSessions].[Id] = [tsmax].[PatientSessionId];

GO
CREATE VIEW [dbo].[v_PatientTopicSessions]
WITH SCHEMABINDING
AS
SELECT [TopicSessions].[Id] AS [TopicSessionId],
       [PatientMap].[PatientId]
FROM   [dbo].[PatientSessionsMap] AS [PatientMap]
       INNER JOIN
       (SELECT   [PatientSessionId],
                 MAX([Sequence]) AS [MaxSequence]
        FROM     [dbo].[PatientSessionsMap]
        GROUP BY [PatientSessionId]) AS [PatientMax]
       ON [PatientMax].[PatientSessionId] = [PatientMap].[PatientSessionId]
          AND [PatientMax].[MaxSequence] = [PatientMap].[Sequence]
       INNER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[PatientSessionId] = [PatientMap].[PatientSessionId];

GO
CREATE VIEW [dbo].[v_PrintJobs]
WITH SCHEMABINDING
AS
SELECT [pj].[Id] AS [print_job_id],
       ISNULL([PageNumber].[Value], 1) AS [page_number],
       [ds].[Id] AS [patient_id],
       NULL AS [orig_patient_id],
       [dbo].[fnUtcDateTimeToLocalTime]([PrintRequests].[TimestampUTC]) AS [job_net_dt],
       ISNULL([Description].[Value], '') + ' ' + ISNULL([PrintDateTime].[Value], '') + CASE WHEN [DataNode].[Value] IS NULL THEN '' ELSE ' (' + [DataNode].[Value] + ')' END AS [descr],
       [DataNode].[Value] AS [data_node],
       [SweepSpeed].[Value] AS [sweep_speed],
       [Duration].[Value] AS [duration],
       [NumChannels].[Value] AS [num_channels],
       'jt' + ISNULL([RequestTypeEnum].[Name], 'Invalid') AS [job_type],
       [MonitorName].[Value] AS [bed],
       [PrintDateTime].[Value] AS [recording_time],
       CASE [RequestTypeEnum].[Name] WHEN 'Undefined' THEN '' WHEN 'Manual' THEN ISNULL([vps].[patient_name], '') + ' ' + ISNULL([MonitorName].[Value], '') + ' ' + [PrintDateTime].[Value] + ' ' + ISNULL([A0].[Annotation], '') WHEN 'Continuous' THEN '' WHEN 'Alarm' THEN ISNULL([vps].[patient_name], '') + ' ' + ISNULL([MonitorName].[Value], '') + ' ' + ISNULL([A0].[Annotation], '') WHEN 'AutoAlarm' THEN ISNULL([vps].[patient_name], '') + ' ' + ISNULL([MonitorName].[Value], '') + ' ' + ISNULL([A0].[Annotation], '') WHEN 'ST' THEN '' WHEN 'Arrhythmia' THEN [A0].[Annotation] WHEN 'Bitmap' THEN '' WHEN 'PreSelected' THEN '' WHEN 'TwelveLead' THEN '' WHEN 'AllLeads' THEN '' ELSE '' END AS [annotation1],
       CASE [RequestTypeEnum].[Name] WHEN 'Undefined' THEN '' WHEN 'Manual' THEN [A1].[Annotation] WHEN 'Continuous' THEN '' WHEN 'Alarm' THEN [A1].[Annotation] WHEN 'AutoAlarm' THEN [A1].[Annotation] WHEN 'ST' THEN '' WHEN 'Arrhythmia' THEN [A1].[Annotation] WHEN 'Bitmap' THEN '' WHEN 'PreSelected' THEN '' WHEN 'TwelveLead' THEN '' WHEN 'AllLeads' THEN '' ELSE '' END AS [annotation2],
       CASE [RequestTypeEnum].[Name] WHEN 'Undefined' THEN '' WHEN 'Manual' THEN [A2].[Annotation] WHEN 'Continuous' THEN '' WHEN 'Alarm' THEN [A2].[Annotation] WHEN 'AutoAlarm' THEN [A2].[Annotation] WHEN 'ST' THEN '' WHEN 'Arrhythmia' THEN '' WHEN 'Bitmap' THEN '' WHEN 'PreSelected' THEN '' WHEN 'TwelveLead' THEN '' WHEN 'AllLeads' THEN '' ELSE '' END AS [annotation3],
       CASE [RequestTypeEnum].[Name] WHEN 'Undefined' THEN '' WHEN 'Manual' THEN [A3].[Annotation] WHEN 'Continuous' THEN '' WHEN 'Alarm' THEN [A3].[Annotation] WHEN 'AutoAlarm' THEN [A3].[Annotation] WHEN 'ST' THEN '' WHEN 'Arrhythmia' THEN '' WHEN 'Bitmap' THEN '' WHEN 'PreSelected' THEN '' WHEN 'TwelveLead' THEN '' WHEN 'AllLeads' THEN '' ELSE '' END AS [annotation4],
       NULL AS [print_bitmap],
       NULL AS [twelve_lead_data],
       NULL AS [end_of_job_sw],
       NULL AS [print_sw],
       NULL AS [printer_name],
       NULL AS [last_printed_dt],
       NULL AS [status_code],
       NULL AS [status_msg],
       NULL AS [start_rec],
       NULL AS [row_dt],
       NULL AS [row_id]
FROM   [dbo].[PrintRequests]
       INNER JOIN
       [dbo].[PrintJobs] AS [pj]
       ON [pj].[Id] = [PrintRequests].[PrintJobId]
       INNER JOIN
       [dbo].[TopicSessions] AS [ts]
       ON [ts].[Id] = [pj].[TopicSessionId]
       INNER JOIN
       [dbo].[DeviceSessions] AS [ds]
       ON [ds].[Id] = [ts].[DeviceSessionId]
       INNER JOIN
       [dbo].[v_PatientSessions] AS [vps]
       ON [vps].[patient_id] = [ds].[Id]
       INNER JOIN
       [dbo].[Enums] AS [RequestTypeEnum]
       ON [RequestTypeEnum].[GroupId] = [PrintRequests].[RequestTypeEnumId]
          AND [RequestTypeEnum].[Value] = [PrintRequests].[RequestTypeEnumValue]
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [PageNumber]
       ON [PrintRequests].[Id] = [PageNumber].[PrintRequestId]
          AND [PageNumber].[Name] = 'PageNumber'
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [Duration]
       ON [PrintRequests].[Id] = [Duration].[PrintRequestId]
          AND [Duration].[Name] = 'Duration'
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [NumChannels]
       ON [PrintRequests].[Id] = [NumChannels].[PrintRequestId]
          AND [NumChannels].[Name] = 'NumChannels'
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [SweepSpeed]
       ON [PrintRequests].[Id] = [SweepSpeed].[PrintRequestId]
          AND [SweepSpeed].[Name] = 'SweepSpeed'
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [PrintDateTime]
       ON [PrintRequests].[Id] = [PrintDateTime].[PrintRequestId]
          AND [PrintDateTime].[Name] = 'PrintDateTime'
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [DataNode]
       ON [PrintRequests].[Id] = [DataNode].[PrintRequestId]
          AND [DataNode].[Name] = 'DataNode'
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [MonitorName]
       ON [PrintRequests].[Id] = [MonitorName].[PrintRequestId]
          AND [MonitorName].[Name] = 'MonitorName'
       LEFT OUTER JOIN
       [dbo].[WaveformAnnotationData] AS [A0]
       ON [PrintRequests].[Id] = [A0].[PrintRequestId]
          AND [A0].[ChannelIndex] = 0
       LEFT OUTER JOIN
       [dbo].[WaveformAnnotationData] AS [A1]
       ON [PrintRequests].[Id] = [A1].[PrintRequestId]
          AND [A1].[ChannelIndex] = 1
       LEFT OUTER JOIN
       [dbo].[WaveformAnnotationData] AS [A2]
       ON [PrintRequests].[Id] = [A2].[PrintRequestId]
          AND [A2].[ChannelIndex] = 2
       LEFT OUTER JOIN
       [dbo].[WaveformAnnotationData] AS [A3]
       ON [PrintRequests].[Id] = [A3].[PrintRequestId]
          AND [A3].[ChannelIndex] = 3
       LEFT OUTER JOIN
       [dbo].[PrintRequestDescriptions] AS [Description]
       ON [Description].[RequestTypeEnumId] = [PrintRequests].[RequestTypeEnumId]
          AND [Description].[RequestTypeEnumValue] = [PrintRequests].[RequestTypeEnumValue];

GO
CREATE VIEW [dbo].[v_PrintJobsWaveform]
WITH SCHEMABINDING
AS
SELECT [PrintJobs].[Id] AS [print_job_id],
       ISNULL([PageNumber].[Value], 1) AS [page_number],
       [ChannelInfoData].[ChannelIndex] AS [seq_no],
       CAST (NULL AS VARCHAR) AS [waveform_type],
       [Duration].[Value] AS [duration],
       CAST (NULL AS VARCHAR) AS [channel_type],
       NULL AS [module_num],
       NULL AS [channel_num],
       [SweepSpeed].[Value] AS [sweep_speed],
       CASE WHEN [ChannelInfoData].[ScaleMin] = [ChannelInfoData].[ScaleMax] THEN [ChannelInfoData].[ScaleValue] ELSE [ChannelInfoData].[ScaleMin] END AS [label_min],
       CASE WHEN [ChannelInfoData].[ScaleMin] = [ChannelInfoData].[ScaleMax] THEN [ChannelInfoData].[ScaleValue] ELSE [ChannelInfoData].[ScaleMax] END AS [label_max],
       NULL AS [show_units],
       [ChannelInfoData].[ChannelType] AS [annotation_channel_type],
       [ChannelInfoData].[Baseline] AS [offset],
       [ChannelInfoData].[Scale] AS [scale],
       NULL AS [primary_annotation],
       NULL AS [secondary_annotation],
       [WaveformPrintData].[Samples] AS [waveform_data],
       NULL AS [grid_type],
       '' AS [scale_labels],
       CAST ([ChannelInfoData].[SampleRate] AS SMALLINT) AS [sample_rate],
       NULL AS [row_dt],
       NULL AS [row_id]
FROM   [dbo].[PrintRequests]
       INNER JOIN
       [dbo].[PrintJobs]
       ON [PrintJobs].[Id] = [PrintRequests].[PrintJobId]
       INNER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[Id] = [PrintJobs].[TopicSessionId]
       LEFT OUTER JOIN
       [dbo].[ChannelInfoData]
       ON [PrintRequests].[Id] = [ChannelInfoData].[PrintRequestId]
       LEFT OUTER JOIN
       [dbo].[WaveformPrintData]
       ON [PrintRequests].[Id] = [WaveformPrintData].[PrintRequestId]
          AND [WaveformPrintData].[ChannelIndex] = [ChannelInfoData].[ChannelIndex]
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [PageNumber]
       ON [PrintRequests].[Id] = [PageNumber].[PrintRequestId]
          AND [PageNumber].[Name] = 'PageNumber'
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [SweepSpeed]
       ON [PrintRequests].[Id] = [SweepSpeed].[PrintRequestId]
          AND [SweepSpeed].[Name] = 'SweepSpeed'
       LEFT OUTER JOIN
       [dbo].[PrintRequestData] AS [Duration]
       ON [PrintRequests].[Id] = [Duration].[PrintRequestId]
          AND [Duration].[Name] = 'Duration';

GO
CREATE VIEW [dbo].[v_StatusData]
WITH SCHEMABINDING
AS
SELECT [StatusData].[Id],
       [StatusData].[SetId],
       [StatusData].[Name],
       [StatusData].[Value] AS [ResultValue],
       [TopicSessions].[TopicTypeId],
       [TopicSessions].[Id] AS [TopicSessionId],
       [StatusDataSets].[TimestampUTC] AS [DateTimeStampUTC],
       [dbo].[fnUtcDateTimeToLocalTime]([StatusDataSets].[TimestampUTC]) AS [DateTimeStamp],
       [v_PatientTopicSessions].[PatientId] AS [PatientId],
       [dbo].[fnDateTimeToFileTime]([StatusDataSets].[TimestampUTC]) AS [FileDateTimeStamp],
       CASE [StatusData].[Name] WHEN 'lead1Index' THEN '2.1.2.0' WHEN 'lead2Index' THEN '2.2.2.0' ELSE [StatusData].[Name] END AS [GdsCode],
       [StatusDataSets].[FeedTypeId] AS [FeedTypeId]
FROM   [dbo].[StatusData]
       INNER JOIN
       [dbo].[StatusDataSets]
       ON [StatusData].[SetId] = [StatusDataSets].[Id]
       INNER JOIN
       [dbo].[TopicSessions]
       ON [TopicSessions].[Id] = [StatusDataSets].[TopicSessionId]
       INNER JOIN
       [dbo].[v_PatientTopicSessions]
       ON [v_PatientTopicSessions].[TopicSessionId] = [TopicSessions].[Id];

GO
CREATE VIEW [dbo].[v_StitchedPatients]
WITH SCHEMABINDING
AS
SELECT   [patient_id],
         [patient_name],
         [FIRST_NAME],
         [MIDDLE_NAME],
         [LAST_NAME],
         [MONITOR_NAME],
         [ACCOUNT_ID],
         [MRN_ID],
         [UNIT_ID],
         [UNIT_NAME],
         [UNIT_CODE],
         [FACILITY_ID],
         [FACILITY_NAME],
         [FACILITY_CODE],
         [DOB],
         [dbo].[fnUtcDateTimeToLocalTime](MIN([ADMIT_TIME_UTC])) AS [ADMIT_TIME],
         [dbo].[fnUtcDateTimeToLocalTime](MAX([DISCHARGED_TIME_UTC])) AS [DISCHARGED_TIME],
         [PATIENT_MONITOR_ID],
         [STATUS]
FROM     [dbo].[v_PatientSessions]
GROUP BY [patient_id], [patient_name], [FIRST_NAME], [MIDDLE_NAME], [LAST_NAME], [MONITOR_NAME], [ACCOUNT_ID], [MRN_ID], [UNIT_ID], [UNIT_NAME], [UNIT_CODE], [FACILITY_ID], [FACILITY_NAME], [FACILITY_CODE], [DOB], [PATIENT_MONITOR_ID], [STATUS];

GO
CREATE VIEW [dbo].[v_TopicTypes]
AS
SELECT [tt].[Id],
       [tt].[Name],
       [tt].[BaseId],
       [tt].[Comment],
       [MDLabel].[Value] AS [Label]
FROM   [dbo].[TopicTypes] AS [tt]
       LEFT OUTER JOIN
       (SELECT [md].[Value],
               [md].[TopicTypeId],
               [md].[Name]
        FROM   [dbo].[MetaData] AS [md]
        WHERE  [md].[Name] = 'Label'
               AND [md].[EntityName] IS NULL) AS [MDLabel]
       ON [MDLabel].[TopicTypeId] = [tt].[Id];

GO
CREATE VIEW [dbo].[v_VitalsData]
WITH SCHEMABINDING
AS
SELECT [vd].[ID],
       [vd].[SetId],
       [vd].[Name],
       [vd].[Value] AS [ResultValue],
       [ts].[TopicTypeId],
       [ts].[Id] AS [TopicSessionId],
       [vd].[TimestampUTC] AS [DateTimeStampUTC],
       [vpts].[PatientId] AS [PatientId],
       [gcm].[GdsCode] AS [GdsCode],
       [vd].[FeedTypeId] AS [TypeId]
FROM   [dbo].[VitalsData] AS [vd]
       INNER JOIN
       [dbo].[GdsCodeMap] AS [gcm]
       ON [gcm].[FeedTypeId] = [vd].[FeedTypeId]
          AND [gcm].[Name] = [vd].[Name]
       INNER JOIN
       [dbo].[TopicSessions] AS [ts]
       ON [ts].[Id] = [vd].[TopicSessionId]
       INNER JOIN
       [dbo].[v_PatientTopicSessions] AS [vpts]
       ON [vpts].[TopicSessionId] = [ts].[Id];

GO
CREATE VIEW [dbo].[v_WaveformSampleRate]
WITH SCHEMABINDING
AS
SELECT DISTINCT [TypeId] AS [FeedTypeId],
                [Value] AS [SampleRate],
                [EntityName] AS [TypeName]
FROM   [dbo].[MetaData]
WHERE  [Name] = 'SampleRate';

GO
CREATE VIEW [dbo].[vwMetaDataValueNum]
WITH SCHEMABINDING
AS
SELECT [md].[Id],
       [md].[Name],
       [md].[Value],
       [md].[IsLookUp],
       [md].[MetaDataId],
       [md].[TopicTypeId],
       [md].[EntityName],
       [md].[EntityMemberName],
       [md].[DisplayOnly],
       [md].[TypeId],
       CASE ISNUMERIC([md].[Value]) WHEN 1 THEN CAST ([md].[Value] AS DECIMAL (18, 6)) ELSE NULL END AS [ValueNum]
FROM   [dbo].[MetaData] AS [md];

GO
CREATE UNIQUE CLUSTERED INDEX [CL_AlarmResources_Locale_EnumGroupId_IDEnumValue]
    ON [dbo].[AlarmResources]([Locale] ASC, [EnumGroupId] ASC, [IDEnumValue] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_cdr_document_group_node_id_rank]
    ON [dbo].[cdr_document_group]([node_id] ASC, [rank] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_cdr_navigation_button_descr_position_form_name_node_id]
    ON [dbo].[cdr_navigation_button]([descr] ASC, [position] ASC, [form_name] ASC, [node_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [restricted_organization_idx]
    ON [dbo].[cdr_restricted_organization]([organization_id] ASC, [user_role_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_DeviceInfoData_DeviceSessionId_Name_TimestampUTC]
    ON [dbo].[DeviceInfoData]([DeviceSessionId] ASC, [Name] ASC, [TimestampUTC] DESC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_DeviceInfoData_Name_DeviceSessionId_Value_TimestampUTC]
    ON [dbo].[DeviceInfoData]([Name] ASC)
    INCLUDE([DeviceSessionId], [Value], [TimestampUTC]) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_DeviceSessions_DeviceId]
    ON [dbo].[DeviceSessions]([DeviceId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_EventsData_TopicSessionId_CategoryValue_TimeStampUTC_Type_Subtype]
    ON [dbo].[EventsData]([TopicSessionId] ASC, [CategoryValue] ASC, [TimestampUTC] ASC, [Type] ASC, [Subtype] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_EventsData_TopicSessionId_TimeStampUTC_Subtype_Type_Value1_Value2_Status_Valid_Leads_CategoryValue_0]
    ON [dbo].[EventsData]([TopicSessionId] ASC, [TimestampUTC] ASC)
    INCLUDE([Subtype], [Type], [Value1], [Value2], [Status], [Valid_Leads], [CategoryValue]) WHERE ([CategoryValue] = (0)) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_EventsData_TopicSessionId_TimeStampUTC_Subtype_Type_Value1_Value2_Status_Valid_Leads_CategoryValue_1]
    ON [dbo].[EventsData]([TopicSessionId] ASC, [TimestampUTC] ASC)
    INCLUDE([Subtype], [Type], [Value1], [Value2], [Status], [Valid_Leads], [CategoryValue]) WHERE ([CategoryValue]=(2) AND [Type]=(1)) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_EventsData_TopicSessionId_TimeStampUTC_Subtype_Type_Value1_Value2_Status_Valid_Leads_CategoryValue_2]
    ON [dbo].[EventsData]([TopicSessionId] ASC, [TimestampUTC] ASC, [Subtype] ASC, [Type] ASC)
    INCLUDE([Value1], [Value2], [Status], [Valid_Leads], [CategoryValue]) WHERE ([CategoryValue]=(2) AND ([Type] IN ((3), (4), (12)))) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_GdsCodeMap_CodeId_FeedTypeId_Name]
    ON [dbo].[GdsCodeMap]([CodeId] ASC)
    INCLUDE([FeedTypeId], [Name]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_GdsCodeMap_GdsCode_FeedTypeId_Name]
    ON [dbo].[GdsCodeMap]([GdsCode] ASC)
    INCLUDE([FeedTypeId], [Name]) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_GeneralAlarmsData_TopicSessionId_StartDateTime_EndDateTime_PriorityWeightValue_IDEnumValue]
    ON [dbo].[GeneralAlarmsData]([TopicSessionId] ASC, [StartDateTime] ASC, [EndDateTime] ASC, [PriorityWeightValue] ASC, [IDEnumValue] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [PK_HL7_in_qhist]
    ON [dbo].[HL7_in_qhist]([msg_no] ASC, [rec_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_HL7_in_queue_msg_no]
    ON [dbo].[HL7_in_queue]([msg_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7_in_queue_msh_dt]
    ON [dbo].[HL7_in_queue]([msh_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7_in_queue_pid_mrn]
    ON [dbo].[HL7_in_queue]([pid_mrn] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7_in_queue_processed_dt]
    ON [dbo].[HL7_in_queue]([processed_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7_in_queue_pv1_visit_no]
    ON [dbo].[HL7_in_queue]([pv1_visit_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7_in_queue_queued_dt]
    ON [dbo].[HL7_in_queue]([queued_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [ndx_pkey]
    ON [dbo].[HL7_msg_ack]([msg_control_id] ASC, [clientIP] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_HL7_msg_list_list_name_seq_msg_no]
    ON [dbo].[HL7_msg_list]([list_name] ASC, [seq] ASC, [msg_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_HL7_out_queue_msg_no]
    ON [dbo].[HL7_out_queue]([msg_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7_out_queue_patient_id]
    ON [dbo].[HL7_out_queue]([patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7_out_queue_queued_dt]
    ON [dbo].[HL7_out_queue]([queued_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7_out_queue_sent_dt]
    ON [dbo].[HL7_out_queue]([sent_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7InboundMessage_MessageHeaderDate]
    ON [dbo].[HL7InboundMessage]([MessageHeaderDate] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7InboundMessage_MessageProcessedDate]
    ON [dbo].[HL7InboundMessage]([MessageProcessedDate] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_HL7InboundMessage_MessageQueuedDate]
    ON [dbo].[HL7InboundMessage]([MessageQueuedDate] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_12lead_report_report_dt]
    ON [dbo].[int_12lead_report]([report_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_12lead_report_edit_report_id_insert_dt_user_id]
    ON [dbo].[int_12lead_report_edit]([report_id] ASC, [insert_dt] ASC, [user_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_account_account_id]
    ON [dbo].[int_account]([account_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_account_account_xid]
    ON [dbo].[int_account]([account_xid] ASC, [organization_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_address_address_id_addr_loc_cd_addr_type_cd_seq_no]
    ON [dbo].[int_address]([address_id] ASC, [addr_loc_cd] ASC, [addr_type_cd] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_int_alarm_patient_id_start_ft_end_ft_alarm_level]
    ON [dbo].[int_alarm]([patient_id] ASC, [start_ft] ASC, [end_ft] ASC, [alarm_level] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_alarm_retrieved_alarm_id]
    ON [dbo].[int_alarm_retrieved]([alarm_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_alarm_retrieved_insert_dt]
    ON [dbo].[int_alarm_retrieved]([insert_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_alarm_waveform_alarm_id_seq_num]
    ON [dbo].[int_alarm_waveform]([alarm_id] ASC, [seq_num] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_alarm_waveform_insert_dt]
    ON [dbo].[int_alarm_waveform]([insert_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_allergy_patient_id_allergy_cid_reaction_identification_dt_active_sw]
    ON [dbo].[int_allergy]([patient_id] ASC, [allergy_cid] ASC, [reaction] ASC, [identification_dt] ASC, [active_sw] ASC) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_int_audit_log_audit_dt_login_id_device_name]
    ON [dbo].[int_audit_log]([audit_dt] ASC, [login_id] ASC, [device_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_audit_log_patient_id]
    ON [dbo].[int_audit_log]([patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_autoupdate_seq_prod]
    ON [dbo].[int_autoupdate]([seq] ASC, [prod] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_autoupdate_log_machine_action_dt_prod]
    ON [dbo].[int_autoupdate_log]([machine] ASC, [action_dt] ASC, [prod] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_channel_type_channel_type_id]
    ON [dbo].[int_channel_type]([channel_type_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_channel_vital_channel_type_id_gds_cid]
    ON [dbo].[int_channel_vital]([channel_type_id] ASC, [gds_cid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_client_map_map_type_map_val]
    ON [dbo].[int_client_map]([map_type] ASC, [map_val] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_cmtry_report_patient_id_report_name]
    ON [dbo].[int_cmtry_report]([patient_id] ASC, [report_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_code_category_cat_code]
    ON [dbo].[int_code_category]([cat_code] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_diagnosis_drg_patient_id_encounter_id_account_id_desc_key]
    ON [dbo].[int_diagnosis_drg]([patient_id] ASC, [encounter_id] ASC, [account_id] ASC, [desc_key] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_diagnosis_drg_desc_key]
    ON [dbo].[int_diagnosis_drg]([desc_key] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_diagnosis_hcp_int_encounter_id_diagnosis_type_cid_diagnosis_seq_no_inactive_sw]
    ON [dbo].[int_diagnosis_hcp_int]([encounter_id] ASC, [diagnosis_type_cid] ASC, [diagnosis_seq_no] ASC, [inactive_sw] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_encounter_encounter_id]
    ON [dbo].[int_encounter]([encounter_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_encounter_account_id]
    ON [dbo].[int_encounter]([account_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_encounter_discharge_dt]
    ON [dbo].[int_encounter]([discharge_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_encounter_patient_id]
    ON [dbo].[int_encounter]([patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_encounter_rm]
    ON [dbo].[int_encounter]([rm] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_encounter_map_encounter_xid_organization_id_patient_id_status_cd_account_id_seq_no]
    ON [dbo].[int_encounter_map]([encounter_xid] ASC, [organization_id] ASC, [patient_id] ASC, [status_cd] ASC, [account_id] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_encounter_map_encounter_id]
    ON [dbo].[int_encounter_map]([encounter_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_encounter_map_patient_id]
    ON [dbo].[int_encounter_map]([patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_encounter_tfr_history_encounter_xid_organization_id]
    ON [dbo].[int_encounter_tfr_history]([encounter_xid] ASC, [organization_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_encounter_to_hcp_int_encounter_id_hcp_id_hcp_role_cd]
    ON [dbo].[int_encounter_to_hcp_int]([encounter_id] ASC, [hcp_id] ASC, [hcp_role_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_environment_env_id_seq]
    ON [dbo].[int_environment]([env_id] ASC, [seq] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_external_organization_ext_organization_id]
    ON [dbo].[int_external_organization]([ext_organization_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_external_organization_company_cons]
    ON [dbo].[int_external_organization]([company_cons] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_external_organization_organization_nm]
    ON [dbo].[int_external_organization]([organization_nm] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_feature_feature_cd]
    ON [dbo].[int_feature]([feature_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [CL_int_flowsheet_flowsheet_type_owner_id_seq_display_in_menu]
    ON [dbo].[int_flowsheet]([flowsheet_type] ASC, [owner_id] ASC, [seq] ASC, [display_in_menu] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_flowsheet_flowsheet_id]
    ON [dbo].[int_flowsheet]([flowsheet_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_flowsheet_detail_flowsheet_id_test_cid]
    ON [dbo].[int_flowsheet_detail]([flowsheet_id] ASC, [test_cid] ASC, [flowsheet_detail_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_flowsheet_entry_flowsheet_entry_id]
    ON [dbo].[int_flowsheet_entry]([flowsheet_entry_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_flowsheet_list_list_id]
    ON [dbo].[int_flowsheet_list]([list_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_flowsheet_list_detail_list_detail_id_list_id]
    ON [dbo].[int_flowsheet_list_detail]([list_detail_id] ASC, [list_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_gateway_gateway_id]
    ON [dbo].[int_gateway]([gateway_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_gateway_network_id]
    ON [dbo].[int_gateway]([network_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_gateway_server_gateway_id_server_name]
    ON [dbo].[int_gateway_server]([gateway_id] ASC, [server_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_guarantor_patient_id_seq_no]
    ON [dbo].[int_guarantor]([patient_id] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_hcp_hcp_id]
    ON [dbo].[int_hcp]([hcp_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_hcp_last_nm_first_nm]
    ON [dbo].[int_hcp]([last_nm] ASC, [first_nm] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_hcp_contact_hcp_id_contact_type_cid_seq_no]
    ON [dbo].[int_hcp_contact]([hcp_id] ASC, [contact_type_cid] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_hcp_license_hcp_id_license_type_cid_license_xid_license_state_code]
    ON [dbo].[int_hcp_license]([hcp_id] ASC, [license_type_cid] ASC, [license_xid] ASC, [license_state_code] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_hcp_map_organization_id_hcp_xid]
    ON [dbo].[int_hcp_map]([organization_id] ASC, [hcp_xid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_hcp_map_hcp_id_organization_id]
    ON [dbo].[int_hcp_map]([hcp_id] ASC, [organization_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_hcp_map_hcp_xid]
    ON [dbo].[int_hcp_map]([hcp_xid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_hcp_specialty_hcp_id_specialty_cid]
    ON [dbo].[int_hcp_specialty]([hcp_id] ASC, [specialty_cid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_hcp_specialty_specialty_cid_hcp_id]
    ON [dbo].[int_hcp_specialty]([specialty_cid] ASC, [hcp_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_insurance_plan_plan_id]
    ON [dbo].[int_insurance_plan]([plan_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_insurance_plan_ins_company_id]
    ON [dbo].[int_insurance_plan]([ins_company_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_insurance_plan_plan_cd_ins_company_id]
    ON [dbo].[int_insurance_plan]([plan_cd] ASC, [ins_company_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_insurance_policy_patient_id_account_id_active_sw_seq_no_cob_priority]
    ON [dbo].[int_insurance_policy]([patient_id] ASC, [account_id] ASC, [active_sw] ASC, [seq_no] ASC, [cob_priority] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_loader_parameter_msg_event_code_sys_id_code_id_parm_value]
    ON [dbo].[int_loader_parameter]([msg_event_code] ASC, [sys_id] ASC, [code_id] ASC, [parm] ASC, [value] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_loader_stats_stat_dt]
    ON [dbo].[int_loader_stats]([stat_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_misc_code_code_id]
    ON [dbo].[int_misc_code]([code_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_misc_code_category_cd_code_organization_id_sys_id_method_cd]
    ON [dbo].[int_misc_code]([category_cd] ASC, [code] ASC, [organization_id] ASC, [sys_id] ASC, [method_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_misc_code_code]
    ON [dbo].[int_misc_code]([code] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_misc_code_code_short_dsc_int_keystone_cd]
    ON [dbo].[int_misc_code]([code] ASC, [short_dsc] ASC, [int_keystone_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_misc_code_int_keystone_cd]
    ON [dbo].[int_misc_code]([int_keystone_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_misc_code_short_dsc_code_int_keystone_cd]
    ON [dbo].[int_misc_code]([short_dsc] ASC, [code] ASC, [int_keystone_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_mon_request_req_id]
    ON [dbo].[int_mon_request]([req_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_monitor_monitor_id]
    ON [dbo].[int_monitor]([monitor_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_monitor_unit_org_id_network_id_node_id_bed_id]
    ON [dbo].[int_monitor]([unit_org_id] ASC, [network_id] ASC, [node_id] ASC, [bed_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_mrn_map_mrn_xid_organization_id_patient_id_orig_patient_id]
    ON [dbo].[int_mrn_map]([mrn_xid] ASC, [organization_id] ASC, [patient_id] ASC, [orig_patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_mrn_map_merge_cd]
    ON [dbo].[int_mrn_map]([merge_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_mrn_map_mrn_xid_patient_id]
    ON [dbo].[int_mrn_map]([mrn_xid] ASC, [patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_mrn_map_patient_id]
    ON [dbo].[int_mrn_map]([patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_msg_log_external_id_msg_log_id]
    ON [dbo].[int_msg_log]([external_id] ASC, [msg_log_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_msg_log_msg_dt]
    ON [dbo].[int_msg_log]([msg_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_msg_log_msg_template_id]
    ON [dbo].[int_msg_log]([msg_template_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_msg_template_msg_template_id]
    ON [dbo].[int_msg_template]([msg_template_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_nok_patient_id_seq_no_notify_seq_no_active_flag]
    ON [dbo].[int_nok]([patient_id] ASC, [seq_no] ASC, [notify_seq_no] ASC, [active_flag] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_nxt_ascending_key_tbl_name]
    ON [dbo].[int_nxt_ascending_key]([tbl_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_nxt_descending_key_tbl_name]
    ON [dbo].[int_nxt_descending_key]([tbl_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_order_patient_id_order_id_encounter_id]
    ON [dbo].[int_order]([patient_id] ASC, [order_id] ASC, [encounter_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_order_id_encounter_id]
    ON [dbo].[int_order]([encounter_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_order_patient_id_order_id]
    ON [dbo].[int_order]([parent_order_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_order_group_node_id_parent_node_id_node_name]
    ON [dbo].[int_order_group]([node_id] ASC, [parent_node_id] ASC, [node_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_order_group_rank]
    ON [dbo].[int_order_group]([rank] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_order_group_detail_node_id_rank]
    ON [dbo].[int_order_group_detail]([node_id] ASC, [rank] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_order_group_detail_univ_svc_cid_node_id]
    ON [dbo].[int_order_group_detail]([univ_svc_cid] ASC, [node_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_order_line_order_id_univ_svc_cid_patient_id_seq_no]
    ON [dbo].[int_order_line]([order_id] ASC, [univ_svc_cid] ASC, [patient_id] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_order_line_patient_id]
    ON [dbo].[int_order_line]([patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_order_map_patient_id_organization_id_sys_id_order_xid_type_cd_seq_no]
    ON [dbo].[int_order_map]([patient_id] ASC, [organization_id] ASC, [sys_id] ASC, [order_xid] ASC, [type_cd] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_order_map_order_id]
    ON [dbo].[int_order_map]([order_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_order_map_order_xid_organization_id_sys_id]
    ON [dbo].[int_order_map]([order_xid] ASC, [organization_id] ASC, [sys_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_org_shift_sched_organization_id_shift_nm]
    ON [dbo].[int_org_shift_sched]([organization_id] ASC, [shift_nm] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_organization_organization_id]
    ON [dbo].[int_organization]([organization_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_organization_category_cd]
    ON [dbo].[int_organization]([category_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_outbound_queue_outbound_id]
    ON [dbo].[int_outbound_queue]([outbound_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_outbound_queue_msg_status]
    ON [dbo].[int_outbound_queue]([msg_status] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_outbound_queue_queued_dt]
    ON [dbo].[int_outbound_queue]([queued_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_int_param_timetag_patient_id_timetag_type_param_ft]
    ON [dbo].[int_param_timetag]([patient_id] ASC, [timetag_type] ASC, [param_ft] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_param_timetag_patient_id_timetag_type_patient_channel_id_param_ft]
    ON [dbo].[int_param_timetag]([patient_id] ASC, [timetag_type] ASC, [patient_channel_id] ASC, [param_ft] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_param_timetag_timetag_type_patient_id_param_ft]
    ON [dbo].[int_param_timetag]([timetag_type] ASC, [patient_id] ASC, [param_ft] ASC)
    INCLUDE([param_dt], [value1], [value2]);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_patient_channel_patient_id_monitor_id_module_num_channel_num_patient_monitor_id_channel_type_id]
    ON [dbo].[int_patient_channel]([patient_id] ASC, [monitor_id] ASC, [module_num] ASC, [channel_num] ASC, [patient_monitor_id] ASC, [channel_type_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_patient_channel_patient_channel_id_channel_type_id]
    ON [dbo].[int_patient_channel]([patient_channel_id] ASC, [channel_type_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_patient_channel_patient_monitor_id]
    ON [dbo].[int_patient_channel]([patient_monitor_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_patient_document_patient_id]
    ON [dbo].[int_patient_document]([patient_id] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_patient_image_patient_id_order_id_seq_no]
    ON [dbo].[int_patient_image]([patient_id] ASC, [order_id] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_patient_link_orig_patient_id_new_patient_id]
    ON [dbo].[int_patient_link]([orig_patient_id] ASC, [new_patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_patient_list_patient_list_id]
    ON [dbo].[int_patient_list]([patient_list_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_patient_list_owner_id_type_cd_list_name]
    ON [dbo].[int_patient_list]([owner_id] ASC, [type_cd] ASC, [list_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_patient_list_svc_cid]
    ON [dbo].[int_patient_list]([svc_cid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_patient_list_detail_patient_list_id_patient_id_encounter_id]
    ON [dbo].[int_patient_list_detail]([patient_list_id] ASC, [patient_id] ASC, [encounter_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_patient_list_detail_orig_patient_id]
    ON [dbo].[int_patient_list_detail]([orig_patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_patient_list_detail_patient_id]
    ON [dbo].[int_patient_list_detail]([patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_patient_list_link_master_owner_id_transfer_owner_id_patient_id]
    ON [dbo].[int_patient_list_link]([master_owner_id] ASC, [transfer_owner_id] ASC, [patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_patient_monitor_patient_id_monitor_id_monitor_connect_dt]
    ON [dbo].[int_patient_monitor]([patient_id] ASC, [monitor_id] ASC, [monitor_connect_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_patient_monitor_monitor_connect_dt]
    ON [dbo].[int_patient_monitor]([monitor_connect_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_patient_monitor_monitor_id]
    ON [dbo].[int_patient_monitor]([monitor_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_patient_procedure_enc_id_proc_cid]
    ON [dbo].[int_patient_procedure]([enc_id] ASC, [proc_cid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_person_person_id]
    ON [dbo].[int_person]([person_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_person_first_nm]
    ON [dbo].[int_person]([first_nm] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_person_last_nm]
    ON [dbo].[int_person]([last_nm] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_person_name_person_nm_id_recognize_nm_cd_seq_no_active_sw]
    ON [dbo].[int_person_name]([person_nm_id] ASC, [recognize_nm_cd] ASC, [seq_no] ASC, [active_sw] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_person_name_last_nm_first_nm]
    ON [dbo].[int_person_name]([last_nm] ASC, [first_nm] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_person_name_mpi_lname_cons_mpi_fname_cons_mpi_mname_cons]
    ON [dbo].[int_person_name]([mpi_lname_cons] ASC, [mpi_fname_cons] ASC, [mpi_mname_cons] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_pref_user_id_user_role_id]
    ON [dbo].[int_pref]([user_id] ASC, [user_role_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_pref_diff_user_role_id_node_path_user_id_changed_at_global]
    ON [dbo].[int_pref_diff]([user_role_id] ASC, [node_path] ASC, [user_id] ASC, [changed_at_global] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_pref_lock_user_id_user_role_id_node_path]
    ON [dbo].[int_pref_lock]([user_id] ASC, [user_role_id] ASC, [node_path] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_pref_pushdown_user_id_user_role_id_node_path]
    ON [dbo].[int_pref_pushdown]([user_id] ASC, [user_role_id] ASC, [node_path] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_print_job_patient_id_print_job_id_page_number_job_net_dt_descr_print_sw_printer_name_status_code_status_msg]
    ON [dbo].[int_print_job]([patient_id] ASC, [print_job_id] ASC, [page_number] ASC, [job_net_dt] ASC)
    INCLUDE([descr], [print_sw], [printer_name], [status_code], [status_msg]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_print_job_print_job_id_page_number]
    ON [dbo].[int_print_job]([print_job_id] ASC, [page_number] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_print_job_et_alarm_DeviceSessionId]
    ON [dbo].[int_print_job_et_alarm]([DeviceSessionId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_print_job_waveform_print_job_id_page_number_seq_no_module_num_channel_num]
    ON [dbo].[int_print_job_waveform]([print_job_id] ASC, [page_number] ASC, [seq_no] ASC, [module_num] ASC, [channel_num] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_procedure_encounter_id_procedure_cid_seq_no]
    ON [dbo].[int_procedure]([encounter_id] ASC, [procedure_cid] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_procedure_hcp_int_encounter_id_procedure_cid_seq_no_desc_key]
    ON [dbo].[int_procedure_hcp_int]([encounter_id] ASC, [procedure_cid] ASC, [seq_no] ASC, [desc_key] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_product_product_cd]
    ON [dbo].[int_product]([product_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_product_map_product_cd_feature_cd]
    ON [dbo].[int_product_map]([product_cd] ASC, [feature_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_reference_range_reference_range_id]
    ON [dbo].[int_reference_range]([reference_range_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_reference_range_reference_range]
    ON [dbo].[int_reference_range]([reference_range] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_result_obs_start_dt]
    ON [dbo].[int_result]([obs_start_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_result_patient_id_result_dt_test_cid_result_ft]
    ON [dbo].[int_result]([patient_id] ASC, [result_dt] ASC, [test_cid] ASC, [result_ft] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_result_patient_id_result_ft_result_dt]
    ON [dbo].[int_result]([patient_id] ASC, [result_ft] ASC, [result_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_result_patient_id_test_cid]
    ON [dbo].[int_result]([patient_id] ASC, [test_cid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_result_patient_id_test_cid_result_ft_result_dt_result_value]
    ON [dbo].[int_result]([patient_id] ASC, [test_cid] ASC, [result_ft] DESC)
    INCLUDE([result_dt], [result_value]) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_result_flag_flag_sys_id]
    ON [dbo].[int_result_flag]([flag] ASC, [sys_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_saved_event_patient_id_event_id_insert_dt_user_id]
    ON [dbo].[int_saved_event]([patient_id] ASC, [event_id] ASC, [insert_dt] ASC, [user_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_saved_event_insert_dt]
    ON [dbo].[int_saved_event]([insert_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_saved_event_waveform_patient_id_event_id_wave_index]
    ON [dbo].[int_saved_event_waveform]([patient_id] ASC, [event_id] ASC, [wave_index] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_savedevent_event_log_patient_id_event_id]
    ON [dbo].[int_savedevent_event_log]([patient_id] ASC, [event_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_savedevent_waveform_patient_id_event_id]
    ON [dbo].[int_savedevent_waveform]([patient_id] ASC, [event_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_security_user_id_user_role_id]
    ON [dbo].[int_security]([user_id] ASC, [user_role_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_security_diff_user_role_id_node_path_user_id_changed_at_global]
    ON [dbo].[int_security_diff]([user_role_id] ASC, [node_path] ASC, [user_id] ASC, [changed_at_global] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_security_lock_user_id_user_role_id_node_path]
    ON [dbo].[int_security_lock]([user_id] ASC, [user_role_id] ASC, [node_path] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_security_pushdown_user_id_user_role_id_node_path]
    ON [dbo].[int_security_pushdown]([user_id] ASC, [user_role_id] ASC, [node_path] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_send_sys_sys_id]
    ON [dbo].[int_send_sys]([sys_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_send_sys_code]
    ON [dbo].[int_send_sys]([code] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_site_link_link_id_group_rank_display_rank]
    ON [dbo].[int_site_link]([link_id] ASC, [group_rank] ASC, [display_rank] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_specimen_specimen_id_patient_id]
    ON [dbo].[int_specimen]([specimen_id] ASC, [patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_specimen_collect_id_specimen_xid]
    ON [dbo].[int_specimen]([collect_id] ASC, [specimen_xid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_patient_id_encounter_id_order_id]
    ON [dbo].[int_specimen]([patient_id] ASC, [encounter_id] ASC, [order_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_specimen_group_specimen_group]
    ON [dbo].[int_specimen_group]([specimen_group] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_specimen_group_source_cd]
    ON [dbo].[int_specimen_group]([source_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_system_parameter_system_parameter_id]
    ON [dbo].[int_system_parameter]([system_parameter_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_tech_map_tech_xid_organization_id]
    ON [dbo].[int_tech_map]([tech_xid] ASC, [organization_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_tech_map_tech_id]
    ON [dbo].[int_tech_map]([tech_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_telephone_phone_id_phone_loc_cd_phone_type_cd_seq_no]
    ON [dbo].[int_telephone]([phone_id] ASC, [phone_loc_cd] ASC, [phone_type_cd] ASC, [seq_no] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_test_group_node_id]
    ON [dbo].[int_test_group]([node_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_test_group_parent_node_id_node_name]
    ON [dbo].[int_test_group]([parent_node_id] ASC, [node_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_test_group_rank]
    ON [dbo].[int_test_group]([rank] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_test_group_detail_node_id_test_cid_univ_svc_cid_rank]
    ON [dbo].[int_test_group_detail]([node_id] ASC, [test_cid] ASC, [univ_svc_cid] ASC, [rank] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_test_group_detail_node_id_alias_test_cid_alias_univ_svc_cid]
    ON [dbo].[int_test_group_detail]([node_id] ASC, [alias_test_cid] ASC, [alias_univ_svc_cid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_test_group_detail_test_cid_univ_svc_cid_node_id_source_cid]
    ON [dbo].[int_test_group_detail]([test_cid] ASC, [univ_svc_cid] ASC, [node_id] ASC, [source_cid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_translate_translate_cd]
    ON [dbo].[int_translate]([translate_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_translate_list_list_id_translate_cd]
    ON [dbo].[int_translate_list]([list_id] ASC, [translate_cd] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_user_login_name]
    ON [dbo].[int_user]([login_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_user_user_role_id]
    ON [dbo].[int_user]([user_role_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_user_user_sid]
    ON [dbo].[int_user]([user_sid] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_user_group_group_name]
    ON [dbo].[int_user_group]([group_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_int_user_role_role_name]
    ON [dbo].[int_user_role]([role_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_int_vital_live_temp_createdDT]
    ON [dbo].[int_vital_live_temp]([createdDT] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_waveform_patient_id_patient_channel_id_start_ft_end_ft]
    ON [dbo].[int_waveform]([patient_id] ASC, [patient_channel_id] ASC, [start_ft] ASC, [end_ft] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_end_ft]
    ON [dbo].[int_waveform]([end_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_patient_channel_id_patient_id_end_ft_start_ft_start_dt_end_dt_compress_method]
    ON [dbo].[int_waveform]([patient_channel_id] ASC, [patient_id] ASC, [end_ft] ASC, [start_ft] ASC)
    INCLUDE([start_dt], [end_dt], [compress_method]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_patient_channel_id_start_ft_end_ft]
    ON [dbo].[int_waveform]([patient_channel_id] ASC, [start_ft] ASC, [end_ft] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_patient_id_start_ft_end_ft]
    ON [dbo].[int_waveform]([patient_id] ASC, [end_ft] ASC, [start_ft] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_patient_id_start_ft_patient_channel_id_start_dt_end_ft]
    ON [dbo].[int_waveform]([patient_id] ASC, [start_ft] ASC)
    INCLUDE([patient_channel_id], [start_dt], [end_ft]) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_int_waveform_live_patient_id_patient_channel_id]
    ON [dbo].[int_waveform_live]([patient_id] ASC, [patient_channel_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_LimitAlarmsData_TopicSessionId_StartDateTime_EndDateTime_PriorityWeightValue_IDEnumValue]
    ON [dbo].[LimitAlarmsData]([TopicSessionId] ASC, [StartDateTime] ASC, [EndDateTime] ASC, [PriorityWeightValue] ASC, [IDEnumValue] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_LiveData_TopicInstanceId_TimestampUTC]
    ON [dbo].[LiveData]([TopicInstanceId] ASC, [TimestampUTC] ASC) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_MetaData_Name_DisplayOnly_MetaDataId]
    ON [dbo].[MetaData]([Name] ASC, [DisplayOnly] ASC, [MetaDataId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_DisplayOnly_MetaDataId_Id_TypeId_Name]
    ON [dbo].[MetaData]([DisplayOnly] ASC, [MetaDataId] ASC, [Id] ASC, [TypeId] ASC, [Name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_EntityMemberName]
    ON [dbo].[MetaData]([EntityMemberName] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_EntityName]
    ON [dbo].[MetaData]([EntityName] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_EntityName_MetaDataId_Id_TopicTypeId_EntityMemberName]
    ON [dbo].[MetaData]([EntityName] ASC, [MetaDataId] ASC, [Id] ASC, [TopicTypeId] ASC, [EntityMemberName] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Id_Name_MetaDataId_TypeId_EntityMemberName_DisplayOnly_Value]
    ON [dbo].[MetaData]([Id] ASC, [Name] ASC, [MetaDataId] ASC, [TypeId] ASC, [EntityMemberName] ASC, [DisplayOnly] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Id_Name_TypeId_MetaDataId_TopicTypeId_DisplayOnly_Value]
    ON [dbo].[MetaData]([Id] ASC, [Name] ASC, [TypeId] ASC, [MetaDataId] ASC, [TopicTypeId] ASC, [DisplayOnly] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Id_TypeId_TopicTypeId_Name_DisplayOnly_Value]
    ON [dbo].[MetaData]([MetaDataId] ASC, [Id] ASC, [TypeId] ASC, [TopicTypeId] ASC, [Name] ASC, [DisplayOnly] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_IsLookUp]
    ON [dbo].[MetaData]([IsLookUp] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_MetaDataId]
    ON [dbo].[MetaData]([MetaDataId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_MetaDataId_DisplayOnly_TypeId_Id]
    ON [dbo].[MetaData]([MetaDataId] ASC, [DisplayOnly] ASC, [TypeId] ASC)
    INCLUDE([Id]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_MetaDataId_DisplayOnly_TypeId_Id_Name]
    ON [dbo].[MetaData]([MetaDataId] ASC, [DisplayOnly] ASC, [TypeId] ASC, [Id] ASC, [Name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_MetaDataId_Id_TypeId_EntityMemberName_Name]
    ON [dbo].[MetaData]([MetaDataId] ASC, [Id] ASC, [TypeId] ASC, [EntityMemberName] ASC, [Name] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_MetaDataId_Name_TypeId_Id_TopicTypeId_DisplayOnly_Value]
    ON [dbo].[MetaData]([MetaDataId] ASC, [Name] ASC, [TypeId] ASC, [Id] ASC, [TopicTypeId] ASC, [DisplayOnly] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_MetaDataId_Name_TypeId_TopicTypeId_DisplayOnly_Id]
    ON [dbo].[MetaData]([MetaDataId] ASC, [Name] ASC, [TypeId] ASC, [TopicTypeId] ASC, [DisplayOnly] ASC, [Id] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_MetaDataId_Name_Value]
    ON [dbo].[MetaData]([MetaDataId] ASC, [Name] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name]
    ON [dbo].[MetaData]([Name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_Id_TypeId]
    ON [dbo].[MetaData]([Name] ASC, [Id] ASC, [TypeId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_Id_TypeId_MetaDataId_Value]
    ON [dbo].[MetaData]([Name] ASC, [Id] ASC, [TypeId] ASC, [MetaDataId] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC)
    INCLUDE([Value], [EntityMemberName], [TypeId]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_DisplayOnly_Id_TopicTypeId_TypeId_Value]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [DisplayOnly] ASC, [Id] ASC, [TopicTypeId] ASC, [TypeId] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_Id_EntityMemberName_TypeId_Value]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [Id] ASC, [EntityMemberName] ASC, [TypeId] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_Id_TypeId_DisplayOnly_TopicTypeId_Value]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [Id] ASC, [TypeId] ASC, [DisplayOnly] ASC, [TopicTypeId] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_TopicTypeId_EntityName_DisplayOnly_Id_EntityMemberName_TypeId_Value]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [TopicTypeId] ASC, [EntityName] ASC, [DisplayOnly] ASC, [Id] ASC, [EntityMemberName] ASC, [TypeId] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_TopicTypeId_Value]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [TopicTypeId] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_TypeId]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [TypeId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_TypeId_EntityMemberName_Id_DisplayOnly_Value]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [TypeId] ASC, [EntityMemberName] ASC, [Id] ASC, [DisplayOnly] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_TypeId_EntityMemberName_Id_Value]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [TypeId] ASC, [EntityMemberName] ASC, [Id] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_Name_MetaDataId_TypeId_Id_TopicTypeId_DisplayOnly_Value]
    ON [dbo].[MetaData]([Name] ASC, [MetaDataId] ASC, [TypeId] ASC, [Id] ASC, [TopicTypeId] ASC, [DisplayOnly] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_TopicTypeId_Name_MetaDataId_Id_TypeId]
    ON [dbo].[MetaData]([TopicTypeId] ASC, [Name] ASC, [MetaDataId] ASC, [Id] ASC, [TypeId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_TopicTypeId_Name_MetaDataId_Id_TypeId_DisplayOnly_Value]
    ON [dbo].[MetaData]([TopicTypeId] ASC, [Name] ASC, [MetaDataId] ASC, [Id] ASC, [TypeId] ASC, [DisplayOnly] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_TypeId_DisplayOnly_MetaDataId_Id]
    ON [dbo].[MetaData]([TypeId] ASC, [DisplayOnly] ASC, [MetaDataId] ASC, [Id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_TypeId_Id_Name_MetaDataId_TopicTypeId_DisplayOnly_Value]
    ON [dbo].[MetaData]([TypeId] ASC, [Id] ASC, [Name] ASC, [MetaDataId] ASC, [TopicTypeId] ASC, [DisplayOnly] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_MetaData_TypeId_Name_MetaDataId_Id_DisplayOnly_TopicTypeId_Value]
    ON [dbo].[MetaData]([TypeId] ASC, [Name] ASC, [MetaDataId] ASC, [Id] ASC, [DisplayOnly] ASC, [TopicTypeId] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_mpi_decision_field_candidate_id_matched_id_field_id]
    ON [dbo].[mpi_decision_field]([candidate_id] ASC, [matched_id] ASC, [field_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_mpi_decision_log_candidate_id_matched_id]
    ON [dbo].[mpi_decision_log]([candidate_id] ASC, [matched_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_mpi_decision_log_matched_id]
    ON [dbo].[mpi_decision_log]([matched_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_mpi_decision_log_mod_dt]
    ON [dbo].[mpi_decision_log]([mod_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_mpi_decision_queue_candidate_id_processed_dt]
    ON [dbo].[mpi_decision_queue]([candidate_id] ASC, [processed_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_mpi_decision_queue_mod_dt]
    ON [dbo].[mpi_decision_queue]([mod_dt] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [mpi_patient_link_orig_patient_id_new_patient_id]
    ON [dbo].[mpi_patient_link]([orig_patient_id] ASC, [new_patient_id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_mpi_search_field_field_name]
    ON [dbo].[mpi_search_field]([field_name] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_PatientData_ID1_TimestampUTC_PatientSessionId]
    ON [dbo].[PatientData]([ID1] ASC, [TimestampUTC] DESC, [PatientSessionId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_PatientData_PatientSessionId_TimestampUTC_ID1]
    ON [dbo].[PatientData]([PatientSessionId] ASC, [TimestampUTC] DESC)
    INCLUDE([ID1]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_PatientSessionsMap_PatientId_PatientSessionId]
    ON [dbo].[PatientSessionsMap]([PatientId] ASC, [PatientSessionId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_PatientSessionsMap_PatientSessionId_Sequence]
    ON [dbo].[PatientSessionsMap]([PatientSessionId] ASC, [Sequence] DESC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_ResourceStrings_Locale_Name_Value]
    ON [dbo].[ResourceStrings]([Locale] ASC, [Name] ASC)
    INCLUDE([Value]) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_StatusData_SetId]
    ON [dbo].[StatusData]([SetId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_StatusData_Name_SetId_Value]
    ON [dbo].[StatusData]([Name] ASC)
    INCLUDE([SetId], [Value]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_StatusData_SetId_Name_Id_Value]
    ON [dbo].[StatusData]([SetId] ASC, [Name] ASC)
    INCLUDE([Id], [Value]) WHERE ([StatusData].[Name] IN ('lead1Index', 'lead2Index')) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_StatusDataSets_Id_TopicSessionId_FeedTypeId_TimestampUTC]
    ON [dbo].[StatusDataSets]([Id] ASC)
    INCLUDE([TopicSessionId], [FeedTypeId], [TimestampUTC]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_StatusDataSets_TopicSessionId_FeedTypeId_TimestampUTC_Id]
    ON [dbo].[StatusDataSets]([TopicSessionId] ASC, [FeedTypeId] ASC, [TimestampUTC] ASC, [Id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_StatusDataSets_TopicSessionId_Id]
    ON [dbo].[StatusDataSets]([TopicSessionId] ASC, [Id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_StatusDataSets_TopicSessionId_Id_FeedTypeId_TimestampUTC]
    ON [dbo].[StatusDataSets]([TopicSessionId] ASC, [Id] ASC)
    INCLUDE([FeedTypeId], [TimestampUTC]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_StatusDataSets_TopicSessionId_Id_TimestampUTC]
    ON [dbo].[StatusDataSets]([TopicSessionId] ASC, [Id] ASC)
    INCLUDE([TimestampUTC]) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_TopicSessions_PatientSessionId_TopicInstanceId_BeginTimeUTC]
    ON [dbo].[TopicSessions]([PatientSessionId] ASC, [TopicInstanceId] ASC, [BeginTimeUTC] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_TopicSessions_PatientSessionId_Id]
    ON [dbo].[TopicSessions]([PatientSessionId] ASC, [Id] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_TopicSessions_TopicTypeId]
    ON [dbo].[TopicSessions]([TopicTypeId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE CLUSTERED INDEX [CL_TopicTypes_BaseId]
    ON [dbo].[TopicTypes]([BaseId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_VitalsData_TopicSessionId_Name_FeedTypeId_ID_Value_TimestampUTC]
    ON [dbo].[VitalsData]([TopicSessionId] ASC, [Name] ASC, [FeedTypeId] ASC)
    INCLUDE([ID], [Value], [TimestampUTC]) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_VitalsData_TopicSessionId_TimestampUTC]
    ON [dbo].[VitalsData]([TopicSessionId] ASC, [TimestampUTC] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_VitalsData_TopicSessionId_TimestampUTC_Name_FeedTypeId_ID_Value]
    ON [dbo].[VitalsData]([TopicSessionId] ASC, [TimestampUTC] ASC, [Name] ASC, [FeedTypeId] ASC)
    INCLUDE([ID], [Value]) WITH (FILLFACTOR = 100);

GO
CREATE UNIQUE CLUSTERED INDEX [CL_WaveformData_TopicSessionId_StartTimeUTC_EndTimeUTC_TypeId]
    ON [dbo].[WaveformData]([TopicSessionId] ASC, [StartTimeUTC] ASC, [EndTimeUTC] ASC, [TypeId] ASC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_WaveformData_TopicSessionId_StartTimeUTC_EndTimeUTC]
    ON [dbo].[WaveformData]([TopicSessionId] ASC, [StartTimeUTC] ASC, [EndTimeUTC] DESC) WITH (FILLFACTOR = 100);

GO
CREATE NONCLUSTERED INDEX [IX_WaveformLiveData_TopicInstanceId_TypeId_EndTimeUTC_StartTimeUTC_Id]
    ON [dbo].[WaveformLiveData]([TopicInstanceId] ASC, [TypeId] ASC, [EndTimeUTC] ASC)
    INCLUDE([StartTimeUTC], [Id]) WITH (FILLFACTOR = 100);

GO
CREATE FUNCTION [dbo].[fn_HL7_GetPatientIdFromQueryItemType]
(@QueryItem NVARCHAR (80), @QueryType INT)
RETURNS UNIQUEIDENTIFIER
WITH SCHEMABINDING
AS
BEGIN
    DECLARE @patient_id AS UNIQUEIDENTIFIER;
    IF (@QueryType = 0)
        BEGIN
            SELECT @patient_id = [PATIENTID]
            FROM   (SELECT [MAP].[patient_id] AS [PATIENTID]
                    FROM   [dbo].[int_mrn_map] AS [MAP]
                           INNER JOIN
                           [dbo].[int_patient_monitor] AS [PATMON]
                           ON [PATMON].[patient_id] = [MAP].[patient_id]
                           INNER JOIN
                           [dbo].[int_monitor] AS [MONITOR]
                           ON [MONITOR].[monitor_id] = [PATMON].[monitor_id]
                           INNER JOIN
                           [dbo].[int_product_access] AS [ACCESS]
                           ON [ACCESS].[organization_id] = [MONITOR].[unit_org_id]
                           INNER JOIN
                           [dbo].[int_organization] AS [ORG]
                           ON [ORG].[organization_id] = [MONITOR].[unit_org_id]
                    WHERE  [MAP].[mrn_xid] = @QueryItem
                           AND [merge_cd] = 'C'
                           AND [ACCESS].[product_cd] = 'outHL7'
                           AND [ORG].[category_cd] = 'D'
                    UNION
                    SELECT [DLPAT].[patient_id] AS [PATIENTID]
                    FROM   [dbo].[v_PatientSessions] AS [DLPAT]
                           INNER JOIN
                           [dbo].[int_product_access] AS [Access]
                           ON [Access].[organization_id] = [DLPAT].[UNIT_ID]
                           INNER JOIN
                           [dbo].[int_organization] AS [ORG]
                           ON [ORG].[organization_id] = [DLPAT].[UNIT_ID]
                    WHERE  [DLPAT].[MRN_ID] = @QueryItem
                           AND [Access].[product_cd] = 'outHL7'
                           AND [ORG].[category_cd] = 'D') AS [PATIENTID];
        END
    IF (@QueryType = 1)
        BEGIN
            SELECT @patient_id = [PATIENTID]
            FROM   (SELECT [MAP].[patient_id] AS [PATIENTID]
                    FROM   [dbo].[int_mrn_map] AS [MAP]
                           INNER JOIN
                           [dbo].[int_patient_monitor] AS [PATMON]
                           ON [PATMON].[patient_id] = [MAP].[patient_id]
                           INNER JOIN
                           [dbo].[int_monitor] AS [MONITOR]
                           ON [MONITOR].[monitor_id] = [PATMON].[monitor_id]
                           INNER JOIN
                           [dbo].[int_product_access] AS [ACCESS]
                           ON [ACCESS].[organization_id] = [MONITOR].[unit_org_id]
                           INNER JOIN
                           [dbo].[int_organization] AS [ORG]
                           ON [ORG].[organization_id] = [MONITOR].[unit_org_id]
                    WHERE  [MAP].[mrn_xid2] = @QueryItem
                           AND [merge_cd] = 'C'
                           AND [ACCESS].[product_cd] = 'outHL7'
                           AND [ORG].[category_cd] = 'D'
                    UNION
                    SELECT [DLPAT].[patient_id] AS [PATIENTID]
                    FROM   [dbo].[v_PatientSessions] AS [DLPAT]
                           INNER JOIN
                           [dbo].[int_product_access] AS [ACCESS]
                           ON [ACCESS].[organization_id] = [DLPAT].[UNIT_ID]
                           INNER JOIN
                           [dbo].[int_organization] AS [ORG]
                           ON [ORG].[organization_id] = [DLPAT].[UNIT_ID]
                    WHERE  [DLPAT].[ACCOUNT_ID] = @QueryItem
                           AND [ACCESS].[product_cd] = 'outHL7'
                           AND [ORG].[category_cd] = 'D') AS [PATIENTID];
        END
    IF (@QueryType = 2)
        BEGIN
            SELECT @patient_id = [PATIENTID]
            FROM   (SELECT [MAP].[patient_id] AS [PATIENTID]
                    FROM   [dbo].[int_mrn_map] AS [MAP]
                           INNER JOIN
                           [dbo].[int_patient_monitor] AS [PATMON]
                           ON [PATMON].[patient_id] = [MAP].[patient_id]
                           INNER JOIN
                           [dbo].[int_monitor] AS [MONITOR]
                           ON [MONITOR].[monitor_id] = [PATMON].[monitor_id]
                           INNER JOIN
                           [dbo].[int_product_access] AS [ACCESS]
                           ON [ACCESS].[organization_id] = [MONITOR].[unit_org_id]
                           INNER JOIN
                           [dbo].[int_organization] AS [ORG]
                           ON [ORG].[organization_id] = [MONITOR].[unit_org_id]
                    WHERE  [MONITOR].[node_id] = @QueryItem
                           AND [PATMON].[active_sw] = 1
                           AND [merge_cd] = 'C'
                           AND [ORG].[organization_id] = [MONITOR].[unit_org_id]
                           AND [ACCESS].[product_cd] = 'outHL7'
                           AND [ORG].[category_cd] = 'D'
                    UNION
                    SELECT [DLPAT].[patient_id] AS [PATIENTID]
                    FROM   [dbo].[v_PatientSessions] AS [DLPAT]
                           INNER JOIN
                           [dbo].[int_product_access] AS [ACCESS]
                           ON [ACCESS].[organization_id] = [DLPAT].[UNIT_ID]
                           INNER JOIN
                           [dbo].[Devices] AS [DEV]
                           ON [DEV].[Id] = [DLPAT].[PATIENT_MONITOR_ID]
                           INNER JOIN
                           [dbo].[int_organization] AS [ORG]
                           ON [ORG].[organization_id] = [DLPAT].[UNIT_ID]
                    WHERE  [DEV].[Name] = @QueryItem
                           AND [STATUS] = 'A'
                           AND [ACCESS].[product_cd] = 'outHL7'
                           AND [ORG].[category_cd] = 'D') AS [PATIENTID];
        END
    IF (@QueryType = 3)
        BEGIN
            SELECT @patient_id = [PATIENTID]
            FROM   (SELECT [MAP].[patient_id] AS [PATIENTID]
                    FROM   [dbo].[int_mrn_map] AS [MAP]
                           INNER JOIN
                           [dbo].[int_patient_monitor] AS [PATMON]
                           ON [PATMON].[patient_id] = [MAP].[patient_id]
                           INNER JOIN
                           [dbo].[int_monitor] AS [MONITOR]
                           ON [MONITOR].[monitor_id] = [PATMON].[monitor_id]
                           INNER JOIN
                           [dbo].[int_product_access] AS [ACCESS]
                           ON [ACCESS].[organization_id] = [MONITOR].[unit_org_id]
                           INNER JOIN
                           [dbo].[int_organization] AS [ORG]
                           ON [ORG].[organization_id] = [MONITOR].[unit_org_id]
                    WHERE  [MONITOR].[monitor_name] = @QueryItem
                           AND [PATMON].[active_sw] = 1
                           AND [merge_cd] = 'C'
                           AND [ORG].[organization_id] = [MONITOR].[unit_org_id]
                           AND [ACCESS].[product_cd] = 'outHL7'
                           AND [ORG].[category_cd] = 'D'
                    UNION
                    SELECT [DLPAT].[patient_id] AS [PATIENTID]
                    FROM   [dbo].[v_PatientSessions] AS [DLPAT]
                           INNER JOIN
                           [dbo].[int_product_access] AS [ACCESS]
                           ON [ACCESS].[organization_id] = [DLPAT].[UNIT_ID]
                           INNER JOIN
                           [dbo].[Devices] AS [DEV]
                           ON [DEV].[Id] = [DLPAT].[DeviceId]
                           INNER JOIN
                           [dbo].[int_organization] AS [ORG]
                           ON [ORG].[organization_id] = [DLPAT].[UNIT_ID]
                    WHERE  [DLPAT].[BED] = @QueryItem
                           AND [STATUS] = 'A'
                           AND [ACCESS].[product_cd] = 'outHL7'
                           AND [ORG].[category_cd] = 'D') AS [PATIENTID];
        END
    RETURN @patient_id;
END

GO
CREATE FUNCTION [dbo].[fnDateTimeToFileTime]
(@DateTime DATETIME)
RETURNS BIGINT
WITH SCHEMABINDING
AS
BEGIN
    RETURN CASE WHEN @DateTime IS NULL THEN NULL ELSE (CAST (11644473600000 AS BIGINT) + DATEDIFF(SECOND, CAST ('1970-01-01 00:00:00' AS DATETIME), @DateTime) * CAST (1000 AS BIGINT) + DATEPART(MILLISECOND, @DateTime)) * CAST (10000 AS BIGINT) END;
END

GO
CREATE FUNCTION [dbo].[fnFileTimeToDateTime]
(@DateTime BIGINT)
RETURNS DATETIME
WITH SCHEMABINDING
AS
BEGIN
    RETURN CASE WHEN @DateTime IS NULL THEN NULL ELSE DATEADD(MILLISECOND, ((@DateTime) / CAST (10000 AS BIGINT)) % 86400000, DATEADD(DAY, @DateTime / CAST (864000000000 AS BIGINT) - 109207, 0)) END;
END

GO
CREATE FUNCTION [dbo].[fnLocalDateTimeToUtcTime]
(@DateTime DATETIME)
RETURNS DATETIME
WITH SCHEMABINDING
AS
BEGIN
    RETURN CASE WHEN @DateTime IS NULL THEN NULL ELSE DATEADD(MINUTE, DATEDIFF(MINUTE, GETDATE(), GETUTCDATE()), @DateTime) END;
END

GO
CREATE FUNCTION [dbo].[fnMarkIdAsDuplicate]
(@id VARCHAR (15))
RETURNS VARCHAR (15)
WITH SCHEMABINDING, RETURNS NULL ON NULL INPUT
AS
BEGIN
    RETURN CASE WHEN @id LIKE '*_*%' THEN CASE WHEN LEFT(@id, 3) = '***' THEN '*1*' + SUBSTRING(@id, 4, 12) WHEN SUBSTRING(@id, 2, 1) LIKE '[0-8]' THEN '*' + CAST (CAST (SUBSTRING(@id, 2, 1) AS INT) + 1 AS VARCHAR) + '*' + RIGHT(@id, 12) ELSE '***' + RIGHT(@id, 12) END ELSE '***' + RIGHT(@id, 12) END;
END

GO
CREATE FUNCTION [dbo].[fnUtcDateTimeToLocalTime]
(@DateTime DATETIME)
RETURNS DATETIME
WITH SCHEMABINDING
AS
BEGIN
    RETURN CASE WHEN @DateTime IS NULL THEN NULL ELSE DATEADD(MINUTE, DATEDIFF(MINUTE, GETUTCDATE(), GETDATE()), @DateTime) END;
END

GO
CREATE FUNCTION [dbo].[fnZeroIfBigger]
(@value INT, @maxValue INT)
RETURNS INT
WITH SCHEMABINDING
AS
BEGIN
    RETURN CASE WHEN @value > @maxValue THEN 0 ELSE @value END;
END

GO
CREATE FUNCTION [dbo].[FQDN]
( )
RETURNS VARCHAR (30)
AS
BEGIN
    DECLARE @Domain AS NVARCHAR (100);
    EXECUTE [master].[sys].[xp_regread] @rootkey = N'HKEY_LOCAL_MACHINE', @key = N'SYSTEM\CurrentControlSet\services\Tcpip\Parameters', @value_name = N'Domain', @value = @Domain OUTPUT;
    RETURN CASE WHEN @Domain IS NOT NULL THEN CAST (SERVERPROPERTY('MachineName') AS NVARCHAR (30)) + N'.' + @Domain ELSE CAST (SERVERPROPERTY('MachineName') AS NVARCHAR (30)) END;
END

GO
CREATE FUNCTION [dbo].[fn_Split]
(@sText VARCHAR (8000), @sDelim VARCHAR (20)=' ')
RETURNS 
    @retArray TABLE (
        [idx]   SMALLINT       NOT NULL PRIMARY KEY CLUSTERED ([idx] ASC),
        [value] VARCHAR (8000) NULL)
WITH SCHEMABINDING
AS
BEGIN
    DECLARE @idx AS SMALLINT = 0, @value AS VARCHAR (8000), @bcontinue AS BIT = 1, @iStrike AS SMALLINT, @iDelimlength AS TINYINT;
    IF (@sDelim = 'Space')
        BEGIN
            SET @sDelim = ' ';
        END
    SET @sText = LTRIM(RTRIM(@sText));
    SET @iDelimlength = DATALENGTH(@sDelim);
    IF NOT (@iDelimlength = 0
            OR @sDelim = 'Empty')
        BEGIN
            WHILE (@bcontinue = 1)
                BEGIN
                    IF (CHARINDEX(@sDelim, @sText) > 0)
                        BEGIN
                            SET @value = SUBSTRING(@sText, 1, CHARINDEX(@sDelim, @sText) - 1);
                            BEGIN
                                INSERT  @retArray ([idx], [value])
                                VALUES           (@idx, @value);
                            END
                            SET @iStrike = DATALENGTH(@value) + @iDelimlength;
                            SET @idx = @idx + 1;
                            SET @sText = LTRIM(RIGHT(@sText, DATALENGTH(@sText) - @iStrike));
                        END
                    ELSE
                        BEGIN
                            SET @value = @sText;
                            BEGIN
                                INSERT  @retArray ([idx], [value])
                                VALUES           (@idx, @value);
                            END
                            SET @bcontinue = 0;
                        END
                END
        END
    ELSE
        BEGIN
            WHILE (@bcontinue = 1)
                BEGIN
                    IF (DATALENGTH(@sText) > 1)
                        BEGIN
                            SET @value = SUBSTRING(@sText, 1, 1);
                            BEGIN
                                INSERT  @retArray ([idx], [value])
                                VALUES           (@idx, @value);
                            END
                            SET @idx += 1;
                            SET @sText = SUBSTRING(@sText, 2, DATALENGTH(@sText) - 1);
                        END
                    ELSE
                        BEGIN
                            INSERT  @retArray ([idx], [value])
                            VALUES           (@idx, @sText);
                            SET @bcontinue = 0;
                        END
                END
        END
    RETURN;
END

GO
CREATE FUNCTION [dbo].[fn_Vital_Merge]
(@InputStrings [dbo].[VitalValues] READONLY, @sDelim VARCHAR (20)=' ')
RETURNS 
    @retArray TABLE (
        [idx]   SMALLINT       NOT NULL PRIMARY KEY CLUSTERED ([idx] ASC),
        [value] VARCHAR (8000) NULL)
WITH SCHEMABINDING
AS
BEGIN
    DECLARE @VitalsCombine AS VARCHAR (MAX) = '', @VitalsPatientRowCount AS INT = 0;
    SELECT @VitalsPatientRowCount = COUNT([VitalValue])
    FROM   @InputStrings;
    WHILE (@VitalsPatientRowCount > 0)
        BEGIN
            IF (@VitalsCombine <> '')
                SET @VitalsCombine += @sDelim + (SELECT [VitalValue]
                                                 FROM   @InputStrings
                                                 WHERE  [Id] = @VitalsPatientRowCount);
            ELSE
                SET @VitalsCombine = (SELECT [VitalValue]
                                      FROM   @InputStrings
                                      WHERE  [Id] = @VitalsPatientRowCount);
            SET @VitalsPatientRowCount -= 1;
        END
    INSERT INTO @retArray ([idx], [value])
    SELECT [idx],
           [value]
    FROM   [dbo].[fn_Split](@VitalsCombine, @sDelim);
    RETURN;
END

GO
CREATE FUNCTION [dbo].[fntDateTimeToFileTime]
(@DateTime DATETIME)
RETURNS TABLE 
WITH SCHEMABINDING
AS
RETURN 
    SELECT CASE WHEN @DateTime IS NULL THEN NULL ELSE (CAST (11644473600000 AS BIGINT) + DATEDIFF(ss, CAST ('1970-01-01 00:00:00' AS DATETIME), @DateTime) * CAST (1000 AS BIGINT) + DATEPART(Ms, @DateTime)) * CAST (10000 AS BIGINT) END AS [FileTime]


GO
CREATE FUNCTION [dbo].[fntFileTimeToDateTime]
(@DateTime BIGINT)
RETURNS TABLE 
WITH SCHEMABINDING
AS
RETURN 
    SELECT CASE WHEN @DateTime IS NULL THEN NULL ELSE DATEADD(ms, ((@DateTime) / CAST (10000 AS BIGINT)) % 86400000, DATEADD(DAY, @DateTime / CAST (864000000000 AS BIGINT) - 109207, 0)) END AS [DateTime]


GO
CREATE FUNCTION [dbo].[fntFileTimeToUtc]
(@FtValue BIGINT)
RETURNS TABLE 
WITH SCHEMABINDING
AS
RETURN 
    SELECT CASE WHEN @FtValue IS NULL THEN NULL ELSE DATEADD(mi, DATEDIFF(mi, GETDATE(), GETUTCDATE()), DATEADD(ms, ((@FtValue) / CAST (10000 AS BIGINT)) % 86400000, DATEADD(DAY, @FtValue / CAST (864000000000 AS BIGINT) - 109207, 0))) END AS [DateTimeUTC]


GO
CREATE FUNCTION [dbo].[fntUtcDateTimeToLocalTime]
(@DateTime DATETIME)
RETURNS TABLE 
WITH SCHEMABINDING
AS
RETURN 
    SELECT CASE WHEN @DateTime IS NULL THEN NULL ELSE DATEADD(mi, DATEDIFF(mi, GETUTCDATE(), GETDATE()), @DateTime) END AS [LocalDateTime]


GO
CREATE FUNCTION [dbo].[fntZeroIfBigger]
(@value INT, @maxValue INT)
RETURNS TABLE 
WITH SCHEMABINDING
AS
RETURN 
    SELECT CASE WHEN @value > @maxValue THEN 0 ELSE @value END AS [ReturnValue]


GO
CREATE FUNCTION [dbo].[ufnDeviceSessionInfo]
(@DeviceSessionId UNIQUEIDENTIFIER, @Name NVARCHAR (25))
RETURNS TABLE 
WITH SCHEMABINDING
AS
RETURN 
    SELECT [LatestDeviceInfo].[Value]
    FROM   (SELECT [did].[Value],
                   ROW_NUMBER() OVER (PARTITION BY [did].[DeviceSessionId] ORDER BY [did].[TimestampUTC] DESC) AS [RowNumber]
            FROM   [dbo].[DeviceInfoData] AS [did]
            WHERE  [did].[DeviceSessionId] = @DeviceSessionId
                   AND [did].[Name] = @Name) AS [LatestDeviceInfo]
    WHERE  [LatestDeviceInfo].[RowNumber] = 1


GO
CREATE PROCEDURE [dbo].[AssignUserRole]
@user_id UNIQUEIDENTIFIER, @user_role_id UNIQUEIDENTIFIER, @user_sid NVARCHAR (68), @login_name NVARCHAR (64)
AS
BEGIN
    INSERT  INTO [dbo].[int_user] ([user_id], [user_role_id], [user_sid], [login_name])
    VALUES                       (@user_id, @user_role_id, @user_sid, @login_name);
END

GO
CREATE PROCEDURE [dbo].[Change_Starter_Set]
@lang_code VARCHAR (5)
AS
BEGIN
    DECLARE @sql AS VARCHAR (2000);
    SELECT [set_type_cd],
           [guid],
           [int_id1],
           [int_id2],
           [int_id3],
           [enu],
           [enu] AS [TO_LANG]
    INTO   [#TMP_STARTER_SET]
    FROM   [dbo].[int_starter_set]
    WHERE  1 = 0;
    SET @sql = 'SELECT [set_type_cd], [guid], [int_id1], [int_id2], [int_id3], [enu], [' + @lang_code + '] AS [TO_LANG] FROM [dbo].[int_starter_set];';
    INSERT INTO [#TMP_STARTER_SET]
    EXECUTE (@sql);
    UPDATE [dbo].[int_misc_code]
    SET    [int_keystone_cd] = [TO_LANG]
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'GDS-U'
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id1]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id2]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id3];
    UPDATE [dbo].[int_misc_code]
    SET    [short_dsc] = [TO_LANG]
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'GDS'
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id1]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id2]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id3];
    UPDATE [dbo].[int_misc_code]
    SET    [int_keystone_cd] = [TO_LANG]
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'HL7-U'
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id1]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id2]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id3];
    UPDATE [dbo].[int_misc_code]
    SET    [short_dsc] = [TO_LANG]
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'HL7'
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id1]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id2]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id3];
    UPDATE [dbo].[int_misc_code]
    SET    [short_dsc] = [TO_LANG]
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'S5N'
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id1]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id2]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id3];
    UPDATE [dbo].[int_misc_code]
    SET    [int_keystone_cd] = [TO_LANG]
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'S5N-U'
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id1]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id2]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id3];
    UPDATE [dbo].[int_misc_code]
    SET    [short_dsc] = [TO_LANG]
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'SLOG'
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id1]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id2]
           AND [int_misc_code].[code_id] = [#TMP_STARTER_SET].[int_id3];
    UPDATE [dbo].[int_organization]
    SET    [organization_nm] = [TO_LANG]
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'ORG'
           AND [int_organization].[organization_id] = [#TMP_STARTER_SET].[guid];
    UPDATE [dbo].[int_test_group]
    SET    [node_name] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'TG'
           AND [#TMP_STARTER_SET].[int_id1] = [int_test_group].[node_id];
    UPDATE [dbo].[int_test_group_detail]
    SET    [nm] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'TGD'
           AND [#TMP_STARTER_SET].[int_id1] = [int_test_group_detail].[node_id]
           AND ISNULL([#TMP_STARTER_SET].[int_id2], -999) = ISNULL([int_test_group_detail].[univ_svc_cid], -999)
           AND ISNULL([#TMP_STARTER_SET].[int_id3], -999) = ISNULL([int_test_group_detail].[test_cid], -999);
    UPDATE [dbo].[int_misc_code]
    SET    [short_dsc] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'TGD'
           AND [#TMP_STARTER_SET].[int_id2] = [int_misc_code].[code_id]
           AND [#TMP_STARTER_SET].[int_id3] IS NULL
           AND [int_misc_code].[category_cd] = 'USID';
    UPDATE [dbo].[int_misc_code]
    SET    [short_dsc] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'TGD'
           AND [#TMP_STARTER_SET].[int_id2] IS NULL
           AND [#TMP_STARTER_SET].[int_id3] = [int_misc_code].[code_id]
           AND [int_misc_code].[category_cd] = 'ATST';
    UPDATE [dbo].[int_order_group]
    SET    [node_name] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'OG'
           AND [#TMP_STARTER_SET].[int_id1] = [int_order_group].[node_id];
    UPDATE [dbo].[int_misc_code]
    SET    [short_dsc] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'OGD'
           AND [#TMP_STARTER_SET].[int_id1] = [int_misc_code].[code_id]
           AND [int_misc_code].[category_cd] = 'USID';
    UPDATE [dbo].[int_site_link]
    SET    [group_name] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'SLG'
           AND [#TMP_STARTER_SET].[int_id1] = [int_site_link].[group_rank];
    UPDATE [dbo].[int_site_link]
    SET    [display_name] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'SL'
           AND [#TMP_STARTER_SET].[guid] = [int_site_link].[link_id];
    UPDATE [dbo].[int_environment]
    SET    [display_name] = ISNULL([TO_LANG], N'')
    FROM   [#TMP_STARTER_SET]
    WHERE  [set_type_cd] = N'EL'
           AND [#TMP_STARTER_SET].[guid] = [int_environment].[env_id];
    DROP TABLE [#TMP_STARTER_SET];
END

GO
CREATE PROCEDURE [dbo].[ChangeUserRole]
@user_id UNIQUEIDENTIFIER, @user_role_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_user]
    SET    [user_role_id] = @user_role_id
    WHERE  [user_id] = @user_id;
END

GO
CREATE PROCEDURE [dbo].[ClearAuditLogData]
@PatientId [dbo].[DPATIENT_ID]
AS
BEGIN
    SET NOCOUNT ON;
    DELETE [dbo].[AuditLogData]
    WHERE  [PatientID] = @PatientId;
END

GO
CREATE PROCEDURE [dbo].[ClearEventLogData]
@PatientId [dbo].[DPATIENT_ID], @StartDate DATETIME
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @CheckedStartDate AS DATETIME;
    SET @CheckedStartDate = ISNULL(@StartDate, CAST ('9999-12-31' AS DATETIME));
    IF (@PatientId IS NULL)
        BEGIN
            DELETE [ld]
            FROM   [dbo].[LogData] AS [ld]
            WHERE  [ld].[DateTime] < @CheckedStartDate;
        END
    ELSE
        BEGIN
            DELETE [ld]
            FROM   [dbo].[LogData] AS [ld]
            WHERE  [ld].[PatientID] = @PatientId
                   AND [ld].[DateTime] < @CheckedStartDate;
        END
END

GO
CREATE PROCEDURE [dbo].[CreateRole]
@role_Id UNIQUEIDENTIFIER, @role_name VARCHAR (64), @role_desc VARCHAR (510), @xml_data XML
AS
BEGIN
    INSERT  INTO [dbo].[int_user_role] ([user_role_id], [role_name], [role_desc])
    VALUES                            (@role_Id, CAST (@role_name AS NVARCHAR (32)), CAST (@role_desc AS NVARCHAR (255)));
    INSERT  INTO [dbo].[int_security] ([user_role_id], [xml_data])
    VALUES                           (@role_Id, @xml_data);
END

GO
CREATE PROCEDURE [dbo].[CreateUser]
@user_role_id UNIQUEIDENTIFIER, @login_name NVARCHAR (64)
AS
BEGIN
    DECLARE @user_id AS UNIQUEIDENTIFIER = NEWID();
    INSERT  INTO [dbo].[int_user] ([user_id], [user_role_id], [user_sid], [login_name])
    VALUES                       (@user_id, @user_role_id, NULL, @login_name);
    SELECT @user_id AS [USERID];
END

GO
CREATE PROCEDURE [dbo].[DeleteAnalysisTime]
@UserID UNIQUEIDENTIFIER, @PatientId UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [dbo].[AnalysisTime]
    WHERE  ([user_id] = @UserID
            AND [patient_id] = @PatientId);
END

GO
CREATE PROCEDURE [dbo].[DeleteBeatTimeLog]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @SampleRate SMALLINT
AS
BEGIN
    DELETE [ibtl]
    FROM   [dbo].[int_beat_time_log] AS [ibtl]
    WHERE  [ibtl].[user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [ibtl].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [ibtl].[sample_rate] = @SampleRate;
END

GO
CREATE PROCEDURE [dbo].[DeleteBinInfo]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @TemplateSetIndex INT
AS
BEGIN
    DELETE [ibi]
    FROM   [dbo].[int_bin_info] AS [ibi]
    WHERE  [ibi].[user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [ibi].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [ibi].[template_set_index] = @TemplateSetIndex;
END

GO
CREATE PROCEDURE [dbo].[DeleteEventData]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID]
AS
BEGIN
    DELETE [ae]
    FROM   [dbo].[AnalysisEvents] AS [ae]
    WHERE  [ae].[user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [ae].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[DeletePacerSpikeLog]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @SampleRate SMALLINT
AS
BEGIN
    DELETE [dbo].[PacerSpikeLog]
    WHERE  [user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [sample_rate] = @SampleRate;
END

GO
CREATE PROCEDURE [dbo].[DeletePatientSavedEvent]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [ise]
    FROM   [dbo].[int_SavedEvent] AS [ise]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
    DELETE [isew]
    FROM   [dbo].[int_savedevent_waveform] AS [isew]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
    DELETE [isebtl]
    FROM   [dbo].[int_savedevent_beat_time_log] AS [isebtl]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
    DELETE [isec]
    FROM   [dbo].[int_savedevent_calipers] AS [isec]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
    DELETE [iseel]
    FROM   [dbo].[int_savedevent_event_log] AS [iseel]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
    DELETE [isev]
    FROM   [dbo].[int_savedevent_vitals] AS [isev]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
END

GO
CREATE PROCEDURE [dbo].[DeletePatientTwelveLeadReport]
@report_id UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [dbo].[int_12lead_report]
    WHERE  ([report_id] = @report_id);
END

GO
CREATE PROCEDURE [dbo].[DeleteRestrictedUnits]
@user_role_id UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [dbo].[cdr_restricted_organization]
    WHERE  [user_role_id] = @user_role_id;
END

GO
CREATE PROCEDURE [dbo].[DeleteRole]
@role_Id UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [iur]
    FROM   [dbo].[int_user_role] AS [iur]
    WHERE  [user_role_id] = @role_Id;
    DELETE [is]
    FROM   [dbo].[int_security] AS [is]
    WHERE  [user_role_id] = @role_Id
           AND [user_id] IS NULL;
    DELETE [iu]
    FROM   [dbo].[int_user] AS [iu]
    WHERE  [user_role_id] = @role_Id;
END

GO
CREATE PROCEDURE [dbo].[DeleteTemplateSetInfo]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @TemplateSetIndex INT
AS
BEGIN
    DELETE [dbo].[int_template_set_info]
    WHERE  [user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [template_set_index] = @TemplateSetIndex;
END

GO
CREATE PROCEDURE [dbo].[DeleteTrendData]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID]
AS
BEGIN
    DELETE [dbo].[TrendData]
    WHERE  [user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[DeleteUnitSetting]
@UnitID UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [dbo].[cfgValuesUnit]
    WHERE  [unit_id] = @UnitID;
END

GO
CREATE PROCEDURE [dbo].[DeleteUnitSettingByType]
@UnitID UNIQUEIDENTIFIER, @TypeCd VARCHAR (25), @CfgName VARCHAR (40)
AS
BEGIN
    DELETE [dbo].[cfgValuesUnit]
    WHERE  [unit_id] = @UnitID
           AND [type_cd] = @TypeCd
           AND [cfg_name] = @CfgName;
END

GO
CREATE PROCEDURE [dbo].[DeleteUser]
@user_Id UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [iu]
    FROM   [dbo].[int_user] AS [iu]
    WHERE  [user_id] = @user_Id;
    DELETE [is]
    FROM   [dbo].[int_security] AS [is]
    WHERE  [is].[user_id] = @user_Id;
END

GO
CREATE PROCEDURE [dbo].[Fix_FlowSheet_Detail]
AS
BEGIN
    DECLARE @detail_id AS UNIQUEIDENTIFIER, @org_id AS UNIQUEIDENTIFIER, @sys_id AS UNIQUEIDENTIFIER, @name AS VARCHAR (60), @test_cid AS INT, @code_id AS INT, @code AS VARCHAR (20);
    SELECT @sys_id = [sys_id],
           @org_id = [organization_id]
    FROM   [dbo].[int_send_sys]
    WHERE  [code] = N'GTWY';
    DECLARE [TCURSOR] CURSOR FAST_FORWARD
        FOR SELECT [flowsheet_detail_id],
                   [name],
                   [test_cid]
            FROM   [dbo].[int_flowsheet_detail]
            WHERE  [detail_type] = N'fdtSub';
    OPEN [TCURSOR];
    FETCH NEXT FROM [TCURSOR] INTO @detail_id, @name, @test_cid;
    WHILE (@@FETCH_STATUS = 0)
        BEGIN
            SELECT @detail_id,
                   @name,
                   @test_cid;
            SELECT @code_id = MAX([code_id]) + 1
            FROM   [dbo].[int_misc_code];
            SELECT @code = CONVERT (VARCHAR (20), @code_id);
            INSERT  INTO [dbo].[int_misc_code] ([code_id], [organization_id], [sys_id], [category_cd], [method_cd], [code], [verification_sw], [int_keystone_cd], [short_dsc])
            VALUES                            (@code_id, @org_id, @sys_id, 'ATST', N'GDS', @code, NULL, @name, @name);
            UPDATE [dbo].[int_flowsheet_detail]
            SET    [test_cid] = @code_id
            WHERE  [flowsheet_detail_id] = @detail_id;
            FETCH NEXT FROM [TCURSOR] INTO @detail_id, @name, @test_cid;
        END
    CLOSE [TCURSOR];
    DEALLOCATE [TCURSOR];
END

GO
CREATE PROCEDURE [dbo].[GetAccessSettings]
@role_Id UNIQUEIDENTIFIER
AS
BEGIN
    IF (@role_Id IS NULL)
        BEGIN
            SELECT [xml_data]
            FROM   [dbo].[int_security]
            WHERE  [user_role_id] IS NULL
                   AND [user_id] IS NULL;
        END
    ELSE
        BEGIN
            SELECT [xml_data]
            FROM   [dbo].[int_security]
            WHERE  [user_role_id] = @role_Id
                   AND [user_id] IS NULL;
        END
END

GO
CREATE PROCEDURE [dbo].[GetAllRoles]
AS
BEGIN
    SELECT [user_role_id],
           [role_name],
           [role_desc]
    FROM   [dbo].[int_user_role];
END

GO
CREATE PROCEDURE [dbo].[GetAnalysisTime]
@UserID UNIQUEIDENTIFIER, @PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [start_ft],
           [end_ft],
           [analysis_type]
    FROM   [dbo].[AnalysisTime]
    WHERE  [user_id] = @UserID
           AND [patient_id] = @PatientId;
END

GO
CREATE PROCEDURE [dbo].[GetAuditLogData]
@StartDate DATETIME, @EndDate DATETIME, @ItemName VARCHAR (256), @PatientId [dbo].[DPATIENT_ID], @Application VARCHAR (256), @DeviceName VARCHAR (256)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [AuditId],
           [DateTime],
           [PatientID],
           [Application],
           [DeviceName],
           [Message],
           [ItemName],
           [OriginalValue],
           [NewValue],
           [HashedValue],
           [ChangedBy]
    FROM   [dbo].[AuditLogData]
    WHERE  [DateTime] >= @StartDate
           AND [DateTime] <= @EndDate
           AND ([ItemName] = @ItemName
                OR @ItemName IS NULL)
           AND ([PatientID] = @PatientId
                OR @PatientId IS NULL)
           AND ([DeviceName] = @DeviceName
                OR @DeviceName IS NULL)
           AND ([Application] = @Application
                OR @Application IS NULL);
END

GO
CREATE PROCEDURE [dbo].[GetDefaultSettingNameList]
@type_cd VARCHAR (25)
AS
BEGIN
    SELECT [cfg_name] AS [CFGNAME]
    FROM   [dbo].[cfgValuesFactory]
    WHERE  [type_cd] = @type_cd;
END

GO
CREATE PROCEDURE [dbo].[GetETAlarms]
@PatientId UNIQUEIDENTIFIER, @AlarmType BIGINT, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    DECLARE @end_dt AS DATETIME = [dbo].[fnFileTimeToDateTime](@EndTime), @start_dt AS DATETIME = [dbo].[fnFileTimeToDateTime](@StartTime);
    SELECT   [gad].[IDEnumValue] AS [TYPE],
             [dbo].[fnDateTimeToFileTime]([gad].[StartDateTime]) AS [FT_START],
             [dbo].[fnDateTimeToFileTime]([gad].[EndDateTime]) AS [FT_END]
    FROM     [dbo].[GeneralAlarmsData] AS [gad]
             INNER JOIN
             [dbo].[v_PatientTopicSessions] AS [vpts]
             ON [vpts].[TopicSessionId] = [gad].[TopicSessionId]
    WHERE    [vpts].[PatientId] = @PatientId
             AND [gad].[IDEnumValue] = @AlarmType
             AND ([gad].[EndDateTime] >= @start_dt
                  AND [gad].[EndDateTime] <= @end_dt
                  OR [gad].[StartDateTime] >= @start_dt
                     AND [gad].[StartDateTime] <= @end_dt)
             AND [gad].[EnumGroupId] = CAST ('F6DE38B7-B737-AE89-7486-CF67C64ECF3F' AS UNIQUEIDENTIFIER)
    ORDER BY [gad].[StartDateTime];
END

GO
CREATE PROCEDURE [dbo].[GetETBeatTimeLog]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [ed].[Type] AS [TYPE],
             [ed].[Subtype] AS [Subtype],
             [ed].[Value1] AS [VALUE1],
             [ed].[Value2] AS [VALUE2],
             [ed].[Status] AS [STATUS_VALUE],
             [ed].[Valid_Leads] AS [LEADS],
             [TimestampUTCFileTime].[FileTime] AS [FT_TIME]
    FROM     [dbo].[EventsData] AS [ed]
             INNER JOIN
             [dbo].[v_PatientTopicSessions] AS [vpts]
             ON [vpts].[TopicSessionId] = [ed].[TopicSessionId] CROSS APPLY [dbo].[fntDateTimeToFileTime]([ed].[TimestampUTC]) AS [TimestampUTCFileTime]
    WHERE    [vpts].[PatientId] = @patient_id
             AND [ed].[CategoryValue] = 0
    ORDER BY [ed].[TimestampUTC];
END

GO
CREATE PROCEDURE [dbo].[GetETEventsBySubtype]
@patient_id UNIQUEIDENTIFIER, @Subtype INT, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    DECLARE @StartTime_dt AS DATETIME = [dbo].[fnFileTimeToDateTime](@StartTime);
    SELECT ISNULL([EndOrUpdateEventsData].[Value1], [AllRhythmEvents].[StartValue1]) AS [VALUE1],
           ISNULL([EndOrUpdateEventsData].[Value2], [AllRhythmEvents].[StartValue2]) AS [VALUE2],
           ISNULL([EndOrUpdateEventsData].[Status], [AllRhythmEvents].[StartStatus]) AS [STATUS_VALUE],
           ISNULL([EndOrUpdateEventsData].[Valid_Leads], [AllRhythmEvents].[StartValidLeads]) AS [LEADS],
           [dbo].[fnDateTimeToFileTime]([AllRhythmEvents].[StartTime]) AS [FT_TIME_START],
           [dbo].[fnDateTimeToFileTime]([AllRhythmEvents].[EndOrUpdateTime]) AS [FT_TIME_END],
           [AllRhythmEvents].[StartTime],
           [AllRhythmEvents].[EndOrUpdateTime]
    FROM   (SELECT [EventsDataStart].[Value1] AS [StartValue1],
                   [EventsDataStart].[Value2] AS [StartValue2],
                   [EventsDataStart].[Status] AS [StartStatus],
                   [EventsDataStart].[Valid_Leads] AS [StartValidLeads],
                   [EventsDataStart].[TopicSessionId],
                   [EventsDataStart].[CategoryValue],
                   [EventsDataStart].[Subtype],
                   [EventsDataStart].[TimestampUTC] AS [StartTime],
                   (SELECT COALESCE ((SELECT   TOP (1) [EventsDataEnd].[TimestampUTC]
                                      FROM     [dbo].[EventsData] AS [EventsDataEnd]
                                      WHERE    [EventsDataEnd].[Type] = 4
                                               AND [EventsDataEnd].[CategoryValue] = 2
                                               AND [EventsDataEnd].[Subtype] = @Subtype
                                               AND [EventsDataEnd].[TopicSessionId] = [EventsDataStart].[TopicSessionId]
                                               AND [EventsDataEnd].[TimestampUTC] > [EventsDataStart].[TimestampUTC]
                                      ORDER BY [EventsDataEnd].[TimestampUTC] ASC), (SELECT   TOP (1) [EventsDataUpdate].[TimestampUTC]
                                                                                     FROM     [dbo].[EventsData] AS [EventsDataUpdate]
                                                                                     WHERE    [EventsDataUpdate].[Type] = 12
                                                                                              AND [EventsDataUpdate].[CategoryValue] = 2
                                                                                              AND [EventsDataUpdate].[Subtype] = @Subtype
                                                                                              AND [EventsDataUpdate].[TopicSessionId] = [EventsDataStart].[TopicSessionId]
                                                                                              AND [EventsDataUpdate].[TimestampUTC] > [EventsDataStart].[TimestampUTC]
                                                                                     ORDER BY [EventsDataUpdate].[TimestampUTC] DESC), (SELECT [EndTimeUTC]
                                                                                                                                        FROM   [dbo].[TopicSessions]
                                                                                                                                        WHERE  [Id] = [EventsDataStart].[TopicSessionId]))) AS [EndOrUpdateTime]
            FROM   [dbo].[EventsData] AS [EventsDataStart]
                   INNER JOIN
                   [dbo].[v_PatientTopicSessions] AS [vpts]
                   ON [vpts].[TopicSessionId] = [EventsDataStart].[TopicSessionId]
            WHERE  [vpts].[PatientId] = @patient_id
                   AND [EventsDataStart].[Type] = 3
                   AND [EventsDataStart].[CategoryValue] = 2
                   AND [EventsDataStart].[Subtype] = @Subtype) AS [AllRhythmEvents]
           LEFT OUTER JOIN
           [dbo].[EventsData] AS [EndOrUpdateEventsData]
           ON [EndOrUpdateEventsData].[CategoryValue] = [AllRhythmEvents].[CategoryValue]
              AND [EndOrUpdateEventsData].[Subtype] = [AllRhythmEvents].[Subtype]
              AND [EndOrUpdateEventsData].[TopicSessionId] = [AllRhythmEvents].[TopicSessionId]
              AND [EndOrUpdateEventsData].[TimestampUTC] = [AllRhythmEvents].[EndOrUpdateTime]
    WHERE  ([AllRhythmEvents].[EndOrUpdateTime] IS NULL
            OR [AllRhythmEvents].[EndOrUpdateTime] > @StartTime_dt);
END

GO
CREATE PROCEDURE [dbo].[GetETEventsByType]
@patient_id UNIQUEIDENTIFIER, @Category INT, @Type INT, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    SELECT   DISTINCT [CategoryValue] AS [CATEGORY_VALUE],
                      [Type] AS [TYPE],
                      [Subtype] AS [Subtype],
                      [Value1] AS [VALUE1],
                      [Value2] AS [VALUE2],
                      [Status] AS [STATUS_VALUE],
                      [Valid_Leads] AS [LEADS],
                      [dbo].[fnDateTimeToFileTime]([TimestampUTC]) AS [FT_TIME],
                      [pts].[PatientId] AS [patient_id]
    FROM     [dbo].[EventsData] AS [ev]
             INNER JOIN
             [dbo].[TopicSessions]
             ON [TopicSessions].[Id] = [ev].[TopicSessionId]
             INNER JOIN
             [dbo].[v_PatientTopicSessions] AS [pts]
             ON [TopicSessions].[Id] = [pts].[TopicSessionId]
    WHERE    [pts].[PatientId] = @patient_id
             AND [CategoryValue] = @Category
             AND [Type] = @Type
             AND ([dbo].[fnDateTimeToFileTime]([TimestampUTC]) >= @StartTime)
             AND ([dbo].[fnDateTimeToFileTime]([TimestampUTC]) <= @EndTime)
    ORDER BY [FT_TIME];
END

GO
CREATE PROCEDURE [dbo].[GetETStatusEvents]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [ed].[Subtype] AS [Subtype],
             [ed].[Value1] AS [VALUE1],
             [ed].[Status] AS [STATUS_VALUE],
             [ed].[Valid_Leads] AS [LEADS],
             [dbo].[fnDateTimeToFileTime]([ed].[TimestampUTC]) AS [FT_TIME],
             @patient_id AS [patient_id],
             ISNULL([dbo].[fnDateTimeToFileTime]([ts].[EndTimeUTC]), -1) AS [MAX_FT_TIME]
    FROM     [dbo].[EventsData] AS [ed]
             INNER JOIN
             [dbo].[v_PatientTopicSessions] AS [vpts]
             ON [vpts].[TopicSessionId] = [ed].[TopicSessionId]
             INNER JOIN
             [dbo].[TopicSessions] AS [ts]
             ON [ts].[Id] = [ed].[TopicSessionId]
    WHERE    [vpts].[PatientId] = @patient_id
             AND [ed].[CategoryValue] = 2
             AND [ed].[Type] = 1
    ORDER BY [FT_TIME];
END

GO
CREATE PROCEDURE [dbo].[GetETTechAlarms]
@PatientId UNIQUEIDENTIFIER, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    DECLARE @end_dt AS DATETIME = [dbo].[fnFileTimeToDateTime](@EndTime);
    DECLARE @start_dt AS DATETIME = [dbo].[fnFileTimeToDateTime](@StartTime);
    SELECT   [EndAlarmPackets].[IDEnumValue] AS [ALARM_TYPE],
             [dbo].[fnDateTimeToFileTime]([EndAlarmPackets].[StartDateTime]) AS [FT_START],
             [dbo].[fnDateTimeToFileTime]([EndAlarmPackets].[EndDateTime]) AS [FT_END]
    FROM     (SELECT ROW_NUMBER() OVER (PARTITION BY [gad].[AlarmId] ORDER BY [gad].[AcquiredDateTimeUTC] DESC) AS [RowNumber],
                     [gad].[StartDateTime],
                     [gad].[EndDateTime],
                     [gad].[IDEnumValue],
                     [gad].[TopicSessionId]
              FROM   [dbo].[GeneralAlarmsData] AS [gad]
              WHERE  [gad].[TopicSessionId] IN (SELECT [vpts].[TopicSessionId]
                                                FROM   [dbo].[v_PatientTopicSessions] AS [vpts]
                                                WHERE  [vpts].[PatientId] = @PatientId)
                     AND [gad].[IDEnumValue] IN (105, 102, 204)
                     AND ([gad].[EndDateTime] >= @start_dt
                          AND [gad].[EndDateTime] <= @end_dt
                          OR [gad].[StartDateTime] >= @start_dt
                             AND [gad].[StartDateTime] <= @end_dt)) AS [EndAlarmPackets]
    WHERE    [EndAlarmPackets].[RowNumber] = 1
    ORDER BY [EndAlarmPackets].[IDEnumValue], [EndAlarmPackets].[StartDateTime];
END

GO
CREATE PROCEDURE [dbo].[GetFacilities]
AS
BEGIN
    SELECT   [ORG].[organization_id] AS [FACILITY_ID],
             [ORG].[organization_cd] AS [FACILITY_CODE],
             [ORG].[organization_nm] AS [FACILITY_NAME]
    FROM     [dbo].[int_organization] AS [ORG]
    WHERE    [ORG].[category_cd] = 'F'
    ORDER BY [ORG].[organization_cd];
END

GO
CREATE PROCEDURE [dbo].[GetFacilityNameByUnitId]
@unit_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [organization_nm]
    FROM   [dbo].[int_organization]
    WHERE  [organization_id] = (SELECT [io].[parent_organization_id]
                                FROM   [dbo].[int_organization] AS [io]
                                WHERE  [io].[organization_id] = @unit_id);
END

GO
CREATE PROCEDURE [dbo].[GetGDSChannelList]
AS
BEGIN
    SELECT   [ch].[channel_type_id] AS [CHANNEL_TYPE_ID],
             [channel_code] AS [CODE],
             [label] AS [LABEL],
             [freq] AS [FREQUENCY],
             [min_value] AS [MIN_VALUE],
             [max_value] AS [MAX_VALUE],
             [sweep_speed] AS [SWEEP_SPEED],
             [priority] AS [priority],
             [type_cd] AS [TYPE_CD],
             [color] AS [COLOR],
             [units] AS [UNITS],
             [short_dsc] AS [SHORT_DESCRIPTION],
             [format_string] AS [FORMAT_STRING]
    FROM     [dbo].[int_channel_type] AS [ch]
             INNER JOIN
             [dbo].[int_misc_code] AS [mc]
             ON [ch].[gds_cid] = [mc].[code_id]
             INNER JOIN
             [dbo].[int_channel_vital] AS [chv]
             ON [ch].[channel_type_id] = [chv].[channel_type_id]
    UNION ALL
    SELECT   [vlct].[ChannelTypeId] AS [CHANNEL_TYPE_ID],
             [vlct].[ChannelCode] AS [CODE],
             [vlct].[label] AS [LABEL],
             [vlct].[SampleRate] AS [FREQUENCY],
             [ch].[min_value] AS [MIN_VALUE],
             [ch].[max_value] AS [MAX_VALUE],
             [ch].[sweep_speed] AS [SWEEP_SPEED],
             [ch].[priority] AS [priority],
             [ch].[type_cd] AS [TYPE_CD],
             [ch].[color] AS [COLOR],
             [ch].[units] AS [UNITS],
             NULL AS [SHORT_DESCRIPTION],
             [format_string] AS [FORMAT_STRING]
    FROM     [dbo].[v_LegacyChannelTypes] AS [vlct]
             LEFT OUTER JOIN
             [dbo].[int_channel_type] AS [ch]
             ON [ch].[channel_code] = [vlct].[ChannelCode]
             INNER JOIN
             [dbo].[int_channel_vital] AS [chv]
             ON [ch].[channel_type_id] = [chv].[channel_type_id]
    ORDER BY [CHANNEL_TYPE_ID], [FORMAT_STRING];
END

GO
CREATE PROCEDURE [dbo].[GetIntCfgValues]
@keyname [dbo].[DKEY_NAME]
AS
BEGIN
    SELECT [keyvalue] AS [KEY_VALUE]
    FROM   [dbo].[int_cfg_values]
    WHERE  [keyname] = @keyname;
END

GO
CREATE PROCEDURE [dbo].[GetLeadList]
@PatientId [dbo].[DUSER_ID], @TimeTagType INT, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    SELECT   [ipt].[param_ft],
             [ipt].[value1],
             [ipt].[value2]
    FROM     [dbo].[int_param_timetag] AS [ipt]
             LEFT OUTER JOIN
             [dbo].[v_DiscardedOverlappingLegacyWaveformData] AS [discarded]
             ON [discarded].[patient_channel_id] = [ipt].[patient_channel_id]
                AND [ipt].[param_ft] BETWEEN [discarded].[start_ft] AND [discarded].[end_ft]
    WHERE    [ipt].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
             AND [ipt].[timetag_type] = @TimeTagType
             AND [ipt].[param_ft] >= @StartTime
             AND [ipt].[param_ft] <= @EndTime
             AND [discarded].[patient_channel_id] IS NULL
    ORDER BY [ipt].[param_ft];
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientAlarms]
@patient_id UNIQUEIDENTIFIER, @start_ft BIGINT, @end_ft BIGINT, @locale VARCHAR (7)='en'
AS
BEGIN
    SELECT   [alarm_id] AS [Id],
             [int_channel_type].[channel_code] AS [TYPE],
             ISNULL([alarm_cd], '') AS [TypeString],
             ISNULL([alarm_cd], '') AS [TITLE],
             [start_ft] AS [start_ft],
             [end_ft] AS [end_ft],
             [start_dt] AS [START_DT],
             [removed] AS [Removed],
             [alarm_level] AS [priority],
             CAST ('' AS NVARCHAR (250)) AS [Label]
    FROM     [dbo].[int_alarm]
             INNER JOIN
             [dbo].[int_patient_channel]
             ON [int_alarm].[patient_channel_id] = [int_patient_channel].[patient_channel_id]
             INNER JOIN
             [dbo].[int_channel_type]
             ON [int_patient_channel].[channel_type_id] = [int_channel_type].[channel_type_id]
    WHERE    [int_alarm].[patient_id] = @patient_id
             AND [alarm_level] > 0
             AND (@start_ft < [int_alarm].[end_ft]
                  OR [int_alarm].[end_ft] IS NULL)
    ORDER BY [start_ft] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientChannelList]
@PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT DISTINCT [channel_type_id] AS [PATIENT_CHANNEL_ID],
                    [channel_type_id] AS [CHANNEL_TYPE_ID]
    FROM   [dbo].[int_patient_channel]
    WHERE  [patient_id] = @PatientId
           AND [active_sw] = 1;
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientChannelTimes]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [int_waveform].[patient_id],
             MIN([int_waveform].[start_ft]) AS [MIN_START_FT],
             MAX([int_waveform].[end_ft]) AS [MAX_END_FT],
             [int_channel_type].[channel_code] AS [CHANNEL_CODE],
             NULL AS [LABEL],
             [int_channel_type].[priority],
             [int_channel_type].[channel_type_id] AS [CHANNEL_TYPE_ID],
             [int_channel_type].[freq] AS [SAMPLE_RATE]
    FROM     [dbo].[int_waveform]
             INNER JOIN
             [dbo].[int_patient_channel]
             ON [int_waveform].[patient_channel_id] = [int_patient_channel].[patient_channel_id]
             INNER JOIN
             [dbo].[int_channel_type]
             ON [int_patient_channel].[channel_type_id] = [int_channel_type].[channel_type_id]
    WHERE    ([int_waveform].[patient_id] = @patient_id)
    GROUP BY [int_waveform].[patient_id], [int_channel_type].[channel_code], [int_channel_type].[label], [int_channel_type].[priority], [int_channel_type].[channel_type_id], [int_channel_type].[freq]
    ORDER BY [int_channel_type].[priority];
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientStartftFromVitals]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT MIN([result_ft]) AS [start_ft]
    FROM   [dbo].[int_result]
    WHERE  ([patient_id] = @patient_id);
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientVitalsByGDSCodes]
@gds_codes [dbo].[GdsCodes] READONLY, @patient_id UNIQUEIDENTIFIER, @start_dt_utc DATETIME, @end_dt_utc DATETIME
AS
DECLARE @l_start_ft AS BIGINT = [dbo].[fnDateTimeToFileTime](@start_dt_utc);
DECLARE @l_end_ft AS BIGINT = [dbo].[fnDateTimeToFileTime](@end_dt_utc);
BEGIN
    SELECT [ALLVITAS].[ROW_NUMBER],
           [ALLVITAS].[GDS_CODE],
           [ALLVITAS].[VALUE],
           [ALLVITAS].[RESULT_TIME],
           [ALLVITAS].[RESULT_FILE_TIME],
           CAST (1 AS BIT) AS [IS_RESULT_LOCALIZED]
    FROM   (SELECT ROW_NUMBER() OVER (PARTITION BY [MISC].[code] ORDER BY [RESULT].[result_ft] DESC) AS [ROW_NUMBER],
                   [MISC].[code] AS [GDS_CODE],
                   [RESULT].[result_value] AS [VALUE],
                   CAST (NULL AS DATETIME) AS [RESULT_TIME],
                   [RESULT].[result_ft] AS [RESULT_FILE_TIME]
            FROM   [dbo].[int_result] AS [RESULT]
                   INNER JOIN
                   [dbo].[int_misc_code] AS [MISC]
                   ON [MISC].[code_id] = [RESULT].[test_cid]
                   INNER JOIN
                   @gds_codes AS [GDSCODES]
                   ON [MISC].[code] = [GDSCODES].[GdsCode]
            WHERE  [RESULT].[patient_id] = @patient_id
                   AND [RESULT].[result_ft] >= @l_start_ft
                   AND [RESULT].[result_ft] <= @l_end_ft
                   AND [RESULT].[result_value] IS NOT NULL) AS [ALLVITAS]
    WHERE  [ALLVITAS].[ROW_NUMBER] = 1;
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientVitalsByType]
@patient_id UNIQUEIDENTIFIER, @type INT
AS
BEGIN
    SELECT   [Result].[result_value] AS [VALUE],
             CAST (NULL AS DATETIME) AS [RESULT_TIME],
             [Result].[Sequence] AS [SEQ_NUM],
             [Result].[result_ft] AS [RESULT_FILE_TIME],
             CAST (1 AS BIT) AS [IS_RESULT_LOCALIZED]
    FROM     [dbo].[int_result] AS [Result]
             INNER JOIN
             [dbo].[int_misc_code] AS [Code]
             ON [Result].[test_cid] = [Code].[code_id]
    WHERE    ([Result].[patient_id] = @patient_id)
             AND ([Code].[code_id] = @type)
    ORDER BY [RESULT_FILE_TIME] ASC;
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientVitalsByTypeUpdate]
@patient_id UNIQUEIDENTIFIER, @type INT, @seq_num_after BIGINT, @dateAfter BIGINT
AS
BEGIN
    SELECT   [RESULT].[result_value] AS [VALUE],
             [RESULT].[obs_start_dt] AS [RESULT_TIME],
             [RESULT].[Sequence] AS [SEQ_NUM],
             [RESULT].[result_ft] AS [RESULT_FILE_TIME],
             CAST (1 AS BIT) AS [IS_RESULT_LOCALIZED]
    FROM     [dbo].[int_result] AS [RESULT]
             INNER JOIN
             [dbo].[int_misc_code] AS [CODE]
             ON [RESULT].[test_cid] = [CODE].[code_id]
    WHERE    ([RESULT].[patient_id] = @patient_id)
             AND ([CODE].[code_id] = @type)
             AND ([RESULT].[Sequence] > @seq_num_after)
    ORDER BY [RESULT_FILE_TIME] ASC;
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientVitalSignByChannels]
@PatientId UNIQUEIDENTIFIER, @ChannelTypes [dbo].[StringList] READONLY
AS
BEGIN
    DECLARE @VitalValue AS [dbo].[VitalValues];
    INSERT INTO @VitalValue
    SELECT [vital_value]
    FROM   [dbo].[int_vital_live]
    WHERE  [patient_id] = @PatientId;
    ((SELECT [PATCHL].[channel_type_id] AS [PATIENT_CHANNEL_ID],
             [MSCODE].[code] AS [GDS_CODE],
             [LiveValue].[ResultValue] AS [VITAL_VALUE],
             [CHVIT].[format_string] AS [FORMAT_STRING]
      FROM   [dbo].[int_patient_channel] AS [PATCHL]
             INNER JOIN
             [dbo].[int_channel_vital] AS [CHVIT]
             ON [PATCHL].[channel_type_id] = [CHVIT].[channel_type_id]
                AND [PATCHL].[active_sw] = 1
             INNER JOIN
             [dbo].[int_vital_live] AS [VITALRES]
             ON [PATCHL].[patient_id] = [VITALRES].[patient_id]
             LEFT OUTER JOIN
             (SELECT [idx],
                     [value],
                     SUBSTRING([value], CHARINDEX('=', [value]) + 1, LEN([value])) AS [ResultValue],
                     CONVERT (INT, SUBSTRING([value], 0, CHARINDEX('=', [value]))) AS [GdsCodeId]
              FROM   [dbo].[fn_Vital_Merge]((@VitalValue), '|')) AS [LiveValue]
             ON [LiveValue].[GdsCodeId] = [CHVIT].[gds_cid]
             LEFT OUTER JOIN
             [dbo].[int_misc_code] AS [MSCODE]
             ON [MSCODE].[code_id] = [CHVIT].[gds_cid]
                AND [MSCODE].[code] IS NOT NULL
      WHERE  [PATCHL].[patient_id] = @PatientId
             AND [PATCHL].[channel_type_id] IN (SELECT [Item]
                                                FROM   @ChannelTypes)
             AND [PATCHL].[active_sw] = 1
             AND [LiveValue].[idx] IS NOT NULL))
    ORDER BY [VITAL_VALUE];
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientVitalsTimeHistory]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   DISTINCT [result_ft],
                      [result_dt]
    FROM     [dbo].[int_result]
    WHERE    [patient_id] = @patient_id
    ORDER BY [result_ft] ASC;
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientVitalsTimeUpdate]
@patient_id UNIQUEIDENTIFIER, @after_ft BIGINT
AS
BEGIN
    SELECT   [result_ft] AS [result_ft],
             [result_dt]
    FROM     [dbo].[int_result]
    WHERE    [patient_id] = @patient_id
             AND [result_ft] > @after_ft
    ORDER BY [result_ft];
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientVitalsTypes]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [Code].[code_id] AS [TYPE],
           [Code].[code] AS [CODE],
           [Code].[int_keystone_cd] AS [UNITS]
    FROM   [dbo].[int_misc_code] AS [Code]
           INNER JOIN
           (SELECT DISTINCT [test_cid]
            FROM   [dbo].[int_result]
            WHERE  [patient_id] = @patient_id) AS [result_cid]
           ON [result_cid].[test_cid] = [Code].[code_id];
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientWaveFormDataByChannels]
@ChannelTypes [dbo].[StringList] READONLY, @PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [pc].[channel_type_id] AS [PATIENT_CHANNEL_ID],
           [pc].[patient_monitor_id],
           [WAVFRM].[start_dt] AS [START_DT],
           [WAVFRM].[end_dt] AS [END_DT],
           [WAVFRM].[start_ft] AS [start_ft],
           [WAVFRM].[end_ft] AS [end_ft],
           [WAVFRM].[compress_method] AS [COMPRESS_METHOD],
           [WAVFRM].[waveform_data] AS [WAVEFORM_DATA],
           NULL AS [TOPIC_INSTANCE_ID]
    FROM   [dbo].[int_patient_channel] AS [pc]
           LEFT OUTER JOIN
           [dbo].[int_waveform_live] AS [WAVFRM]
           ON [WAVFRM].[patient_channel_id] = [pc].[patient_channel_id]
    WHERE  [pc].[patient_id] = @PatientId
           AND [pc].[channel_type_id] IN (SELECT [Item]
                                          FROM   @ChannelTypes)
           AND [pc].[active_sw] = 1;
END

GO
CREATE PROCEDURE [dbo].[GetLegacyPatientWaveFormTimeHistory]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [start_ft],
             [start_dt]
    FROM     [dbo].[int_waveform]
    WHERE    [patient_id] = @patient_id
    ORDER BY [start_ft];
END

GO
CREATE PROCEDURE [dbo].[GetLicensedPersonAndPatientDataByPatientId]
@patient_id UNIQUEIDENTIFIER, @monitot_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [ORG].[organization_cd] AS [UNITNAME],
             [MRN].[mrn_xid] AS [MRN],
             [ENC].[patient_type_cid] AS [PATIENTTYPE],
             [ENC].[med_svc_cid] AS [HOSPSERVICE],
             [ENC].[patient_class_cid] AS [PATIENTCLASS],
             [ENC].[ambul_status_cid] AS [AMBULATORYSTS],
             [ENC].[vip_sw] AS [VIPINDIC],
             [ENC].[discharge_dispo_cid] AS [DISCHDISPOSITION],
             [ENC].[admit_dt] AS [ADMITDATE],
             [ENC].[discharge_dt] AS [DISCHARGEDT],
             [ENCMAP].[encounter_xid] AS [VISITNUMBER],
             [ENCMAP].[seq_no] AS [SEQNO],
             [MON].[monitor_name] AS [NODENAME],
             [MON].[node_id] AS [NODEID],
             [MON].[room] AS [ROOM],
             [MON].[bed_cd] AS [BED],
             [PAT].[dob] AS [DATEOFBIRTH],
             [PAT].[gender_cid] AS [GENDERCD],
             [PAT].[race_cid] AS [RACECD],
             [PAT].[primary_language_cid] AS [PRIMLANGCODE],
             [PAT].[marital_status_cid] AS [MARITALSTATUSCD],
             [PAT].[religion_cid] AS [RELIGIONCD],
             [PAT].[ssn] AS [SSN],
             [PAT].[driv_lic_no] AS [DLNO],
             [PAT].[driv_lic_state_code] AS [DLSTATECD],
             [PAT].[ethnic_group_cid] AS [ETHNICGRPCD],
             [PAT].[birth_place] AS [BIRTHPLACE],
             [PAT].[birth_order] AS [BIRTHORDER],
             [PAT].[nationality_cid] AS [NATIONALITYCODE],
             [PAT].[citizenship_cid] AS [CITIZENSHIPCODE],
             [PAT].[veteran_status_cid] AS [VETERANSTATUSCODE],
             [PAT].[death_dt] AS [DEATHDATE],
             [PAT].[organ_donor_sw] AS [ORGANDONOR],
             [PAT].[living_will_sw] AS [LIVINGWILL],
             [PERSON].[first_nm] AS [FIRSTNAME],
             [PERSON].[middle_nm] AS [MIDDLENAME],
             [PERSON].[last_nm] AS [LASTNAME],
             [PERSON].[suffix] AS [SUFFIX],
             [PERSON].[tel_no] AS [TELEPHONE],
             [PERSON].[line1_dsc] AS [ADDRESS1],
             [PERSON].[line2_dsc] AS [ADDRESS2],
             [PERSON].[line3_dsc] AS [ADDRESS3],
             [PERSON].[city_nm] AS [CITY],
             [PERSON].[state_code] AS [STATECODE],
             [PERSON].[zip_code] AS [ZIP],
             [PERSON].[country_cid] AS [COUNTRYCODE],
             [MRN].[mrn_xid2] AS [ACCOUNTNUMBER]
    FROM     [dbo].[int_encounter] AS [ENC]
             INNER JOIN
             [dbo].[int_mrn_map] AS [MRN]
             ON [ENC].[patient_id] = [MRN].[patient_id]
             INNER JOIN
             [dbo].[int_patient_monitor] AS [PATMON]
             ON [MRN].[patient_id] = [PATMON].[patient_id]
             INNER JOIN
             [dbo].[int_monitor] AS [MON]
             ON [PATMON].[monitor_id] = [MON].[monitor_id]
             INNER JOIN
             [dbo].[int_encounter_map] AS [ENCMAP]
             ON [PATMON].[encounter_id] = [ENCMAP].[encounter_id]
             INNER JOIN
             [dbo].[int_organization] AS [ORG]
             ON [MON].[unit_org_id] = [ORG].[organization_id]
             INNER JOIN
             [dbo].[int_product_access] AS [ACCESS]
             ON [ORG].[organization_id] = [ACCESS].[organization_id]
             INNER JOIN
             [dbo].[int_patient] AS [PAT]
             ON [ENC].[patient_id] = [PAT].[patient_id]
             INNER JOIN
             [dbo].[int_person] AS [PERSON]
             ON [PAT].[patient_id] = [PERSON].[person_id]
    WHERE    ([MRN].[patient_id] = @patient_id)
             AND [MON].[monitor_id] = @monitot_id
             AND [ORG].[outbound_interval] > 0
             AND [ACCESS].[product_cd] = 'outHL7'
             AND [ORG].[category_cd] = 'D'
             AND ([ENC].[discharge_dt] IS NULL
                  OR [ENC].[discharge_dt] > [ENC].[admit_dt])
             AND ([MRN].[merge_cd] = 'C')
    ORDER BY [AdmitDate] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetLogData]
@StartDate DATETIME, @EndDate DATETIME, @LogType VARCHAR (64), @PatientId [dbo].[DPATIENT_ID], @Application VARCHAR (256), @DeviceName VARCHAR (256)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [LogId],
           [DateTime],
           [PatientID],
           [Application],
           [DeviceName],
           [Message],
           [LocalizedMessage],
           [MessageId],
           [LogType]
    FROM   [dbo].[LogData]
    WHERE  [DateTime] >= @StartDate
           AND [DateTime] <= @EndDate
           AND ([LogType] = @LogType
                OR @LogType IS NULL)
           AND ([PatientID] = @PatientId
                OR @PatientId IS NULL)
           AND ([DeviceName] = @DeviceName
                OR @DeviceName IS NULL)
           AND ([Application] = @Application
                OR @Application IS NULL);
END

GO
CREATE PROCEDURE [dbo].[GetMinMaxPatientTimes]
@patient_id [dbo].[DPATIENT_ID], @getAll BIT=1
AS
BEGIN
    DECLARE @l_patient_id AS DPATIENT_ID = @patient_id;
    IF @getAll = 0
        BEGIN
            SELECT MIN([start_ft]) AS [START_FT],
                   MAX([end_ft]) AS [END_FT]
            FROM   [dbo].[int_waveform]
            WHERE  [patient_id] = @patient_id;
        END
    ELSE
        BEGIN
            SELECT MIN(START_FT) AS START_FT,
                   MAX(END_FT) AS END_FT
            FROM   (SELECT dbo.fnDateTimeToFileTime(MIN([wd].StartTimeUTC)) AS [START_FT],
                           dbo.fnDateTimeToFileTime(MAX([wd].EndTimeUTC)) AS [END_FT]
                    FROM   dbo.WaveformData AS [wd]
                           INNER JOIN
                           dbo.TopicSessions AS [ts]
                           ON [wd].TopicSessionId = [ts].Id
                    WHERE  [ts].PatientSessionId IN (SELECT PatientSessionId
                                                     FROM   dbo.PatientSessionsMap
                                                            INNER JOIN
                                                            (SELECT   MAX(Sequence) AS MaxSeq
                                                             FROM     dbo.PatientSessionsMap
                                                             GROUP BY PatientSessionId) AS PatientSessionMaxSeq
                                                            ON Sequence = PatientSessionMaxSeq.MaxSeq
                                                     WHERE  PatientSessionsMap.PatientId = @l_patient_id)
                    UNION ALL
                    SELECT MIN([start_ft]) AS [START_FT],
                           MAX([end_ft]) AS [END_FT]
                    FROM   [dbo].[int_waveform]
                    WHERE  [patient_id] = @patient_id) AS [ComboWaveform];
        END
END

GO
CREATE PROCEDURE [dbo].[GetMinMaxPatientTimesFromVitals]
@patient_id [dbo].[DPATIENT_ID], @getAll BIT=1
AS
BEGIN
    IF (@getAll = 0)
        BEGIN
            SELECT MIN([ir].[result_ft]) AS [start_ft],
                   MAX([ir].[result_ft]) AS [end_ft]
            FROM   [dbo].[int_result] AS [ir]
            WHERE  [ir].[patient_id] = CAST (@patient_id AS UNIQUEIDENTIFIER);
        END
    ELSE
        BEGIN
            SELECT MIN([ComboWaveform].[start_ft]) AS [start_ft],
                   MAX([ComboWaveform].[end_ft]) AS [end_ft]
            FROM   (SELECT [dbo].[fnDateTimeToFileTime](MIN([vd].[TimestampUTC])) AS [start_ft],
                           [dbo].[fnDateTimeToFileTime](MAX([vd].[TimestampUTC])) AS [end_ft]
                    FROM   [dbo].[VitalsData] AS [vd]
                    WHERE  [TopicSessionId] IN (SELECT [vpts].[TopicSessionId]
                                                FROM   [dbo].[v_PatientTopicSessions] AS [vpts]
                                                WHERE  [vpts].[PatientId] = CAST (@patient_id AS UNIQUEIDENTIFIER))
                    UNION ALL
                    SELECT MIN([RowNumber].[result_ft]) AS [start_ft],
                           MAX([RowNumber].[result_ft]) AS [end_ft]
                    FROM   [dbo].[int_result] AS [RowNumber]
                    WHERE  [RowNumber].[patient_id] = CAST (@patient_id AS UNIQUEIDENTIFIER)) AS [ComboWaveform];
        END
END

GO
CREATE PROCEDURE [dbo].[GetNumLeadConfigs]
@PatientId [dbo].[DPATIENT_ID], @TimeTagType INT, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    SELECT COUNT([ipt].[value1]) AS [NUM_LEAD_CONFIGS]
    FROM   [dbo].[int_param_timetag] AS [ipt]
           LEFT OUTER JOIN
           [dbo].[v_DiscardedOverlappingLegacyWaveformData] AS [discarded]
           ON [discarded].[patient_channel_id] = [ipt].[patient_channel_id]
              AND [ipt].[param_ft] BETWEEN [discarded].[start_ft] AND [discarded].[end_ft]
    WHERE  [ipt].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [ipt].[timetag_type] = @TimeTagType
           AND [ipt].[param_ft] >= @StartTime
           AND [ipt].[param_ft] <= @EndTime
           AND [discarded].[patient_channel_id] IS NULL;
END

GO
CREATE PROCEDURE [dbo].[GetNumProcStats]
@PatientId [dbo].[DPATIENT_ID], @TimeTagType INT, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    SELECT COUNT([ipt].[value1]) AS [NUM_PROC_STATS]
    FROM   [dbo].[int_param_timetag] AS [ipt]
           LEFT OUTER JOIN
           [dbo].[v_DiscardedOverlappingLegacyWaveformData] AS [discarded]
           ON [discarded].[patient_channel_id] = [ipt].[patient_channel_id]
              AND [ipt].[param_ft] BETWEEN [discarded].[start_ft] AND [discarded].[end_ft]
    WHERE  [ipt].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [ipt].[timetag_type] = @TimeTagType
           AND ([ipt].[param_ft] >= @StartTime)
           AND ([ipt].[param_ft] <= @EndTime)
           AND [discarded].[patient_channel_id] IS NULL;
END

GO
CREATE PROCEDURE [dbo].[GetOrganizationData]
AS
BEGIN
    SELECT   [ORG].[organization_id],
             [ORG].[category_cd],
             [ORG].[parent_organization_id],
             [ORG].[organization_cd],
             [ORG].[organization_nm]
    FROM     [dbo].[int_organization] AS [ORG]
    ORDER BY [category_cd] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetOrganizationDataAsXml]
AS
BEGIN
    WITH     [tree]
    AS       (SELECT [org].[organization_id] AS [id],
                     [org].[parent_organization_id] AS [parentid],
                     [org].[organization_nm] AS [name],
                     [org].[organization_cd] AS [description],
                     'ORG' AS [type],
                     1 AS [orderby]
              FROM   [dbo].[int_organization] AS [org]
              WHERE  [org].[parent_organization_id] IS NULL
              UNION
              SELECT [facil].[organization_id] AS [id],
                     [facil].[parent_organization_id] AS [parentid],
                     [facil].[organization_nm] AS [name],
                     [facil].[organization_cd] AS [description],
                     'FACILITY' AS [type],
                     2 AS [orderby]
              FROM   [dbo].[int_organization] AS [org1]
                     INNER JOIN
                     [dbo].[int_organization] AS [facil]
                     ON [org1].[organization_id] = [facil].[parent_organization_id]
                        AND [facil].[category_cd] = 'F'
              UNION
              SELECT [facil2].[organization_id] AS [id],
                     [facil2].[parent_organization_id] AS [parentid],
                     [facil2].[organization_nm] AS [name],
                     [facil2].[organization_cd] AS [description],
                     'UNIT' AS [type],
                     3 AS [orderby]
              FROM   [dbo].[int_organization] AS [org1]
                     INNER JOIN
                     [dbo].[int_organization] AS [facil2]
                     ON [org1].[organization_id] = [facil2].[parent_organization_id]
                        AND [facil2].[category_cd] = 'D'
                        AND [org1].[category_cd] = 'F')
    SELECT   [tree].[id],
             [tree].[parentid],
             [tree].[name],
             [tree].[description],
             [tree].[type],
             [tree].[orderby]
    FROM     [tree]
    ORDER BY [tree].[orderby], [tree].[type]
    FOR      XML RAW ('orgitem'), ROOT;
END

GO
CREATE PROCEDURE [dbo].[GetPatientAlarms]
@patient_id UNIQUEIDENTIFIER, @start_ft BIGINT, @end_ft BIGINT, @locale VARCHAR (7)='en'
AS
BEGIN
    DECLARE @end_dt AS DATETIME = [dbo].[fnFileTimeToDateTime](@end_ft), @start_dt AS DATETIME = [dbo].[fnFileTimeToDateTime](@start_ft), @locale_arg AS VARCHAR (7) = @locale, @patient_id_arg AS UNIQUEIDENTIFIER = @patient_id;
    SELECT   [alarm_id] AS [Id],
             [int_channel_type].[channel_code] AS [TYPE],
             ISNULL([alarm_cd], N'') AS [TypeString],
             ISNULL([alarm_cd], N'') AS [TITLE],
             [start_ft] AS [start_ft],
             [end_ft] AS [end_ft],
             [start_dt] AS [START_DT],
             [removed] AS [Removed],
             [alarm_level] AS [priority],
             CAST ('' AS NVARCHAR (250)) AS [Label]
    FROM     [dbo].[int_alarm]
             INNER JOIN
             [dbo].[int_patient_channel]
             ON [int_alarm].[patient_channel_id] = [int_patient_channel].[patient_channel_id]
             INNER JOIN
             [dbo].[int_channel_type]
             ON [int_patient_channel].[channel_type_id] = [int_channel_type].[channel_type_id]
    WHERE    [int_alarm].[patient_id] = @patient_id_arg
             AND [alarm_level] > 0
             AND ((@start_ft < [int_alarm].[end_ft])
                  OR ([int_alarm].[end_ft] IS NULL))
    UNION ALL
    SELECT   [LimitAlarmsData].[AlarmId] AS [Id],
             [TopicFeedTypes].[ChannelCode] AS [TYPE],
             ISNULL([Message], [AlarmTypeName]) AS [TypeString],
             ISNULL([Message], N'') + '  ' + REPLACE(ISNULL([ValueFormat], ''), '{0}', [ViolatingValue]) + '  ' + REPLACE(ISNULL([LimitFormat], N''), '{0}', [SettingViolated]) AS [Title],
             [dbo].[fnDateTimeToFileTime]([StartDateTime]) AS [start_ft],
             [dbo].[fnDateTimeToFileTime](ISNULL([EndDateTime], [TopicSessions].[EndTimeUTC])) AS [end_ft],
             CAST (NULL AS DATETIME) AS [START_DT],
             [Removed],
             CASE WHEN [PriorityWeightValue] = 0 THEN 0 WHEN [PriorityWeightValue] = 1 THEN 3 WHEN [PriorityWeightValue] = 2 THEN 2 ELSE 1 END AS [priority],
             CAST (N'' AS NVARCHAR (250)) AS [Label]
    FROM     [dbo].[LimitAlarmsData]
             INNER JOIN
             [dbo].[AlarmResources]
             ON [AlarmResources].[EnumGroupId] = [LimitAlarmsData].[EnumGroupId]
                AND [AlarmResources].[IDEnumValue] = [LimitAlarmsData].[IDEnumValue]
                AND [AlarmResources].[Locale] = @locale_arg
             INNER JOIN
             [dbo].[TopicFeedTypes]
             ON [TopicFeedTypes].[FeedTypeId] = [LimitAlarmsData].[WaveformFeedTypeId]
             INNER JOIN
             [dbo].[v_PatientTopicSessions]
             ON [v_PatientTopicSessions].[TopicSessionId] = [LimitAlarmsData].[TopicSessionId]
             INNER JOIN
             [dbo].[TopicSessions]
             ON [TopicSessions].[Id] = [LimitAlarmsData].[TopicSessionId]
             LEFT OUTER JOIN
             [dbo].[RemovedAlarms]
             ON [RemovedAlarms].[AlarmId] = [LimitAlarmsData].[AlarmId]
    WHERE    [v_PatientTopicSessions].[PatientId] = @patient_id_arg
             AND [StartDateTime] <= @end_dt
             AND (([EndDateTime] IS NULL
                   AND [TopicSessions].[EndTimeUTC] IS NULL)
                  OR @start_dt <= ISNULL([EndDateTime], [TopicSessions].[EndTimeUTC]))
    UNION ALL
    SELECT   [GeneralAlarmsData].[AlarmId] AS [Id],
             [TopicFeedTypes].[ChannelCode] AS [TYPE],
             ISNULL([Message], [AlarmTypeName]) AS [TypeString],
             ISNULL([Message], N'') AS [Title],
             [dbo].[fnDateTimeToFileTime]([StartDateTime]) AS [start_ft],
             [dbo].[fnDateTimeToFileTime](ISNULL([EndDateTime], [TopicSessions].[EndTimeUTC])) AS [end_ft],
             CAST (NULL AS DATETIME) AS [START_DT],
             [Removed],
             CASE WHEN [PriorityWeightValue] = 0 THEN 0 WHEN [PriorityWeightValue] = 1 THEN 3 WHEN [PriorityWeightValue] = 2 THEN 2 ELSE 1 END AS [priority],
             CAST (N'' AS NVARCHAR (250)) AS [Label]
    FROM     [dbo].[GeneralAlarmsData]
             INNER JOIN
             [dbo].[AlarmResources]
             ON [AlarmResources].[EnumGroupId] = [GeneralAlarmsData].[EnumGroupId]
                AND [AlarmResources].[IDEnumValue] = [GeneralAlarmsData].[IDEnumValue]
                AND [AlarmResources].[Locale] = @locale_arg
             INNER JOIN
             [dbo].[TopicFeedTypes]
             ON [TopicFeedTypes].[FeedTypeId] = [GeneralAlarmsData].[WaveformFeedTypeId]
             INNER JOIN
             [dbo].[v_PatientTopicSessions]
             ON [v_PatientTopicSessions].[TopicSessionId] = [GeneralAlarmsData].[TopicSessionId]
             INNER JOIN
             [dbo].[TopicSessions]
             ON [TopicSessions].[Id] = [GeneralAlarmsData].[TopicSessionId]
             LEFT OUTER JOIN
             [dbo].[RemovedAlarms]
             ON [RemovedAlarms].[AlarmId] = [GeneralAlarmsData].[AlarmId]
    WHERE    [v_PatientTopicSessions].[PatientId] = @patient_id_arg
             AND [StartDateTime] <= @end_dt
             AND (([EndDateTime] IS NULL
                   AND [TopicSessions].[EndTimeUTC] IS NULL)
                  OR @start_dt <= ISNULL([EndDateTime], [TopicSessions].[EndTimeUTC]))
    ORDER BY [start_ft] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetPatientAlarmsByType]
@patient_id UNIQUEIDENTIFIER, @alarm_type INT, @start_ft BIGINT, @end_ft BIGINT
AS
BEGIN
    SELECT   [alarm_id] AS [ID],
             [alarm_cd] AS [TITLE],
             [start_ft] AS [start_ft],
             [end_ft] AS [end_ft],
             [start_dt] AS [START_DT],
             [removed],
             [alarm_level] AS [priority]
    FROM     [dbo].[int_alarm]
             INNER JOIN
             [dbo].[int_patient_channel]
             ON [int_alarm].[patient_channel_id] = [int_patient_channel].[patient_channel_id]
             INNER JOIN
             [dbo].[int_channel_type]
             ON [int_patient_channel].[channel_type_id] = [int_channel_type].[channel_type_id]
    WHERE    [int_alarm].[patient_id] = @patient_id
             AND [int_channel_type].[channel_code] = @alarm_type
             AND ((@start_ft < [int_alarm].[end_ft]
                   AND @end_ft >= [int_alarm].[start_ft])
                  OR (@end_ft >= [int_alarm].[start_ft]
                      AND [int_alarm].[end_ft] IS NULL))
    ORDER BY [start_ft];
END

GO
CREATE PROCEDURE [dbo].[GetPatientAlarmTypes]
@patient_id UNIQUEIDENTIFIER, @start_ft BIGINT, @end_ft BIGINT
AS
BEGIN
    SELECT DISTINCT [int_channel_type].[channel_code] AS [TYPE],
                    [int_alarm].[alarm_cd] AS [TITLE]
    FROM   [dbo].[int_alarm]
           INNER JOIN
           [dbo].[int_patient_channel]
           ON [int_alarm].[patient_channel_id] = [int_patient_channel].[patient_channel_id]
           INNER JOIN
           [dbo].[int_channel_type]
           ON [int_patient_channel].[channel_type_id] = [int_channel_type].[channel_type_id]
    WHERE  [int_alarm].[patient_id] = @patient_id
           AND [int_alarm].[alarm_level] > 0
           AND ((@start_ft < [int_alarm].[end_ft]
                 AND @end_ft >= [int_alarm].[start_ft])
                OR (@end_ft >= [int_alarm].[start_ft]
                    AND [int_alarm].[end_ft] IS NULL))
    UNION ALL
    SELECT [ChannelCode] AS [TYPE],
           [Title] AS [TITLE]
    FROM   [dbo].[v_GeneralAlarms]
    WHERE  [AlarmId] IN (SELECT [AlarmId]
                         FROM   [dbo].[GeneralAlarmsData]
                         WHERE  [TopicSessionId] IN (SELECT [TopicSessionId]
                                                     FROM   [dbo].[v_PatientTopicSessions]
                                                     WHERE  [PatientId] = @patient_id)
                                AND (([dbo].[fnFileTimeToDateTime](@start_ft) < [EndDateTime]
                                      AND [dbo].[fnFileTimeToDateTime](@end_ft) >= [StartDateTime])
                                     OR ([dbo].[fnFileTimeToDateTime](@end_ft) >= [StartDateTime]
                                         AND [EndDateTime] IS NULL))
                                AND [PriorityWeightValue] > 0)
    UNION ALL
    SELECT [ChannelCode] AS [TYPE],
           [AlarmType] AS [TITLE]
    FROM   [dbo].[v_LimitAlarms]
    WHERE  [AlarmId] IN (SELECT [AlarmId]
                         FROM   [dbo].[LimitAlarmsData]
                         WHERE  [TopicSessionId] IN (SELECT [TopicSessionId]
                                                     FROM   [dbo].[v_PatientTopicSessions]
                                                     WHERE  [PatientId] = @patient_id)
                                AND (([dbo].[fnFileTimeToDateTime](@start_ft) < [EndDateTime]
                                      AND [dbo].[fnFileTimeToDateTime](@end_ft) >= [StartDateTime])
                                     OR ([dbo].[fnFileTimeToDateTime](@end_ft) >= [StartDateTime]
                                         AND [EndDateTime] IS NULL))
                                AND [PriorityWeightValue] > 0);
END

GO
CREATE PROCEDURE [dbo].[GetPatientAuditLogData]
@PatientId [dbo].[DPATIENT_ID]
AS
BEGIN
    SELECT [AuditId],
           [DateTime],
           [PatientID],
           [Application],
           [DeviceName],
           [Message],
           [ItemName],
           [OriginalValue],
           [NewValue],
           [HashedValue],
           [ChangedBy]
    FROM   [dbo].[AuditLogData]
    WHERE  [PatientID] = @PatientId;
END

GO
CREATE PROCEDURE [dbo].[GetPatientByExternalID]
@patientExtID NVARCHAR (30)
AS
BEGIN
    DECLARE @patientExtIDTrim AS NVARCHAR (30) = RTRIM(LTRIM(@patientExtID));
    SELECT [int_mrn_map].[patient_id] AS [patient_id],
           [int_mrn_map].[mrn_xid] AS [PATIENT_MRN],
           [int_person].[first_nm] AS [FIRST_NAME],
           [int_person].[last_nm] AS [LAST_NAME]
    FROM   [dbo].[int_mrn_map]
           INNER JOIN
           [dbo].[int_encounter]
           ON [int_encounter].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [int_encounter].[patient_id] = [int_person].[person_id]
           INNER JOIN
           [dbo].[int_patient]
           ON [int_encounter].[patient_id] = [int_patient].[patient_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [int_patient_monitor].[encounter_id] = [int_encounter].[encounter_id]
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_monitor].[monitor_id] = [int_patient_monitor].[monitor_id]
    WHERE  RTRIM(LTRIM([int_mrn_map].[mrn_xid])) = @patientExtIDTrim
           AND [int_mrn_map].[merge_cd] = 'C'
    UNION ALL
    SELECT [patient_id],
           [ID1] AS [PATIENT_MRN],
           [FIRST_NAME],
           [LAST_NAME]
    FROM   [dbo].[v_Patients]
    WHERE  [ID1] = @patientExtID
    UNION ALL
    SELECT [int_mrn_map].[patient_id] AS [patient_id],
           [int_mrn_map].[mrn_xid] AS [PATIENT_MRN],
           [int_person].[first_nm] AS [FIRST_NAME],
           [int_person].[last_nm] AS [LAST_NAME]
    FROM   [dbo].[int_mrn_map]
           INNER JOIN
           [dbo].[int_encounter]
           ON [int_encounter].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [int_encounter].[patient_id] = [int_person].[person_id]
           INNER JOIN
           [dbo].[int_patient]
           ON [int_encounter].[patient_id] = [int_patient].[patient_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [int_patient_monitor].[encounter_id] = [int_encounter].[encounter_id]
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_monitor].[monitor_id] = [int_patient_monitor].[monitor_id]
    WHERE  RTRIM(LTRIM([int_mrn_map].[mrn_xid2])) = @patientExtIDTrim
           AND [int_mrn_map].[merge_cd] = 'C'
    UNION ALL
    SELECT [patient_id],
           [ID1] AS [PATIENT_MRN],
           [FIRST_NAME],
           [LAST_NAME]
    FROM   [dbo].[v_Patients]
    WHERE  [ID2] = @patientExtID;
END

GO
CREATE PROCEDURE [dbo].[GetPatientByExternalIdAndDevice]
@mrn_id NVARCHAR (30), @device NVARCHAR (30)=NULL, @login_name NVARCHAR (64), @is_vip_searchable NVARCHAR (4), @is_restricted_unit_searchable NVARCHAR (4)
AS
BEGIN
    SELECT   int_mrn_map.patient_id AS [PATIENT_ID],
             CONCAT(int_person.last_nm, N', ', int_person.first_nm) AS PATIENT_NAME,
             int_monitor.monitor_name AS [MONITOR_NAME],
             int_mrn_map.mrn_xid2 AS ACCOUNT_ID,
             int_mrn_map.mrn_xid AS MRN_ID,
             ORG1.organization_id AS UNIT_ID,
             ORG1.organization_cd AS UNIT_NAME,
             ORG2.organization_id AS FACILITY_ID,
             ORG2.organization_nm AS FACILITY_NAME,
             int_patient.dob AS DOB,
             int_encounter.admit_dt AS ADMIT_TIME,
             int_encounter.discharge_dt AS DISCHARGED_TIME,
             int_patient_monitor.patient_monitor_id AS PATIENT_MONITOR_ID,
             CASE WHEN int_encounter.discharge_dt IS NULL THEN 'A' ELSE 'D' END AS STATUS
    FROM     [dbo].int_mrn_map
             INNER JOIN
             [dbo].int_patient_monitor
             ON int_patient_monitor.patient_id = int_mrn_map.patient_id
             INNER JOIN
             [dbo].int_encounter
             ON int_encounter.encounter_id = int_patient_monitor.encounter_id
                AND (@is_vip_searchable = '1'
                     OR int_encounter.vip_sw IS NULL)
             INNER JOIN
             [dbo].int_monitor
             ON int_monitor.monitor_id = int_patient_monitor.monitor_id
                AND (@device IS NULL
                     OR int_monitor.node_id = @device)
             LEFT OUTER JOIN
             [dbo].int_person
             ON int_person.person_id = int_mrn_map.patient_id
             LEFT OUTER JOIN
             [dbo].int_patient
             ON int_patient.patient_id = int_mrn_map.patient_id
             INNER JOIN
             [dbo].int_organization AS ORG1
             ON (int_monitor.unit_org_id = ORG1.organization_id)
                AND (@is_restricted_unit_searchable = '1'
                     OR ORG1.organization_id NOT IN (SELECT organization_id
                                                     FROM   dbo.cdr_restricted_organization
                                                     WHERE  user_role_id = (SELECT user_role_id
                                                                            FROM   dbo.int_user
                                                                            WHERE  login_name = @login_name)))
             LEFT OUTER JOIN
             [dbo].int_organization AS ORG2
             ON ORG2.organization_id = ORG1.parent_organization_id
    WHERE    mrn_xid = @mrn_id
             AND merge_cd = 'C'
    UNION ALL
    SELECT   [int_mrn_map].[patient_id] AS [PATIENT_ID],
             CONCAT(int_person.last_nm, N', ', int_person.first_nm) AS [PATIENT_NAME],
             CASE WHEN [Assignment].[BedName] IS NULL
                       OR [Assignment].[MonitorName] IS NULL THEN [Devices].[Name] ELSE RTRIM([Assignment].[BedName]) + '(' + RTRIM([Assignment].[Channel]) + ')' END AS [MONITOR_NAME],
             [int_mrn_map].[mrn_xid2] AS [ACCOUNT_ID],
             [int_mrn_map].[mrn_xid] AS [MRN_ID],
             [Units].[organization_id] AS [UNIT_ID],
             [Units].[organization_nm] AS [UNIT_NAME],
             [Facilities].[organization_id] AS [FACILITY_ID],
             [Facilities].[organization_nm] AS [FACILITY_NAME],
             [int_patient].[dob] AS [DOB],
             dbo.[fnUtcDateTimeToLocalTime]([PatientSessions].[BeginTimeUTC]) AS [ADMIT_TIMEC],
             dbo.fnUtcDateTimeToLocalTime([PatientSessions].[EndTimeUTC]) AS [DISCHARGED_TIME],
             [PatientSessions].[Id] AS [PATIENT_MONITOR_ID],
             CASE WHEN [PatientSessions].[EndTimeUTC] IS NULL THEN 'A' ELSE 'D' END AS [STATUS]
    FROM     [dbo].[int_mrn_map]
             INNER JOIN
             [dbo].[PatientSessionsMap]
             ON [PatientSessionsMap].[PatientId] = [int_mrn_map].[patient_id]
             INNER JOIN
             (SELECT   [PatientSessionId],
                       MAX(Sequence) AS [MaxSeq]
              FROM     [dbo].[PatientSessionsMap]
              GROUP BY [PatientSessionId]) AS [PatientSessionMaxSeq]
             ON [PatientSessionMaxSeq].[PatientSessionId] = [PatientSessionsMap].[PatientSessionId]
                AND [PatientSessionMaxSeq].[MaxSeq] = [PatientSessionsMap].[Sequence]
             INNER JOIN
             [dbo].[PatientSessions]
             ON [PatientSessions].[Id] = [PatientSessionsMap].[PatientSessionId]
             INNER JOIN
             (SELECT [PatientSessionId],
                     [DeviceSessionId]
              FROM   (SELECT [PatientSessionId],
                             [DeviceSessionId],
                             ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                      FROM   [dbo].[PatientData]) AS [PatientSessionsDeviceSequence]
              WHERE  [R] = 1) AS [LatestPatientSessionDevice]
             ON [LatestPatientSessionDevice].[PatientSessionId] = [PatientSessions].[Id]
             INNER JOIN
             [dbo].[DeviceSessions]
             ON [DeviceSessions].[Id] = [LatestPatientSessionDevice].[DeviceSessionId]
             INNER JOIN
             [dbo].[Devices]
             ON [DeviceSessions].[DeviceId] = [Devices].[Id]
                AND (@device IS NULL
                     OR Devices.Name = @device)
             INNER JOIN
             [dbo].[v_DeviceSessionAssignment] AS [Assignment]
             ON [Assignment].[DeviceSessionId] = [LatestPatientSessionDevice].[DeviceSessionId]
             LEFT OUTER JOIN
             [dbo].[int_organization] AS [Facilities]
             ON [Facilities].[organization_nm] = [Assignment].[FacilityName]
                AND [Facilities].[category_cd] = 'F'
             LEFT OUTER JOIN
             [dbo].[int_organization] AS [Units]
             ON [Units].[organization_nm] = [Assignment].[UnitName]
                AND [Units].[parent_organization_id] = [Facilities].[organization_id]
                AND (@is_restricted_unit_searchable = '1'
                     OR [Units].organization_id NOT IN (SELECT organization_id
                                                        FROM   dbo.cdr_restricted_organization
                                                        WHERE  user_role_id = (SELECT user_role_id
                                                                               FROM   dbo.int_user
                                                                               WHERE  login_name = @login_name)))
             LEFT OUTER JOIN
             [dbo].[int_patient]
             ON [int_patient].[patient_id] = [int_mrn_map].[patient_id]
             LEFT OUTER JOIN
             [dbo].[int_person]
             ON [int_person].[person_id] = [int_mrn_map].[patient_id]
    WHERE    mrn_xid = @mrn_id
             AND merge_cd = 'C'
    ORDER BY [ADMIT_TIME] DESC, [STATUS], [PATIENT_NAME], [MONITOR_NAME];
END

GO
CREATE PROCEDURE [dbo].[GetPatientChannelList]
@PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT DISTINCT [channel_type_id] AS [PATIENT_CHANNEL_ID],
                    [channel_type_id] AS [CHANNEL_TYPE_ID]
    FROM   [dbo].[int_patient_channel]
    WHERE  [patient_id] = @PatientId
           AND [active_sw] = 1
    UNION ALL
    SELECT DISTINCT [TypeId] AS [PATIENT_CHANNEL_ID],
                    [TypeId] AS [CHANNEL_TYPE_ID]
    FROM   (SELECT [TypeId]
            FROM   [dbo].[WaveformLiveData]
                   INNER JOIN
                   [dbo].[TopicSessions]
                   ON [TopicSessions].[TopicInstanceId] = [WaveformLiveData].[TopicInstanceId]
                   LEFT OUTER JOIN
                   (SELECT ROW_NUMBER() OVER (PARTITION BY [DeviceInfoData].[DeviceSessionId] ORDER BY [TimestampUTC] DESC) AS [RowNumber],
                           [DeviceSessionId],
                           [Value]
                    FROM   [dbo].[DeviceInfoData]
                    WHERE  [Name] = N'MonitoringStatus') AS [StandbyStatus]
                   ON [StandbyStatus].[DeviceSessionId] = [TopicSessions].[DeviceSessionId]
                      AND [StandbyStatus].[RowNumber] = 1
            WHERE  [TopicSessions].[Id] IN (SELECT [TopicSessionId]
                                            FROM   [dbo].[v_PatientTopicSessions]
                                            WHERE  [PatientId] = @PatientId)
                   AND [TopicSessions].[EndTimeUTC] IS NULL
                   AND ISNULL([StandbyStatus].[Value], N'Normal') <> N'Standby'
            UNION ALL
            SELECT [TopicSessions].[TopicTypeId]
            FROM   [dbo].[TopicSessions]
                   INNER JOIN
                   [dbo].[TopicFeedTypes]
                   ON [TopicFeedTypes].[FeedTypeId] = [TopicSessions].[TopicTypeId]
                   LEFT OUTER JOIN
                   (SELECT ROW_NUMBER() OVER (PARTITION BY [DeviceInfoData].[DeviceSessionId] ORDER BY [TimestampUTC] DESC) AS [RowNumber],
                           [DeviceSessionId],
                           [Value]
                    FROM   [dbo].[DeviceInfoData]
                    WHERE  [Name] = N'MonitoringStatus') AS [StandbyStatus]
                   ON [StandbyStatus].[DeviceSessionId] = [TopicSessions].[DeviceSessionId]
                      AND [StandbyStatus].[RowNumber] = 1
            WHERE  [TopicSessions].[Id] IN (SELECT [TopicSessionId]
                                            FROM   [dbo].[v_PatientTopicSessions]
                                            WHERE  [PatientId] = @PatientId)
                   AND [TopicSessions].[EndTimeUTC] IS NULL
                   AND ISNULL([StandbyStatus].[Value], N'Normal') <> N'Standby') AS [TypeIds];
END

GO
CREATE PROCEDURE [dbo].[GetPatientChannelTimes]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    (SELECT   [int_waveform].[patient_id],
              MIN([int_waveform].[start_ft]) AS [MIN_START_FT],
              MAX([int_waveform].[end_ft]) AS [MAX_END_FT],
              [int_channel_type].[channel_code] AS [CHANNEL_CODE],
              NULL AS [LABEL],
              [int_channel_type].[priority],
              [int_channel_type].[channel_type_id] AS [CHANNEL_TYPE_ID],
              [int_channel_type].[freq] AS [SAMPLE_RATE]
     FROM     [dbo].[int_waveform]
              INNER JOIN
              [dbo].[int_patient_channel]
              ON [int_waveform].[patient_channel_id] = [int_patient_channel].[patient_channel_id]
              INNER JOIN
              [dbo].[int_channel_type]
              ON [int_patient_channel].[channel_type_id] = [int_channel_type].[channel_type_id]
     GROUP BY [int_waveform].[patient_id], [int_channel_type].[channel_code], [int_channel_type].[label], [int_channel_type].[priority], [int_channel_type].[channel_type_id], [int_channel_type].[freq]
     HAVING   ([int_waveform].[patient_id] = @patient_id)
     UNION ALL
     SELECT   @patient_id AS [patient_id],
              [dbo].[fnDateTimeToFileTime](MIN([waveformdata].[StartTimeUTC])) AS [MIN_START_FT],
              [dbo].[fnDateTimeToFileTime](MAX([waveformdata].[EndTimeUTC])) AS [MAX_END_FT],
              [TopicFeedTypes].[ChannelCode] AS [CHANNEL_CODE],
              NULL AS [LABEL],
              [int_channel_type].[priority] AS [priority],
              [waveformdata].[TypeId] AS [CHANNEL_TYPE_ID],
              [TopicFeedTypes].[SampleRate] AS [SAMPLE_RATE]
     FROM     [dbo].[WaveformData]
              INNER JOIN
              [dbo].[TopicFeedTypes]
              ON [TopicFeedTypes].[FeedTypeId] = [waveformdata].[TypeId]
              LEFT OUTER JOIN
              [dbo].[int_channel_type]
              ON [int_channel_type].[channel_code] = [TopicFeedTypes].[ChannelCode]
     WHERE    [waveformdata].[TopicSessionId] IN (SELECT [TopicSessionId]
                                                  FROM   [dbo].[v_PatientTopicSessions]
                                                  WHERE  [PatientId] = @patient_id)
     GROUP BY [TopicFeedTypes].[ChannelCode], [waveformdata].[TypeId], [TopicFeedTypes].[SampleRate], [int_channel_type].[priority])
    ORDER BY  [priority];
END

GO
CREATE PROCEDURE [dbo].[GetPatientChannelTimesFromVitals]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   MIN([ir].[result_ft]) AS [MIN_START_FT],
             MAX([ir].[result_ft]) AS [MAX_END_FT],
             [ict].[channel_code] AS [CHANNEL_CODE],
             [ict].[label] AS [LABEL],
             [ict].[priority],
             [ict].[channel_type_id] AS [CHANNEL_TYPE_ID],
             [ict].[freq] AS [SAMPLE_RATE]
    FROM     [dbo].[int_result] AS [ir]
             INNER JOIN
             [dbo].[int_patient_channel] AS [ipc]
             ON [ir].[patient_id] = [ipc].[patient_id]
             INNER JOIN
             [dbo].[int_channel_type] AS [ict]
             ON [ipc].[channel_type_id] = [ict].[channel_type_id]
    GROUP BY [ir].[patient_id], [ict].[channel_code], [ict].[label], [ict].[priority], [ict].[channel_type_id], [ict].[freq]
    HAVING   [ir].[patient_id] = @patient_id
    UNION ALL
    SELECT   [dbo].[fnDateTimeToFileTime](MIN([vd].[TimestampUTC])) AS [MIN_START_FT],
             [dbo].[fnDateTimeToFileTime](MAX([vd].[TimestampUTC])) AS [MAX_END_FT],
             [tft].[ChannelCode] AS [CHANNEL_CODE],
             [ict].[label] AS [LABEL],
             [ict].[priority],
             [tft].[FeedTypeId] AS [CHANNEL_TYPE_ID],
             [tft].[SampleRate] AS [SAMPLE_RATE]
    FROM     [dbo].[VitalsData] AS [vd]
             INNER JOIN
             [dbo].[TopicSessions] AS [ts]
             ON [ts].[Id] = [vd].[TopicSessionId]
             INNER JOIN
             [dbo].[TopicFeedTypes] AS [tft]
             ON [tft].[TopicTypeId] = [ts].[TopicTypeId]
             INNER JOIN
             [dbo].[int_channel_type] AS [ict]
             ON [ict].[channel_code] = [tft].[ChannelCode]
             INNER JOIN
             [dbo].[v_PatientTopicSessions] AS [vpts]
             ON [vpts].[TopicSessionId] = [ts].[Id]
    WHERE    [PatientId] = @patient_id
             AND [tft].[SampleRate] IS NOT NULL
    GROUP BY [tft].[FeedTypeId], [tft].[ChannelCode], [ict].[label], [tft].[SampleRate], [ict].[priority]
    ORDER BY [ict].[priority];
END

GO
CREATE PROCEDURE [dbo].[GetPatientData]
@PatientId [dbo].[DPATIENT_ID]
AS
BEGIN
    SELECT   ISNULL([int_person].[last_nm], '') + ISNULL(', ' + [int_person].[first_nm], '') AS [patient_name],
             [int_monitor].[monitor_name] AS [MONITOR_NAME],
             [int_mrn_map].[mrn_xid2] AS [ACCOUNT_ID],
             [int_mrn_map].[mrn_xid] AS [MRN_ID],
             [int_monitor].[unit_org_id] AS [UNIT_ID],
             [CHILD].[organization_cd] AS [UNIT_NAME],
             [PARENT].[organization_id] AS [FACILITY_ID],
             [PARENT].[organization_nm] AS [FACILITY_NAME],
             [int_patient].[dob] AS [DOB],
             [int_encounter].[admit_dt] AS [ADMIT_TIME],
             [int_encounter].[discharge_dt] AS [DISCHARGED_TIME],
             [int_patient_monitor].[patient_monitor_id] AS [PATIENT_MONITOR_ID],
             CASE WHEN [int_encounter].[discharge_dt] IS NULL
                       AND ISNULL([int_monitor].[standby], 0) <> 1 THEN 'A' WHEN [int_encounter].[discharge_dt] IS NULL
                                                                                 AND ISNULL([int_monitor].[standby], 0) = 1 THEN 'S' ELSE 'D' END AS [STATUS],
             [int_patient_monitor].[last_result_dt] AS [PRECEDENCE]
    FROM     [dbo].[int_mrn_map]
             INNER JOIN
             [dbo].[int_patient]
             ON [int_patient].[patient_id] = [int_mrn_map].[patient_id]
             INNER JOIN
             [dbo].[int_person]
             ON [int_person].[person_id] = [int_mrn_map].[patient_id]
             INNER JOIN
             [dbo].[int_encounter]
             ON [int_encounter].[patient_id] = [int_mrn_map].[patient_id]
             INNER JOIN
             [dbo].[int_patient_monitor]
             ON ([int_encounter].[encounter_id] = [int_patient_monitor].[encounter_id])
             INNER JOIN
             [dbo].[int_monitor]
             ON ([int_patient_monitor].[monitor_id] = [int_monitor].[monitor_id])
             INNER JOIN
             [dbo].[int_organization] AS [CHILD]
             ON ([int_monitor].[unit_org_id] = [CHILD].[organization_id])
             LEFT OUTER JOIN
             [dbo].[int_organization] AS [PARENT]
             ON [PARENT].[organization_id] = [CHILD].[parent_organization_id]
    WHERE    [int_mrn_map].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
             AND [int_mrn_map].[merge_cd] = 'C'
    UNION
    SELECT   [patient_name],
             [MONITOR_NAME],
             [ACCOUNT_ID],
             [MRN_ID],
             [UNIT_ID],
             [UNIT_NAME],
             [FACILITY_ID],
             [FACILITY_NAME],
             [DOB],
             [dbo].[fnUtcDateTimeToLocalTime]([ADMIT_TIME_UTC]) AS [ADMIT_TIME],
             [dbo].[fnUtcDateTimeToLocalTime]([DISCHARGED_TIME_UTC]) AS [DISCHARGED_TIME],
             [PATIENT_MONITOR_ID],
             [STATUS],
             [dbo].[fnUtcDateTimeToLocalTime](ISNULL([DISCHARGED_TIME_UTC], GETUTCDATE())) AS [PRECEDENCE]
    FROM     [dbo].[v_PatientSessions]
    WHERE    [patient_id] = @PatientId
    ORDER BY [STATUS] ASC, [PRECEDENCE] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetPatientEventsByType]
@user_id UNIQUEIDENTIFIER, @patient_id UNIQUEIDENTIFIER, @type INT
AS
BEGIN
    SELECT [AE].[num_events],
           [AE].[sample_rate],
           [AE].[event_data]
    FROM   [dbo].[AnalysisEvents] AS [AE]
    WHERE  [AE].[user_id] = @user_id
           AND [AE].[patient_id] = @patient_id
           AND [AE].[type] = @type;
END

GO
CREATE PROCEDURE [dbo].[GetPatientEventsCountByType]
@user_id UNIQUEIDENTIFIER, @patient_id UNIQUEIDENTIFIER, @type INT
AS
BEGIN
    SELECT [AE].[num_events] AS [EVENT_COUNT]
    FROM   [dbo].[AnalysisEvents] AS [AE]
    WHERE  [AE].[user_id] = @user_id
           AND [AE].[patient_id] = @patient_id
           AND [AE].[type] = @type;
END

GO
CREATE PROCEDURE [dbo].[GetPatientEventTypes]
@user_id UNIQUEIDENTIFIER, @patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [AE].[type]
    FROM   [dbo].[AnalysisEvents] AS [AE]
    WHERE  ([AE].[user_id] = @user_id)
           AND ([AE].[patient_id] = @patient_id);
END

GO
CREATE PROCEDURE [dbo].[GetPatientInformation]
@PatientId NVARCHAR (50)=NULL, @OrgId NVARCHAR (50)=NULL
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [int_mrn_map].[patient_id],
           [last_nm],
           [first_nm],
           [middle_nm],
           [mrn_xid],
           [mrn_xid2],
           [int_mrn_map].[organization_id],
           [dob],
           [gender_cid],
           [code],
           [int_patient].[height],
           [int_patient].[weight],
           [bsa],
           [adt_adm_sw]
    FROM   (SELECT @PatientId AS [ID1],
                   @OrgId AS [OrgId]) AS [WantedPatient]
           LEFT OUTER JOIN
           [dbo].[int_mrn_map]
           ON [WantedPatient].[ID1] = [int_mrn_map].[mrn_xid]
              AND [WantedPatient].[OrgId] = [int_mrn_map].[organization_id]
           LEFT OUTER JOIN
           [dbo].[int_person]
           ON [int_mrn_map].[patient_id] = [int_person].[person_id]
           LEFT OUTER JOIN
           [dbo].[int_patient]
           ON [int_patient].[patient_id] = [int_mrn_map].[patient_id]
           LEFT OUTER JOIN
           [dbo].[int_misc_code]
           ON [int_misc_code].[code_id] = [int_patient].[gender_cid];
END

GO
CREATE PROCEDURE [dbo].[GetPatientLeadChangeLog]
@patient_id UNIQUEIDENTIFIER, @start_ft BIGINT, @end_ft BIGINT
AS
BEGIN
    DECLARE @l_patient_id AS UNIQUEIDENTIFIER = @patient_id;
    DECLARE @l_start_ft AS BIGINT = @start_ft;
    DECLARE @l_end_ft AS BIGINT = @end_ft;
    SELECT   MIN([PT].[param_ft]) AS [START_FT],
             MIN([PT].[param_dt]) AS [START_DT],
             [PT].[value1] AS [VALUE1],
             [PT].[value2] AS [VALUE2],
             CAST (224 AS SMALLINT) AS [SAMPLE_RATE]
    FROM     [dbo].[int_param_timetag] AS [PT]
    WHERE    ([PT].[patient_id] = @l_patient_id)
             AND ([PT].[timetag_type] = 12289)
             AND (@l_start_ft <= [PT].[param_ft])
             AND (@l_end_ft >= [PT].[param_ft])
    GROUP BY [value1], [value2], [patient_channel_id]
    ORDER BY [START_FT];
END

GO
CREATE PROCEDURE [dbo].[GetPatientMonitorData]
@PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [pm].[patient_monitor_id] AS [PATIENT_MONITOR_ID],
           [pm].[patient_id] AS [patient_id],
           [mrn].[mrn_xid] AS [MRN_XID],
           [p].[first_nm] AS [FIRST_NAME],
           [p].[last_nm] AS [LAST_NAME],
           [m].[monitor_name] AS [MONITOR_NAME],
           [pm].[monitor_connect_dt] AS [MONITOR_CONNECT_DT]
    FROM   [dbo].[int_patient_monitor] AS [pm]
           INNER JOIN
           [dbo].[int_monitor] AS [m]
           ON [m].[monitor_id] = [pm].[monitor_id]
           INNER JOIN
           [dbo].[int_mrn_map] AS [mrn]
           ON [mrn].[patient_id] = [pm].[patient_id]
              AND [mrn].[merge_cd] = 'C'
           INNER JOIN
           [dbo].[int_person] AS [p]
           ON [p].[person_id] = [pm].[patient_id]
    WHERE  [pm].[patient_id] = @PatientId
    UNION ALL
    SELECT [PATIENT_MONITOR_ID],
           [patient_id],
           [MRN_ID] AS [MRN_XID],
           [FIRST_NAME],
           [LAST_NAME],
           [MONITOR_NAME],
           [dbo].[fnUtcDateTimeToLocalTime]([ADMIT_TIME_UTC]) AS [MONITOR_CONNECT_DT]
    FROM   [dbo].[v_PatientSessions]
    WHERE  [patient_id] = @PatientId;
END

GO
CREATE PROCEDURE [dbo].[GetPatientSavedEvent]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [start_ms],
             [start_dt],
             [center_ft],
             [duration],
             [value1],
             [value2],
             [title],
             [comment],
             [sweep_speed],
             [minutes_per_page],
             [print_format],
             [annotate_data],
             [beat_color],
             [thumbnailChannel]
    FROM     [dbo].[int_SavedEvent]
    WHERE    [patient_id] = @patient_id
             AND [event_id] = @event_id
    ORDER BY [insert_dt] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetPatientSavedEventCalipers]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [channel_type],
           [caliper_type],
           [calipers_orientation],
           [caliper_text],
           [caliper_start_ms],
           [caliper_end_ms],
           [caliper_top],
           [caliper_bottom]
    FROM   [dbo].[int_savedevent_calipers]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
END

GO
CREATE PROCEDURE [dbo].[GetPatientSavedEventLeadLog]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @primary_channel BIT, @timetag_type INT
AS
BEGIN
    SELECT [lead_type] AS [LEADTYPE],
           [start_ms] AS [STARTMS]
    FROM   [dbo].[int_savedevent_event_log]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id
           AND [primary_channel] = @primary_channel
           AND [timetag_type] = @timetag_type;
END

GO
CREATE PROCEDURE [dbo].[GetPatientSavedEventMonitorLog]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @timetag_type INT
AS
BEGIN
    SELECT [monitor_event_type] AS [EVENTTYPE],
           [start_ms] AS [STARTMS],
           [end_ms] AS [ENDMS]
    FROM   [dbo].[int_savedevent_event_log]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id
           AND [timetag_type] = @timetag_type;
END

GO
CREATE PROCEDURE [dbo].[GetPatientSavedEventSummary]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [event_id] AS [ID],
             [start_ms],
             [duration],
             [start_dt],
             [title],
             [comment],
             [sweep_speed],
             [minutes_per_page],
             [thumbnailChannel]
    FROM     [dbo].[int_SavedEvent]
    WHERE    [patient_id] = @patient_id
    ORDER BY [start_dt] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetPatientSavedEventVitals]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @gds_code NVARCHAR (80)
AS
BEGIN
    SELECT [result_dt],
           [result_value]
    FROM   [dbo].[int_savedevent_vitals]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id
           AND [gds_code] = @gds_code;
END

GO
CREATE PROCEDURE [dbo].[GetPatientSavedEventVitalsNew]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [result_dt],
           [result_value],
           [gds_code]
    FROM   [dbo].[int_savedevent_vitals]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
END

GO
CREATE PROCEDURE [dbo].[GetPatientSavedEventWaveForm]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [SEWF].[channel_id] AS [CHANNEL_ID],
             [SEWF].[waveform_category] AS [TYPE],
             [SEWF].[scale] AS [SCALE_VALUE],
             [SEWF].[scale_min],
             [SEWF].[scale_max],
             [SEWF].[scale_type],
             [SEWF].[sample_rate],
             [SEWF].[sample_count],
             [SEWF].[num_Ypoints],
             [SEWF].[baseline],
             [SEWF].[Ypoints_per_unit],
             [SEWF].[visible],
             [CT].[label],
             [SEWF].[waveform_data],
             [SEWF].[num_timelogs],
             [SEWF].[timelog_data],
             [SEWF].[waveform_color],
             [SEWF].[scale_unit_type]
    FROM     [dbo].[int_savedevent_waveform] AS [SEWF]
             INNER JOIN
             [dbo].[int_channel_type] AS [CT]
             ON [SEWF].[waveform_category] = [CT].[channel_code]
    WHERE    ([SEWF].[patient_id] = @patient_id
              AND [SEWF].[event_id] = @event_id
              AND [SEWF].[visible] = 1)
    ORDER BY [SEWF].[wave_index];
END

GO
CREATE PROCEDURE [dbo].[GetPatientsBySearch]
@last_name [dbo].[DLAST_NAME], @first_name [dbo].[DFIRST_NAME], @mrn_id [dbo].[DMRN_ID], @login_name NVARCHAR (64), @is_vip_searchable NVARCHAR (4), @is_restricted_unit_searchable NVARCHAR (4)
AS
BEGIN
    DECLARE @QUERY AS VARCHAR (4000), @CONDITION AS VARCHAR (1000);
    SET @QUERY = '
SELECT 
    int_mrn_map.patient_id AS patient_id, 
    ISNULL(int_person.last_nm,'''') + ISNULL('', '' + int_person.first_nm,'''') AS patient_name, 
    int_monitor.monitor_name AS MONITOR_NAME,
    int_mrn_map.mrn_xid2 AS ACCOUNT_ID,
    int_mrn_map.mrn_xid AS MRN_ID,
    ORG1.organization_id AS UNIT_ID,
    ORG1.organization_cd AS UNIT_NAME,
    ORG2.organization_id AS FACILITY_ID,
    ORG2.organization_nm AS FACILITY_NAME,
    int_patient.dob AS DOB,
    int_encounter.admit_dt AS ADMIT_TIME,
    int_encounter.discharge_dt AS DISCHARGED_TIME,
    int_patient_monitor.last_result_dt AS PRECEDENCE,
    int_patient_monitor.patient_monitor_id AS PATIENT_MONITOR_ID,
    STATUS = case  
        WHEN int_encounter.discharge_dt IS NULL 
      THEN ''A''
          ELSE ''D''
    END
FROM
    dbo.int_patient_monitor
    INNER JOIN dbo.int_encounter ON int_encounter.encounter_id = int_patient_monitor.encounter_id 
    INNER JOIN dbo.int_monitor ON int_patient_monitor.monitor_id = int_monitor.monitor_id 
    INNER JOIN dbo.int_organization  AS ORG1 ON (int_monitor.unit_org_id = ORG1.organization_id)                                
    INNER JOIN dbo.int_mrn_map ON int_encounter.patient_id = int_mrn_map.patient_id AND int_mrn_map.merge_cd = ''C''
    INNER JOIN dbo.int_person ON int_encounter.patient_id = int_person.person_id 
    INNER JOIN dbo.int_patient ON int_encounter.patient_id = int_patient.patient_id
    LEFT OUTER JOIN dbo.int_account ON int_encounter.account_id = int_account.account_id 
    LEFT OUTER JOIN dbo.int_organization AS ORG2 ON ORG2.organization_id=ORG1.parent_organization_id
 ';
    SET @last_name = LTRIM(RTRIM(@last_name));
    SET @first_name = LTRIM(RTRIM(@first_name));
    SET @mrn_id = LTRIM(RTRIM(@mrn_id));
    SET @CONDITION = ISNULL(@CONDITION, '');
    IF (@is_restricted_unit_searchable <> '1')
        BEGIN
            SET @CONDITION += ' ORG1.organization_id 
                    NOT IN (SELECT cdr_restricted_organization.organization_id FROM dbo.cdr_restricted_organization
                    WHERE cdr_restricted_organization.user_role_id = 
                    (SELECT user_role_id FROM dbo.int_user WHERE login_name =''' + @login_name + '''))';
        END
    IF (LEN(@last_name) > 0)
        BEGIN
            SET @last_name = REPLACE(@last_name, '*', '%');
            SET @last_name = QUOTENAME(@last_name, '''');
            IF (LEN(@CONDITION) > 0)
                SET @CONDITION += ' AND ';
            SET @CONDITION += ' (int_person.last_nm like ' + @last_name + ')';
        END
    IF (LEN(@first_name) > 0)
        BEGIN
            SET @first_name = REPLACE(@first_name, '*', '%');
            SET @first_name = QUOTENAME(@first_name, '''');
            IF (LEN(@CONDITION) > 0)
                SET @CONDITION += ' AND ';
            SET @CONDITION += ' (int_person.first_nm like ' + @first_name + ')';
        END
    IF (LEN(@mrn_id) > 0)
        BEGIN
            SET @mrn_id = QUOTENAME(@mrn_id, '''');
            SET @mrn_id = REPLACE(@mrn_id, '\', '\\');
            SET @mrn_id = REPLACE(@mrn_id, '[', '\[');
            SET @mrn_id = REPLACE(@mrn_id, ']', '\]');
            SET @mrn_id = REPLACE(@mrn_id, '_', '\_');
            SET @mrn_id = REPLACE(@mrn_id, '%', '\%');
            SET @mrn_id = REPLACE(@mrn_id, '^', '\^');
            SET @mrn_id = REPLACE(@mrn_id, '*', '%');
            IF (LEN(@CONDITION) > 0)
                SET @CONDITION += ' AND ';
            SET @CONDITION += ' (int_mrn_map.mrn_xid like ' + @mrn_id + ' ESCAPE ''\'')';
        END
    IF (@is_vip_searchable <> '1')
        BEGIN
            IF (LEN(@CONDITION) > 0)
                BEGIN
                    SET @CONDITION += ' AND ';
                END
            SET @CONDITION += 'int_encounter.vip_sw IS NULL';
        END
    IF (LEN(@CONDITION) > 0)
        BEGIN
            SET @QUERY += ' WHERE ';
            SET @QUERY += @CONDITION;
        END
    SET @QUERY += '

UNION

SELECT
    [patient_id],
    [patient_name],
    [MONITOR_NAME],
    [ACCOUNT_ID],
    [MRN_ID],
    [UNIT_ID],
    [UNIT_NAME],
    [FACILITY_ID],
    [FACILITY_NAME],
    [DOB],
    [ADMIT_TIME],
    [DISCHARGED_TIME],
    [ADMIT_TIME] AS [PRECEDENCE],
    [PATIENT_MONITOR_ID],
    [STATUS]
FROM
    [dbo].[v_StitchedPatients]
 ';
    SET @CONDITION = '';
    IF (@is_restricted_unit_searchable <> '1')
        BEGIN
            SET @CONDITION += ' [UNIT_ID] 
                    NOT IN (SELECT cdr_restricted_organization.organization_id FROM dbo.cdr_restricted_organization
                    WHERE cdr_restricted_organization.user_role_id = 
                    (SELECT user_role_id FROM dbo.int_user WHERE login_name =''' + @login_name + '''))';
        END
    IF (LEN(@last_name) > 0)
        BEGIN
            IF (LEN(@CONDITION) > 0)
                SET @CONDITION += ' AND ';
            SET @CONDITION += ' (LTRIM(RTRIM([LAST_NAME])) like ' + @last_name + ')';
        END
    IF (LEN(@first_name) > 0)
        BEGIN
            IF (LEN(@CONDITION) > 0)
                SET @CONDITION += ' AND ';
            SET @CONDITION += ' (LTRIM(RTRIM([FIRST_NAME])) like ' + @first_name + ')';
        END
    IF (LEN(@mrn_id) > 0)
        BEGIN
            IF (LEN(@CONDITION) > 0)
                SET @CONDITION += ' AND ';
            SET @CONDITION += ' (LTRIM(RTRIM([MRN_ID])) like ' + @mrn_id + ' ESCAPE ''\'')';
        END
    IF (LEN(@CONDITION) > 0)
        BEGIN
            SET @QUERY += ' WHERE patient_id IS NOT NULL AND ';
            SET @QUERY += @CONDITION;
        END
    SET @QUERY += '
ORDER BY 
    [ADMIT_TIME] DESC, 
    [PRECEDENCE] DESC,
    [STATUS],
    [patient_name],
    [MONITOR_NAME]';
    EXECUTE (@QUERY);
END

GO
CREATE PROCEDURE [dbo].[GetPatientsList]
@unit_id [dbo].[DUNIT_ID], @status NVARCHAR (40)
AS
BEGIN
    DECLARE @return_value TABLE (
        [patient_id]         UNIQUEIDENTIFIER,
        [patient_name]       NVARCHAR (100)  ,
        [MONITOR_NAME]       NVARCHAR (30)   ,
        [ACCOUNT_ID]         NVARCHAR (30)   ,
        [MRN_ID]             NVARCHAR (30)   ,
        [UNIT_ID]            UNIQUEIDENTIFIER,
        [organization_cd]    NVARCHAR (20)   ,
        [FACILITY_ID]        UNIQUEIDENTIFIER,
        [FACILITY_NAME]      NVARCHAR (20)   ,
        [DOB]                DATETIME        ,
        [ADMIT_TIME]         DATETIME        ,
        [DISCHARGED_TIME]    DATETIME        ,
        [PATIENT_MONITOR_ID] UNIQUEIDENTIFIER,
        [STATUS]             VARCHAR (40)    );
    INSERT @return_value
    EXECUTE [dbo].[GetUserPatientsList] @unit_id = @unit_id, @status = @status;
    SELECT [patient_id],
           [patient_name],
           [MONITOR_NAME],
           [ACCOUNT_ID],
           [MRN_ID],
           [UNIT_ID],
           [organization_cd],
           [FACILITY_ID],
           [FACILITY_NAME],
           [DOB],
           [ADMIT_TIME],
           [DISCHARGED_TIME],
           [PATIENT_MONITOR_ID],
           [STATUS]
    FROM   @return_value;
END

GO
CREATE PROCEDURE [dbo].[GetPatientStartftFromVitals]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT MIN([start_ft].[start_ft]) AS [start_ft]
    FROM   (SELECT MIN([result_ft]) AS [start_ft]
            FROM   [dbo].[int_result]
            WHERE  [patient_id] = @patient_id
            UNION ALL
            SELECT [dbo].[fnDateTimeToFileTime](MIN([TimestampUTC])) AS [start_ft]
            FROM   [dbo].[VitalsData]
            WHERE  [TopicSessionId] IN (SELECT [TopicSessionId]
                                        FROM   [dbo].[v_PatientTopicSessions]
                                        WHERE  [PatientId] = @patient_id)) AS [start_ft];
END

GO
CREATE PROCEDURE [dbo].[GetPatientTimeOfDay]
@patient_id UNIQUEIDENTIFIER, @start_ft BIGINT
AS
BEGIN
    SELECT   [start_ft],
             [start_dt]
    FROM     [dbo].[int_waveform]
    WHERE    [patient_id] = @patient_id
             AND @start_ft >= [start_ft]
             AND @start_ft <= [end_ft]
    ORDER BY [start_ft];
END

GO
CREATE PROCEDURE [dbo].[GetPatientTimes]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT MIN([int_waveform].[start_ft]) AS [start_ft],
           MAX([int_waveform].[end_ft]) AS [end_ft]
    FROM   [dbo].[int_waveform]
    WHERE  [int_waveform].[patient_id] = @patient_id;
END

GO
CREATE PROCEDURE [dbo].[GetPatientTwelveLeadReport]
@patient_id UNIQUEIDENTIFIER, @report_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [report_dt],
           [report_data]
    FROM   [dbo].[int_12lead_report]
    WHERE  [patient_id] = @patient_id
           AND [report_id] = @report_id;
END

GO
CREATE PROCEDURE [dbo].[GetPatientTwelveLeadReportNew]
@patient_id UNIQUEIDENTIFIER, @report_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [TLRN].[report_id],
           [TLRN].[report_dt],
           [TLRN].[version_number],
           [TLRN].[patient_name],
           [TLRN].[id_number],
           [TLRN].[birthdate],
           [TLRN].[age],
           [TLRN].[sex],
           [TLRN].[height],
           [TLRN].[weight],
           [TLRN].[report_date],
           [TLRN].[report_time],
           [TLRN].[vent_rate],
           [TLRN].[pr_interval],
           [TLRN].[qt],
           [TLRN].[qtc],
           [TLRN].[qrs_duration],
           [TLRN].[p_axis],
           [TLRN].[qrs_axis],
           [TLRN].[t_axis],
           [TLRN].[interpretation],
           [TLRN].[interpretation_edits],
           [USR].[user_id],
           [USR].[login_name],
           [TLRN].[sample_rate],
           [TLRN].[sample_count],
           [TLRN].[num_Ypoints],
           [TLRN].[baseline],
           [TLRN].[Ypoints_per_unit],
           [TLRN].[waveform_data],
           [TLRN].[send_request],
           [TLRN].[send_complete],
           [TLRN].[send_dt]
    FROM   [dbo].[int_12lead_report_new] AS [TLRN]
           LEFT OUTER JOIN
           [dbo].[int_user] AS [USR]
           ON [USR].[user_id] = [TLRN].[user_id]
    WHERE  [TLRN].[patient_id] = @patient_id
           AND [TLRN].[report_id] = @report_id;
END

GO
CREATE PROCEDURE [dbo].[GetPatientTwelveLeadReports]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [report_id],
             [report_dt]
    FROM     [dbo].[int_12lead_report]
    WHERE    [patient_id] = @patient_id
    ORDER BY [report_dt] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetPatientVitalsByGDSCodes]
@gds_codes [dbo].[GdsCodes] READONLY, @patient_id UNIQUEIDENTIFIER, @start_dt_utc DATETIME, @end_dt_utc DATETIME
AS
BEGIN
    DECLARE @start_ft AS BIGINT = [dbo].[fnDateTimeToFileTime](@start_dt_utc);
    DECLARE @end_ft AS BIGINT = [dbo].[fnDateTimeToFileTime](@end_dt_utc);
    SELECT   [vitals].[RowNumber] AS [ROW_NUMBER],
             [vitals].[GDS_CODE],
             [vitals].[VALUE],
             [vitals].[RESULT_TIME],
             [vitals].[RESULT_FILE_TIME],
             [vitals].[IS_RESULT_LOCALIZED]
    FROM     (SELECT ROW_NUMBER() OVER (PARTITION BY [imc].[code] ORDER BY [ir].[result_ft] DESC) AS [RowNumber],
                     [imc].[code] AS [GDS_CODE],
                     [ir].[result_value] AS [VALUE],
                     CAST (NULL AS DATETIME) AS [RESULT_TIME],
                     [ir].[result_ft] AS [RESULT_FILE_TIME],
                     CAST (1 AS BIT) AS [IS_RESULT_LOCALIZED]
              FROM   [dbo].[int_result] AS [ir]
                     INNER JOIN
                     [dbo].[int_misc_code] AS [imc]
                     ON [imc].[code_id] = [ir].[test_cid]
                     INNER JOIN
                     @gds_codes AS [codes]
                     ON [imc].[code] = [codes].[GdsCode]
              WHERE  [ir].[patient_id] = @patient_id
                     AND [ir].[result_ft] >= @start_ft
                     AND [ir].[result_ft] <= @end_ft
                     AND [ir].[result_value] IS NOT NULL
              UNION ALL
              SELECT ROW_NUMBER() OVER (PARTITION BY [vd].[FeedTypeId], [vd].[TopicSessionId] ORDER BY [vd].[TimestampUTC] DESC) AS [RowNumber],
                     [gcm].[GdsCode] AS [GDS_CODE],
                     [vd].[Value] AS [VALUE],
                     CAST (NULL AS DATETIME) AS [RESULT_TIME],
                     [dbo].[fnDateTimeToFileTime]([vd].[TimestampUTC]) AS [RESULT_FILE_TIME],
                     CAST (0 AS BIT) AS [IS_RESULT_LOCALIZED]
              FROM   [dbo].[VitalsData] AS [vd]
                     INNER JOIN
                     [dbo].[GdsCodeMap] AS [gcm]
                     ON [gcm].[FeedTypeId] = [vd].[FeedTypeId]
                        AND [gcm].[Name] = [vd].[Name]
                     INNER JOIN
                     @gds_codes AS [codes]
                     ON [codes].[GdsCode] = [gcm].[GdsCode]
                     INNER JOIN
                     [dbo].[v_PatientTopicSessions]
                     ON [v_PatientTopicSessions].[TopicSessionId] = [vd].[TopicSessionId]
              WHERE  [PatientId] = @patient_id
                     AND [vd].[TimestampUTC] >= @start_dt_utc
                     AND [vd].[TimestampUTC] <= @end_dt_utc) AS [vitals]
    WHERE    [vitals].[RowNumber] = 1
    ORDER BY RESULT_FILE_TIME DESC;
END

GO
CREATE PROCEDURE [dbo].[GetPatientVitalsByType]
@patient_id UNIQUEIDENTIFIER, @type INT
AS
BEGIN
    (SELECT  Result.result_value AS VALUE,
             CAST (NULL AS DATETIME) AS RESULT_TIME,
             Result.Sequence AS SEQ_NUM,
             Result.result_ft AS RESULT_FILE_TIME,
             CAST (1 AS BIT) AS [IS_RESULT_LOCALIZED]
     FROM    [dbo].[int_result] AS [Result]
             INNER JOIN
             [dbo].[int_misc_code] AS [Code]
             ON Result.test_cid = Code.code_id
     WHERE   (Result.patient_id = @patient_id)
             AND (Code.code_id = @type)
     UNION ALL
     SELECT  VitalsData.Value AS VALUE,
             CAST (NULL AS DATETIME) AS RESULT_TIME,
             0 AS SEQ_NUM,
             [TimestampUTCFileTime].[FileTime] AS [RESULT_FILE_TIME],
             CAST (0 AS BIT) AS [IS_RESULT_LOCALIZED]
     FROM    [dbo].[VitalsData]
             INNER JOIN
             [dbo].[GdsCodeMap]
             ON GdsCodeMap.CodeId = @type
                AND GdsCodeMap.FeedTypeId = VitalsData.FeedTypeId
                AND GdsCodeMap.Name = VitalsData.Name
             INNER JOIN
             dbo.TopicSessions
             ON TopicSessions.Id = VitalsData.TopicSessionId CROSS APPLY [dbo].[fntDateTimeToFileTime]([TimestampUTC]) AS [TimestampUTCFileTime]
     WHERE   TopicSessions.PatientSessionId IN (SELECT PatientSessionId
                                                FROM   dbo.PatientSessionsMap
                                                       INNER JOIN
                                                       (SELECT   MAX(Sequence) AS MaxSeq
                                                        FROM     dbo.PatientSessionsMap
                                                        WHERE    PatientId = @patient_id
                                                        GROUP BY PatientSessionId) AS PatientSessionMaxSeq
                                                       ON Sequence = PatientSessionMaxSeq.MaxSeq))
    ORDER BY RESULT_FILE_TIME ASC;
END

GO
CREATE PROCEDURE [dbo].[GetPatientVitalsByTypeUpdate]
@patient_id UNIQUEIDENTIFIER, @type INT, @seq_num_after BIGINT, @dateAfter BIGINT
AS
BEGIN
    DECLARE @l_dateAfter AS DATETIME = dbo.fnFileTimeToDateTime(@dateAfter);
    SELECT   RESULT.result_value AS VALUE,
             CAST (NULL AS DATETIME) AS RESULT_TIME,
             RESULT.Sequence AS SEQ_NUM,
             RESULT.result_ft AS RESULT_FILE_TIME,
             CAST (1 AS BIT) AS [IS_RESULT_LOCALIZED]
    FROM     [dbo].[int_result] AS RESULT
             INNER JOIN
             [dbo].[int_misc_code] AS CODE
             ON RESULT.test_cid = CODE.code_id
    WHERE    RESULT.patient_id = @patient_id
             AND CODE.code_id = @type
             AND RESULT.Sequence > @seq_num_after
    UNION ALL
    SELECT   VitalsData.Value AS VALUE,
             CAST (NULL AS DATETIME) AS RESULT_TIME,
             0 AS SEQ_NUM,
             dbo.fnDateTimeToFileTime(VitalsData.TimestampUTC) AS RESULT_FILE_TIME,
             CAST (0 AS BIT) AS [IS_RESULT_LOCALIZED]
    FROM     [dbo].[VitalsData]
             INNER JOIN
             [dbo].[GdsCodeMap]
             ON GdsCodeMap.CodeId = @type
                AND GdsCodeMap.FeedTypeId = VitalsData.FeedTypeId
                AND GdsCodeMap.Name = VitalsData.Name
             INNER JOIN
             dbo.TopicSessions
             ON TopicSessions.Id = VitalsData.TopicSessionId
    WHERE    TopicSessions.PatientSessionId IN (SELECT PatientSessionId
                                                FROM   dbo.PatientSessionsMap
                                                       INNER JOIN
                                                       (SELECT   MAX(Sequence) AS MaxSeq
                                                        FROM     dbo.PatientSessionsMap
                                                        GROUP BY PatientSessionId) AS PatientSessionMaxSeq
                                                       ON Sequence = PatientSessionMaxSeq.MaxSeq
                                                WHERE  PatientId = @patient_id)
             AND (TimestampUTC > @l_dateAfter)
    ORDER BY RESULT_FILE_TIME ASC;
END

GO
CREATE PROCEDURE [dbo].[GetPatientVitalSignByChannels]
@PatientId UNIQUEIDENTIFIER, @ChannelTypes [dbo].[StringList] READONLY
AS
BEGIN
    DECLARE @VitalValue AS [dbo].[VitalValues];
    INSERT INTO @VitalValue
    SELECT [vital_value]
    FROM   [dbo].[int_vital_live]
    WHERE  [patient_id] = @PatientId;
    ((SELECT [TopicFeedTypes].[FeedTypeId] AS [PATIENT_CHANNEL_ID],
             [VitalsAll].[GdsCode] AS [GDS_CODE],
             [VitalsAll].[Value] AS [VITAL_VALUE],
             [int_channel_vital].[format_string] AS [FORMAT_STRING]
      FROM   @ChannelTypes AS [CHT]
             INNER JOIN
             [dbo].[TopicFeedTypes]
             ON [TopicFeedTypes].[FeedTypeId] = [CHT].[Item]
             INNER JOIN
             [dbo].[int_channel_vital]
             ON [int_channel_vital].[channel_type_id] = [TopicFeedTypes].[ChannelTypeId]
             INNER JOIN
             (SELECT ROW_NUMBER() OVER (PARTITION BY [LiveData].[TopicInstanceId], [GdsCode] ORDER BY [TimestampUTC] DESC) AS [RowNumber],
                     [LiveData].[FeedTypeId],
                     [LiveData].[TopicInstanceId],
                     [LiveData].[Name],
                     [LiveData].[Value],
                     [GdsCode],
                     [GdsCodeMap].[CodeId]
              FROM   [dbo].[LiveData]
                     INNER JOIN
                     [dbo].[TopicSessions]
                     ON [TopicSessions].[TopicInstanceId] = [LiveData].[TopicInstanceId]
                        AND [TopicSessions].[EndTimeUTC] IS NULL
                     INNER JOIN
                     [dbo].[GdsCodeMap]
                     ON [GdsCodeMap].[FeedTypeId] = [LiveData].[FeedTypeId]
                        AND [GdsCodeMap].[Name] = [LiveData].[Name]
              WHERE  [TopicSessions].[Id] IN (SELECT [TopicSessionId]
                                              FROM   [dbo].[v_PatientTopicSessions]
                                              WHERE  [PatientId] = @PatientId)) AS [VitalsAll]
             ON [VitalsAll].[CodeId] = [int_channel_vital].[gds_cid]
      WHERE  [VitalsAll].[RowNumber] = 1)
     UNION ALL
     (SELECT [PATCHL].[channel_type_id] AS [PATIENT_CHANNEL_ID],
             [MSCODE].[code] AS [GDS_CODE],
             [LiveValue].[ResultValue] AS [VITAL_VALUE],
             [CHVIT].[format_string] AS [FORMAT_STRING]
      FROM   [dbo].[int_patient_channel] AS [PATCHL]
             INNER JOIN
             [dbo].[int_channel_vital] AS [CHVIT]
             ON [PATCHL].[channel_type_id] = [CHVIT].[channel_type_id]
                AND [PATCHL].[active_sw] = 1
             INNER JOIN
             [dbo].[int_vital_live] AS [VITALRES]
             ON [PATCHL].[patient_id] = [VITALRES].[patient_id]
             LEFT OUTER JOIN
             (SELECT [idx],
                     [value],
                     SUBSTRING([value], CHARINDEX('=', [value]) + 1, LEN([value])) AS [ResultValue],
                     CONVERT (INT, SUBSTRING([value], 0, CHARINDEX('=', [value]))) AS [GdsCodeId]
              FROM   [dbo].[fn_Vital_Merge]((@VitalValue), '|')) AS [LiveValue]
             ON [LiveValue].[GdsCodeId] = [CHVIT].[gds_cid]
             LEFT OUTER JOIN
             [dbo].[int_misc_code] AS [MSCODE]
             ON [MSCODE].[code_id] = [CHVIT].[gds_cid]
                AND [MSCODE].[code] IS NOT NULL
      WHERE  [PATCHL].[patient_id] = @PatientId
             AND [PATCHL].[channel_type_id] IN (SELECT [Item]
                                                FROM   @ChannelTypes)
             AND [PATCHL].[active_sw] = 1
             AND [LiveValue].[idx] IS NOT NULL))
    ORDER BY VITAL_VALUE;
END

GO
CREATE PROCEDURE [dbo].[GetPatientVitalsTimeHistory]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    DECLARE @sql AS VARCHAR (MAX) = '
SELECT distinct
		result_ft,
		result_dt
	FROM
		dbo.int_result
	WHERE
		patient_id = @patient_id
		
UNION ALL

	SELECT dbo.fnDateTimeToFileTime(TimestampUTC) as result_ft, dbo.fnUtcDateTimeToLocalTime(TimestampUTC) as result_dt from [dbo].[VitalsData]
	inner join dbo.TopicSessions on VitalsData.TopicSessionId = TopicSessions.Id
	WHERE TopicSessions.PatientSessionId IN
	(
		SELECT PatientSessionId
		FROM dbo.PatientSessionsMap
		INNER JOIN
		(
		SELECT MAX(Sequence) AS MaxSeq
			FROM dbo.PatientSessionsMap
			GROUP BY PatientSessionId
		) AS PatientSessionMaxSeq
			ON Sequence = PatientSessionMaxSeq.MaxSeq
		WHERE PatientId = @patient_id
	)
';
    SET @sql = REPLACE(@sql, '@patient_id', QUOTENAME(@patient_id, ''''));
    SET @sql = @sql + ' ORDER BY result_ft asc';
    EXECUTE (@sql);
END

GO
CREATE PROCEDURE [dbo].[GetPatientVitalsTimeUpdate]
@patient_id UNIQUEIDENTIFIER, @after_ft BIGINT
AS
BEGIN
    SELECT   result_ft AS result_ft,
             result_dt
    FROM     dbo.int_result
    WHERE    patient_id = @patient_id
             AND result_ft > @after_ft
    UNION ALL
    SELECT   dbo.fnDateTimeToFileTime(TimestampUTC) AS result_ft,
             CAST (NULL AS DATETIME) AS result_dt
    FROM     [dbo].[VitalsData]
             INNER JOIN
             [dbo].[TopicSessions]
             ON TopicSessions.Id = VitalsData.TopicSessionId
    WHERE    TopicSessions.PatientSessionId IN (SELECT PatientSessionId
                                                FROM   dbo.PatientSessionsMap
                                                       INNER JOIN
                                                       (SELECT   MAX(Sequence) AS MaxSeq
                                                        FROM     dbo.PatientSessionsMap
                                                        GROUP BY PatientSessionId) AS PatientSessionMaxSeq
                                                       ON Sequence = PatientSessionMaxSeq.MaxSeq
                                                WHERE  PatientId = @patient_id)
             AND dbo.fnDateTimeToFileTime(TimestampUTC) > @after_ft
    ORDER BY result_ft;
END

GO
CREATE PROCEDURE [dbo].[GetPatientVitalsTypes]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT Code.code_id AS [TYPE],
           Code.code AS [CODE],
           Code.int_keystone_cd AS [UNITS]
    FROM   [dbo].[int_misc_code] AS [Code]
           INNER JOIN
           (SELECT DISTINCT test_cid
            FROM   [dbo].[int_result]
            WHERE  patient_id = @patient_id) AS [result_cid]
           ON result_cid.test_cid = Code.code_id
    UNION ALL
    SELECT GdsCodeMap.CodeId AS [TYPE],
           GdsCodeMap.GdsCode AS [CODE],
           GdsCodeMap.Units AS [UNITS]
    FROM   [dbo].[GdsCodeMap]
           INNER JOIN
           (SELECT DISTINCT [VitalsData].[Name],
                            [VitalsData].[FeedTypeId]
            FROM   [dbo].[VitalsData]
                   INNER JOIN
                   [dbo].[TopicSessions]
                   ON TopicSessions.Id = VitalsData.TopicSessionId
            WHERE  TopicSessions.PatientSessionId IN (SELECT PatientSessionId
                                                      FROM   dbo.PatientSessionsMap
                                                             INNER JOIN
                                                             (SELECT   MAX(Sequence) AS MaxSeq
                                                              FROM     dbo.PatientSessionsMap
                                                              GROUP BY PatientSessionId) AS PatientSessionMaxSeq
                                                             ON Sequence = PatientSessionMaxSeq.MaxSeq
                                                      WHERE  PatientId = @patient_id)) AS VitalTypes
           ON GdsCodeMap.FeedTypeId = [VitalTypes].[FeedTypeId]
              AND GdsCodeMap.[Name] = [VitalTypes].[Name];
END

GO
CREATE PROCEDURE [dbo].[GetPatientWaveFormDataByChannels]
@ChannelTypes [dbo].[StringList] READONLY, @PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [patient_channel_id],
           [patient_monitor_id],
           [Waveforms].[START_DT],
           [Waveforms].[END_DT],
           [Waveforms].[start_ft],
           [Waveforms].[end_ft],
           [Waveforms].[COMPRESS_METHOD],
           [WAVEFORM_DATA],
           [TOPIC_INSTANCE_ID]
    FROM   (SELECT ROW_NUMBER() OVER (PARTITION BY [TypeId] ORDER BY [StartTimeUTC] DESC) AS [RowNumber],
                   [wld].[TypeId] AS [PATIENT_CHANNEL_ID],
                   [DeviceSessionId] AS [patient_monitor_id],
                   [dbo].[fnUtcDateTimeToLocalTime]([wld].[StartTimeUTC]) AS [START_DT],
                   [dbo].[fnUtcDateTimeToLocalTime]([wld].[EndTimeUTC]) AS [END_DT],
                   [dbo].[fnDateTimeToFileTime]([wld].[StartTimeUTC]) AS [start_ft],
                   [dbo].[fnDateTimeToFileTime]([wld].[EndTimeUTC]) AS [end_ft],
                   NULL AS [COMPRESS_METHOD],
                   [wld].[Samples] AS [WAVEFORM_DATA],
                   [wld].[TopicInstanceId] AS [TOPIC_INSTANCE_ID]
            FROM   [dbo].[WaveformLiveData] AS [wld]
                   INNER JOIN
                   [dbo].[TopicSessions] AS [ts]
                   ON [ts].[TopicInstanceId] = [wld].[TopicInstanceId]
            WHERE  [ts].[Id] IN (SELECT [TopicSessionId]
                                 FROM   [dbo].[v_PatientTopicSessions] AS [vpts]
                                 WHERE  [vpts].[PatientId] = @PatientId)
                   AND [TypeId] IN (SELECT [Item]
                                    FROM   @ChannelTypes)
                   AND [ts].[EndTimeUTC] IS NULL) AS [Waveforms]
    WHERE  [Waveforms].[RowNumber] = 1
    UNION ALL
    SELECT [ipc].[channel_type_id] AS [PATIENT_CHANNEL_ID],
           [ipc].[patient_monitor_id],
           [WAVFRM].[start_dt] AS [START_DT],
           [WAVFRM].[end_dt] AS [END_DT],
           [WAVFRM].[start_ft] AS [start_ft],
           [WAVFRM].[end_ft] AS [end_ft],
           [WAVFRM].[compress_method] AS [COMPRESS_METHOD],
           [WAVFRM].[waveform_data] AS [WAVEFORM_DATA],
           NULL AS [TOPIC_INSTANCE_ID]
    FROM   [dbo].[int_patient_channel] AS [ipc]
           LEFT OUTER JOIN
           [dbo].[int_waveform_live] AS [WAVFRM]
           ON [WAVFRM].[patient_channel_id] = [ipc].[patient_channel_id]
    WHERE  [ipc].[patient_id] = @PatientId
           AND [ipc].[channel_type_id] IN (SELECT [Item]
                                           FROM   @ChannelTypes)
           AND [ipc].[active_sw] = 1;
END

GO
CREATE PROCEDURE [dbo].[GetPatientWaveFormTimeHistory]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [start_ft],
             [start_dt]
    FROM     [dbo].[int_waveform]
    WHERE    [patient_id] = @patient_id
    UNION ALL
    SELECT   dbo.fnDateTimeToFileTime([WaveformData].StartTimeUTC) AS [start_ft],
             CAST (NULL AS DATETIME) AS [start_dt]
    FROM     [dbo].[WaveformData]
             INNER JOIN
             [dbo].[TopicSessions]
             ON TopicSessions.Id = WaveformData.TopicSessionId
    WHERE    TopicSessions.PatientSessionId IN (SELECT PatientSessionId
                                                FROM   dbo.PatientSessionsMap
                                                       INNER JOIN
                                                       (SELECT   MAX(Sequence) AS MaxSeq
                                                        FROM     dbo.PatientSessionsMap
                                                        GROUP BY PatientSessionId) AS PatientSessionMaxSeq
                                                       ON Sequence = PatientSessionMaxSeq.MaxSeq
                                                WHERE  PatientId = @patient_id)
    ORDER BY [start_ft];
END

GO
CREATE PROCEDURE [dbo].[GetPatientWaveFormTimeUpdate]
@patient_id UNIQUEIDENTIFIER, @after_ft BIGINT
AS
BEGIN
    SELECT   [start_ft],
             [start_dt]
    FROM     [dbo].[int_waveform]
    WHERE    [patient_id] = @patient_id
             AND [start_ft] > @after_ft
    ORDER BY [start_ft];
END

GO
CREATE PROCEDURE [dbo].[GetProcStatList]
@PatientId [dbo].[DPATIENT_ID], @TimeTagType INT, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    WITH     [Temp]
    AS       (SELECT [ipt].[param_ft] AS [start_ft],
                     [ipt].[value1],
                     CAST (224 AS SMALLINT) AS [sample_rate],
                     [ipt].[patient_channel_id]
              FROM   [dbo].[int_param_timetag] AS [ipt]
              WHERE  [ipt].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
                     AND [ipt].[timetag_type] = @TimeTagType
                     AND ([ipt].[param_ft] BETWEEN @StartTime AND @EndTime))
    SELECT   [Temp].[start_ft] AS [param_ft],
             [Temp].[value1],
             [Temp].[sample_rate],
             [Temp].[patient_channel_id]
    FROM     [Temp]
             LEFT OUTER JOIN
             [dbo].[v_DiscardedOverlappingLegacyWaveformData] AS [Discarded]
             ON [Discarded].[patient_channel_id] = [Temp].[patient_channel_id]
                AND [Temp].[start_ft] BETWEEN [Discarded].[start_ft] AND [Discarded].[end_ft]
    WHERE    [Discarded].[patient_channel_id] IS NULL
    ORDER BY [param_ft];
END

GO
CREATE PROCEDURE [dbo].[GetProductAccess]
@ProductCd VARCHAR (25), @UnitId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [has_access]
    FROM   [dbo].[int_product] AS [P]
           INNER JOIN
           [dbo].[int_product_access] AS [PA]
           ON [P].[product_cd] = [PA].[product_cd]
           INNER JOIN
           [dbo].[int_organization] AS [O]
           ON [PA].[organization_id] = [O].[organization_id]
    WHERE  [PA].[product_cd] = @ProductCd
           AND [O].[category_cd] = 'D'
           AND [O].[organization_id] = @UnitId;
END

GO
CREATE PROCEDURE [dbo].[GetQryLivePatientVitals]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    DECLARE @LowerTimeLimit AS DATETIME = DATEADD(MILLISECOND, -172800, GETDATE());
    SELECT DISTINCT [VL].[patient_id] AS [PATID],
                    [VL].[monitor_id] AS [MONITORID],
                    [VL].[collect_dt] AS [COLLECTDATE],
                    [VL].[vital_value] AS [VITALS],
                    [VL].[vital_time] AS [VITALSTIME],
                    [MRNMAP].[organization_id] AS [ORGID],
                    [MRNMAP].[mrn_xid] AS [MRN]
    FROM   [dbo].[int_vital_live_temp] AS [VL]
           INNER JOIN
           [dbo].[int_mrn_map] AS [MRNMAP]
           ON [VL].[patient_id] = [MRNMAP].[patient_id]
           INNER JOIN
           [dbo].[int_patient_monitor] AS [PM]
           ON [VL].[patient_id] = [PM].[patient_id]
              AND [VL].[monitor_id] = [PM].[monitor_id]
    WHERE  (@patient_id = CAST ('00000000-0000-0000-0000-000000000000' AS UNIQUEIDENTIFIER)
            OR [VL].[patient_id] = @patient_id)
           AND [merge_cd] = 'C'
           AND [VL].[createdDT] = (SELECT MAX([createdDT])
                                   FROM   [dbo].[int_vital_live_temp] AS [VL_SUBTAB]
                                   WHERE  [VL_SUBTAB].[monitor_id] = [VL].[monitor_id]
                                          AND [VL_SUBTAB].[patient_id] = [VL].[patient_id]
                                          AND [createdDT] > @LowerTimeLimit);
END

GO
CREATE PROCEDURE [dbo].[GetQryLivePatientVitalsByMonitor]
@patient_id UNIQUEIDENTIFIER, @monitor_id UNIQUEIDENTIFIER
AS
BEGIN
    DECLARE @LowerTimeLimit AS DATETIME = DATEADD(MILLISECOND, -172800, GETDATE());
    SELECT DISTINCT [VL].[patient_id] AS [PATID],
                    [VL].[monitor_id] AS [MONITORID],
                    [VL].[collect_dt] AS [COLLECTDATE],
                    [VL].[vital_value] AS [VITALS],
                    [VL].[vital_time] AS [VITALSTIME],
                    [MRNMAP].[organization_id] AS [ORGID],
                    [MRNMAP].[mrn_xid] AS [MRN]
    FROM   [dbo].[int_vital_live_temp] AS [VL]
           INNER JOIN
           [dbo].[int_mrn_map] AS [MRNMAP]
           ON [VL].[patient_id] = [MRNMAP].[patient_id]
           INNER JOIN
           [dbo].[int_patient_monitor] AS [PM]
           ON [PM].[patient_id] = [VL].[patient_id]
    WHERE  (@patient_id = CAST ('00000000-0000-0000-0000-000000000000' AS UNIQUEIDENTIFIER)
            OR [VL].[patient_id] = @patient_id)
           AND [merge_cd] = 'C'
           AND [PM].[monitor_id] = @monitor_id
           AND [VL].[createdDT] = (SELECT MAX([createdDT])
                                   FROM   [dbo].[int_vital_live_temp] AS [VL_SUBTAB]
                                   WHERE  [VL_SUBTAB].[monitor_id] = @monitor_id
                                          AND [VL_SUBTAB].[patient_id] = [VL].[patient_id]
                                          AND [createdDT] > @LowerTimeLimit);
END

GO
CREATE PROCEDURE [dbo].[GetRawECGData]
@PatientId [dbo].[DPATIENT_ID], @ChannelTypeID [dbo].[DCHANNEL_TYPE_ID], @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    DECLARE @ChannelIds AS [dbo].[StringList];
    INSERT  INTO @ChannelIds ([Item])
    VALUES                  (@ChannelTypeID);
    EXECUTE [dbo].[usp_CA_GetPatientWaveForms] @patient_id = @PatientId, @channelIds = @ChannelIds, @start_ft = @StartTime, @end_ft = @EndTime;
END

GO
CREATE PROCEDURE [dbo].[GetRecvSendAndOrderInfo]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [recv_app] AS [RECVAPP],
           [send_app] AS [SENDAPP],
           [order_xid] AS [ORDERXID],
           [send_app] AS [SENDAPP],
           [univ_svc_cid] AS [ORDERSTATUS],
           [int_order].[order_dt] AS [TRANSDATETIME]
    FROM   [dbo].[int_gateway]
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_gateway].[network_id] = [int_monitor].[network_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [int_monitor].[monitor_id] = [int_patient_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_order_map]
           ON [int_gateway].[send_sys_id] = [int_order_map].[sys_id]
           INNER JOIN
           [dbo].[int_order]
           ON [int_patient_monitor].[patient_id] = [int_order].[patient_id]
              AND [int_order].[order_id] = [int_order_map].[order_id]
    WHERE  [int_gateway].[gateway_type] <> 'S5N'
           AND [int_patient_monitor].[patient_id] = @patient_id;
END

GO
CREATE PROCEDURE [dbo].[GetRestrictedUnitList]
@User_Role_ID UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [ORGRES].[organization_id]
    FROM   [dbo].[cdr_restricted_organization] AS [ORGRES]
           INNER JOIN
           [dbo].[int_organization] AS [ORG]
           ON [ORG].[organization_id] = [ORGRES].[organization_id]
    WHERE  [user_role_id] = @User_Role_ID;
END

GO
CREATE PROCEDURE [dbo].[GetSavedEventBeatTimeLog]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [patient_start_ft] AS [PATIENT_FT],
           [start_ft] AS [start_ft],
           [num_beats] AS [NUM_BEATS],
           [sample_rate] AS [SAMPLE_RATE],
           [beat_data] AS [BEAT_DATA]
    FROM   [dbo].[int_savedevent_beat_time_log]
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
END

GO
CREATE PROCEDURE [dbo].[GetSavedEventWaveFormType]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [waveform_category] AS [WAVEFORM_TYPE]
    FROM     [dbo].[int_savedevent_waveform]
    WHERE    [patient_id] = @patient_id
             AND [event_id] = @event_id
             AND [visible] = 1
    ORDER BY [waveform_category] ASC;
END

GO
CREATE PROCEDURE [dbo].[GetSaveEventArrhythmiaEventTime]
@patient_id [dbo].[DPATIENT_ID], @event_id UNIQUEIDENTIFIER, @timetag_type INT
AS
BEGIN
    SELECT [start_ms] AS [STARTMS],
           [end_ms] AS [ENDMS]
    FROM   [dbo].[int_savedevent_event_log]
    WHERE  [patient_id] = CAST (@patient_id AS UNIQUEIDENTIFIER)
           AND [event_id] = @event_id
           AND [timetag_type] = @timetag_type;
END

GO
CREATE PROCEDURE [dbo].[GetTwelveLeadReports]
AS
BEGIN
    DECLARE @PurgeHours AS NVARCHAR (80);
    DECLARE @outDate AS INT;
    DECLARE @PurgeDate AS DATETIME;
    BEGIN TRY
        SET @PurgeHours = (SELECT TOP (1) [parm_value]
                           FROM   [dbo].[int_system_parameter]
                           WHERE  [name] = N'TwelveLead');
        SET @outDate = CASE WHEN ISNUMERIC(@PurgeHours) = 1 THEN CAST (@PurgeHours AS INT) ELSE 168 END;
        SET @PurgeDate = DATEADD(HOUR, -@outDate, GETDATE());
    END TRY
    BEGIN CATCH
        SET @PurgeDate = DATEADD(HOUR, -168, GETDATE());
    END CATCH
    SELECT [mrn_xid] AS [PATIENTID],
           [mrn_xid2] AS [SECONDARYPATIENTID],
           [ssn],
           [GEN].[short_dsc] AS [GENDER],
           [first_nm],
           [last_nm],
           [int_monitor].[monitor_name] AS [BED],
           [int_monitor].[node_id],
           [int_12lead_report].[report_data],
           [int_12lead_report].[report_id],
           [DEPT].[organization_nm] AS [DEPARTMENTNAME],
           [DEPT].[organization_id] AS [DEPARTMENTID],
           [DEPT].[category_cd] AS [DEPARTMENTCATEGORY],
           [DEPT].[organization_cd] AS [DEPARTMENTORGCATEGORY],
           [FACIL].[organization_nm] AS [FACILITYNAME],
           [FACIL].[organization_id] AS [FACILITYID],
           [FACIL].[category_cd] AS [FACILITYCATEGORY],
           [FACIL].[organization_cd] AS [FACILITYORGCATEGORY],
           [ORG].[organization_nm] AS [ORGANIZATIONNAME],
           [ORG].[organization_id] AS [ORGANIZATIONID],
           [ORG].[category_cd] AS [ORGANIZATIONCATEGORY],
           [ORG].[organization_cd] AS [ORGANIZATIONORGCATEGORY]
    FROM   [dbo].[int_patient]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [dbo].[int_patient].[patient_id] = [dbo].[int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [dbo].[int_person].[person_id] = [dbo].[int_patient].[patient_id]
           INNER JOIN
           [dbo].[int_12lead_report]
           ON [dbo].[int_12lead_report].[patient_id] = [dbo].[int_person].[person_id]
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_12lead_report].[monitor_id] = [int_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_organization] AS [DEPT]
           ON [int_monitor].[unit_org_id] = [DEPT].[organization_id]
           INNER JOIN
           [dbo].[int_organization] AS [FACIL]
           ON [DEPT].[parent_organization_id] = [FACIL].[organization_id]
           INNER JOIN
           [dbo].[int_organization] AS [ORG]
           ON [FACIL].[parent_organization_id] = [ORG].[organization_id]
           LEFT OUTER JOIN
           [dbo].[int_misc_code] AS [GEN]
           ON [dbo].[int_patient].[gender_cid] = [GEN].[code_id]
    WHERE  [int_mrn_map].[orig_patient_id] IS NULL
           AND [report_dt] > @PurgeDate
           AND ([int_12lead_report].[export_sw] <> 1
                OR [int_12lead_report].[export_sw] IS NULL);
END

GO
CREATE PROCEDURE [dbo].[GetUnitAutoCollectInterval]
@unit_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [auto_collect_interval] AS [INTERVAL]
    FROM   [dbo].[int_organization]
    WHERE  [category_cd] = 'D'
           AND [organization_id] = @unit_id;
END

GO
CREATE PROCEDURE [dbo].[GetUnitsByFacility]
@facility_id [dbo].[DFACILITY_ID], @login_name NVARCHAR (64)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT   [io].[organization_nm] AS [UNIT_NAME],
             [io].[organization_id] AS [UNIT_ID]
    FROM     [dbo].[int_organization] AS [io]
    WHERE    [io].[parent_organization_id] = CAST (@facility_id AS UNIQUEIDENTIFIER)
             AND [io].[category_cd] = 'D'
             AND [io].[organization_id] NOT IN (SELECT [cro].[organization_id]
                                                FROM   [dbo].[cdr_restricted_organization] AS [cro]
                                                WHERE  [cro].[user_role_id] = (SELECT [user_role_id]
                                                                               FROM   [dbo].[int_user]
                                                                               WHERE  [int_user].[login_name] = @login_name))
    ORDER BY [io].[organization_nm];
END

GO
CREATE PROCEDURE [dbo].[GetUserByGuid]
@user_id VARCHAR (50)
AS
BEGIN
    SELECT [user_id],
           [login_name],
           [user_role_id],
           [user_sid]
    FROM   [dbo].[int_user]
    WHERE  [user_id] = CAST (@user_id AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[GetUserByName]
@login_name NVARCHAR (64)
AS
BEGIN
    SELECT [user_id],
           [user_role_id],
           [user_sid],
           [login_name]
    FROM   [dbo].[int_user]
    WHERE  [login_name] = @login_name;
END

GO
CREATE PROCEDURE [dbo].[GetUserByUsId]
@user_sid VARCHAR (50)
AS
BEGIN
    SELECT [user_id],
           [user_role_id],
           [login_name]
    FROM   [dbo].[int_user]
    WHERE  [user_sid] = @user_sid;
END

GO
CREATE PROCEDURE [dbo].[GetUserPatientsList]
@unit_id [dbo].[DUNIT_ID], @status NVARCHAR (40), @is_vip_searchable BIT=0
AS
BEGIN
    DECLARE @QUERY AS VARCHAR (4000);
    SET @QUERY = '(
        SELECT int_mrn_map.patient_id AS patient_id,
            ISNULL(int_person.last_nm,'''') + ISNULL('', '' + int_person.first_nm,'''') AS patient_name,
            int_monitor.monitor_name AS MONITOR_NAME,
            int_mrn_map.mrn_xid2 AS ACCOUNT_ID,
            int_mrn_map.mrn_xid AS MRN_ID,
            int_monitor.unit_org_id AS UNIT_ID,
            CHILD.organization_cd AS UNIT_NAME,
            PARENT.organization_id AS FACILITY_ID,
            PARENT.organization_nm AS FACILITY_NAME,  
            int_patient.dob AS DOB,
            int_encounter.admit_dt AS ADMIT_TIME,
            int_encounter.discharge_dt AS DISCHARGED_TIME,
            int_patient_monitor.patient_monitor_id AS PATIENT_MONITOR_ID,
            CASE
                WHEN int_encounter.discharge_dt IS NULL AND active_sw = 1 THEN ''A'' 
                ELSE ''D''
            END AS [STATUS] 
        FROM dbo.int_encounter
            LEFT OUTER JOIN dbo.int_patient_monitor ON (int_encounter.encounter_id = dbo.int_patient_monitor.encounter_id) 
            AND int_encounter.patient_id = dbo.int_patient_monitor.patient_id
            INNER JOIN dbo.int_person ON int_encounter.patient_id = int_person.person_id
            INNER JOIN dbo.int_patient ON int_person.person_id = int_patient.patient_id
            INNER JOIN dbo.int_mrn_map ON int_patient.patient_id = int_mrn_map.patient_id
            INNER JOIN dbo.int_monitor ON int_patient_monitor.monitor_id = int_monitor.monitor_id
            INNER JOIN dbo.int_organization  AS CHILD ON int_monitor.unit_org_id = CHILD.organization_id
            LEFT OUTER JOIN dbo.int_organization AS PARENT ON PARENT.organization_id = CHILD.parent_organization_id                                        
        WHERE
            int_monitor.unit_org_id = ';
    SET @QUERY += '''';
    SET @QUERY += @unit_id;
    SET @QUERY += '''';
    SET @QUERY += ' AND int_mrn_map.merge_cd = ''C'' ';
    IF (@status = 'ACTIVE')
        SET @QUERY += ' AND int_encounter.discharge_dt IS NULL AND int_patient_monitor.active_sw = 1 ';
    IF (@status = 'DISCHARGED')
        SET @QUERY += ' AND int_encounter.discharge_dt IS NOT NULL ';
    IF (@is_vip_searchable <> '1')
        SET @QUERY += '  AND int_encounter.vip_sw IS NULL ';
    SET @QUERY += ' ) UNION (
        SELECT
            [patient_id],
            [patient_name],
            [MONITOR_NAME],
            [ACCOUNT_ID],
            [MRN_ID],
            [UNIT_ID],
            [UNIT_NAME],
            [FACILITY_ID],
            [FACILITY_NAME],
            [DOB],
            [ADMIT_TIME],
            [DISCHARGED_TIME],
            [PATIENT_MONITOR_ID],
            [STATUS]
        FROM [dbo].[v_StitchedPatients] WHERE ';
    SET @QUERY += ' [UNIT_ID] = ''';
    SET @QUERY += @unit_id;
    SET @QUERY += '''';
    IF (@status = 'ACTIVE')
        SET @QUERY += ' AND ([STATUS] = ''A'' OR [STATUS] = ''S'') ';
    IF (@status = 'DISCHARGED')
        SET @QUERY += ' AND [STATUS] = ''D'' ';
    SET @QUERY += ' AND [patient_id] IS NOT NULL ';
    SET @QUERY += ') ORDER BY [ADMIT_TIME] DESC,
                                        [patient_name],
                                        [MONITOR_NAME]';
    EXECUTE (@QUERY);
END

GO
CREATE PROCEDURE [dbo].[GetUsers]
AS
BEGIN
    SELECT [user_id],
           [user_role_id],
           [user_sid],
           [login_name]
    FROM   [dbo].[int_user];
END

GO
CREATE PROCEDURE [dbo].[GetUserSettingByType]
@user_id UNIQUEIDENTIFIER, @cfg_name VARCHAR (40)
AS
BEGIN
    SELECT [cfg_xml_value] AS [CFGXMLVALUE]
    FROM   [dbo].[int_user_settings]
    WHERE  [user_id] = @user_id
           AND [cfg_name] = @cfg_name;
END

GO
CREATE PROCEDURE [dbo].[GetVersionNumber]
AS
BEGIN
    SELECT   TOP (1) [ver_code] AS [VERSION],
                     [install_dt] AS [DT]
    FROM     [dbo].[int_db_ver]
    ORDER BY [install_dt] DESC, [CreateDate] DESC;
END

GO
CREATE PROCEDURE [dbo].[GetvsvAccess]
@patient_monitor_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT 1
    FROM   [dbo].[int_patient_monitor] AS [PM]
           INNER JOIN
           [dbo].[int_monitor] AS [M]
           ON [M].[monitor_id] = [PM].[monitor_id]
              AND [PM].[patient_monitor_id] = @patient_monitor_id
           INNER JOIN
           [dbo].[int_product_access] AS [PA]
           ON [PA].[organization_id] = [M].[unit_org_id]
              AND [PA].[product_cd] = 'vsv';
END

GO
CREATE PROCEDURE [dbo].[GetWaveFormTimes]
@PatientId [dbo].[DPATIENT_ID], @Channel1Code SMALLINT, @Channel2Code SMALLINT
AS
BEGIN
    SELECT   MIN([wvfrm].[start_ft]) AS [start_time],
             MAX([wvfrm].[end_ft]) AS [end_time],
             [ct].[channel_code],
             [ct].[channel_type_id]
    FROM     [dbo].[int_waveform] AS [wvfrm]
             INNER JOIN
             [dbo].[int_patient_channel] AS [pc]
             ON [wvfrm].[patient_channel_id] = [pc].[patient_channel_id]
             INNER JOIN
             [dbo].[int_channel_type] AS [ct]
             ON [pc].[channel_type_id] = [ct].[channel_type_id]
    WHERE    ([wvfrm].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER))
             AND ([ct].[channel_code] = @Channel1Code
                  OR [ct].[channel_code] = @Channel2Code)
    GROUP BY [ct].[channel_code], [ct].[channel_type_id]
    UNION ALL
    SELECT   MIN([wvfrm].[FileTimeStampBeginUTC]) AS [start_time],
             MAX([wvfrm].[FileTimeStampEndUTC]) AS [end_time],
             [ct].[ChannelCode] AS [channel_code],
             [ct].[TypeId] AS [channel_type_id]
    FROM     [dbo].[v_LegacyWaveform] AS [wvfrm]
             INNER JOIN
             [dbo].[v_PatientChannelLegacy] AS [vpcl]
             ON [wvfrm].[TypeId] = [vpcl].[TypeId]
             INNER JOIN
             [dbo].[v_LegacyChannelTypes] AS [ct]
             ON [vpcl].[TypeId] = [ct].[TypeId]
    WHERE    ([wvfrm].[PatientId] = @PatientId)
             AND ([ct].[ChannelCode] = @Channel1Code
                  OR [ct].[ChannelCode] = @Channel2Code)
    GROUP BY [ct].[ChannelCode], [ct].[TypeId]
    ORDER BY [channel_code];
END

GO
CREATE PROCEDURE [dbo].[InsertAdminAuditLogData]
@login_id NVARCHAR (256), @application_id NVARCHAR (50), @patient_id NVARCHAR (50), @audit_type NVARCHAR (160), @device_name NVARCHAR (64), @audit_descr NVARCHAR (500)
AS
BEGIN
    SET NOCOUNT ON;
    INSERT  INTO [dbo].[int_audit_log] ([login_id], [application_id], [patient_id], [audit_type], [device_name], [audit_descr], [audit_dt])
    VALUES                            (@login_id, @application_id, @patient_id, @audit_type, @device_name, @audit_descr, GETDATE());
END

GO
CREATE PROCEDURE [dbo].[InsertAuditLogData]
@AuditId VARCHAR (64), @PatientId VARCHAR (256), @Application VARCHAR (256), @DeviceName VARCHAR (256), @Message VARCHAR (MAX), @ItemName VARCHAR (256), @OriginalValue VARCHAR (MAX), @NewValue VARCHAR (MAX), @ChangedBy VARCHAR (64), @HashedValue BINARY (20)
AS
BEGIN
    SET NOCOUNT ON;
    INSERT  INTO [dbo].[AuditLogData] ([AuditId], [DateTime], [PatientID], [Application], [DeviceName], [Message], [ItemName], [OriginalValue], [NewValue], [ChangedBy], [HashedValue])
    VALUES                           (CAST (@AuditId AS UNIQUEIDENTIFIER), GETDATE(), @PatientId, @Application, @DeviceName, CAST (@Message AS NVARCHAR (MAX)), @ItemName, CAST (@OriginalValue AS NVARCHAR (MAX)), CAST (@NewValue AS NVARCHAR (MAX)), @ChangedBy, @HashedValue);
END

GO
CREATE PROCEDURE [dbo].[InsertEventLogData]
@LogId VARCHAR (64), @PatientId [dbo].[DPATIENT_ID], @Application VARCHAR (256), @DeviceName VARCHAR (256), @Message VARCHAR (MAX), @LocalizedMessage VARCHAR (MAX), @MessageId INT, @LogType VARCHAR (64)
AS
BEGIN
    SET NOCOUNT ON;
    INSERT  INTO [dbo].[LogData] ([LogId], [DateTime], [PatientID], [Application], [DeviceName], [Message], [LocalizedMessage], [MessageId], [LogType])
    VALUES                      (CAST (@LogId AS UNIQUEIDENTIFIER), GETDATE(), @PatientId, @Application, @DeviceName, CAST (@Message AS NVARCHAR (MAX)), CAST (@LocalizedMessage AS NVARCHAR (MAX)), @MessageId, @LogType);
END

GO
CREATE PROCEDURE [dbo].[InsertPatientInformation]
@PatientId UNIQUEIDENTIFIER, @NewPatientId UNIQUEIDENTIFIER=NULL, @OrganDonorSw NCHAR (4)=NULL, @LivingWillSw NCHAR (4)=NULL, @BirthOrder TINYINT=NULL, @VeteranStatusCid INT=NULL, @BirthPlace NVARCHAR (100)=NULL, @Ssn NVARCHAR (30)=NULL, @MpiSsn1 INT=NULL, @MpiSsn2 INT=NULL, @MpiSsn3 INT=NULL, @MpiSsn4 INT=NULL, @DrivLicNo NVARCHAR (50)=NULL, @MpiDl1 NVARCHAR (6)=NULL, @MpiDl2 NVARCHAR (6)=NULL, @MpiDl3 NVARCHAR (6)=NULL, @MpiDl4 NVARCHAR (6)=NULL, @DrivLicStateCode NVARCHAR (6)=NULL, @dob NVARCHAR (50)=NULL, @deathdt NVARCHAR (50)=NULL, @NationalityCid INT=NULL, @CitizenshipCid INT=NULL, @EthnicGroupCid INT=NULL, @RaceCid INT=NULL, @GenderCid INT=NULL, @PrimaryLanguageCid INT=NULL, @MaritalStatusCid INT=NULL, @ReligionCid INT=NULL, @MonitorInterval INT=NULL, @Height FLOAT (53)=NULL, @Weight FLOAT (53)=NULL, @Bsa FLOAT (53)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_patient] ([patient_id], [new_patient_id], [organ_donor_sw], [living_will_sw], [birth_order], [veteran_status_cid], [birth_place], [ssn], [mpi_ssn1], [mpi_ssn2], [mpi_ssn3], [mpi_ssn4], [driv_lic_no], [mpi_dl1], [mpi_dl2], [mpi_dl3], [mpi_dl4], [driv_lic_state_code], [dob], [death_dt], [nationality_cid], [citizenship_cid], [ethnic_group_cid], [race_cid], [gender_cid], [primary_language_cid], [marital_status_cid], [religion_cid], [monitor_interval], [height], [weight], [bsa])
    VALUES                          (@PatientId, @NewPatientId, CAST (@OrganDonorSw AS NCHAR (2)), CAST (@LivingWillSw AS NCHAR (2)), @BirthOrder, @VeteranStatusCid, CAST (@BirthPlace AS NVARCHAR (50)), CAST (@Ssn AS NVARCHAR (15)), @MpiSsn1, @MpiSsn2, @MpiSsn3, @MpiSsn4, CAST (@DrivLicNo AS NVARCHAR (25)), CAST (@MpiDl1 AS NCHAR (3)), CAST (@MpiDl2 AS NCHAR (3)), CAST (@MpiDl3 AS NCHAR (3)), CAST (@MpiDl4 AS NCHAR (3)), CAST (@DrivLicStateCode AS NCHAR (3)), CAST (@dob AS DATETIME), CAST (@deathdt AS DATETIME), @NationalityCid, @CitizenshipCid, @EthnicGroupCid, @RaceCid, @GenderCid, @PrimaryLanguageCid, @MaritalStatusCid, @ReligionCid, @MonitorInterval, @Height, @Weight, @Bsa);
END

GO
CREATE PROCEDURE [dbo].[p_Duplicated_Patient_List]
AS
BEGIN
    SELECT [DUP].[duplicate_rec_id],
           [DUP].[Duplicate_Id] AS [MRN],
           [imm].[patient_id]
    INTO   [#TMP1]
    FROM   [dbo].[ml_duplicate_info] AS [DUP]
           INNER JOIN
           [dbo].[int_mrn_map] AS [imm]
           ON [DUP].[Duplicate_Id] = [imm].[mrn_xid]
           INNER JOIN
           [dbo].[int_patient_monitor] AS [mon]
           ON [imm].[patient_id] = [mon].[patient_id]
    WHERE  [mon].[active_sw] = 1;
    SELECT [DUP].[duplicate_rec_id],
           [DUP].[Original_ID] AS [MRN],
           [imm].[patient_id]
    INTO   [#TMP2]
    FROM   [dbo].[ml_duplicate_info] AS [DUP]
           INNER JOIN
           [dbo].[int_mrn_map] AS [imm]
           ON [DUP].[Original_ID] = [imm].[mrn_xid]
           INNER JOIN
           [dbo].[int_patient_monitor] AS [mon]
           ON [imm].[patient_id] = [mon].[patient_id]
    WHERE  [mon].[active_sw] = 1;
    SELECT DISTINCT [MAP].[patient_id] AS [PATID],
                    [MAP].[mrn_xid]
    FROM   [dbo].[int_mrn_map] AS [MAP]
           INNER JOIN
           [dbo].[int_patient_monitor] AS [mon]
           ON [MAP].[patient_id] = [mon].[patient_id]
    WHERE  [MAP].[mrn_xid] IN (SELECT [Original_ID]
                               FROM   [dbo].[ml_duplicate_info] AS [DUP]
                               WHERE  [DUP].[duplicate_rec_id] IN (SELECT [#TMP1].[duplicate_rec_id]
                                                                   FROM   [#TMP1]
                                                                          INNER JOIN
                                                                          [#TMP2]
                                                                          ON [#TMP1].[duplicate_rec_id] = [#TMP2].[duplicate_rec_id]))
           OR [MAP].[mrn_xid] IN (SELECT [Duplicate_Id]
                                  FROM   [dbo].[ml_duplicate_info] AS [DUP]
                                  WHERE  [DUP].[duplicate_rec_id] IN (SELECT [#TMP1].[duplicate_rec_id]
                                                                      FROM   [#TMP1]
                                                                             INNER JOIN
                                                                             [#TMP2]
                                                                             ON [#TMP1].[duplicate_rec_id] = [#TMP2].[duplicate_rec_id]))
              AND [mon].[active_sw] = 1;
    DROP TABLE [#TMP1];
    DROP TABLE [#TMP2];
END

GO
CREATE PROCEDURE [dbo].[p_enc_det_drs]
@enc_id UNIQUEIDENTIFIER
AS
BEGIN
    DECLARE @att_hcp_id AS UNIQUEIDENTIFIER, @ref_hcp_id AS UNIQUEIDENTIFIER, @adm_hcp_id AS UNIQUEIDENTIFIER;
    CREATE TABLE [#ENC_DET_DRS] (
        [hcp_id]     UNIQUEIDENTIFIER,
        [priority]   INT             ,
        [lastname]   VARCHAR (50)     NULL,
        [firstname]  VARCHAR (50)     NULL,
        [middlename] VARCHAR (50)     NULL,
        [role_cd]    CHAR (1)        
    );
    SELECT @att_hcp_id = [attend_hcp_id],
           @ref_hcp_id = [referring_hcp_id],
           @adm_hcp_id = [admit_hcp_id]
    FROM   [dbo].[int_encounter]
    WHERE  [encounter_id] = @enc_id;
    IF (@att_hcp_id IS NOT NULL)
        BEGIN
            INSERT INTO [#ENC_DET_DRS]
            SELECT @att_hcp_id,
                   1,
                   CAST ([H].[last_nm] AS VARCHAR (50)),
                   CAST ([H].[first_nm] AS VARCHAR (50)),
                   CAST ([H].[middle_nm] AS VARCHAR (50)),
                   'T'
            FROM   [dbo].[int_hcp] AS [H]
            WHERE  [H].[hcp_id] = @att_hcp_id;
        END
    IF (@adm_hcp_id IS NOT NULL)
        BEGIN
            INSERT INTO [#ENC_DET_DRS]
            SELECT @adm_hcp_id,
                   1,
                   CAST ([H].[last_nm] AS VARCHAR (50)),
                   CAST ([H].[first_nm] AS VARCHAR (50)),
                   CAST ([H].[middle_nm] AS VARCHAR (50)),
                   'A'
            FROM   [dbo].[int_hcp] AS [H]
            WHERE  [H].[hcp_id] = @adm_hcp_id;
        END
    IF (@ref_hcp_id IS NOT NULL)
        BEGIN
            INSERT INTO [#ENC_DET_DRS]
            SELECT @ref_hcp_id,
                   2,
                   CAST ([H].[last_nm] AS VARCHAR (50)),
                   CAST ([H].[first_nm] AS VARCHAR (50)),
                   CAST ([H].[middle_nm] AS VARCHAR (50)),
                   'R'
            FROM   [dbo].[int_hcp] AS [H]
            WHERE  [H].[hcp_id] = @ref_hcp_id;
        END
    INSERT INTO [#ENC_DET_DRS]
    SELECT DISTINCT ([E].[hcp_id]),
                    3,
                    CAST ([H].[last_nm] AS VARCHAR (50)),
                    CAST ([H].[first_nm] AS VARCHAR (50)),
                    CAST ([H].[middle_nm] AS VARCHAR (50)),
                    CAST ([E].[hcp_role_cd] AS CHAR (1))
    FROM   [dbo].[int_encounter_to_hcp_int] AS [E]
           INNER JOIN
           [dbo].[int_hcp] AS [H]
           ON [E].[hcp_id] = [H].[hcp_id]
    WHERE  [E].[hcp_role_cd] = N'C'
           AND [E].[encounter_id] = @enc_id;
    SELECT   [role_cd],
             [lastname],
             [firstname],
             [middlename]
    FROM     [#ENC_DET_DRS]
    ORDER BY [priority], [lastname];
    DROP TABLE [#ENC_DET_DRS];
END

GO
CREATE PROCEDURE [dbo].[p_Encounters_det]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    DECLARE @acct_no AS CHAR (40) = 'SEE DETAIL', @diagnosis AS VARCHAR (255) = ' ', @pat_type AS VARCHAR (30) = '', @pat_class AS VARCHAR (30) = '';
    SELECT DISTINCT @acct_no AS [tmp_acct_xid],
                    [A].[account_id] AS [TMP_ACCT_ID],
                    [A].[encounter_id] AS [TMP_ENC_ID],
                    [C].[encounter_xid] AS [TMP_ENC_XID],
                    [A].[patient_type_cid] AS [tmp_pat_type_id],
                    @pat_type AS [TMP_PAT_TYPE],
                    [A].[patient_class_cid] AS [TMP_PAT_CLASS_ID],
                    @pat_class AS [TMP_PAT_CLASS],
                    [A].[admit_dt] AS [tmp_admit_dt],
                    [A].[discharge_dt] AS [TMP_DISCH_DT],
                    [A].[med_svc_cid] AS [TMP_MED_SRVC_ID],
                    SPACE(20) AS [tmp_med_srvc],
                    0 AS [TMP_DIAG_ID],
                    @diagnosis AS [TMP_DIAGNOSIS],
                    [A].[attend_hcp_id] AS [TMP_DR_ID],
                    [A].[status_cd] AS [TMP_ENC_STATUS_CD],
                    [B].[last_nm] AS [TMP_DR_LAST_NAME],
                    [B].[first_nm] AS [TMP_DR_FIRST_NAME],
                    [B].[middle_nm] AS [TMP_DR_MIDDLE_NAME],
                    [C].[status_cd] AS [TMP_ENC_MAP_STATUS_CD],
                    [C].[event_cd] AS [TMP_STAT_ACT_CODE],
                    [A].[vip_sw] AS [TMP_VIP_SW],
                    SPACE(20) AS [tmp_dept_code],
                    [A].[unit_org_id] AS [TMP_DEPT_ID],
                    [A].[rm] AS [TMP_ROOM],
                    [A].[bed] AS [TMP_BED],
                    [A].[discharge_dispo_cid] AS [TMP_DISPO_CID]
    INTO   [#ENCOUNTERS]
    FROM   [dbo].[int_encounter] AS [A]
           LEFT OUTER JOIN
           [dbo].[int_hcp] AS [B]
           ON [A].[attend_hcp_id] = [B].[hcp_id]
           INNER JOIN
           [dbo].[int_encounter_map] AS [C]
           ON [C].[encounter_id] = [A].[encounter_id]
    WHERE  @patient_id = [C].[patient_id]
           AND [C].[status_cd] IN (N'N', N'S', N'C')
           AND ([A].[status_cd] != N'X'
                OR [A].[status_cd] IS NULL);
    UPDATE [#ENCOUNTERS]
    SET    [TMP_DIAGNOSIS] = ISNULL([dsc], ' '),
           [TMP_DIAG_ID]   = ISNULL([diagnosis_cid], 0)
    FROM   [#ENCOUNTERS] AS [A]
           INNER JOIN
           [dbo].[int_diagnosis] AS [B]
           ON [A].[TMP_ENC_ID] = [B].[encounter_id]
    WHERE  [B].[inactive_sw] IS NULL
           AND [B].[seq_no] = (SELECT MAX([seq_no])
                               FROM   [#ENCOUNTERS] AS [A]
                                      INNER JOIN
                                      [dbo].[int_diagnosis] AS [B]
                                      ON [A].[TMP_ENC_ID] = [B].[encounter_id]
                               WHERE  [inactive_sw] IS NULL);
    UPDATE [#ENCOUNTERS]
    SET    [tmp_acct_xid] = [int_account].[account_xid]
    FROM   [#ENCOUNTERS]
           INNER JOIN
           [dbo].[int_encounter]
           ON [#ENCOUNTERS].[TMP_ENC_ID] = [int_encounter].[encounter_id]
           INNER JOIN
           [dbo].[int_account]
           ON [int_encounter].[account_id] = [int_account].[account_id]
    WHERE  [int_encounter].[patient_id] = @patient_id
           AND [int_account].[account_xid] IS NOT NULL
           AND [TMP_ENC_MAP_STATUS_CD] != N'N';
    UPDATE [#ENCOUNTERS]
    SET    [tmp_acct_xid] = '*NOT AVAILABLE*'
    FROM   [#ENCOUNTERS]
    WHERE  [tmp_acct_xid] = @acct_no
           AND [TMP_ENC_MAP_STATUS_CD] != N'N'
           AND [TMP_ENC_MAP_STATUS_CD] != N'S';
    UPDATE [#ENCOUNTERS]
    SET    [TMP_DIAGNOSIS] = [short_dsc]
    FROM   [#ENCOUNTERS]
           INNER JOIN
           [dbo].[int_misc_code]
           ON [TMP_DIAG_ID] = [code_id]
    WHERE  [TMP_DIAG_ID] != 0;
    UPDATE [#ENCOUNTERS]
    SET    [TMP_PAT_TYPE]  = ISNULL([M].[short_dsc], N''),
           [TMP_PAT_CLASS] = ISNULL([M2].[short_dsc], N'')
    FROM   [#ENCOUNTERS]
           LEFT OUTER JOIN
           [dbo].[int_misc_code] AS [M]
           ON ([tmp_pat_type_id] = [M].[code_id])
           INNER JOIN
           [dbo].[int_misc_code] AS [M2]
           ON [TMP_PAT_CLASS_ID] = [M2].[code_id];
    UPDATE [#ENCOUNTERS]
    SET    [tmp_med_srvc] = [short_dsc]
    FROM   [#ENCOUNTERS]
           INNER JOIN
           [dbo].[int_misc_code]
           ON [TMP_MED_SRVC_ID] = [code_id]
    WHERE  [short_dsc] IS NOT NULL;
    UPDATE [#ENCOUNTERS]
    SET    [tmp_dept_code] = [organization_cd]
    FROM   [dbo].[int_organization]
    WHERE  [#ENCOUNTERS].[TMP_DEPT_ID] = [int_organization].[organization_id];
    SELECT   [tmp_acct_xid],
             [TMP_ENC_ID],
             [TMP_ACCT_ID],
             [TMP_PAT_TYPE],
             [tmp_admit_dt],
             [TMP_DISCH_DT],
             [tmp_med_srvc],
             [TMP_DIAGNOSIS],
             [TMP_ENC_STATUS_CD],
             [TMP_DR_ID],
             [TMP_DR_LAST_NAME],
             [TMP_DR_FIRST_NAME],
             [TMP_DR_MIDDLE_NAME],
             [TMP_ENC_MAP_STATUS_CD],
             [TMP_ENC_XID],
             [TMP_STAT_ACT_CODE],
             [TMP_PAT_CLASS],
             [TMP_VIP_SW],
             [tmp_dept_code],
             [TMP_DEPT_ID],
             [TMP_ROOM],
             [TMP_BED],
             [TMP_DISPO_CID]
    FROM     [#ENCOUNTERS]
    ORDER BY [tmp_admit_dt] DESC;
    DROP TABLE [#ENCOUNTERS];
END

GO
CREATE PROCEDURE [dbo].[p_Encounters_Detail]
@patient_id UNIQUEIDENTIFIER, @strNotAvail VARCHAR (100)
AS
BEGIN
    DECLARE @acct_no AS CHAR (40) = 'SEE DETAIL', @diagnosis AS VARCHAR (255) = ' ', @pat_type AS VARCHAR (30) = '', @pat_class AS VARCHAR (30) = '';
    SELECT DISTINCT @acct_no AS [tmp_acct_xid],
                    [A].[account_id] AS [TMP_ACCT_ID],
                    [A].[encounter_id] AS [TMP_ENC_ID],
                    [C].[encounter_xid] AS [tmp_enc_xid],
                    [A].[patient_type_cid] AS [tmp_pat_type_id],
                    @pat_type AS [TMP_PAT_TYPE],
                    [A].[patient_class_cid] AS [TMP_PAT_CLASS_ID],
                    @pat_class AS [TMP_PAT_CLASS],
                    [A].[admit_dt] AS [tmp_admit_dt],
                    [A].[discharge_dt] AS [TMP_DISCH_DT],
                    [A].[med_svc_cid] AS [tmp_med_srvc_id],
                    SPACE(20) AS [tmp_med_srvc],
                    0 AS [TMP_DIAG_ID],
                    @diagnosis AS [TMP_DIAGNOSIS],
                    [A].[attend_hcp_id] AS [TMP_DR_ID],
                    [A].[status_cd] AS [TMP_ENC_STATUS_CD],
                    [B].[last_nm] AS [TMP_DR_LAST_NAME],
                    [B].[first_nm] AS [TMP_DR_FIRST_NAME],
                    [B].[middle_nm] AS [TMP_DR_MIDDLE_NAME],
                    [C].[status_cd] AS [TMP_ENC_MAP_STATUS_CD],
                    [C].[event_cd] AS [TMP_STAT_ACT_CODE],
                    [A].[vip_sw] AS [TMP_VIP_SW],
                    SPACE(20) AS [tmp_dept_code],
                    [A].[unit_org_id] AS [TMP_DEPT_ID],
                    [A].[rm] AS [TMP_ROOM],
                    [A].[bed] AS [TMP_BED],
                    [A].[discharge_dispo_cid] AS [TMP_DISPO_CID]
    INTO   [#ENCOUNTERS]
    FROM   [dbo].[int_encounter] AS [A]
           LEFT OUTER JOIN
           [dbo].[int_hcp] AS [B]
           ON [A].[attend_hcp_id] = [B].[hcp_id]
           INNER JOIN
           [dbo].[int_encounter_map] AS [C]
           ON [A].[encounter_id] = [C].[encounter_id]
    WHERE  @patient_id = [C].[patient_id]
           AND [C].[status_cd] IN (N'N', N'S', N'C')
           AND ([A].[status_cd] != N'X'
                OR [A].[status_cd] IS NULL);
    UPDATE [#ENCOUNTERS]
    SET    [TMP_DIAGNOSIS] = ISNULL([dsc], N' '),
           [TMP_DIAG_ID]   = ISNULL([diagnosis_cid], 0)
    FROM   [#ENCOUNTERS] AS [A]
           INNER JOIN
           [dbo].[int_diagnosis] AS [B]
           ON [A].[TMP_ENC_ID] = [B].[encounter_id]
    WHERE  [B].[inactive_sw] IS NULL
           AND [B].[seq_no] = (SELECT MAX([seq_no])
                               FROM   [#ENCOUNTERS] AS [A]
                                      INNER JOIN
                                      [dbo].[int_diagnosis] AS [B]
                                      ON [A].[TMP_ENC_ID] = [B].[encounter_id]
                               WHERE  [inactive_sw] IS NULL);
    UPDATE [#ENCOUNTERS]
    SET    [tmp_acct_xid] = [int_account].[account_xid]
    FROM   [#ENCOUNTERS]
           INNER JOIN
           [dbo].[int_encounter]
           ON [#ENCOUNTERS].[TMP_ENC_ID] = [int_encounter].[encounter_id]
           INNER JOIN
           [dbo].[int_account]
           ON [int_encounter].[account_id] = [int_account].[account_id]
    WHERE  [int_account].[account_xid] IS NOT NULL
           AND [TMP_ENC_MAP_STATUS_CD] != N'N'
           AND [int_encounter].[patient_id] = @patient_id;
    UPDATE [#ENCOUNTERS]
    SET    [tmp_acct_xid] = @strNotAvail
    FROM   [#ENCOUNTERS]
    WHERE  [tmp_acct_xid] = @acct_no
           AND [TMP_ENC_MAP_STATUS_CD] != N'N'
           AND [TMP_ENC_MAP_STATUS_CD] != N'S';
    UPDATE [#ENCOUNTERS]
    SET    [TMP_DIAGNOSIS] = [short_dsc]
    FROM   [#ENCOUNTERS]
           INNER JOIN
           [dbo].[int_misc_code]
           ON [TMP_DIAG_ID] = [code_id]
    WHERE  [TMP_DIAG_ID] != 0;
    UPDATE [#ENCOUNTERS]
    SET    [TMP_PAT_TYPE]  = ISNULL([M].[short_dsc], ''),
           [TMP_PAT_CLASS] = ISNULL([M2].[short_dsc], '')
    FROM   [#ENCOUNTERS] AS [e]
           LEFT OUTER JOIN
           [dbo].[int_misc_code] AS [M]
           ON [e].[tmp_pat_type_id] = [M].[code_id]
           INNER JOIN
           [dbo].[int_misc_code] AS [M2]
           ON [e].[TMP_PAT_CLASS_ID] = [M2].[code_id];
    UPDATE [#ENCOUNTERS]
    SET    [tmp_med_srvc] = [short_dsc]
    FROM   [#ENCOUNTERS] AS [e]
           INNER JOIN
           [dbo].[int_misc_code] AS [imc]
           ON [e].[tmp_med_srvc_id] = [imc].[code_id]
    WHERE  [short_dsc] IS NOT NULL;
    UPDATE [#ENCOUNTERS]
    SET    [tmp_dept_code] = [organization_cd]
    FROM   [dbo].[int_organization]
    WHERE  [#ENCOUNTERS].[TMP_DEPT_ID] = [int_organization].[organization_id];
    SELECT   [tmp_acct_xid],
             [TMP_ENC_ID],
             [TMP_ACCT_ID],
             [TMP_PAT_TYPE],
             [tmp_admit_dt],
             [TMP_DISCH_DT],
             [tmp_med_srvc],
             [TMP_DIAGNOSIS],
             [TMP_ENC_STATUS_CD],
             [TMP_DR_ID],
             [TMP_DR_LAST_NAME],
             [TMP_DR_FIRST_NAME],
             [TMP_DR_MIDDLE_NAME],
             [TMP_ENC_MAP_STATUS_CD],
             [tmp_enc_xid],
             [TMP_STAT_ACT_CODE],
             [TMP_PAT_CLASS],
             [TMP_VIP_SW],
             [tmp_dept_code],
             [TMP_DEPT_ID],
             [TMP_ROOM],
             [TMP_BED],
             [TMP_DISPO_CID]
    FROM     [#ENCOUNTERS]
    ORDER BY [tmp_admit_dt] DESC;
    DROP TABLE [#ENCOUNTERS];
END

GO
CREATE PROCEDURE [dbo].[p_fs_Distrib]
@patient_id UNIQUEIDENTIFIER, @fs_id UNIQUEIDENTIFIER=NULL
AS
BEGIN
    SELECT   [obs_start_dt],
             COUNT(*) AS [CNT]
    FROM     [dbo].[int_flowsheet_detail]
             INNER JOIN
             [dbo].[int_result]
             ON [int_flowsheet_detail].[test_cid] = [int_result].[test_cid]
    WHERE    [flowsheet_id] = @fs_id
             AND ([is_history] = 0
                  OR [is_history] IS NULL)
             AND [patient_id] = @patient_id
    GROUP BY [obs_start_dt]
    ORDER BY [obs_start_dt] DESC;
END

GO
CREATE PROCEDURE [dbo].[p_fs_Results]
@patient_id UNIQUEIDENTIFIER, @min_date DATETIME, @max_date DATETIME, @fs_id UNIQUEIDENTIFIER=NULL
AS
BEGIN
    SELECT DISTINCT [int_result].[test_cid],
                    [obs_start_dt],
                    [result_value],
                    [result_id],
                    [has_history],
                    [order_id],
                    [flowsheet_detail_id],
                    [mod_user_id]
    FROM   [dbo].[int_flowsheet_detail]
           INNER JOIN
           [dbo].[int_result]
           ON [int_flowsheet_detail].[test_cid] = [int_result].[test_cid]
    WHERE  [flowsheet_id] = @fs_id
           AND ([is_history] = 0
                OR [is_history] IS NULL)
           AND [patient_id] = @patient_id
           AND [obs_start_dt] >= @min_date
           AND [obs_start_dt] <= @max_date;
END

GO
CREATE PROCEDURE [dbo].[p_Get_cfg_Values]
@keyname VARCHAR (40)
AS
BEGIN
    SELECT [keyvalue]
    FROM   [dbo].[int_cfg_values]
    WHERE  [keyname] = @keyname;
END

GO
CREATE PROCEDURE [dbo].[p_Get_Lang]
AS
BEGIN
    DECLARE @my_keyvalue AS NVARCHAR (100);
    SELECT @my_keyvalue = [keyvalue]
    FROM   [dbo].[int_cfg_values]
    WHERE  ([keyname] = 'Language');
    IF @my_keyvalue = ''
        BEGIN
            UPDATE [dbo].[int_cfg_values]
            SET    [keyvalue] = 'ENU'
            WHERE  ([keyname] = 'Language');
            SET @my_keyvalue = 'ENU';
        END
    ELSE
        IF @my_keyvalue IS NULL
            BEGIN
                INSERT  INTO [dbo].[int_cfg_values]
                VALUES ('Language', 'ENU');
                SET @my_keyvalue = 'ENU';
            END
    SELECT @my_keyvalue AS [keyvalue];
END

GO
CREATE PROCEDURE [dbo].[p_gts_Channels_Info]
AS
BEGIN
    SET DEADLOCK_PRIORITY LOW;
    DECLARE @ActiveChannels AS INT, @ActiveWaveformChannels AS INT;
    SELECT @ActiveChannels = COUNT(*)
    FROM   [dbo].[int_patient_channel]
           LEFT OUTER JOIN
           [dbo].[int_monitor]
           ON [int_patient_channel].[monitor_id] = [int_monitor].[monitor_id]
    WHERE  [int_patient_channel].[active_sw] = 1
           AND [int_monitor].[monitor_id] IS NOT NULL;
    SELECT @ActiveWaveformChannels = COUNT(*)
    FROM   [dbo].[int_patient_channel]
           LEFT OUTER JOIN
           [dbo].[int_monitor]
           ON [int_patient_channel].[monitor_id] = [int_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_channel_type]
           ON [int_patient_channel].[channel_type_id] = [dbo].[int_channel_type].[channel_type_id]
    WHERE  ([int_patient_channel].[active_sw] = 1)
           AND [int_monitor].[monitor_id] IS NOT NULL
           AND [int_channel_type].[type_cd] = 'WAVEFORM';
    SELECT @ActiveChannels AS [ACTIVE_CHANNELS],
           @ActiveWaveformChannels AS [ACTIVE_WAVEFORM_CHANNELS];
END

GO
CREATE PROCEDURE [dbo].[p_gts_Input_Rate]
@MinutesTimeSlice INT=15, @Save CHAR (1)='N', @referenceTime DATETIME=NULL
AS
BEGIN
    SET DEADLOCK_PRIORITY LOW;
    DECLARE @cutoffdt AS DATETIME, @ucutoffdt AS DATETIME, @basetime AS DATETIME, @baseminute AS INT, @count AS INT;
    DECLARE @inprate TABLE (
        [input_type]   VARCHAR (20),
        [period_start] DATETIME     NOT NULL,
        [period_len]   INT          NOT NULL,
        [rate_counter] INT          NOT NULL);
    IF @MinutesTimeSlice IS NULL
        SET @MinutesTimeSlice = 15;
    IF @Save IS NULL
        SET @Save = 'N';
    ELSE
        SET @Save = UPPER(@Save);
    IF (@referenceTime IS NULL)
        BEGIN
            SET @basetime = DATEADD(HOUR, DATEDIFF(HOUR, 0, GETDATE()), 0);
            SET @baseminute = FLOOR(DATEPART(MI, GETDATE()) / @MinutesTimeSlice) * @MinutesTimeSlice;
        END
    ELSE
        BEGIN
            SET @basetime = DATEADD(HOUR, DATEDIFF(HOUR, 0, @referenceTime), 0);
            SET @baseminute = FLOOR(DATEPART(MI, @referenceTime) / @MinutesTimeSlice) * @MinutesTimeSlice;
        END
    SET @ucutoffdt = DATEADD(MINUTE, @baseminute, @basetime);
    SET @cutoffdt = DATEADD(MINUTE, -(@MinutesTimeSlice), @ucutoffdt);
    SELECT @count = COUNT(*)
    FROM   [dbo].[int_result]
    WHERE  [obs_start_dt] >= @cutoffdt
           AND [obs_start_dt] < @ucutoffdt;
    INSERT  INTO @inprate
    VALUES ('MonitorResults', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[int_waveform]
    WHERE  (([start_dt] >= @cutoffdt)
            AND ([start_dt] < @ucutoffdt));
    INSERT  INTO @inprate
    VALUES ('WaveFormData', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[int_param_timetag]
    WHERE  (([param_dt] >= @cutoffdt)
            AND ([param_dt] < @ucutoffdt));
    INSERT  INTO @inprate
    VALUES ('TwelveLead', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[int_alarm]
    WHERE  [start_dt] >= @cutoffdt
           AND [start_dt] < @ucutoffdt;
    INSERT  INTO @inprate
    VALUES ('Alarm', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[int_msg_log]
    WHERE  [msg_dt] >= @cutoffdt
           AND [msg_dt] < @ucutoffdt;
    INSERT  INTO @inprate
    VALUES ('MsgLog', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[int_print_job]
    WHERE  [job_net_dt] >= @cutoffdt
           AND [job_net_dt] < @ucutoffdt;
    INSERT  INTO @inprate
    VALUES ('PrintJob', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[int_event_log]
    WHERE  [event_dt] >= @cutoffdt
           AND [event_dt] < @ucutoffdt;
    INSERT  INTO @inprate
    VALUES ('CEILog', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[HL7_out_queue]
    WHERE  [sent_dt] >= @cutoffdt
           AND [sent_dt] < @ucutoffdt
           AND [msg_status] = N'R';
    INSERT  INTO @inprate
    VALUES ('HL7Success', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[HL7_out_queue]
    WHERE  [sent_dt] >= @cutoffdt
           AND [sent_dt] < @ucutoffdt
           AND [msg_status] = N'E';
    INSERT  INTO @inprate
    VALUES ('HL7Error', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[HL7_out_queue]
    WHERE  [sent_dt] >= @cutoffdt
           AND [sent_dt] < @ucutoffdt
           AND [msg_status] = N'N';
    INSERT  INTO @inprate
    VALUES ('HL7NotRead', @cutoffdt, @MinutesTimeSlice, @count);
    SELECT @count = COUNT(*)
    FROM   [dbo].[HL7_out_queue]
    WHERE  [sent_dt] >= @cutoffdt
           AND [sent_dt] < @ucutoffdt
           AND [msg_status] = N'P';
    INSERT  INTO @inprate
    VALUES ('HL7Pending', @cutoffdt, @MinutesTimeSlice, @count);
    IF (@Save = 'Y')
        BEGIN
            IF NOT EXISTS (SELECT TOP 1 [period_len]
                           FROM   [dbo].[gts_input_rate]
                           WHERE  [period_start] = @cutoffdt
                                  AND [period_len] = @MinutesTimeSlice)
                INSERT INTO [dbo].[gts_input_rate] ([input_type], [period_start], [period_len], [rate_counter])
                SELECT [input_type],
                       [period_start],
                       [period_len],
                       [rate_counter]
                FROM   @inprate;
        END
    SELECT [input_type],
           [period_start],
           [period_len],
           [rate_counter]
    FROM   @inprate;
END

GO
CREATE PROCEDURE [dbo].[p_gts_mp_List]
AS
BEGIN
    SET DEADLOCK_PRIORITY LOW;
    SELECT   [int_monitor].[network_id],
             [int_monitor].[node_id],
             [int_monitor].[bed_id],
             [int_monitor].[room],
             [int_monitor].[monitor_name],
             [int_monitor].[subnet],
             [dbo].[int_mrn_map].[mrn_xid],
             [dbo].[int_mrn_map].[mrn_xid2],
             [dbo].[int_mrn_map].[adt_adm_sw],
             [dbo].[int_person].[first_nm],
             [dbo].[int_person].[middle_nm],
             [dbo].[int_person].[last_nm],
             [dbo].[int_encounter].[admit_dt],
             [int_patient_monitor].[monitor_interval],
             [int_patient_monitor].[last_poll_dt],
             [int_patient_monitor].[last_result_dt],
             [int_patient_monitor].[last_episodic_dt],
             [int_patient_monitor].[last_outbound_dt],
             [int_patient_monitor].[monitor_status],
             [int_patient_monitor].[monitor_connect_dt]
    FROM     [dbo].[int_patient_monitor]
             INNER JOIN
             [dbo].[int_monitor]
             ON [int_patient_monitor].[monitor_id] = [int_monitor].[monitor_id]
             INNER JOIN
             [dbo].[int_person]
             ON [int_patient_monitor].[patient_id] = [dbo].[int_person].[person_id]
             INNER JOIN
             [dbo].[int_encounter]
             ON [int_patient_monitor].[patient_id] = [dbo].[int_encounter].[patient_id]
             INNER JOIN
             [dbo].[int_mrn_map]
             ON [int_patient_monitor].[patient_id] = [dbo].[int_mrn_map].[patient_id]
    WHERE    [int_patient_monitor].[active_sw] = 1
             AND [dbo].[int_mrn_map].[merge_cd] = 'C'
    ORDER BY [int_monitor].[node_id], [int_monitor].[bed_id];
END

GO
CREATE PROCEDURE [dbo].[p_gts_Purge_gts_Tables]
@Days INT=15
AS
BEGIN
    DECLARE @ExpirationDate AS DATETIME;
    SET DEADLOCK_PRIORITY LOW;
    IF @Days IS NULL
        SET @Days = 15;
    SET @ExpirationDate = DATEADD(DAY, -(@Days), GETDATE());
    DELETE [gwir]
    FROM   [dbo].[gts_waveform_index_rate] AS [gwir]
    WHERE  [period_start] < @ExpirationDate;
    DELETE [gir]
    FROM   [dbo].[gts_input_rate] AS [gir]
    WHERE  [period_start] < @ExpirationDate;
END

GO
CREATE PROCEDURE [dbo].[p_gts_WaveForm_Index_Rate]
@MinutesTimeSlice INT=15, @Save CHAR (1)='N', @referenceTime DATETIME=NULL
AS
BEGIN
    DECLARE @cutoffdt AS DATETIME, @ucutoffdt AS DATETIME, @WaveCount AS INT, @ActiveWaveformChannels AS INT, @basetime AS DATETIME, @baseminute AS INT, @Wave_Rate_Index AS INT;
    SET DEADLOCK_PRIORITY LOW;
    IF @MinutesTimeSlice IS NULL
        SET @MinutesTimeSlice = 15;
    IF @Save IS NULL
        SET @Save = 'N';
    ELSE
        SET @Save = UPPER(@Save);
    IF @referenceTime IS NULL
        BEGIN
            SET @basetime = DATEADD(HOUR, DATEDIFF(HOUR, 0, GETDATE()), 0);
            SET @baseminute = FLOOR(DATEPART(MI, GETDATE()) / @MinutesTimeSlice) * @MinutesTimeSlice;
        END
    ELSE
        BEGIN
            SET @basetime = DATEADD(HOUR, DATEDIFF(HOUR, 0, @referenceTime), 0);
            SET @baseminute = FLOOR(DATEPART(MI, @referenceTime) / @MinutesTimeSlice) * @MinutesTimeSlice;
        END
    SET @ucutoffdt = DATEADD(MINUTE, @baseminute, @basetime);
    SET @cutoffdt = DATEADD(MINUTE, -(@MinutesTimeSlice), @ucutoffdt);
    SELECT @WaveCount = COUNT(*)
    FROM   [dbo].[int_waveform]
    WHERE  (([start_dt] >= @cutoffdt)
            AND ([start_dt] < @ucutoffdt));
    SELECT @ActiveWaveformChannels = COUNT(*)
    FROM   [dbo].[int_patient_channel]
           LEFT OUTER JOIN
           [dbo].[int_monitor]
           ON [int_patient_channel].[monitor_id] = [int_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_channel_type]
           ON [int_patient_channel].[channel_type_id] = [dbo].[int_channel_type].[channel_type_id]
    WHERE  [int_patient_channel].[active_sw] = 1
           AND [int_monitor].[monitor_id] IS NOT NULL
           AND [int_channel_type].[type_cd] = 'WAVEFORM';
    IF @ActiveWaveformChannels > 0
        SET @Wave_Rate_Index = (@WaveCount / @ActiveWaveformChannels);
    ELSE
        SET @Wave_Rate_Index = 0;
    IF @Save = 'Y'
        BEGIN
            IF NOT EXISTS (SELECT [Wave_Rate_Index]
                           FROM   [dbo].[gts_waveform_index_rate]
                           WHERE  [period_start] = @cutoffdt
                                  AND [period_len] = @MinutesTimeSlice)
                INSERT INTO [dbo].[gts_waveform_index_rate] ([Wave_Rate_Index], [Current_Wavecount], [Active_Waveform], [period_start], [period_len])
                SELECT @Wave_Rate_Index,
                       @WaveCount,
                       @ActiveWaveformChannels,
                       @cutoffdt,
                       @MinutesTimeSlice;
        END
    SELECT @Wave_Rate_Index AS [WAVE_RATE_INDEX],
           @WaveCount AS [CURRENT_WAVECOUNT],
           @ActiveWaveformChannels AS [ACTIVE_WAVEFORM],
           @cutoffdt AS [PERIOD_START],
           @MinutesTimeSlice AS [PERIOD_LEN];
END

GO
CREATE PROCEDURE [dbo].[p_HL7_Status]
AS
BEGIN
    DECLARE @outbound_sent AS INT, @outbound_toproc AS INT, @outbound_cnt AS INT, @msg AS VARCHAR (255);
    SELECT @outbound_sent = COUNT(*)
    FROM   [dbo].[HL7_out_queue]
    WHERE  [sent_dt] IS NOT NULL;
    SELECT @outbound_toproc = COUNT(*)
    FROM   [dbo].[HL7_out_queue]
    WHERE  [sent_dt] IS NULL;
    SELECT @outbound_cnt = COUNT(*)
    FROM   [dbo].[int_outbound_queue]
    WHERE  [processed_dt] IS NULL;
    PRINT 'Current Date/Time: ' + CONVERT (VARCHAR (50), GETDATE(), 20);
    PRINT '';
    SET @msg = 'Total Outbound Messages Sent: ' + CONVERT (VARCHAR (50), @outbound_sent);
    PRINT @msg;
    SET @msg = 'Total Outbound Messages not sent: ' + CONVERT (VARCHAR (50), @outbound_toproc);
    PRINT @msg;
    SET @msg = 'Total Outbound Results to Process: ' + CONVERT (VARCHAR (50), @outbound_cnt);
    PRINT @msg;
    PRINT '';
    PRINT 'Last 50 Log Messages';
    SELECT   TOP (50) [msg_dt],
                      [msg_text]
    FROM     [dbo].[int_msg_log] AS [iml]
    ORDER BY [msg_dt] DESC;
END

GO
CREATE PROCEDURE [dbo].[p_Ins_Guarantor]
@patient_id UNIQUEIDENTIFIER, @enc_id UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
END

GO
CREATE PROCEDURE [dbo].[p_Ins_Plcys]
@patient_id UNIQUEIDENTIFIER, @acct_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   DISTINCT [cob_priority] AS [priority],
                      [P].[plan_xid] AS [PLANNO],
                      [ins_policy_xid] AS [POLICYNO],
                      [I].[group_xid] AS [GROUPNO],
                      [I].[seq_no],
                      SPACE(50) AS [LASTNAME],
                      SPACE(50) AS [FIRSTNAME],
                      SPACE(50) AS [MIDDLENAME],
                      [I].[holder_rel_cid] AS [RELATIONSHIPID],
                      [holder_id] AS [HOLDERID],
                      SPACE(50) AS [CARRIER],
                      [P].[ins_company_id] AS [EXT_ORGANIZATION_ID]
    INTO     [#TMP_INS1]
    FROM     [dbo].[int_insurance_policy] AS [I]
             INNER JOIN
             [dbo].[int_insurance_plan] AS [P]
             ON [I].[plan_id] = [P].[plan_id]
    WHERE    [I].[patient_id] = @patient_id
             AND [I].[account_id] = @acct_id
    ORDER BY [priority];
    UPDATE [#TMP_INS1]
    SET    [CARRIER] = [E].[organization_nm]
    FROM   [#TMP_INS1] AS [A]
           INNER JOIN
           [dbo].[int_external_organization] AS [E]
           ON [A].[EXT_ORGANIZATION_ID] = [E].[ext_organization_id];
    UPDATE [#TMP_INS1]
    SET    [LASTNAME]   = ISNULL([last_nm], ''),
           [MIDDLENAME] = ISNULL([middle_nm], ''),
           [FIRSTNAME]  = ISNULL([first_nm], '')
    FROM   [#TMP_INS1]
           INNER JOIN
           [dbo].[int_person_name] AS [PN]
           ON [HOLDERID] = [PN].[person_nm_id]
    WHERE  [PN].[recognize_nm_cd] = 'P'
           AND [PN].[active_sw] = 1;
    SELECT [I].[LASTNAME],
           [I].[FIRSTNAME],
           [I].[MIDDLENAME],
           [I].[CARRIER],
           [A].[line1_dsc] AS [ADDR1],
           [A].[line2_dsc] AS [ADDR2],
           [A].[line3_dsc] AS [ADDR3],
           [A].[city_nm] AS [CITY],
           [A].[state_code] AS [STATE],
           [A].[zip_code] AS [ZIP],
           [A].[country_cid],
           SPACE(14) AS [TEL_NO],
           CAST (NULL AS UNIQUEIDENTIFIER) AS [CONTACT_ID]
    INTO   [#TMP_INS2]
    FROM   [#TMP_INS1] AS [I]
           RIGHT OUTER JOIN
           [dbo].[int_address] AS [A]
           ON [I].[EXT_ORGANIZATION_ID] = [A].[address_id];
    UPDATE [#TMP_INS2]
    SET    [TEL_NO] = [T].[tel_no]
    FROM   [#TMP_INS2] AS [I]
           INNER JOIN
           [dbo].[int_telephone] AS [T]
           ON [I].[EXT_ORGANIZATION_ID] = [T].[phone_id]
    WHERE  [T].[phone_loc_cd] = 'B'
           AND [T].[phone_type_cd] = 'V'
           AND [T].[seq_no] = (SELECT MIN([seq_no])
                               FROM   [dbo].[int_telephone]
                               WHERE  [T].[phone_id] = [phone_id]
                                      AND [phone_loc_cd] = 'B'
                                      AND [phone_type_cd] = 'V');
    UPDATE [#TMP_INS2]
    SET    [CONTACT_ID] = [IP].[ins_contact_id]
    FROM   [#TMP_INS2] AS [I]
           INNER JOIN
           [dbo].[int_insurance_policy] AS [IP]
           ON [IP].[seq_no] = [I].[seq_no]
    WHERE  [IP].[patient_id] = @patient_id
           AND [IP].[active_sw] = 1;
    SELECT   [I].[CARRIER],
             [I].[MIDDLENAME],
             [I].[FIRSTNAME],
             [I].[LASTNAME],
             [I].[TEL_NO],
             [I].[CONTACT_ID],
             [PN].[last_nm] AS [CO_LNAME],
             [PN].[first_nm] AS [CO_FNAME],
             [PN].[middle_nm] AS [CO_MNAME]
    FROM     [dbo].[int_person_name] AS [PN]
             RIGHT OUTER JOIN
             [#TMP_INS2] AS [I]
             ON [I].[CONTACT_ID] = [PN].[person_nm_id]
    WHERE    [PN].[recognize_nm_cd] = 'P'
             AND [PN].[active_sw] = 1
    ORDER BY [priority];
END

GO
CREATE PROCEDURE [dbo].[p_Load_fs_Detail]
@flowsheetID UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [int_flowsheet_detail].[flowsheet_detail_id],
             [int_flowsheet_detail].[flowsheet_id],
             [int_flowsheet_detail].[name],
             [int_flowsheet_detail].[detail_type],
             [int_flowsheet_detail].[parent_id],
             [int_flowsheet_detail].[seq],
             [int_flowsheet_detail].[test_cid],
             [int_flowsheet_detail].[show_only_when_data],
             [int_flowsheet_detail].[is_compressed],
             [int_flowsheet_detail].[is_visible],
             [int_flowsheet_detail].[flowsheet_entry_id],
             [int_flowsheet_entry].[flowsheet_entry_id],
             [int_flowsheet_entry].[test_cid],
             [int_flowsheet_entry].[data_type],
             [int_flowsheet_entry].[select_list_id],
             [int_flowsheet_entry].[units],
             [int_flowsheet_entry].[normal_float],
             [int_flowsheet_entry].[absolute_float_high],
             [int_flowsheet_entry].[absolute_float_low],
             [int_flowsheet_entry].[warning_float_high],
             [int_flowsheet_entry].[warning_float_low],
             [int_flowsheet_entry].[critical_float_high],
             [int_flowsheet_entry].[critical_float_low],
             [int_flowsheet_entry].[normal_int],
             [int_flowsheet_entry].[absolute_int_high],
             [int_flowsheet_entry].[absolute_int_low],
             [int_flowsheet_entry].[warning_int_high],
             [int_flowsheet_entry].[warning_int_low],
             [int_flowsheet_entry].[critical_int_high],
             [int_flowsheet_entry].[critical_int_low],
             [int_flowsheet_entry].[normal_string],
             [int_flowsheet_entry].[max_length],
             [int_misc_code].[code],
             [int_misc_code].[short_dsc]
    FROM     [dbo].[int_flowsheet_detail]
             LEFT OUTER JOIN
             [dbo].[int_flowsheet_entry]
             ON [int_flowsheet_detail].[flowsheet_entry_id] = [int_flowsheet_entry].[flowsheet_entry_id]
             LEFT OUTER JOIN
             [dbo].[int_misc_code]
             ON [int_flowsheet_detail].[test_cid] = [int_misc_code].[code_id]
    WHERE    [flowsheet_id] = @flowsheetID
    ORDER BY [parent_id], [seq];
END

GO
CREATE PROCEDURE [dbo].[p_Loader_Pat_Poll]
@org_id UNIQUEIDENTIFIER, @network_id VARCHAR (50)
AS
BEGIN
    SELECT [MM].[mrn_xid],
           [MM].[mrn_xid2],
           [PAT].[patient_id],
           [PAT].[dob],
           [PAT].[gender_cid],
           [PAT].[height],
           [PAT].[weight],
           [PAT].[bsa],
           [PER].[last_nm],
           [PER].[first_nm],
           [PER].[middle_nm],
           [PM].[patient_monitor_id],
           [PM].[monitor_interval],
           [PM].[monitor_connect_dt],
           [PM].[last_poll_dt],
           [PM].[last_result_dt],
           [PM].[last_episodic_dt],
           [PM].[poll_start_dt],
           [PM].[poll_end_dt],
           [PM].[monitor_status],
           [PM].[monitor_error],
           [PM].[encounter_id],
           [PM].[live_until_dt],
           [MON].[network_id],
           [MON].[monitor_id],
           [MON].[monitor_name],
           [MON].[node_id],
           [MON].[bed_id],
           [MON].[room],
           [MON].[monitor_type_cd],
           [MON].[unit_org_id],
           [ORG].[outbound_interval],
           [ORG].[organization_cd]
    FROM   [dbo].[int_mrn_map] AS [MM]
           INNER JOIN
           [dbo].[int_patient] AS [PAT]
           ON [MM].[patient_id] = [PAT].[patient_id]
           INNER JOIN
           [dbo].[int_person] AS [PER]
           ON [PAT].[patient_id] = [PER].[person_id]
           INNER JOIN
           [dbo].[int_patient_monitor] AS [PM]
           ON [PAT].[patient_id] = [PM].[patient_id]
           INNER JOIN
           [dbo].[int_monitor] AS [MON]
           ON [PM].[monitor_id] = [MON].[monitor_id]
           INNER JOIN
           [dbo].[int_encounter] AS [ENC]
           ON [PM].[encounter_id] = [ENC].[encounter_id]
           INNER JOIN
           [dbo].[int_organization] AS [ORG]
           ON [MON].[unit_org_id] = [ORG].[organization_id]
    WHERE  [MM].[merge_cd] = 'C'
           AND [ENC].[discharge_dt] IS NULL
           AND [MM].[organization_id] = @org_id
           AND [MON].[network_id] = CAST (@network_id AS NVARCHAR (50))
           AND [PM].[active_sw] = 1;
END

GO
CREATE PROCEDURE [dbo].[p_ml_Delete_Duplicate_Info]
@Duplicate_Monitor VARCHAR (5)
AS
BEGIN
    DELETE [mdi]
    FROM   [dbo].[ml_duplicate_info] AS [mdi]
    WHERE  [Duplicate_Monitor] = @Duplicate_Monitor;
END

GO
CREATE PROCEDURE [dbo].[p_ml_Insert_Duplicate_Info]
@Original_ID VARCHAR (20), @Duplicate_Id VARCHAR (20), @Original_Monitor VARCHAR (5), @Duplicate_Monitor VARCHAR (5)
AS
BEGIN
    IF NOT EXISTS (SELECT [Original_ID]
                   FROM   [dbo].[ml_duplicate_info]
                   WHERE  [Original_ID] = @Original_ID
                          AND [Duplicate_Id] = @Duplicate_Id
                          AND [Original_Monitor] = @Original_Monitor
                          AND [Duplicate_Monitor] = @Duplicate_Monitor)
        BEGIN
            INSERT  INTO [dbo].[ml_duplicate_info] ([Original_ID], [Duplicate_Id], [Original_Monitor], [Duplicate_Monitor])
            VALUES                                (@Original_ID, @Duplicate_Id, @Original_Monitor, @Duplicate_Monitor);
        END
END

GO
CREATE PROCEDURE [dbo].[p_ml_Is_Id_On_Monitor]
@PatId VARCHAR (20), @CurrentMonitor VARCHAR (10)=''
AS
BEGIN
    IF @CurrentMonitor IS NULL
        SET @CurrentMonitor = '';
    SELECT [int_patient_monitor].[active_sw],
           [int_monitor].[monitor_name],
           [int_monitor].[standby]
    FROM   [dbo].[int_mrn_map]
           LEFT OUTER JOIN
           [dbo].[int_patient_monitor]
           ON ([int_mrn_map].[patient_id] = [dbo].[int_patient_monitor].[patient_id]
               AND [active_sw] = 1)
           LEFT OUTER JOIN
           [dbo].[int_monitor]
           ON ([dbo].[int_patient_monitor].[monitor_id] = [dbo].[int_monitor].[monitor_id])
    WHERE  [mrn_xid] = @PatId
           AND [int_monitor].[monitor_name] <> @CurrentMonitor
           AND [active_sw] = 1
           AND [merge_cd] = 'C'
           AND [standby] IS NULL
    UNION
    SELECT TOP (1) CAST (1 AS TINYINT) AS [active_sw],
                   N'ET' AS [monitor_name],
                   CASE [MonitoringStatus].[Value] WHEN N'Standby' THEN 1 ELSE NULL END AS [standby]
    FROM   [dbo].[int_mrn_map]
           INNER JOIN
           [dbo].[v_PatientTopicSessions]
           ON [v_PatientTopicSessions].[PatientId] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[TopicSessions]
           ON [TopicSessions].[Id] = [v_PatientTopicSessions].[TopicSessionId]
           LEFT OUTER JOIN
           (SELECT [DeviceSessionId],
                   [Name],
                   [Value],
                   ROW_NUMBER() OVER (PARTITION BY [DeviceSessionId], [Name] ORDER BY [TimestampUTC] DESC) AS [RowNumber]
            FROM   [dbo].[DeviceInfoData]
            WHERE  [Name] = N'MonitoringStatus') AS [MonitoringStatus]
           ON [MonitoringStatus].[DeviceSessionId] = [TopicSessions].[DeviceSessionId]
              AND [RowNumber] = 1
    WHERE  [int_mrn_map].[mrn_xid] = @PatId
           AND [TopicSessions].[EndTimeUTC] IS NULL;
END

GO
CREATE PROCEDURE [dbo].[p_ml_Load_Monitor_By_Gateway_Info]
@networkID VARCHAR (15), @nodeID VARCHAR (15), @bedID VARCHAR (3)
AS
BEGIN
    SELECT [int_monitor].[monitor_id],
           [int_monitor].[unit_org_id],
           [int_monitor].[network_id],
           [int_monitor].[node_id],
           [int_monitor].[bed_id],
           [int_monitor].[bed_cd],
           [int_monitor].[room],
           [int_monitor].[monitor_type_cd],
           [int_organization].[organization_cd],
           [int_monitor].[monitor_name],
           [int_organization].[outbound_interval],
           [int_monitor].[subnet]
    FROM   [dbo].[int_monitor]
           LEFT OUTER JOIN
           [dbo].[int_organization]
           ON [int_monitor].[unit_org_id] = [int_organization].[organization_id]
    WHERE  [network_id] = @networkID
           AND [node_id] = @nodeID
           AND [bed_id] = @bedID;
END

GO
CREATE PROCEDURE [dbo].[p_ml_Load_Monitor_By_Id]
@monitorID UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [int_monitor].[monitor_id],
           [int_monitor].[unit_org_id],
           [int_monitor].[network_id],
           [int_monitor].[node_id],
           [int_monitor].[bed_id],
           [int_monitor].[bed_cd],
           [int_monitor].[room],
           [int_monitor].[monitor_type_cd],
           [int_organization].[organization_cd],
           [int_monitor].[monitor_name],
           [int_organization].[outbound_interval],
           [int_monitor].[subnet]
    FROM   [dbo].[int_monitor]
           LEFT OUTER JOIN
           [dbo].[int_organization]
           ON [int_monitor].[unit_org_id] = [int_organization].[organization_id]
    WHERE  [monitor_id] = @monitorID;
END

GO
CREATE PROCEDURE [dbo].[p_ml_Load_Patient_By_Pat_Id]
@PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [int_patient].[patient_id],
           [int_person].[last_nm],
           [int_person].[first_nm],
           [int_person].[middle_nm],
           [int_mrn_map].[mrn_xid],
           [int_mrn_map].[mrn_xid2],
           [int_mrn_map].[organization_id],
           [int_patient].[dob],
           [int_patient].[gender_cid],
           [int_misc_code].[code],
           [int_patient].[height],
           [int_patient].[weight],
           [int_patient].[bsa]
    FROM   [dbo].[int_patient]
           LEFT OUTER JOIN
           [dbo].[int_misc_code]
           ON [int_patient].[gender_cid] = [int_misc_code].[code_id]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_patient].[patient_id] = [int_mrn_map].[patient_id]
              AND [int_mrn_map].[merge_cd] = 'C'
           INNER JOIN
           [dbo].[int_person]
           ON [int_patient].[patient_id] = [int_person].[person_id]
    WHERE  [int_mrn_map].[patient_id] = @PatientId;
END

GO
CREATE PROCEDURE [dbo].[p_Newest_fs_Result_Date]
@patient_id UNIQUEIDENTIFIER, @fs_id UNIQUEIDENTIFIER=NULL
AS
BEGIN
    SELECT MAX([obs_start_dt]) AS [MAX_DATE]
    FROM   [dbo].[int_flowsheet_detail] AS [ifd]
           INNER JOIN
           [dbo].[int_result] AS [ir]
           ON [ifd].[test_cid] = [ifd].[test_cid]
    WHERE  [ifd].[flowsheet_id] = @fs_id
           AND ([ir].[is_history] = 0
                OR [ir].[is_history] IS NULL)
           AND [patient_id] = @patient_id;
END

GO
CREATE PROCEDURE [dbo].[p_Node_Distrib]
@patient_id UNIQUEIDENTIFIER, @node_id INT=NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @level AS INT = 0;
    CREATE TABLE [#TMP_NODES] (
        [node_id]        INT          ,
        [rank]           INT           NULL,
        [parent_node_id] INT           NULL,
        [node_name]      VARCHAR (100) NULL,
        [level]          INT          
    );
    IF (@node_id IS NULL)
        BEGIN
            INSERT INTO [#TMP_NODES]
            SELECT [node_id],
                   [rank],
                   [parent_node_id],
                   CAST ([node_name] AS VARCHAR (100)),
                   @level AS [LEVEL]
            FROM   [dbo].[int_test_group]
            WHERE  [parent_node_id] IS NULL;
        END
    ELSE
        BEGIN
            INSERT INTO [#TMP_NODES]
            SELECT [node_id],
                   [rank],
                   [parent_node_id],
                   CAST ([node_name] AS VARCHAR (100)),
                   @level AS [LEVEL]
            FROM   [dbo].[int_test_group]
            WHERE  [node_id] = @node_id;
        END
    WHILE (@@ROWCOUNT <> 0)
        BEGIN
            SET @level = @level + 1;
            INSERT INTO [#TMP_NODES]
            SELECT [node_id],
                   [rank],
                   [parent_node_id],
                   CAST ([node_name] AS VARCHAR (100)),
                   @level
            FROM   [dbo].[int_test_group]
            WHERE  [parent_node_id] IN (SELECT [node_id]
                                        FROM   [#TMP_NODES])
                   AND [node_id] NOT IN (SELECT [node_id]
                                         FROM   [#TMP_NODES]);
        END
    SELECT [tn].[rank] AS [NODERANK],
           [tn].[node_id],
           [tn].[node_name],
           [itgd].[rank] AS [DETRANK],
           [itgd].[nm],
           [itgd].[display_type],
           'rtTest' AS [TEST_TYPE],
           [ir].[obs_start_dt],
           [ir].[order_id],
           [ir].[univ_svc_cid],
           [ir].[test_cid],
           [ir].[history_seq],
           [ir].[test_sub_id],
           [ir].[order_line_seq_no],
           [ir].[test_result_seq_no],
           [ir].[result_dt],
           [ir].[value_type_cd],
           [ir].[specimen_id],
           [ir].[source_cid],
           [ir].[status_cid],
           [ir].[result_units_cid],
           [ir].[reference_range_id],
           [ir].[abnormal_cd],
           [ir].[nsurv_tfr_ind],
           [ir].[result_value]
    INTO   [#TMP_RESULTS]
    FROM   [#TMP_NODES] AS [tn]
           INNER JOIN
           [dbo].[int_test_group_detail] AS [itgd]
           ON [tn].[node_id] = [itgd].[node_id]
           INNER JOIN
           [dbo].[int_result] AS [ir]
           ON [itgd].[test_cid] = [ir].[test_cid]
    WHERE  [ir].[patient_id] = @patient_id
           AND ([ir].[is_history] IS NULL
                OR [ir].[is_history] = 0)
    UNION
    SELECT DISTINCT [tn].[rank] AS [NODERANK],
                    [tn].[node_id],
                    [tn].[node_name],
                    [itgd].[rank] AS [DETRANK],
                    [itgd].[nm],
                    [itgd].[display_type],
                    'rtUsid' AS [TEST_TYPE],
                    [ir].[obs_start_dt],
                    [ir].[order_id],
                    [ir].[univ_svc_cid],
                    NULL AS [TEST_CID],
                    [ir].[history_seq],
                    NULL AS [TEST_SUB_ID],
                    [ir].[order_line_seq_no],
                    NULL AS [TEST_RESULT_SEQ_NO],
                    [ir].[result_dt],
                    NULL AS [VALUE_TYPE_CD],
                    [ir].[specimen_id],
                    [ir].[source_cid],
                    NULL AS [STATUS_CID],
                    NULL AS [RESULT_UNITS_CID],
                    NULL AS [REFERENCE_RANGE_ID],
                    [ir].[abnormal_cd],
                    [ir].[nsurv_tfr_ind],
                    NULL AS [RESULT_VALUE]
    FROM   [#TMP_NODES] AS [tn]
           INNER JOIN
           [dbo].[int_test_group_detail] AS [itgd]
           ON [tn].[node_id] = [itgd].[node_id]
           INNER JOIN
           [dbo].[int_result] AS [ir]
           ON [itgd].[univ_svc_cid] = [ir].[univ_svc_cid]
    WHERE  ([ir].[is_history] IS NULL
            OR [ir].[is_history] = 0)
           AND [ir].[patient_id] = @patient_id;
    SELECT   [obs_start_dt],
             COUNT(*) AS [CNT]
    FROM     [#TMP_RESULTS]
    GROUP BY [obs_start_dt]
    ORDER BY [obs_start_dt] DESC;
    DROP TABLE [#TMP_NODES];
    DROP TABLE [#TMP_RESULTS];
END

GO
CREATE PROCEDURE [dbo].[p_Node_Results]
@patient_id UNIQUEIDENTIFIER, @min_date DATETIME, @max_date DATETIME, @node_id INT=NULL
AS
BEGIN
    DECLARE @level AS INT = 0;
    CREATE TABLE [#TMP_NODES] (
        [node_id]        INT           ,
        [rank]           INT            NULL,
        [parent_node_id] INT            NULL,
        [node_name]      NVARCHAR (100) NULL,
        [level]          INT           
    );
    IF (@node_id IS NULL)
        BEGIN
            INSERT INTO [#TMP_NODES]
            SELECT [node_id],
                   [rank],
                   [parent_node_id],
                   [node_name],
                   @level AS [LEVEL]
            FROM   [dbo].[int_test_group]
            WHERE  [parent_node_id] IS NULL;
        END
    ELSE
        BEGIN
            INSERT INTO [#TMP_NODES]
            SELECT [node_id],
                   [rank],
                   [parent_node_id],
                   [node_name],
                   @level AS [LEVEL]
            FROM   [dbo].[int_test_group]
            WHERE  [node_id] = @node_id;
        END
    WHILE (@@ROWCOUNT <> 0)
        BEGIN
            SET @level = @level + 1;
            INSERT INTO [#TMP_NODES]
            SELECT [node_id],
                   [rank],
                   [parent_node_id],
                   [node_name],
                   @level
            FROM   [dbo].[int_test_group]
            WHERE  [parent_node_id] IN (SELECT [node_id]
                                        FROM   [#TMP_NODES])
                   AND [node_id] NOT IN (SELECT [node_id]
                                         FROM   [#TMP_NODES]);
        END
    SELECT [tn].[rank] AS [NODERANK],
           [tn].[node_id],
           [tn].[node_name],
           [alias_test_cid] AS [ALIAS],
           [itgd].[source_cid] AS [TGD_SOURCE_CID],
           [itgd].[rank] AS [DETRANK],
           [itgd].[nm],
           [itgd].[display_type],
           'rtTest' AS [TEST_TYPE],
           [imc].[sys_id],
           [obs_start_dt],
           [order_id],
           [ir].[univ_svc_cid],
           [ir].[test_cid],
           [history_seq],
           [test_sub_id],
           [order_line_seq_no],
           [test_result_seq_no],
           [result_dt],
           [value_type_cd],
           [specimen_id],
           [ir].[source_cid],
           [status_cid],
           [result_units_cid],
           [reference_range_id],
           [abnormal_cd],
           [nsurv_tfr_ind],
           [prin_rslt_intpr_id],
           [result_value],
           CONVERT (VARCHAR (10), [result_comment]) AS [RESULT_COMMENT]
    INTO   [#TMP_RESULTS]
    FROM   [#TMP_NODES] AS [tn]
           INNER JOIN
           [dbo].[int_test_group_detail] AS [itgd]
           ON [tn].[node_id] = [itgd].[node_id]
           INNER JOIN
           [dbo].[int_result] AS [ir]
           ON [itgd].[test_cid] = [ir].[test_cid]
           INNER JOIN
           [dbo].[int_misc_code] AS [imc]
           ON [ir].[test_cid] = [imc].[code_id]
    WHERE  [patient_id] = @patient_id
           AND [obs_start_dt] <= @max_date
           AND [obs_start_dt] >= @min_date
           AND (([is_history] IS NULL)
                OR ([is_history] = 0))
    UNION
    SELECT DISTINCT [tn].[rank] AS [NODERANK],
                    [tn].[node_id],
                    [tn].[node_name],
                    [alias_univ_svc_cid] AS [ALIAS],
                    [itgd].[source_cid] AS [TGD_SOURCE_CID],
                    [itgd].[rank] AS [DETRANK],
                    [itgd].[nm],
                    [itgd].[display_type],
                    'rtUsid' AS [TEST_TYPE],
                    [imc].[sys_id],
                    [obs_start_dt],
                    [order_id],
                    [ir].[univ_svc_cid],
                    NULL AS [TEST_CID],
                    [history_seq],
                    NULL AS [TEST_SUB_ID],
                    [order_line_seq_no],
                    NULL AS [TEST_RESULT_SEQ_NO],
                    [result_dt],
                    NULL AS [VALUE_TYPE_CD],
                    [specimen_id],
                    [ir].[source_cid],
                    NULL AS [STATUS_CID],
                    NULL AS [RESULT_UNITS_CID],
                    NULL AS [REFERENCE_RANGE_ID],
                    [abnormal_cd],
                    [nsurv_tfr_ind],
                    [prin_rslt_intpr_id],
                    NULL AS [RESULT_VALUE],
                    CONVERT (VARCHAR (10), [result_comment]) AS [RESULT_COMMENT]
    FROM   [#TMP_NODES] AS [tn]
           INNER JOIN
           [dbo].[int_test_group_detail] AS [itgd]
           ON [tn].[node_id] = [itgd].[node_id]
           INNER JOIN
           [dbo].[int_result] AS [ir]
           ON [itgd].[univ_svc_cid] = [ir].[univ_svc_cid]
           INNER JOIN
           [dbo].[int_misc_code] AS [imc]
           ON [ir].[univ_svc_cid] = [imc].[code_id]
    WHERE  [patient_id] = @patient_id
           AND [obs_start_dt] <= @max_date
           AND [obs_start_dt] >= @min_date
           AND ([is_history] IS NULL
                OR [is_history] = 0);
    SELECT DISTINCT [int_patient_image].[order_id],
                    1 AS [HAS_IMAGE]
    INTO   [#TMP_IMAGES]
    FROM   [#TMP_RESULTS]
           INNER JOIN
           [dbo].[int_patient_image]
           ON [#TMP_RESULTS].[order_id] = [int_patient_image].[order_id]
    WHERE  [int_patient_image].[patient_id] = @patient_id;
    SELECT [tr].[NODERANK],
           [tr].[node_id],
           [tr].[node_name],
           [tr].[ALIAS],
           [tr].[TGD_SOURCE_CID],
           [tr].[DETRANK],
           [tr].[nm],
           [tr].[display_type],
           [tr].[TEST_TYPE],
           [tr].[sys_id],
           [tr].[obs_start_dt],
           [tr].[order_id],
           [tr].[univ_svc_cid],
           [tr].[test_cid],
           [tr].[history_seq],
           [tr].[test_sub_id],
           [tr].[order_line_seq_no],
           [tr].[test_result_seq_no],
           [tr].[result_dt],
           [tr].[value_type_cd],
           [tr].[specimen_id],
           [tr].[source_cid],
           [tr].[status_cid],
           [tr].[result_units_cid],
           [tr].[reference_range_id],
           [tr].[abnormal_cd],
           [tr].[nsurv_tfr_ind],
           [tr].[prin_rslt_intpr_id],
           [tr].[result_value],
           [tr].[RESULT_COMMENT],
           [imc].[code] AS [SOURCE_CD],
           [RR].[reference_range],
           [PN].[last_nm],
           [PN].[first_nm],
           [PN].[middle_nm],
           [PN].[suffix],
           [int_order].[status_cid] AS [ORDER_STATUS_CID],
           [HAS_IMAGE],
           [int_order].[encounter_id]
    FROM   [#TMP_RESULTS] AS [tr]
           LEFT OUTER JOIN
           [dbo].[int_reference_range] AS [RR]
           ON [tr].[reference_range_id] = [RR].[reference_range_id]
           LEFT OUTER JOIN
           [dbo].[int_misc_code] AS [imc]
           ON [tr].[source_cid] = [imc].[code_id]
           LEFT OUTER JOIN
           [dbo].[int_person_name] AS [PN]
           ON [tr].[prin_rslt_intpr_id] = [PN].[person_nm_id]
           LEFT OUTER JOIN
           [dbo].[int_order]
           ON [tr].[order_id] = [int_order].[order_id]
           LEFT OUTER JOIN
           [#TMP_IMAGES]
           ON [tr].[order_id] = [#TMP_IMAGES].[order_id];
    DROP TABLE [#TMP_NODES];
    DROP TABLE [#TMP_RESULTS];
    DROP TABLE [#TMP_IMAGES];
END

GO
CREATE PROCEDURE [dbo].[p_Nok]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [N].[patient_id],
             [N].[notify_seq_no] AS [priority],
             [N].[relationship_cid],
             [A].[line1_dsc] AS [ADDR1],
             [A].[line2_dsc] AS [ADDR2],
             [A].[line3_dsc] AS [ADDR3],
             [A].[city_nm] AS [CITY],
             [A].[state_code] AS [STATE],
             [A].[zip_code] AS [ZIPCODE],
             [A].[country_cid],
             [P].[last_nm] AS [LASTNAME],
             [P].[first_nm] AS [FIRSTNAME],
             [P].[middle_nm] AS [MIDDLENAME],
             [T1].[tel_no] + [T1].[ext_no] AS [HOME_PHONE],
             [T2].[tel_no] + [T2].[ext_no] AS [BUSINESS_PHONE]
    FROM     [dbo].[int_nok] AS [N]
             INNER JOIN
             [dbo].[int_person_name] AS [P]
             ON [P].[person_nm_id] = [N].[nok_person_id]
             RIGHT OUTER JOIN
             [dbo].[int_address] AS [A]
             ON [N].[nok_person_id] = [A].[address_id]
             RIGHT OUTER JOIN
             [dbo].[int_telephone] AS [T1]
             ON [N].[nok_person_id] = [T1].[phone_id]
             RIGHT OUTER JOIN
             [dbo].[int_telephone] AS [T2]
             ON [N].[nok_person_id] = [T2].[phone_id]
    WHERE    [P].[recognize_nm_cd] = 'P'
             AND [N].[active_flag] = 1
             AND [N].[patient_id] = @patient_id
             AND [T1].[phone_loc_cd] = 'R'
             AND [T1].[phone_type_cd] = 'V'
             AND [T1].[seq_no] = (SELECT MIN([seq_no])
                                  FROM   [dbo].[int_telephone]
                                  WHERE  [phone_loc_cd] = 'R'
                                         AND [phone_id] = [N].[nok_person_id]
                                         AND [phone_type_cd] = 'V')
             AND [T2].[phone_loc_cd] = 'B'
             AND [T2].[phone_type_cd] = 'V'
             AND [T2].[seq_no] = (SELECT MIN([seq_no])
                                  FROM   [dbo].[int_telephone]
                                  WHERE  [phone_loc_cd] = 'B'
                                         AND [phone_id] = [N].[nok_person_id]
                                         AND [phone_type_cd] = 'V')
    ORDER BY [priority];
END

GO
CREATE PROCEDURE [dbo].[p_On_Monitor]
AS
BEGIN
    SELECT [ipm].[patient_id],
           CONVERT (CHAR (10), [imm].[mrn_xid]) AS [MRN],
           [im].[monitor_name] AS [MONITOR],
           CONVERT (CHAR (15), [ipn].[last_nm]) AS [LAST NAME],
           CONVERT (CHAR (15), [ipn].[first_nm]) AS [FIRST NAME],
           [ipm].[monitor_interval] AS [INTERVAL],
           [ipm].[poll_start_dt],
           [ipm].[poll_end_dt],
           [ipm].[monitor_status],
           [ipm].[monitor_error]
    FROM   [dbo].[int_mrn_map] AS [imm]
           INNER JOIN
           [dbo].[int_person_name] AS [ipn]
           ON [imm].[patient_id] = [ipn].[person_nm_id]
           INNER JOIN
           [dbo].[int_patient_monitor] AS [ipm]
           ON [ipm].[patient_id] = [imm].[patient_id]
           INNER JOIN
           [dbo].[int_monitor] AS [im]
           ON [ipm].[monitor_id] = [im].[monitor_id];
END

GO
CREATE PROCEDURE [dbo].[p_Parents]
@person_id UNIQUEIDENTIFIER
AS
BEGIN
    DECLARE @mom_ent_id AS UNIQUEIDENTIFIER, @dad_ent_id AS UNIQUEIDENTIFIER;
    SELECT [code_id],
           [int_keystone_cd]
    INTO   [#TMP_MISC_CODE]
    FROM   [dbo].[int_misc_code]
    WHERE  [int_keystone_cd] IN (N'MOTHER', N'FATHER')
           AND [category_cd] = 'RELA';
    SELECT   @mom_ent_id = [nok_person_id]
    FROM     [dbo].[int_nok] AS [N]
             INNER JOIN
             [#TMP_MISC_CODE] AS [T]
             ON [N].[relationship_cid] = [T].[code_id]
    WHERE    [N].[patient_id] = @person_id
             AND [T].[int_keystone_cd] = N'MOTHER'
    ORDER BY [seq_no] DESC;
    IF (@mom_ent_id = NULL)
        BEGIN
            SELECT   @mom_ent_id = [guarantor_person_id]
            FROM     [dbo].[int_guarantor] AS [G]
                     INNER JOIN
                     [#TMP_MISC_CODE] AS [T]
                     ON [G].[relationship_cid] = [T].[code_id]
            WHERE    [G].[patient_id] = @person_id
                     AND [T].[int_keystone_code] = N'MOTHER'
            ORDER BY [seq_no] DESC;
        END
    SELECT   @dad_ent_id = [nok_person_id]
    FROM     [dbo].[int_nok] AS [N]
             INNER JOIN
             [#TMP_MISC_CODE] AS [T]
             ON [N].[relationship_cid] = [T].[code_id]
    WHERE    [N].[patient_id] = @person_id
             AND [T].[int_keystone_cd] = N'FATHER'
    ORDER BY [seq_no] DESC;
    IF (@dad_ent_id = NULL)
        BEGIN
            SELECT   @dad_ent_id = [guarantor_person_id]
            FROM     [dbo].[int_guarantor] AS [G]
                     INNER JOIN
                     [#TMP_MISC_CODE] AS [T]
                     ON [G].[relationship_cid] = [T].[code_id]
            WHERE    [G].[patient_id] = @person_id
                     AND [T].[int_keystone_code] = N'FATHER'
            ORDER BY [seq_no] DESC;
        END
    SELECT [PN].[last_nm],
           [PN].[first_nm],
           [PN].[middle_nm],
           [PN].[suffix],
           'MOM' AS [CODE]
    FROM   [dbo].[int_person_name] AS [PN]
    WHERE  [PN].[person_nm_id] = @mom_ent_id
           AND [PN].[recognize_nm_cd] = 'P'
           AND [active_sw] = 1
    UNION
    SELECT [PN].[last_nm],
           [PN].[first_nm],
           [PN].[middle_nm],
           [PN].[suffix],
           'DAD' AS [CODE]
    FROM   [dbo].[int_person_name] AS [PN]
    WHERE  [PN].[person_nm_id] = @dad_ent_id
           AND [PN].[recognize_nm_cd] = 'P'
           AND [active_sw] = 1;
    DROP TABLE [#TMP_MISC_CODE];
END

GO
CREATE PROCEDURE [dbo].[p_Pat_Summary]
@mrn CHAR (30)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @pat_id AS UNIQUEIDENTIFIER;
    SELECT @pat_id = [patient_id]
    FROM   [dbo].[int_mrn_map]
    WHERE  [mrn_xid] = @mrn;
    IF (@pat_id IS NULL)
        SELECT 'Patient not found ....';
    ELSE
        BEGIN
            SELECT 'PATIENT    ',
                   [ip].[patient_id],
                   [ip].[new_patient_id],
                   [ip].[organ_donor_sw],
                   [ip].[living_will_sw],
                   [ip].[birth_order],
                   [ip].[veteran_status_cid],
                   [ip].[birth_place],
                   [ip].[ssn],
                   [ip].[mpi_ssn1],
                   [ip].[mpi_ssn2],
                   [ip].[mpi_ssn3],
                   [ip].[mpi_ssn4],
                   [ip].[driv_lic_no],
                   [ip].[mpi_dl1],
                   [ip].[mpi_dl2],
                   [ip].[mpi_dl3],
                   [ip].[mpi_dl4],
                   [ip].[driv_lic_state_code],
                   [ip].[dob],
                   [ip].[death_dt],
                   [ip].[nationality_cid],
                   [ip].[citizenship_cid],
                   [ip].[ethnic_group_cid],
                   [ip].[race_cid],
                   [ip].[gender_cid],
                   [ip].[primary_language_cid],
                   [ip].[marital_status_cid],
                   [ip].[religion_cid],
                   [ip].[monitor_interval],
                   [ip].[height],
                   [ip].[weight],
                   [ip].[bsa]
            FROM   [dbo].[int_patient] AS [ip]
            WHERE  [patient_id] = @pat_id;
            SELECT 'PATIENT_MON' AS [PATIENT_MON],
                   [ipm].[patient_monitor_id],
                   [ipm].[patient_id],
                   [ipm].[orig_patient_id],
                   [ipm].[monitor_id],
                   [ipm].[monitor_interval],
                   [ipm].[poll_type],
                   [ipm].[monitor_connect_dt],
                   [ipm].[monitor_connect_num],
                   [ipm].[disable_sw],
                   [ipm].[last_poll_dt],
                   [ipm].[last_result_dt],
                   [ipm].[last_episodic_dt],
                   [ipm].[poll_start_dt],
                   [ipm].[poll_end_dt],
                   [ipm].[last_outbound_dt],
                   [ipm].[monitor_status],
                   [ipm].[monitor_error],
                   [ipm].[encounter_id],
                   [ipm].[live_until_dt],
                   [ipm].[active_sw]
            FROM   [dbo].[int_patient_monitor] AS [ipm]
            WHERE  [patient_id] = @pat_id;
            SELECT 'PERSON_NAME' AS [PERSON_NAME],
                   [ipn].[person_nm_id],
                   [ipn].[recognize_nm_cd],
                   [ipn].[seq_no],
                   [ipn].[orig_patient_id],
                   [ipn].[active_sw],
                   [ipn].[prefix],
                   [ipn].[first_nm],
                   [ipn].[middle_nm],
                   [ipn].[last_nm],
                   [ipn].[suffix],
                   [ipn].[degree],
                   [ipn].[mpi_lname_cons],
                   [ipn].[mpi_fname_cons],
                   [ipn].[mpi_mname_cons],
                   [ipn].[start_dt]
            FROM   [dbo].[int_person_name] AS [ipn]
            WHERE  [person_nm_id] = @pat_id;
            SELECT 'PERSON     ' AS [PERSON],
                   [ip].[person_id],
                   [ip].[new_patient_id],
                   [ip].[first_nm],
                   [ip].[middle_nm],
                   [ip].[last_nm],
                   [ip].[suffix],
                   [ip].[tel_no],
                   [ip].[line1_dsc],
                   [ip].[line2_dsc],
                   [ip].[line3_dsc],
                   [ip].[city_nm],
                   [ip].[state_code],
                   [ip].[zip_code],
                   [ip].[country_cid]
            FROM   [dbo].[int_person] AS [ip]
            WHERE  [person_id] = @pat_id;
            SELECT 'MRN_MAP    ' AS [MRN_MAP],
                   [imm].[organization_id],
                   [imm].[mrn_xid],
                   [imm].[patient_id],
                   [imm].[orig_patient_id],
                   [imm].[merge_cd],
                   [imm].[prior_patient_id],
                   [imm].[mrn_xid2],
                   [imm].[adt_adm_sw]
            FROM   [dbo].[int_mrn_map] AS [imm]
            WHERE  [patient_id] = @pat_id;
            SELECT 'ENCOUNTER  ' AS [ENCOUNTER],
                   [ie].[encounter_id],
                   [ie].[organization_id],
                   [ie].[mod_dt],
                   [ie].[patient_id],
                   [ie].[orig_patient_id],
                   [ie].[account_id],
                   [ie].[status_cd],
                   [ie].[publicity_cid],
                   [ie].[diet_type_cid],
                   [ie].[patient_class_cid],
                   [ie].[protection_type_cid],
                   [ie].[vip_sw],
                   [ie].[isolation_type_cid],
                   [ie].[security_type_cid],
                   [ie].[patient_type_cid],
                   [ie].[admit_hcp_id],
                   [ie].[med_svc_cid],
                   [ie].[referring_hcp_id],
                   [ie].[unit_org_id],
                   [ie].[attend_hcp_id],
                   [ie].[primary_care_hcp_id],
                   [ie].[fall_risk_type_cid],
                   [ie].[begin_dt],
                   [ie].[ambul_status_cid],
                   [ie].[admit_dt],
                   [ie].[baby_cd],
                   [ie].[rm],
                   [ie].[recurring_cd],
                   [ie].[bed],
                   [ie].[discharge_dt],
                   [ie].[newborn_sw],
                   [ie].[discharge_dispo_cid],
                   [ie].[monitor_created],
                   [ie].[comment]
            FROM   [dbo].[int_encounter] AS [ie]
            WHERE  [patient_id] = @pat_id;
            SELECT 'ORDER_MAP  ' AS [ORDER_MAP],
                   [iom].[order_id],
                   [iom].[patient_id],
                   [iom].[orig_patient_id],
                   [iom].[organization_id],
                   [iom].[sys_id],
                   [iom].[order_xid],
                   [iom].[type_cd],
                   [iom].[seq_no]
            FROM   [dbo].[int_order_map] AS [iom]
            WHERE  [patient_id] = @pat_id;
            SELECT 'ORDER      ' AS [ORDER],
                   [io].[encounter_id],
                   [io].[order_id],
                   [io].[patient_id],
                   [io].[orig_patient_id],
                   [io].[priority_cid],
                   [io].[status_cid],
                   [io].[univ_svc_cid],
                   [io].[order_person_id],
                   [io].[order_dt],
                   [io].[enter_id],
                   [io].[verif_id],
                   [io].[transcriber_id],
                   [io].[parent_order_id],
                   [io].[child_order_sw],
                   [io].[order_cntl_cid],
                   [io].[history_sw],
                   [io].[monitor_sw]
            FROM   [dbo].[int_order] AS [io]
            WHERE  [patient_id] = @pat_id;
            SELECT 'ORDER_LINE ' AS [ORDER_LINE],
                   [iol].[order_id],
                   [iol].[seq_no],
                   [iol].[patient_id],
                   [iol].[orig_patient_id],
                   [iol].[status_cid],
                   [iol].[prov_svc_cid],
                   [iol].[univ_svc_cid],
                   [iol].[transport_cid],
                   [iol].[order_line_comment],
                   [iol].[clin_info_comment],
                   [iol].[reason_comment],
                   [iol].[scheduled_dt],
                   [iol].[observ_dt],
                   [iol].[status_chg_dt]
            FROM   [dbo].[int_order_line] AS [iol]
            WHERE  [patient_id] = @pat_id;
            SELECT 'RESULT     ' AS [RESULT],
                   [ir].[result_id],
                   [ir].[patient_id],
                   [ir].[orig_patient_id],
                   [ir].[obs_start_dt],
                   [ir].[order_id],
                   [ir].[is_history],
                   [ir].[monitor_sw],
                   [ir].[univ_svc_cid],
                   [ir].[test_cid],
                   [ir].[history_seq],
                   [ir].[test_sub_id],
                   [ir].[order_line_seq_no],
                   [ir].[test_result_seq_no],
                   [ir].[result_dt],
                   [ir].[value_type_cd],
                   [ir].[specimen_id],
                   [ir].[source_cid],
                   [ir].[status_cid],
                   [ir].[last_normal_dt],
                   [ir].[probability],
                   [ir].[obs_id],
                   [ir].[prin_rslt_intpr_id],
                   [ir].[asst_rslt_intpr_id],
                   [ir].[tech_id],
                   [ir].[trnscrbr_id],
                   [ir].[result_units_cid],
                   [ir].[reference_range_id],
                   [ir].[abnormal_cd],
                   [ir].[abnormal_nature_cd],
                   [ir].[prov_svc_cid],
                   [ir].[nsurv_tfr_ind],
                   [ir].[result_value],
                   [ir].[result_text],
                   [ir].[result_comment],
                   [ir].[has_history],
                   [ir].[mod_dt],
                   [ir].[mod_user_id],
                   [ir].[Sequence],
                   [ir].[result_ft]
            FROM   [dbo].[int_result] AS [ir]
            WHERE  [patient_id] = @pat_id;
        END
END

GO
CREATE PROCEDURE [dbo].[p_Purge]
@mrn CHAR (30)
AS
BEGIN
    DECLARE @pat_id AS UNIQUEIDENTIFIER, @msg AS VARCHAR (120);
    SELECT @pat_id = [patient_id]
    FROM   [dbo].[int_mrn_map]
    WHERE  [mrn_xid] = @mrn;
    IF (@pat_id IS NULL)
        SELECT 'patient not found..';
    ELSE
        BEGIN
            SET @msg = 'Purging patient: MRN=' + @mrn;
            SET @msg += ' patient_id = ';
            SET @msg += CAST (@pat_id AS VARCHAR (45));
            SELECT @msg;
            DELETE [ip]
            FROM   [dbo].[int_patient] AS [ip]
            WHERE  [patient_id] = @pat_id;
            DELETE [ipn]
            FROM   [dbo].[int_person_name] AS [ipn]
            WHERE  [person_nm_id] = @pat_id;
            DELETE [ip]
            FROM   [dbo].[int_person] AS [ip]
            WHERE  [person_id] = @pat_id;
            DELETE [ie]
            FROM   [dbo].[int_encounter] AS [ie]
            WHERE  [patient_id] = @pat_id;
            DELETE [ir]
            FROM   [dbo].[int_result] AS [ir]
            WHERE  [patient_id] = @pat_id;
            DELETE [imm]
            FROM   [dbo].[int_mrn_map] AS [imm]
            WHERE  [patient_id] = @pat_id;
            DELETE [iem]
            FROM   [dbo].[int_encounter_map] AS [iem]
            WHERE  [patient_id] = @pat_id;
            DELETE [iom]
            FROM   [dbo].[int_order_map] AS [iom]
            WHERE  [patient_id] = @pat_id;
            DELETE [iol]
            FROM   [dbo].[int_order_line] AS [iol]
            WHERE  [patient_id] = @pat_id;
            DELETE [io]
            FROM   [dbo].[int_order] AS [io]
            WHERE  [patient_id] = @pat_id;
        END
END

GO
CREATE PROCEDURE [dbo].[p_Purge_12Lead_Data]
@FChunkSize INT, @PurgeDate DATETIME, @TwelveLeadRowsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [isew]
            FROM   [dbo].[int_saved_event_waveform] AS [isew]
                   INNER JOIN
                   [dbo].[int_saved_event] AS [ise]
                   ON [isew].[event_id] = [ise].[event_id]
                      AND [isew].[patient_id] = [ise].[patient_id]
            WHERE  [ise].[insert_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ilre]
            FROM   [dbo].[int_12lead_report_edit] AS [ilre]
                   INNER JOIN
                   [dbo].[int_12lead_report] AS [i12r]
                   ON [ilre].[report_id] = [i12r].[report_id]
            WHERE  [i12r].[report_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ipt]
            FROM   [dbo].[int_param_timetag] AS [ipt]
            WHERE  [ipt].[param_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ise]
            FROM   [dbo].[int_SavedEvent] AS [ise]
            WHERE  [ise].[insert_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ilr]
            FROM   [dbo].[int_12lead_report] AS [ilr]
            WHERE  [ilr].[report_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @TwelveLeadRowsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Alarm_Data]
@FChunkSize INT, @PurgeDate DATETIME, @AlarmsRowsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [a]
            FROM   [dbo].[int_alarm] AS [a]
            WHERE  [a].[start_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @AlarmsRowsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_All_Patient_Data]
AS
BEGIN
    TRUNCATE TABLE [dbo].[HL7_in_qhist];
    TRUNCATE TABLE [dbo].[HL7_in_queue];
    TRUNCATE TABLE [dbo].[HL7_msg_ack];
    TRUNCATE TABLE [dbo].[HL7_out_queue];
    TRUNCATE TABLE [dbo].[int_12lead_report_new];
    TRUNCATE TABLE [dbo].[int_12lead_report_edit];
    TRUNCATE TABLE [dbo].[int_account];
    TRUNCATE TABLE [dbo].[int_address];
    TRUNCATE TABLE [dbo].[int_alarm];
    TRUNCATE TABLE [dbo].[int_alarm_retrieved];
    TRUNCATE TABLE [dbo].[int_alarm_waveform];
    TRUNCATE TABLE [dbo].[int_allergy];
    TRUNCATE TABLE [dbo].[int_diagnosis];
    TRUNCATE TABLE [dbo].[int_diagnosis_drg];
    TRUNCATE TABLE [dbo].[int_diagnosis_hcp_int];
    TRUNCATE TABLE [dbo].[int_encounter];
    TRUNCATE TABLE [dbo].[int_encounter_map];
    TRUNCATE TABLE [dbo].[int_encounter_tfr_history];
    TRUNCATE TABLE [dbo].[int_encounter_to_hcp_int];
    TRUNCATE TABLE [dbo].[int_event_log];
    TRUNCATE TABLE [dbo].[int_external_organization];
    TRUNCATE TABLE [dbo].[int_guarantor];
    TRUNCATE TABLE [dbo].[int_hcp];
    TRUNCATE TABLE [dbo].[int_hcp_contact];
    TRUNCATE TABLE [dbo].[int_hcp_license];
    TRUNCATE TABLE [dbo].[int_hcp_map];
    TRUNCATE TABLE [dbo].[int_hcp_specialty];
    TRUNCATE TABLE [dbo].[int_insurance_plan];
    TRUNCATE TABLE [dbo].[int_insurance_policy];
    TRUNCATE TABLE [dbo].[int_mrn_map];
    TRUNCATE TABLE [dbo].[int_nok];
    TRUNCATE TABLE [dbo].[int_order];
    TRUNCATE TABLE [dbo].[int_order_line];
    TRUNCATE TABLE [dbo].[int_order_map];
    TRUNCATE TABLE [dbo].[int_outbound_queue];
    TRUNCATE TABLE [dbo].[int_param_timetag];
    TRUNCATE TABLE [dbo].[int_patient];
    TRUNCATE TABLE [dbo].[int_patient_channel];
    TRUNCATE TABLE [dbo].[int_patient_document];
    TRUNCATE TABLE [dbo].[int_patient_image];
    TRUNCATE TABLE [dbo].[int_patient_link];
    TRUNCATE TABLE [dbo].[int_patient_list];
    TRUNCATE TABLE [dbo].[int_patient_list_detail];
    TRUNCATE TABLE [dbo].[int_patient_list_link];
    TRUNCATE TABLE [dbo].[int_patient_monitor];
    TRUNCATE TABLE [dbo].[int_patient_procedure];
    TRUNCATE TABLE [dbo].[int_person];
    TRUNCATE TABLE [dbo].[int_person_name];
    TRUNCATE TABLE [dbo].[int_print_job];
    TRUNCATE TABLE [dbo].[int_print_job_waveform];
    TRUNCATE TABLE [dbo].[int_procedure];
    TRUNCATE TABLE [dbo].[int_procedure_hcp_int];
    TRUNCATE TABLE [dbo].[int_reference_range];
    TRUNCATE TABLE [dbo].[int_result];
    TRUNCATE TABLE [dbo].[int_specimen];
    TRUNCATE TABLE [dbo].[int_specimen_group];
    TRUNCATE TABLE [dbo].[int_telephone];
    TRUNCATE TABLE [dbo].[int_tech_map];
    TRUNCATE TABLE [dbo].[int_vital_live];
    TRUNCATE TABLE [dbo].[int_waveform];
    TRUNCATE TABLE [dbo].[int_waveform_live];
    TRUNCATE TABLE [dbo].[mpi_decision_log];
    TRUNCATE TABLE [dbo].[mpi_decision_field];
    TRUNCATE TABLE [dbo].[mpi_decision_queue];
    TRUNCATE TABLE [dbo].[mpi_patient_link];
    TRUNCATE TABLE [dbo].[mpi_search_results];
    TRUNCATE TABLE [dbo].[mpi_search_work];
END

GO
CREATE PROCEDURE [dbo].[p_Purge_CEI_Log_Data]
@FChunkSize INT, @PurgeDate DATETIME, @CEILogPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [iel]
            FROM   [dbo].[int_event_log] AS [iel]
            WHERE  [event_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @CEILogPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_ch_Audit_Log]
@FChunkSize INT, @PurgeDate DATETIME, @ChAuditDataPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ial]
            FROM   [dbo].[int_audit_log] AS [ial]
            WHERE  [audit_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ald]
            FROM   [dbo].[AuditLogData] AS [ald]
            WHERE  [DateTime] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @ChAuditDataPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_ch_Log_Data]
@FChunkSize INT, @PurgeDate DATETIME, @CHLogDataPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ld]
            FROM   [dbo].[LogData] AS [ld]
            WHERE  [DateTime] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @CHLogDataPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_ch_Patient_Settings]
@FChunkSize INT, @PurgeDate DATETIME, @PatientSettingsDataPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [cvp]
            FROM   [dbo].[cfgValuesPatient] AS [cvp]
            WHERE  [timestamp] < @PurgeDate
                   AND [patient_id] NOT IN (SELECT [patient_id]
                                            FROM   [dbo].[int_encounter]
                                            WHERE  [discharge_dt] IS NULL);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @PatientSettingsDataPurged = @@ROWCOUNT;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Encounter_Data]
@FChunkSize INT, @EncounterDataPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DELETE [iem]
    FROM   [dbo].[int_encounter_map] AS [iem]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE [id]
    FROM   [dbo].[int_diagnosis] AS [id]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE [idd]
    FROM   [dbo].[int_diagnosis_drg] AS [idd]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE [ig]
    FROM   [dbo].[int_guarantor] AS [ig]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE [io]
    FROM   [dbo].[int_order] AS [io]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE [iom]
    FROM   [dbo].[int_order_map] AS [iom]
    WHERE  [order_id] NOT IN (SELECT [order_id]
                              FROM   [dbo].[int_order]);
    SET @RC += @@ROWCOUNT;
    DELETE [iol]
    FROM   [dbo].[int_order_line] AS [iol]
    WHERE  [order_id] NOT IN (SELECT [order_id]
                              FROM   [dbo].[int_order]);
    SET @RC += @@ROWCOUNT;
    DELETE [ipld]
    FROM   [dbo].[int_patient_list_detail] AS [ipld]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE [iethi]
    FROM   [dbo].[int_encounter_to_hcp_int] AS [iethi]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE [ieth]
    FROM   [dbo].[int_encounter_tfr_history] AS [ieth]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE [ipm]
    FROM   [dbo].[int_patient_monitor] AS [ipm]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter])
           AND ISNULL([active_sw], 0) <> 1;
    SET @RC += @@ROWCOUNT;
    DELETE [ia]
    FROM   [dbo].[int_account] AS [ia]
    WHERE  [account_id] NOT IN (SELECT [account_id]
                                FROM   [dbo].[int_encounter]);
    SET @RC += @@ROWCOUNT;
    DELETE TOP (@FChunkSize)
           [ipc]
    FROM   [dbo].[int_patient_channel] AS [ipc]
    WHERE  [patient_id] IN (SELECT [PatientId]
                            FROM   [dbo].[v_PatientDaysSinceLastDischarge]
                            WHERE  [DaysSinceLastDischarge] >= 10);
    SET @RC += @@ROWCOUNT;
    DELETE [ip]
    FROM   [dbo].[int_person] AS [ip]
    WHERE  [person_id] IN (SELECT [PatientId]
                           FROM   [dbo].[v_PatientDaysSinceLastDischarge]
                           WHERE  [DaysSinceLastDischarge] >= 10);
    SET @RC += @@ROWCOUNT;
    DELETE [ip]
    FROM   [dbo].[int_patient] AS [ip]
    WHERE  [patient_id] IN (SELECT [PatientId]
                            FROM   [dbo].[v_PatientDaysSinceLastDischarge]
                            WHERE  [DaysSinceLastDischarge] >= 10);
    SET @RC += @@ROWCOUNT;
    DELETE [ipn]
    FROM   [dbo].[int_person_name] AS [ipn]
    WHERE  [person_nm_id] IN (SELECT [PatientId]
                              FROM   [dbo].[v_PatientDaysSinceLastDischarge]
                              WHERE  [DaysSinceLastDischarge] >= 10);
    SET @RC += @@ROWCOUNT;
    DELETE [imm]
    FROM   [dbo].[int_mrn_map] AS [imm]
    WHERE  [patient_id] IN (SELECT [PatientId]
                            FROM   [dbo].[v_PatientDaysSinceLastDischarge]
                            WHERE  [DaysSinceLastDischarge] >= 10);
    SET @RC += @@ROWCOUNT;
    DELETE [ie]
    FROM   [dbo].[int_encounter] AS [ie]
    WHERE  [encounter_id] IN (SELECT [encounter_id]
                              FROM   [dbo].[int_encounter]
                              WHERE  [patient_id] IN (SELECT [PatientId]
                                                      FROM   [dbo].[v_PatientDaysSinceLastDischarge]
                                                      WHERE  [DaysSinceLastDischarge] >= 10));
    SET @RC += @@ROWCOUNT;
    DELETE [ie]
    FROM   [dbo].[int_encounter] AS [ie]
    WHERE  [encounter_id] NOT IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_encounter]
                                  WHERE  [patient_id] IN (SELECT [PatientId]
                                                          FROM   [dbo].[v_PatientDaysSinceLastDischarge]))
           AND [begin_dt] IS NOT NULL
           AND DATEDIFF(DAY, [begin_dt], GETDATE()) > 30;
    SET @RC += @@ROWCOUNT;
    IF (@RC <> 0)
        SET @EncounterDataPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_ETPrintJobs_Data]
@FChunkSize INT, @PurgeDate DATETIME, @PrintJobsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ipjet]
            FROM   [dbo].[int_print_job_et_alarm] AS [ipjet]
            WHERE  [RowLastUpdatedOn] <= @PurgeDate
                   AND [AlarmEndTimeUTC] IS NOT NULL;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SELECT DISTINCT [Vitals].[Id]
    INTO   [#vitalsToDelete]
    FROM   [dbo].[int_print_job_et_vitals] AS [Vitals]
           LEFT OUTER JOIN
           [dbo].[int_print_job_et_alarm] AS [Alarm]
           ON [Vitals].[TopicSessionId] = [Alarm].[TopicSessionId]
              AND [Vitals].[ResultTimeUTC] >= [Alarm].[AlarmStartTimeUTC]
              AND [Vitals].[ResultTimeUTC] <= [Alarm].[AlarmEndTimeUTC]
    WHERE  [Alarm].[TopicSessionId] IS NULL;
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ipjet]
            FROM   [dbo].[int_print_job_et_vitals] AS [ipjet]
            WHERE  [Id] IN (SELECT [Id]
                            FROM   [#vitalsToDelete]);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SELECT [Waveform].[Id]
    INTO   [#waveformsToDelete]
    FROM   [dbo].[int_print_job_et_waveform] AS [Waveform]
           LEFT OUTER JOIN
           [dbo].[int_print_job_et_alarm] AS [Alarm]
           ON [Waveform].[DeviceSessionId] = [Alarm].[DeviceSessionId]
              AND [Waveform].[StartTimeUTC] < [Alarm].[AlarmEndTimeUTC]
              AND [Waveform].[EndTimeUTC] > [Alarm].[AlarmStartTimeUTC]
    WHERE  [Alarm].[TopicSessionId] IS NULL;
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ipjet]
            FROM   [dbo].[int_print_job_et_waveform] AS [ipjet]
            WHERE  [Id] IN (SELECT [Id]
                            FROM   [#waveformsToDelete]);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @PrintJobsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_eval]
@ReferenceDate DATETIME
AS
BEGIN
    DECLARE @MR AS INT, @WF AS INT, @TL AS INT, @AL AS INT, @ML AS INT, @PJ AS INT, @CE AS INT, @HS AS INT, @HE AS INT, @HN AS INT, @HP AS INT, @TMR AS INT, @TWF AS INT, @TTL AS INT, @TAL AS INT, @TML AS INT, @TPJ AS INT, @TCE AS INT, @THS AS INT, @THE AS INT, @THN AS INT, @THP AS INT;
    IF @ReferenceDate IS NULL
        SET @ReferenceDate = GETDATE();
    SET @MR = (SELECT COUNT(*)
               FROM   [dbo].[int_result]
               WHERE  [obs_start_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                              FROM   [dbo].[int_system_parameter]
                                                              WHERE  [active_flag] = 1
                                                                     AND [name] = N'MonitorResults'), @ReferenceDate)));
    SET @TMR = (SELECT COUNT(*)
                FROM   [dbo].[int_result]) - @MR;
    SET @WF = (SELECT COUNT(*)
               FROM   [dbo].[int_waveform]
               WHERE  [start_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([setting] AS INT) * -1
                                                          FROM   [dbo].[int_sysgen]
                                                          WHERE  [product_cd] = 'fulldiscl'
                                                                 AND [feature_cd] = 'NUMBER_OF_HOURS'), @ReferenceDate)));
    SET @TWF = (SELECT COUNT(*)
                FROM   [dbo].[int_waveform]) - @WF;
    SET @TL = (SELECT COUNT(*)
               FROM   [dbo].[int_param_timetag]
               WHERE  [param_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                          FROM   [dbo].[int_system_parameter]
                                                          WHERE  [active_flag] = 1
                                                                 AND [name] = N'TwelveLead'), @ReferenceDate)));
    SET @TTL = (SELECT COUNT(*)
                FROM   [dbo].[int_param_timetag]) - @TL;
    SET @AL = (SELECT COUNT(*)
               FROM   [dbo].[int_alarm]
               WHERE  [start_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                          FROM   [dbo].[int_system_parameter]
                                                          WHERE  [active_flag] = 1
                                                                 AND [name] = N'Alarm'), @ReferenceDate)));
    SET @TAL = (SELECT COUNT(*)
                FROM   [dbo].[int_alarm]) - @AL;
    SET @ML = (SELECT COUNT(*)
               FROM   [dbo].[int_msg_log]
               WHERE  [msg_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                        FROM   [dbo].[int_system_parameter]
                                                        WHERE  [active_flag] = 1
                                                               AND [name] = N'Alarm'), @ReferenceDate))
                      AND [external_id] IS NULL);
    SET @TML = (SELECT COUNT(*)
                FROM   [dbo].[int_msg_log]
                WHERE  [external_id] IS NULL) - @ML;
    SET @PJ = (SELECT COUNT(*)
               FROM   [dbo].[int_print_job]
               WHERE  [job_net_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                            FROM   [dbo].[int_system_parameter]
                                                            WHERE  [active_flag] = 1
                                                                   AND [name] = N'PrintJob'), @ReferenceDate)));
    SET @TPJ = (SELECT COUNT(*)
                FROM   [dbo].[int_print_job]) - @PJ;
    SET @CE = (SELECT COUNT(*)
               FROM   [dbo].[int_event_log]
               WHERE  [event_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                          FROM   [dbo].[int_system_parameter]
                                                          WHERE  [active_flag] = 1
                                                                 AND [name] = N'CEILog'), @ReferenceDate)));
    SET @TCE = (SELECT COUNT(*)
                FROM   [dbo].[int_event_log]) - @CE;
    SET @HS = (SELECT COUNT(*)
               FROM   [dbo].[HL7_out_queue]
               WHERE  [msg_status] = N'R'
                      AND [sent_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                             FROM   [dbo].[int_system_parameter]
                                                             WHERE  [active_flag] = 1
                                                                    AND [name] = N'HL7Success'), @ReferenceDate)));
    SET @THS = (SELECT COUNT(*)
                FROM   [dbo].[HL7_out_queue]
                WHERE  [msg_status] = N'R') - @HS;
    SET @HE = (SELECT COUNT(*)
               FROM   [dbo].[HL7_out_queue]
               WHERE  [msg_status] = N'E'
                      AND [sent_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                             FROM   [dbo].[int_system_parameter]
                                                             WHERE  [active_flag] = 1
                                                                    AND [name] = N'HL7Error'), @ReferenceDate)));
    SET @THE = (SELECT COUNT(*)
                FROM   [dbo].[HL7_out_queue]
                WHERE  [msg_status] = N'E') - @HE;
    SET @HN = (SELECT COUNT(*)
               FROM   [dbo].[HL7_out_queue]
               WHERE  [msg_status] = N'N'
                      AND [sent_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                             FROM   [dbo].[int_system_parameter]
                                                             WHERE  [active_flag] = 1
                                                                    AND [name] = N'HL7NotRead'), @ReferenceDate)));
    SET @THN = (SELECT COUNT(*)
                FROM   [dbo].[HL7_out_queue]
                WHERE  [msg_status] = N'N') - @HN;
    SET @HP = (SELECT COUNT(*)
               FROM   [dbo].[HL7_out_queue]
               WHERE  [msg_status] = N'P'
                      AND [sent_dt] < (SELECT DATEADD(HOUR, (SELECT CAST ([parm_value] AS INT) * -1
                                                             FROM   [dbo].[int_system_parameter]
                                                             WHERE  [active_flag] = 1
                                                                    AND [name] = N'HL7Pending'), @ReferenceDate)));
    SET @THP = (SELECT COUNT(*)
                FROM   [dbo].[HL7_out_queue]
                WHERE  [msg_status] = N'P') - @HP;
    SELECT @TMR AS [VALIDMONITORRESULT],
           @MR AS [EXPMONITORRESULT],
           @TWF AS [VALIDEXPWAVEFORM],
           @WF AS [EXPWAVEFORM],
           @TTL AS [VALIDTWELVELEAD],
           @TL AS [EXPTWELVELEAD],
           @TAL AS [VALIDALARM],
           @AL AS [EXPALARM],
           @TML AS [VALIDMESSAGELOG],
           @ML AS [EXPMESSAGELOG],
           @TPJ AS [VALIDPRINTJOB],
           @PJ AS [EXPPRINTJOB],
           @TCE AS [VALIDCEI],
           @CE AS [EXPCEI],
           @THS AS [VALIDHL7SUCCESS],
           @HS AS [EXPHL7SUCCESS],
           @THE AS [VALIDHL7ERROR],
           @HE AS [EXPHL7ERROR],
           @THN AS [VALIDHL7NOTREAD],
           @HN AS [EXPHL7NOTREAD],
           @THP AS [VALIDHL7NOTREAD],
           @HP AS [EXPHL7NOTREAD];
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Get_Task]
@TaskName NVARCHAR (30)
AS
BEGIN
    SELECT [parm_value]
    FROM   [dbo].[int_system_parameter]
    WHERE  [name] = @TaskName;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Get_Task_List]
AS
BEGIN
    SELECT   [name],
             [parm_value],
             [debug_sw]
    FROM     [dbo].[int_system_parameter]
    WHERE    [active_flag] = 1
    ORDER BY [system_parameter_id];
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Get_wf_Hours]
AS
BEGIN
    SELECT [setting]
    FROM   [dbo].[int_sysgen]
    WHERE  [product_cd] = 'fulldiscl'
           AND [feature_cd] = 'NUMBER_OF_HOURS';
END

GO
CREATE PROCEDURE [dbo].[p_Purge_HL7_Error]
@FChunkSize INT, @PurgeDate DATETIME, @HL7ErrorRowsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [iml]
            FROM   [dbo].[int_msg_log] AS [iml]
                   INNER JOIN
                   [dbo].[HL7_out_queue] AS [hoq]
                   ON [msg_no] = [external_id]
            WHERE  [msg_status] = N'E'
                   AND ([sent_dt] < @PurgeDate
                        OR [queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[HL7_msg_ack]
            FROM   [dbo].[HL7_out_queue] AS [HL7OQ]
            WHERE  [HL7_msg_ack].[msg_control_id] = [HL7OQ].[msg_no]
                   AND [HL7OQ].[msg_status] = N'E'
                   AND ([HL7OQ].[sent_dt] < @PurgeDate
                        OR [HL7OQ].[queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[int_msg_log]
            WHERE  [external_id] IN (SELECT CONVERT (VARCHAR (20), [MessageNo])
                                     FROM   [dbo].[HL7InboundMessage]
                                     WHERE  [MessageStatus] = N'E'
                                            AND [MessageQueuedDate] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[HL7_out_queue]
            WHERE  [msg_status] = N'E'
                   AND ([sent_dt] < @PurgeDate
                        OR [queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[HL7PatientLink]
            WHERE  [MessageNo] IN (SELECT [MessageNo]
                                   FROM   [dbo].[HL7InboundMessage]
                                   WHERE  [MessageStatus] = N'E'
                                          AND [MessageQueuedDate] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[HL7InboundMessage]
            WHERE  [MessageStatus] = N'E'
                   AND [MessageQueuedDate] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @HL7ErrorRowsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_HL7_Not_Read]
@FChunkSize INT, @PurgeDate DATETIME, @HL7NotReadPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[int_msg_log]
            FROM   [dbo].[HL7_out_queue]
            WHERE  [msg_no] = [external_id]
                   AND [msg_status] = N'N'
                   AND ([sent_dt] < @PurgeDate
                        OR [queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[HL7_msg_ack]
            FROM   [dbo].[HL7_out_queue] AS [HL7OQ]
            WHERE  [HL7_msg_ack].[msg_control_id] = [HL7OQ].[msg_no]
                   AND [HL7OQ].[msg_status] = N'N'
                   AND ([HL7OQ].[sent_dt] < @PurgeDate
                        OR [HL7OQ].[queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [iml]
            FROM   [dbo].[int_msg_log] AS [iml]
            WHERE  [external_id] IN (SELECT CONVERT (VARCHAR (20), [MessageNo])
                                     FROM   [dbo].[HL7InboundMessage]
                                     WHERE  [MessageStatus] = N'N'
                                            AND [MessageProcessedDate] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [hoq]
            FROM   [dbo].[HL7_out_queue] AS [hoq]
            WHERE  [msg_status] = N'N'
                   AND ([sent_dt] < @PurgeDate
                        OR [queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [hpl]
            FROM   [dbo].[HL7PatientLink] AS [hpl]
            WHERE  [MessageNo] IN (SELECT [MessageNo]
                                   FROM   [dbo].[HL7InboundMessage]
                                   WHERE  [MessageStatus] = N'N'
                                          AND [MessageProcessedDate] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [him]
            FROM   [dbo].[HL7InboundMessage] AS [him]
            WHERE  [MessageStatus] = N'N'
                   AND [MessageProcessedDate] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @HL7NotReadPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_HL7_Pending]
@FChunkSize INT, @PurgeDate DATETIME, @HL7PendingDataPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[int_msg_log]
            FROM   [dbo].[HL7_out_queue]
            WHERE  [msg_no] = [external_id]
                   AND [msg_status] = 'P'
                   AND ([sent_dt] < @PurgeDate
                        OR [queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[HL7_msg_ack]
            FROM   [dbo].[HL7_out_queue] AS [HL7OQ]
            WHERE  [HL7_msg_ack].[msg_control_id] = [HL7OQ].[msg_no]
                   AND [HL7OQ].[msg_status] = 'P'
                   AND ([HL7OQ].[sent_dt] < @PurgeDate
                        OR [HL7OQ].[queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [iml]
            FROM   [dbo].[int_msg_log] AS [iml]
            WHERE  [external_id] IN (SELECT CONVERT (VARCHAR (20), [MessageNo])
                                     FROM   [dbo].[HL7InboundMessage]
                                     WHERE  [MessageStatus] = 'P'
                                            AND [MessageProcessedDate] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [hoq]
            FROM   [dbo].[HL7_out_queue] AS [hoq]
            WHERE  [msg_status] = 'P'
                   AND ([sent_dt] < @PurgeDate
                        OR [queued_dt] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [hpl]
            FROM   [dbo].[HL7PatientLink] AS [hpl]
            WHERE  [MessageNo] IN (SELECT [MessageNo]
                                   FROM   [dbo].[HL7InboundMessage]
                                   WHERE  [MessageStatus] = 'P'
                                          AND [MessageProcessedDate] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [him]
            FROM   [dbo].[HL7InboundMessage] AS [him]
            WHERE  [MessageStatus] = 'P'
                   AND [MessageProcessedDate] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @HL7PendingDataPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_HL7_Success]
@FChunkSize INT, @PurgeDate DATETIME, @HL7SuccessRowsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[int_msg_log]
            FROM   [dbo].[HL7_out_queue]
            WHERE  [msg_no] = [external_id]
                   AND [msg_status] = N'R'
                   AND [sent_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[HL7_msg_ack]
            FROM   [dbo].[HL7_out_queue] AS [HL7OQ]
            WHERE  [dbo].[HL7_msg_ack].[msg_control_id] = [HL7OQ].[msg_no]
                   AND [HL7OQ].[msg_status] = N'R'
                   AND [HL7OQ].[sent_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [iml]
            FROM   [dbo].[int_msg_log] AS [iml]
            WHERE  [external_id] IN (SELECT CONVERT (VARCHAR (20), [MessageNo])
                                     FROM   [dbo].[HL7InboundMessage]
                                     WHERE  [MessageStatus] = N'R'
                                            AND [MessageProcessedDate] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [hoq]
            FROM   [dbo].[HL7_out_queue] AS [hoq]
            WHERE  [msg_status] = N'R'
                   AND [sent_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [hpl]
            FROM   [dbo].[HL7PatientLink] AS [hpl]
            WHERE  [MessageNo] IN (SELECT [MessageNo]
                                   FROM   [dbo].[HL7InboundMessage]
                                   WHERE  [MessageStatus] = N'R'
                                          AND [MessageProcessedDate] < @PurgeDate);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [him]
            FROM   [dbo].[HL7InboundMessage] AS [him]
            WHERE  [MessageStatus] = N'R'
                   AND [MessageProcessedDate] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @HL7SuccessRowsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Input_Rate]
AS
BEGIN
    DECLARE @MR AS INT, @WF AS INT, @TL AS INT, @AL AS INT, @ML AS INT, @PJ AS INT, @CE AS INT, @HS AS INT, @HE AS INT, @HN AS INT, @HP AS INT;
    DECLARE @tmp_io_avg TABLE (
        [timeperiod] VARCHAR (12),
        [tcount]     INT         );
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [obs_start_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [obs_start_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[int_result]
    GROUP BY (CONVERT (VARCHAR, [obs_start_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [obs_start_dt], 8), 1, 2));
    SET @MR = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [start_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [start_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[int_waveform]
    GROUP BY (CONVERT (VARCHAR, [start_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [start_dt], 8), 1, 2));
    SET @WF = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [param_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [param_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[int_param_timetag]
    GROUP BY (CONVERT (VARCHAR, [param_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [param_dt], 8), 1, 2));
    SET @TL = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [start_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [start_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[int_alarm]
    GROUP BY (CONVERT (VARCHAR, [start_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [start_dt], 8), 1, 2));
    SET @AL = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [msg_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [msg_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[int_msg_log]
    WHERE    [external_id] IS NULL
    GROUP BY (CONVERT (VARCHAR, [msg_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [msg_dt], 8), 1, 2));
    SET @ML = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [job_net_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [job_net_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[int_print_job]
    GROUP BY (CONVERT (VARCHAR, [job_net_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [job_net_dt], 8), 1, 2));
    SET @PJ = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [event_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [event_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[int_event_log]
    GROUP BY (CONVERT (VARCHAR, [event_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [event_dt], 8), 1, 2));
    SET @CE = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [sent_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [sent_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[HL7_out_queue]
    WHERE    [msg_status] = N'R'
    GROUP BY (CONVERT (VARCHAR, [sent_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [sent_dt], 8), 1, 2));
    SET @HS = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [sent_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [sent_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[HL7_out_queue]
    WHERE    [msg_status] = N'E'
    GROUP BY (CONVERT (VARCHAR, [sent_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [sent_dt], 8), 1, 2));
    SET @HE = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [sent_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [sent_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[HL7_out_queue]
    WHERE    [msg_status] = N'N'
    GROUP BY (CONVERT (VARCHAR, [sent_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [sent_dt], 8), 1, 2));
    SET @HN = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    DELETE @tmp_io_avg;
    INSERT INTO @tmp_io_avg
    SELECT   CONVERT (VARCHAR, [sent_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [sent_dt], 8), 1, 2) AS [TIMEPERIOD],
             COUNT(*) AS [TCOUNT]
    FROM     [dbo].[HL7_out_queue]
    WHERE    [msg_status] = N'P'
    GROUP BY (CONVERT (VARCHAR, [sent_dt], 2) + ' ' + SUBSTRING(CONVERT (VARCHAR, [sent_dt], 8), 1, 2));
    SET @HP = (SELECT AVG([tcount])
               FROM   @tmp_io_avg);
    SELECT @MR AS [MONITORRESULTRATE],
           @WF AS [WAVEFORMRATE],
           @TL AS [TWELVELEADRATE],
           @AL AS [ALARMRATE],
           @ML AS [MESSAGELOGRATE],
           @PJ AS [PRINTJOBRATE],
           @CE AS [CLINICALEVENTRATE],
           @HS AS [HL7SUCCESSRATE],
           @HE AS [HL7ERRORRATE],
           @HN AS [HL7NOTREADRATE],
           @HP AS [HL7PENDINGRATE];
END

GO
CREATE PROCEDURE [dbo].[p_Purge_msg_Log_Data]
@FChunkSize INT, @PurgeDate DATETIME, @MessageLogPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [iml]
            FROM   [dbo].[int_msg_log] AS [iml]
            WHERE  [msg_dt] < @PurgeDate
                   AND [external_id] IS NULL;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @MessageLogPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Print_Job_Data]
@FChunkSize INT, @PurgeDate DATETIME, @PrintJobsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ipjw]
            FROM   [dbo].[int_print_job_waveform] AS [ipjw]
            WHERE  [ipjw].[row_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ipj]
            FROM   [dbo].[int_print_job] AS [ipj]
            WHERE  [ipj].[row_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @PrintJobsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Release_Data]
AS
BEGIN
    TRUNCATE TABLE [dbo].[HL7_in_qhist];
    TRUNCATE TABLE [dbo].[HL7_in_queue];
    TRUNCATE TABLE [dbo].[HL7_msg_ack];
    TRUNCATE TABLE [dbo].[HL7_out_queue];
    TRUNCATE TABLE [dbo].[int_autoupdate_log];
    TRUNCATE TABLE [dbo].[int_broadcast_msg];
    TRUNCATE TABLE [dbo].[int_client_map];
    TRUNCATE TABLE [dbo].[int_loader_stats];
    TRUNCATE TABLE [dbo].[int_mon_request];
    TRUNCATE TABLE [dbo].[int_monitor];
    TRUNCATE TABLE [dbo].[int_patient_monitor];
    TRUNCATE TABLE [dbo].[int_msg_log];
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Result_Data]
@FChunkSize INT, @PurgeDate DATETIME, @HL7MonitorRowsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ir]
            FROM   [dbo].[int_result] AS [ir]
            WHERE  [ir].[obs_start_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    DELETE [iol]
    FROM   [dbo].[int_order_line] AS [iol]
           INNER JOIN
           [dbo].[int_order] AS [io]
           ON [iol].[order_id] = [io].[order_id]
    WHERE  [io].[order_dt] < @PurgeDate;
    SET @RC += @@ROWCOUNT;
    DELETE [iom]
    FROM   [dbo].[int_order_map] AS [iom]
           INNER JOIN
           [dbo].[int_order] AS [io]
           ON [iom].[order_id] = [io].[order_id]
    WHERE  [io].[order_dt] < @PurgeDate;
    SET @RC += @@ROWCOUNT;
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [io]
            FROM   [dbo].[int_order] AS [io]
            WHERE  [order_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @HL7MonitorRowsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_Set_Task]
@TaskName NVARCHAR (30), @TaskVal NVARCHAR (30)
AS
BEGIN
    UPDATE [dbo].[int_system_parameter]
    SET    [parm_value] = @TaskVal
    WHERE  [name] = @TaskName;
END

GO
CREATE PROCEDURE [dbo].[p_Purge_WaveForm_Data]
@FChunkSize INT, @PurgeDate DATETIME, @WaveformDataPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ipc]
            FROM   [dbo].[int_patient_channel] AS [ipc]
                   INNER JOIN
                   [dbo].[int_patient_monitor] AS [ipm]
                   ON [ipc].[patient_monitor_id] = [ipm].[patient_monitor_id]
                   INNER JOIN
                   [dbo].[int_encounter] AS [ie]
                   ON [ipm].[encounter_id] = [ie].[encounter_id]
            WHERE  [ie].[discharge_dt] < @PurgeDate
                   AND [ipc].[active_sw] IS NULL;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [at]
            FROM   [dbo].[AnalysisTime] AS [at]
            WHERE  [at].[insert_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [wf]
            FROM   [dbo].[int_waveform] AS [wf]
            WHERE  [wf].[end_dt] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @WaveformDataPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[p_rel_CleanUp]
AS
BEGIN
    TRUNCATE TABLE [dbo].[int_patient_monitor];
    TRUNCATE TABLE [dbo].[int_mon_request];
    TRUNCATE TABLE [dbo].[int_monitor];
    TRUNCATE TABLE [dbo].[HL7_in_qhist];
    TRUNCATE TABLE [dbo].[HL7_in_queue];
    TRUNCATE TABLE [dbo].[HL7_msg_ack];
    TRUNCATE TABLE [dbo].[HL7_out_queue];
    TRUNCATE TABLE [dbo].[int_audit_log];
    TRUNCATE TABLE [dbo].[int_autoupdate_log];
    TRUNCATE TABLE [dbo].[int_broadcast_msg];
    TRUNCATE TABLE [dbo].[int_client_map];
    TRUNCATE TABLE [dbo].[int_loader_stats];
    TRUNCATE TABLE [dbo].[int_msg_log];
    TRUNCATE TABLE [dbo].[int_outbound_queue];
    TRUNCATE TABLE [dbo].[mpi_decision_log];
    TRUNCATE TABLE [dbo].[mpi_decision_queue];
    TRUNCATE TABLE [dbo].[mpi_patient_link];
    TRUNCATE TABLE [dbo].[mpi_search_work];
    TRUNCATE TABLE [dbo].[int_environment];
    TRUNCATE TABLE [dbo].[int_pref_diff];
    TRUNCATE TABLE [dbo].[int_security_diff];
    TRUNCATE TABLE [dbo].[int_result_flag];
    TRUNCATE TABLE [dbo].[int_org_shift_sched];
    TRUNCATE TABLE [dbo].[int_translate_list];
    TRUNCATE TABLE [dbo].[int_user_group];
    TRUNCATE TABLE [dbo].[int_user_password];
END

GO
CREATE PROCEDURE [dbo].[p_Set_cfg_Values]
@keyname VARCHAR (40), @keyvalue VARCHAR (100)
AS
BEGIN
    UPDATE [dbo].[int_cfg_values]
    SET    [keyvalue] = @keyvalue
    WHERE  [keyname] = @keyname;
END

GO
CREATE PROCEDURE [dbo].[p_Set_Lang]
@ICSLang NVARCHAR (10)
AS
BEGIN
    IF NOT EXISTS (SELECT [keyvalue]
                   FROM   [dbo].[int_cfg_values]
                   WHERE  [keyname] = 'Language')
        BEGIN
            INSERT  INTO [dbo].[int_cfg_values] ([keyname], [keyvalue])
            VALUES                             ('Language', CAST (@ICSLang AS VARCHAR (100)));
        END
    ELSE
        UPDATE [dbo].[int_cfg_values]
        SET    [keyvalue] = CAST (@ICSLang AS VARCHAR (100))
        WHERE  [keyname] = 'Language';
END

GO
CREATE PROCEDURE [dbo].[p_Test_Groups]
@node_id INT
AS
BEGIN
    SET NOCOUNT ON;
END

GO
CREATE PROCEDURE [dbo].[p_ugTest]
@table VARCHAR (80), @col VARCHAR (80)
AS
BEGIN
    DECLARE @sqlstr AS VARCHAR (255);
    SET @sqlstr = 'SELECT ' + @col + ' FROM ' + @table;
    EXECUTE (@sqlstr);
END

GO
CREATE PROCEDURE [dbo].[p_update_vital_live_temp]
AS
BEGIN
    SET NOCOUNT ON;
    DELETE [ivlt]
    FROM   [dbo].[int_vital_live_temp] AS [ivlt]
    WHERE  [createdDT] < GETDATE() - 0.002;
END

GO
CREATE PROCEDURE [dbo].[PurgerParameters]
@Name VARCHAR (MAX), @PurgeDate DATETIME OUTPUT, @ChunkSize INT OUTPUT
AS
BEGIN
    SET @ChunkSize = 200;
    SELECT @PurgeDate = DATEADD(hh, -CONVERT (INT, (SELECT [isp].[parm_value]
                                                    FROM   [dbo].[int_system_parameter] AS [isp]
                                                    WHERE  [isp].[name] = CAST (@Name AS NVARCHAR (30))), 111), GETDATE());
    IF ((SELECT [isp].[parm_value]
         FROM   [dbo].[int_system_parameter] AS [isp]
         WHERE  [isp].[active_flag] = 1
                AND [isp].[name] = N'ChunkSize') IS NOT NULL)
        SELECT @ChunkSize = CAST ([isp].[parm_value] AS INT)
        FROM   [dbo].[int_system_parameter] AS [isp]
        WHERE  [isp].[active_flag] = 1
               AND [isp].[name] = N'ChunkSize';
END

GO
CREATE PROCEDURE [dbo].[PurgerwaveformParameters]
@PurgeDate DATETIME OUTPUT, @ChunkSize INT OUTPUT
AS
BEGIN
    DECLARE @NumberOfHours AS INT = CAST ((SELECT [setting]
                                           FROM   [dbo].[int_sysgen]
                                           WHERE  [product_cd] = 'fulldiscl'
                                                  AND [feature_cd] = 'NUMBER_OF_HOURS') AS INT);
    IF (@NumberOfHours IS NULL)
        BEGIN
            SELECT @PurgeDate = DATEADD(hh, -24, GETDATE());
        END
    ELSE
        BEGIN
            SELECT @PurgeDate = DATEADD(hh, -@NumberOfHours, GETDATE());
        END
    SET @ChunkSize = 200;
    IF ((SELECT [parm_value]
         FROM   [dbo].[int_system_parameter]
         WHERE  [active_flag] = 1
                AND [name] = N'ChunkSize') IS NOT NULL)
        SELECT @ChunkSize = CAST ([isp].[parm_value] AS INT)
        FROM   [dbo].[int_system_parameter] AS [isp]
        WHERE  [isp].[active_flag] = 1
               AND [isp].[name] = N'ChunkSize';
END

GO
CREATE PROCEDURE [dbo].[RemoveAlarm]
@alarm_id UNIQUEIDENTIFIER, @remove_flag TINYINT
AS
BEGIN
    UPDATE [dbo].[int_alarm]
    SET    [removed] = @remove_flag
    WHERE  [alarm_id] = @alarm_id;
    UPDATE [dbo].[RemovedAlarms]
    SET    [Removed] = @remove_flag
    WHERE  [AlarmId] = @alarm_id;
    IF @@ROWCOUNT = 0
        INSERT  INTO [dbo].[RemovedAlarms]
        VALUES (@alarm_id, @remove_flag);
END

GO
CREATE PROCEDURE [dbo].[RestrictUnit]
@user_role_id UNIQUEIDENTIFIER, @organization_id UNIQUEIDENTIFIER
AS
BEGIN
    INSERT  INTO [dbo].[cdr_restricted_organization] ([user_role_id], [organization_id])
    VALUES                                          (@user_role_id, @organization_id);
END

GO
CREATE PROCEDURE [dbo].[RetrieveBeatTimeLog]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID]
AS
BEGIN
    SELECT [user_id],
           [patient_id],
           [start_ft],
           [num_beats],
           [sample_rate],
           [beat_data]
    FROM   [dbo].[int_beat_time_log]
    WHERE  [user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[RetrieveBeatTimeLogWithSampleRate]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @SampleRate SMALLINT
AS
BEGIN
    SELECT [user_id],
           [patient_id],
           [start_ft],
           [num_beats],
           [sample_rate],
           [beat_data]
    FROM   [dbo].[int_beat_time_log]
    WHERE  [user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [sample_rate] = @SampleRate;
END

GO
CREATE PROCEDURE [dbo].[RetrieveBinInfo]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @TemplateSetIndex INT
AS
BEGIN
    SELECT [ibi].[user_id],
           [ibi].[patient_id],
           [ibi].[template_set_index],
           [ibi].[template_index],
           [ibi].[bin_number],
           [ibi].[source],
           [ibi].[beat_count],
           [ibi].[first_beat_number],
           [ibi].[non_ignored_count],
           [ibi].[first_non_ignored_beat],
           [ibi].[iso_offset],
           [ibi].[st_offset],
           [ibi].[i_point],
           [ibi].[j_point],
           [ibi].[st_class],
           [ibi].[singles_bin],
           [ibi].[edit_bin],
           [ibi].[subclass_number],
           [ibi].[bin_image]
    FROM   [dbo].[int_bin_info] AS [ibi]
    WHERE  [ibi].[user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [ibi].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [ibi].[template_set_index] = @TemplateSetIndex;
END

GO
CREATE PROCEDURE [dbo].[RetrievePacerSpikeLog]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @SampleRate SMALLINT
AS
BEGIN
    SELECT [psl].[user_id],
           [psl].[patient_id],
           [psl].[sample_rate],
           [psl].[start_ft],
           [psl].[num_spikes],
           [psl].[spike_data]
    FROM   [dbo].[PacerSpikeLog] AS [psl]
    WHERE  [psl].[user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [psl].[patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [psl].[sample_rate] = @SampleRate;
END

GO
CREATE PROCEDURE [dbo].[RetrieveTemplateSetInfo]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @TemplateSetIndex INT
AS
BEGIN
    SELECT [user_id],
           [patient_id],
           [template_set_index],
           [lead_one],
           [lead_two],
           [number_of_bins],
           [number_of_templates]
    FROM   [dbo].[int_template_set_info]
    WHERE  [user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
           AND [template_set_index] = @TemplateSetIndex;
END

GO
CREATE PROCEDURE [dbo].[RetrieveTrendData]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID]
AS
BEGIN
    SELECT [user_id],
           [patient_id],
           [total_categories],
           [start_ft],
           [total_periods],
           [samples_per_period],
           [trend_data]
    FROM   [dbo].[TrendData]
    WHERE  [user_id] = CAST (@UserID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[SaveArrhythmiaEventTime]
@patient_id [dbo].[DPATIENT_ID], @event_id UNIQUEIDENTIFIER, @timetag_type INT, @arrhythmia_event_type INT, @start_ms BIGINT, @end_ms BIGINT
AS
BEGIN
    INSERT  INTO [dbo].[int_savedevent_event_log] ([patient_id], [event_id], [timetag_type], [arrhythmia_event_type], [start_ms], [end_ms])
    VALUES                                       (CAST (@patient_id AS UNIQUEIDENTIFIER), @event_id, @timetag_type, @arrhythmia_event_type, @start_ms, @end_ms);
END

GO
CREATE PROCEDURE [dbo].[SaveEvent]
@patient_id UNIQUEIDENTIFIER, @user_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @insert_dt DATETIME, @orig_event_category INT, @start_dt DATETIME, @start_ms BIGINT, @duration INT, @print_format INT, @title [dbo].[DTITLE], @comment [dbo].[DCOMMENT], @annotate_data TINYINT, @beat_color TINYINT, @num_waveforms INT, @sweep_speed INT, @minutes_per_page INT, @thumbnailChannel INT
AS
BEGIN
    SET NOCOUNT ON;
    INSERT  INTO [dbo].[int_SavedEvent] ([patient_id], [event_id], [insert_dt], [user_id], [orig_event_category], [orig_event_type], [start_dt], [start_ms], [duration], [value1], [value2], [print_format], [title], [comment], [annotate_data], [beat_color], [num_waveforms], [sweep_speed], [minutes_per_page], [thumbnailChannel])
    VALUES                             (@patient_id, @event_id, @insert_dt, @user_id, @orig_event_category, -1, @start_dt, @start_ms, @duration, 0, 0, @print_format, @title, @comment, @annotate_data, @beat_color, @num_waveforms, @sweep_speed, @minutes_per_page, @thumbnailChannel);
END

GO
CREATE PROCEDURE [dbo].[SaveEventBeatTimeLog]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @patient_start_ft BIGINT, @start_ft BIGINT, @num_beats INT, @sampleRate SMALLINT, @beat_data IMAGE
AS
BEGIN
    INSERT  INTO [dbo].[int_savedevent_beat_time_log] ([patient_id], [event_id], [patient_start_ft], [start_ft], [num_beats], [sample_rate], [beat_data])
    VALUES                                           (@patient_id, @event_id, @patient_start_ft, @start_ft, @num_beats, @sampleRate, @beat_data);
END

GO
CREATE PROCEDURE [dbo].[SaveEventCalipers]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @channel_type INT, @caliper_type INT, @calipers_orientation NCHAR (50), @caliper_text NVARCHAR (200), @caliper_start_ms BIGINT, @caliper_end_ms BIGINT, @caliper_top INT, @caliper_bottom INT
AS
BEGIN
    INSERT  INTO [dbo].[int_savedevent_calipers] ([patient_id], [event_id], [channel_type], [caliper_type], [calipers_orientation], [caliper_text], [caliper_start_ms], [caliper_end_ms], [caliper_top], [caliper_bottom])
    VALUES                                      (@patient_id, @event_id, @channel_type, @caliper_type, @calipers_orientation, @caliper_text, @caliper_start_ms, @caliper_end_ms, @caliper_top, @caliper_bottom);
END

GO
CREATE PROCEDURE [dbo].[SaveEventLeadLog]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @primary_channel BIT, @timetag_type INT, @lead_type INT, @start_ms BIGINT
AS
BEGIN
    INSERT  INTO [dbo].[int_savedevent_event_log] ([patient_id], [event_id], [primary_channel], [timetag_type], [lead_type], [start_ms])
    VALUES                                       (@patient_id, @event_id, @primary_channel, @timetag_type, @lead_type, @start_ms);
END

GO
CREATE PROCEDURE [dbo].[SaveEventMonitorEventLog]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @timetag_type INT, @monitor_event_type INT, @start_ms BIGINT, @end_ms BIGINT
AS
BEGIN
    INSERT  INTO [dbo].[int_savedevent_event_log] ([patient_id], [event_id], [timetag_type], [monitor_event_type], [start_ms], [end_ms])
    VALUES                                       (@patient_id, @event_id, @timetag_type, @monitor_event_type, @start_ms, @end_ms);
END

GO
CREATE PROCEDURE [dbo].[SaveEventVitals]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @gds_code NVARCHAR (80), @result_dt DATETIME, @result_value NVARCHAR (200)
AS
BEGIN
    INSERT  INTO [dbo].[int_savedevent_vitals] ([patient_id], [event_id], [gds_code], [result_dt], [result_value])
    VALUES                                    (@patient_id, @event_id, @gds_code, @result_dt, @result_value);
END

GO
CREATE PROCEDURE [dbo].[SaveEventWaveForm]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @wave_index INT, @waveform_category INT, @lead INT, @resolution INT, @height INT, @waveform_type INT, @visible TINYINT, @channel_id UNIQUEIDENTIFIER, @scale FLOAT (53), @scale_type INT, @scale_min INT, @scale_max INT, @duration INT, @sample_rate INT, @sample_count BIGINT, @num_Ypoints INT, @baseline INT, @Ypoints_per_unit FLOAT (53), @waveform_data IMAGE, @waveform_color VARCHAR (50), @scale_unit_type INT
AS
BEGIN
    INSERT  INTO [dbo].[int_savedevent_waveform] ([patient_id], [event_id], [wave_index], [waveform_category], [lead], [resolution], [height], [waveform_type], [visible], [channel_id], [scale], [scale_type], [scale_min], [scale_max], [duration], [sample_rate], [sample_count], [num_Ypoints], [baseline], [Ypoints_per_unit], [waveform_data], [num_timelogs], [waveform_color], [scale_unit_type])
    VALUES                                      (@patient_id, @event_id, @wave_index, @waveform_category, @lead, @resolution, @height, @waveform_type, @visible, @channel_id, @scale, @scale_type, @scale_min, @scale_max, @duration, @sample_rate, @sample_count, @num_Ypoints, @baseline, @Ypoints_per_unit, @waveform_data, 0, @waveform_color, @scale_unit_type);
END

GO
CREATE PROCEDURE [dbo].[SendRequestPatientTwelveLeadReport]
@report_id UNIQUEIDENTIFIER, @send_request SMALLINT
AS
BEGIN
    UPDATE [dbo].[int_12lead_report_new]
    SET    [send_request] = @send_request
    WHERE  [report_id] = @report_id;
END

GO
CREATE PROCEDURE [dbo].[SetPatientDataCollect]
@PatientId UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_patient_monitor]
    SET    [live_until_dt] = DATEADD(MINUTE, 3, GETDATE())
    WHERE  [patient_id] = @PatientId
           AND [active_sw] = 1;
END

GO
CREATE PROCEDURE [dbo].[UpdateAnalysisInsertDt]
@patient_id UNIQUEIDENTIFIER, @user_id UNIQUEIDENTIFIER, @insert_dt DATETIME
AS
BEGIN
    UPDATE [at]
    SET    [at].[insert_dt] = @insert_dt
    FROM   [dbo].[AnalysisTime] AS [at]
    WHERE  [at].[patient_id] = @patient_id
           AND [at].[user_id] = @user_id;
END

GO
CREATE PROCEDURE [dbo].[UpdatePatientSavedEvent]
@patient_id UNIQUEIDENTIFIER, @event_id UNIQUEIDENTIFIER, @title [dbo].[DTITLE], @comment [dbo].[DCOMMENT]
AS
BEGIN
    UPDATE [dbo].[int_SavedEvent]
    SET    [title]   = @title,
           [comment] = @comment
    WHERE  [patient_id] = @patient_id
           AND [event_id] = @event_id;
END

GO
CREATE PROCEDURE [dbo].[UpdatePatientTwelveLeadReport]
@report_id UNIQUEIDENTIFIER, @Interpretation VARCHAR (256)
AS
BEGIN
    UPDATE [dbo].[int_12lead_report_new]
    SET    [interpretation] = @Interpretation
    WHERE  ([report_id] = @report_id);
END

GO
CREATE PROCEDURE [dbo].[UpdatePatientTwelveLeadReportNew]
@report_id UNIQUEIDENTIFIER, @interpretation NTEXT, @user_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_12lead_report_new]
    SET    [interpretation_edits] = @interpretation,
           [user_id]              = @user_id
    WHERE  ([report_id] = @report_id);
END

GO
CREATE PROCEDURE [dbo].[UpdateRole]
@role_Id UNIQUEIDENTIFIER, @role_name VARCHAR (50), @role_desc VARCHAR (250), @xml_data XML
AS
BEGIN
    UPDATE [dbo].[int_user_role]
    SET    [role_name] = CAST (@role_name AS NVARCHAR (32)),
           [role_desc] = @role_desc
    WHERE  [user_role_id] = @role_Id;
    UPDATE [dbo].[int_security]
    SET    [xml_data] = @xml_data
    WHERE  [user_role_id] = @role_Id;
END

GO
CREATE PROCEDURE [dbo].[UpdateUserSetting]
@user_id UNIQUEIDENTIFIER, @cfg_name VARCHAR (40), @cfg_xml_value XML
AS
BEGIN
    IF NOT EXISTS (SELECT [cfg_xml_value]
                   FROM   [dbo].[int_user_settings]
                   WHERE  [user_id] = @user_id
                          AND [cfg_name] = @cfg_name)
        BEGIN
            INSERT  INTO [dbo].[int_user_settings] ([user_id], [cfg_xml_value], [cfg_name])
            VALUES                                (@user_id, @cfg_xml_value, @cfg_name);
        END
    ELSE
        BEGIN
            UPDATE [dbo].[int_user_settings]
            SET    [cfg_xml_value] = @cfg_xml_value
            WHERE  [user_id] = @user_id
                   AND [cfg_name] = @cfg_name;
        END
END

GO
CREATE PROCEDURE [dbo].[UpdateXmlValue]
@type_cd VARCHAR (25), @cfg_name VARCHAR (40), @isGlobal VARCHAR (10), @Filename VARCHAR (100)
AS
BEGIN
    IF EXISTS (SELECT *
               FROM   [dbo].[cfgValuesFactory]
               WHERE  [type_cd] = @type_cd
                      AND [cfg_name] = @cfg_name)
        DELETE [dbo].[cfgValuesFactory]
        WHERE  [type_cd] = @type_cd
               AND [cfg_name] = @cfg_name;
    IF EXISTS (SELECT *
               FROM   [dbo].[cfgValuesGlobal]
               WHERE  [type_cd] = @type_cd
                      AND [cfg_name] = @cfg_name)
        DELETE [dbo].[cfgValuesGlobal]
        WHERE  [type_cd] = @type_cd
               AND [cfg_name] = @cfg_name;
    IF EXISTS (SELECT *
               FROM   [dbo].[cfgValuesUnit]
               WHERE  [type_cd] = @type_cd
                      AND [cfg_name] = @cfg_name)
        DELETE [dbo].[cfgValuesUnit]
        WHERE  [type_cd] = @type_cd
               AND [cfg_name] = @cfg_name;
    IF EXISTS (SELECT *
               FROM   [dbo].[cfgValuesPatient]
               WHERE  [type_cd] = @type_cd
                      AND [cfg_name] = @cfg_name)
        DELETE [dbo].[cfgValuesPatient]
        WHERE  [type_cd] = @type_cd
               AND [cfg_name] = @cfg_name;
    DECLARE @SQL AS VARCHAR (2000);
    SET @SQL = '
    INSERT INTO [dbo].[cfgValuesFactory]
        (type_cd
        ,cfg_name
        ,cfg_value
        ,value_type
        ,global_type
        ,cfg_xml_value          
        )
    SELECT ''' + @type_cd + ''' AS [type_cd], ''' + @cfg_name + ''' AS [cfg_name],
    NULL AS [cfg_value],
    ''xml'' AS [value_type], ''' + @isGlobal + ''' AS [global_type],
    BulkColumn FROM OPENROWSET(bulk ''' + @Filename + ''', SINGLE_BLOB) AS [cfg_xml_value]';
    EXECUTE (@SQL);
END

GO
CREATE PROCEDURE [dbo].[usp_AddApplicationSettings]
@applicationSettings [dbo].[KeyValueTableType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    MERGE INTO [dbo].[ApplicationSettings]
     AS [TARGET]
    USING @applicationSettings AS [NEWDATA] ON [TARGET].[ApplicationType] = [NEWDATA].[ApplicationType]
                                               AND [TARGET].[InstanceId] = [NEWDATA].[InstanceId]
                                               AND [TARGET].[Key] = [NEWDATA].[Key]
    WHEN MATCHED THEN UPDATE 
    SET [TARGET].[Value] = [NEWDATA].[Value]
    WHEN NOT MATCHED THEN INSERT ([ApplicationType], [InstanceId], [Key], [Value]) VALUES ([NEWDATA].[ApplicationType], [NEWDATA].[InstanceId], [NEWDATA].[Key], [NEWDATA].[Value]);
END

GO
CREATE PROCEDURE [dbo].[usp_AddNewGatewaySettings]
@gateway_id UNIQUEIDENTIFIER, @gateway_type CHAR (4), @network_id NVARCHAR (30), @enable_sw TINYINT, @recv_app NVARCHAR (30), @send_app NVARCHAR (30), @organization_id UNIQUEIDENTIFIER, @send_sys_id UNIQUEIDENTIFIER, @results_usid INT, @sleep_secs INT, @debug_level INT, @unit_org_id UNIQUEIDENTIFIER, @patient_id_type CHAR (4), @auto_assign_id_sw TINYINT, @new_mrn_format NVARCHAR (80), @auto_chan_attach_sw TINYINT, @live_vitals_sw TINYINT, @live_waveform_size INT, @decnet_node INT, @node_name CHAR (5), @nodes_excluded NVARCHAR (255), @nodes_included NVARCHAR (255), @timemaster_sw TINYINT, @waveform_size INT, @print_enabled_sw TINYINT, @auto_record_alarm_sw TINYINT, @collect_12_lead_sw TINYINT, @print_auto_record_sw TINYINT, @encryption_status BIT
AS
BEGIN
    INSERT  INTO [dbo].[int_gateway] ([gateway_id], [gateway_type], [network_id], [hostname], [enable_sw], [recv_app], [send_app], [reconnect_secs], [organization_id], [send_sys_id], [results_usid], [sleep_secs], [add_monitors_sw], [add_patients_sw], [debug_level], [unit_org_id], [patient_id_type], [auto_assign_id_sw], [new_mrn_format], [auto_chan_attach_sw], [live_vitals_sw], [live_waveform_size], [decnet_node], [node_name], [nodes_excluded], [nodes_included], [timemaster_sw], [waveform_size], [print_enabled_sw], [auto_record_alarm_sw], [collect_12_lead_sw], [print_auto_record_sw], [encryption_status])
    VALUES                          (@gateway_id, @gateway_type, @network_id, N'localhost', @enable_sw, @recv_app, @send_app, 0, @organization_id, @send_sys_id, @results_usid, @sleep_secs, 1, 1, @debug_level, @unit_org_id, @patient_id_type, @auto_assign_id_sw, @new_mrn_format, @auto_chan_attach_sw, @live_vitals_sw, @live_waveform_size, @decnet_node, @node_name, @nodes_excluded, @nodes_included, @timemaster_sw, @waveform_size, @print_enabled_sw, @auto_record_alarm_sw, @collect_12_lead_sw, @print_auto_record_sw, @encryption_status);
END

GO
CREATE PROCEDURE [dbo].[usp_CA_CheckETSession]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT TOP 1 Sequence
    FROM   dbo.PatientSessionsMap
           INNER JOIN
           (SELECT   MAX(Sequence) AS MaxSeq
            FROM     dbo.PatientSessionsMap
            GROUP BY PatientSessionId) AS PatientSessionMaxSeq
           ON Sequence = PatientSessionMaxSeq.MaxSeq
    WHERE  PatientId = @patient_id;
END

GO
CREATE PROCEDURE [dbo].[usp_CA_Get12LeadPrintJobByPatientnPrintJobsIDs]
@patient_id UNIQUEIDENTIFIER, @print_job_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [twelve_lead_data]
    FROM   [dbo].[int_print_job]
    WHERE  [patient_id] = @patient_id
           AND [print_job_id] = @print_job_id;
END

GO
CREATE PROCEDURE [dbo].[usp_CA_Get12LeadPrintJobByPatientnReportIDs]
@patient_id UNIQUEIDENTIFIER, @report_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [report_data]
    FROM   [dbo].[int_12lead_report]
    WHERE  [patient_id] = @patient_id
           AND [report_id] = @report_id;
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetEtPrintJobs]
@PatientId UNIQUEIDENTIFIER, @alarmStartMinUTC DATETIME=NULL, @alarmStartMaxUTC DATETIME=NULL, @locale VARCHAR (2)='en'
AS
BEGIN
    SET @alarmStartMinUTC = COALESCE (@alarmStartMinUTC, CONVERT (DATETIME, '1753-01-01 00:00:00', 20));
    SET @alarmStartMaxUTC = COALESCE (@alarmStartMaxUTC, CONVERT (DATETIME, '9999-12-31 23:59:59', 20));
    DECLARE @msPerPageConst AS FLOAT = 6000.0, @msPerSecond AS INT = 1000, @tMinusPaddingSeconds AS INT;
    SELECT @tMinusPaddingSeconds = CAST ([as].[Value] AS INT)
    FROM   [dbo].[ApplicationSettings] AS [as]
    WHERE  [as].[ApplicationType] = 'Global'
           AND [as].[Key] = 'PrintJobPaddingSeconds';
    IF (@locale IS NULL
        OR @locale NOT IN ('de', 'en', 'es', 'fr', 'it', 'nl', 'pl', 'zh', 'cs', 'pt'))
        SET @locale = 'en';
    SELECT   [Alarms].[AlarmId],
             ISNULL(ISNULL([ResMessage].[Value], N'') + N'  ' + REPLACE(ISNULL([ResValue].[Value], N''), N'{0}', [Alarms].[ViolatingValue]) + N'  ' + REPLACE(ISNULL([ResLimit].[Value], N''), N'{0}', [Alarms].[SettingViolated]), [ResMessage].[Value]) AS [Description],
             [Alarms].[AlarmStartTimeUTC],
             CEILING((DATEDIFF(ms, [Alarms].[AlarmStartTimeUTC], CASE WHEN [Alarms].[AlarmEndTimeUTC] IS NULL THEN GETUTCDATE() ELSE [Alarms].[AlarmEndTimeUTC] END) + (2 * (@tMinusPaddingSeconds * @msPerSecond))) / @msPerPageConst) AS [NumPages]
    FROM     [dbo].[int_print_job_et_alarm] AS [Alarms]
             LEFT OUTER JOIN
             [dbo].[ResourceStrings] AS [ResMessage]
             ON [ResMessage].[Name] = [Alarms].[StrMessage]
                AND [ResMessage].[Locale] = @locale
             LEFT OUTER JOIN
             [dbo].[ResourceStrings] AS [ResLimit]
             ON [ResLimit].[Name] = [Alarms].[StrLimitFormat]
                AND [ResLimit].[Locale] = @locale
             LEFT OUTER JOIN
             [dbo].[ResourceStrings] AS [ResValue]
             ON [ResValue].[Name] = [Alarms].[StrValueFormat]
                AND [ResValue].[Locale] = @locale
    WHERE    [Alarms].[PatientId] = @PatientId
             AND [Alarms].[AlarmStartTimeUTC] >= @alarmStartMinUTC
             AND [Alarms].[AlarmStartTimeUTC] <= @alarmStartMaxUTC
    ORDER BY [Alarms].[AlarmStartTimeUTC] DESC;
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetFactorySettings]
AS
BEGIN
    SELECT [type_cd] AS [CFGTYPE],
           [cfg_name] AS [CFGNAME],
           [cfg_value] AS [CFGVALUE],
           [cfg_xml_value] AS [CFGXMLVALUE],
           [value_type] AS [VALUETYPE],
           [global_type] AS [GLOBALTYPE]
    FROM   [dbo].[cfgValuesFactory];
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetGlobalSettings]
AS
BEGIN
    IF NOT EXISTS (SELECT [type_cd] AS [CFGTYPE],
                          [cfg_name] AS [CFGNAME],
                          [cfg_value] AS [CFGVALUE],
                          [cfg_xml_value] AS [CFGXMLVALUE],
                          [value_type] AS [VALUETYPE],
                          [global_type] AS [GLOBALTYPE]
                   FROM   [dbo].[cfgValuesGlobal])
        BEGIN
            INSERT INTO [dbo].[cfgValuesGlobal]
            SELECT [type_cd],
                   [cfg_name],
                   [cfg_value],
                   [cfg_xml_value],
                   [value_type],
                   [global_type]
            FROM   [dbo].[cfgValuesFactory];
        END
    SELECT [type_cd] AS [CFGTYPE],
           [cfg_name] AS [CFGNAME],
           [cfg_value] AS [CFGVALUE],
           [cfg_xml_value] AS [CFGXMLVALUE],
           [value_type] AS [VALUETYPE],
           [global_type] AS [GLOBALTYPE]
    FROM   [dbo].[cfgValuesGlobal];
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetLegacyPatientWaveForms]
@patient_id UNIQUEIDENTIFIER, @channelIds [dbo].[StringList] READONLY, @start_ft BIGINT, @end_ft BIGINT
AS
BEGIN
    SELECT   [wfrm].[start_ft],
             [wfrm].[end_ft],
             [wfrm].[start_dt],
             [wfrm].[end_dt],
             [wfrm].[compress_method],
             CAST ([wfrm].[waveform_data] AS VARBINARY (MAX)) AS [waveform_data],
             [pc].[channel_type_id] AS [channel_id]
    FROM     [dbo].[int_waveform] AS [wfrm] WITH (NOLOCK)
             INNER JOIN
             [dbo].[int_patient_channel] AS [pc]
             ON [wfrm].[patient_channel_id] = [pc].[patient_channel_id]
             INNER JOIN
             [dbo].[int_patient_monitor] AS [pm]
             ON [pc].[patient_monitor_id] = [pm].[patient_monitor_id]
             INNER JOIN
             [dbo].[int_encounter] AS [pe]
             ON [pm].[encounter_id] = [pe].[encounter_id]
    WHERE    ([wfrm].[patient_id] = @patient_id)
             AND ([pc].[channel_type_id] IN (SELECT [Item]
                                             FROM   @channelIds))
             AND (@start_ft < [wfrm].[end_ft])
             AND (@end_ft >= [wfrm].[start_ft])
    ORDER BY [start_ft];
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetPatientSettings]
@patient_id UNIQUEIDENTIFIER, @unit_id UNIQUEIDENTIFIER
AS
BEGIN
    IF NOT EXISTS (SELECT [type_cd] AS [CFGTYPE],
                          [cfg_name] AS [CFGNAME],
                          [cfg_value] AS [CFGVALUE],
                          [cfg_xml_value] AS [CFGXMLVALUE],
                          [value_type] AS [VALUETYPE]
                   FROM   [dbo].[cfgValuesPatient]
                   WHERE  [patient_id] = @patient_id)
        BEGIN
            DECLARE @TEMP TABLE (
                [table_name]    VARCHAR (25),
                [type_cd]       VARCHAR (25),
                [cfg_name]      VARCHAR (40),
                [cfg_value]     DCFG_VALUES ,
                [cfg_xml_value] XML         ,
                [value_type]    VARCHAR (20));
            DECLARE @UNIT_TABLE AS VARCHAR (25) = 'cfgValuesUnit', @FACTORY_TABLE AS VARCHAR (25) = 'cfgValuesFactory', @GLOBAL_TABLE AS VARCHAR (25) = 'cfgValuesGlobal', @CURRENT AS VARCHAR (25);
            INSERT INTO @TEMP
            SELECT @UNIT_TABLE,
                   [type_cd],
                   [cfg_name],
                   [cfg_value],
                   [cfg_xml_value],
                   [value_type]
            FROM   [dbo].[cfgValuesUnit]
            WHERE  [unit_id] = @unit_id;
            INSERT INTO @TEMP
            SELECT @FACTORY_TABLE,
                   [type_cd],
                   [cfg_name],
                   [cfg_value],
                   [cfg_xml_value],
                   [value_type]
            FROM   [dbo].[cfgValuesFactory]
            WHERE  [global_type] = 'false';
            INSERT INTO @TEMP
            SELECT @GLOBAL_TABLE,
                   [type_cd],
                   [cfg_name],
                   [cfg_value],
                   [cfg_xml_value],
                   [value_type]
            FROM   [dbo].[cfgValuesGlobal]
            WHERE  [global_type] = 'false';
            SET @CURRENT = @UNIT_TABLE;
            IF NOT EXISTS (SELECT [type_cd],
                                  [cfg_name],
                                  [cfg_value],
                                  [cfg_xml_value],
                                  [value_type]
                           FROM   @TEMP
                           WHERE  [table_name] = @UNIT_TABLE)
                BEGIN
                    SET @CURRENT = @GLOBAL_TABLE;
                    IF NOT EXISTS (SELECT [type_cd],
                                          [cfg_name],
                                          [cfg_value],
                                          [cfg_xml_value],
                                          [value_type]
                                   FROM   @TEMP
                                   WHERE  [table_name] = @GLOBAL_TABLE)
                        SET @CURRENT = @FACTORY_TABLE;
                END
            IF NOT EXISTS (SELECT [type_cd] AS [CFGTYPE],
                                  [cfg_name] AS [CFGNAME],
                                  [cfg_value] AS [CFGVALUE],
                                  [cfg_xml_value] AS [CFGXMLVALUE],
                                  [value_type] AS [VALUETYPE]
                           FROM   [dbo].[cfgValuesPatient]
                           WHERE  [patient_id] = @patient_id)
                BEGIN
                    INSERT INTO [dbo].[cfgValuesPatient]
                    SELECT @patient_id,
                           [type_cd],
                           [cfg_name],
                           [cfg_value],
                           [cfg_xml_value],
                           [value_type],
                           GETDATE()
                    FROM   @TEMP
                    WHERE  [table_name] = @CURRENT;
                END
        END
    SELECT [type_cd] AS [CFGTYPE],
           [cfg_name] AS [CFGNAME],
           [cfg_value] AS [CFGVALUE],
           [cfg_xml_value] AS [CFGXMLVALUE],
           [value_type] AS [VALUETYPE],
           CAST (0 AS BIT) AS [GLOBALTYPE]
    FROM   [dbo].[cfgValuesPatient]
    WHERE  [patient_id] = @patient_id;
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetPatientWaveForms]
@patient_id UNIQUEIDENTIFIER, @channelIds [dbo].[StringList] READONLY, @start_ft BIGINT, @end_ft BIGINT
AS
BEGIN
    DECLARE @start_ut AS DATETIME = [dbo].[fnFileTimeToDateTime](@start_ft);
    DECLARE @end_ut AS DATETIME = [dbo].[fnFileTimeToDateTime](@end_ft);
    SELECT   [dbo].[fnDateTimeToFileTime]([wd].[StartTimeUTC]) AS [start_ft],
             [dbo].[fnDateTimeToFileTime]([wd].[EndTimeUTC]) AS [end_ft],
             CAST (NULL AS DATETIME) AS [start_dt],
             CAST (NULL AS DATETIME) AS [end_dt],
             CASE WHEN [wd].[Compressed] = 0 THEN NULL ELSE 'WCTZLIB' END AS [compress_method],
             [wd].[Samples] AS [waveform_data],
             [wd].[TypeId] AS [channel_id]
    FROM     [dbo].[WaveformData] AS [wd]
    WHERE    [wd].[TypeId] IN (SELECT [Item]
                               FROM   @channelIds)
             AND [wd].[TopicSessionId] IN (SELECT [vpts].[TopicSessionId]
                                           FROM   [dbo].[v_PatientTopicSessions] AS [vpts]
                                           WHERE  [vpts].[PatientId] = @patient_id)
             AND [wd].[StartTimeUTC] <= @end_ut
             AND [wd].[EndTimeUTC] > @start_ut
    UNION ALL
    SELECT   [iw].[start_ft],
             [iw].[end_ft],
             [iw].[start_dt],
             [iw].[end_dt],
             [iw].[compress_method],
             CAST ([iw].[waveform_data] AS VARBINARY (MAX)),
             [ipc].[channel_type_id] AS [channel_id]
    FROM     [dbo].[int_waveform] AS [iw] WITH (NOLOCK)
             INNER JOIN
             [dbo].[int_patient_channel] AS [ipc]
             ON [iw].[patient_channel_id] = [ipc].[patient_channel_id]
             INNER JOIN
             [dbo].[int_patient_monitor] AS [ipm]
             ON [ipc].[patient_monitor_id] = [ipm].[patient_monitor_id]
             INNER JOIN
             [dbo].[int_encounter] AS [ie]
             ON [ipm].[encounter_id] = [ie].[encounter_id]
    WHERE    [iw].[patient_id] = @patient_id
             AND [ipc].[channel_type_id] IN (SELECT [Item]
                                             FROM   @channelIds)
             AND @start_ft < [iw].[end_ft]
             AND @end_ft >= [iw].[start_ft]
    ORDER BY [start_ft];
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetPrintJobBitMapByJobIDnPageNo]
@print_job_id UNIQUEIDENTIFIER, @page_number INT
AS
BEGIN
    SELECT [byte_height],
           [bitmap_height],
           [bitmap_width],
           [print_bitmap],
           [recording_time]
    FROM   [dbo].[int_print_job]
    WHERE  [print_job_id] = @print_job_id
           AND [page_number] = @page_number;
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetPrintJobByPatientnPrintJobIDsnPageNo]
@patient_id UNIQUEIDENTIFIER, @print_job_id UNIQUEIDENTIFIER, @page_number INT
AS
BEGIN
    SELECT   [descr],
             [sweep_speed],
             [duration],
             [num_channels],
             [recording_time],
             [job_net_dt],
             [job_type],
             [page_number],
             [annotation1],
             [annotation2],
             [annotation3],
             [annotation4]
    FROM     [dbo].[int_print_job]
    WHERE    [patient_id] = @patient_id
             AND [print_job_id] = @print_job_id
             AND [page_number] = @page_number
    ORDER BY [job_net_dt];
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetPrintJobsListByPatientIDnStartnEndDt]
@patient_id UNIQUEIDENTIFIER, @startDt NVARCHAR (MAX)
AS
BEGIN
    SELECT   [print_job_id],
             [descr],
             [recording_time],
             [job_net_dt],
             [job_type],
             [page_number]
    FROM     [dbo].[int_print_job]
    WHERE    [patient_id] = @patient_id
             AND [job_net_dt] >= CAST (@startDt AS DATETIME)
             AND [page_number] = 1
    UNION
    SELECT   [print_job_id],
             [descr],
             [recording_time],
             [job_net_dt],
             [job_type],
             [page_number]
    FROM     [dbo].[int_print_job]
    WHERE    [patient_id] = @patient_id
             AND [job_net_dt] >= CAST (@startDt AS DATETIME)
             AND [page_number] = (SELECT COUNT(*)
                                  FROM   [dbo].[int_print_job] AS [print1]
                                  WHERE  [print1].[print_job_id] = [int_print_job].[print_job_id])
    ORDER BY [job_net_dt] DESC, [print_job_id];
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetPrintJobWaveformData]
@print_job_id UNIQUEIDENTIFIER, @page_number INT
AS
BEGIN
    SELECT   [waveform_type],
             [channel_type],
             [label_min],
             [label_max],
             [show_units],
             [seq_no],
             [annotation_channel_type],
             [offset],
             [scale],
             [primary_annotation],
             [waveform_data],
             [grid_type],
             [scale_labels],
             CAST (224 AS SMALLINT) AS [SAMPLE_RATE]
    FROM     [dbo].[int_print_job_waveform]
    WHERE    [print_job_id] = @print_job_id
             AND [page_number] = @page_number
    ORDER BY [seq_no];
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetProcStatList]
@PatientId [dbo].[DPATIENT_ID], @TimeTagType INT, @StartTime BIGINT, @EndTime BIGINT
AS
BEGIN
    SELECT   [param_ft],
             [value1],
             CAST (224 AS SMALLINT) AS [sample_rate],
             [patient_channel_id]
    FROM     [dbo].[int_param_timetag]
    WHERE    [patient_id] = CAST (@PatientId AS UNIQUEIDENTIFIER)
             AND [timetag_type] = @TimeTagType
             AND ([param_ft] BETWEEN @StartTime AND @EndTime)
    ORDER BY [param_ft];
END

GO
CREATE PROCEDURE [dbo].[usp_CA_GetUnitSettings]
@unit_id UNIQUEIDENTIFIER
AS
BEGIN
    IF NOT EXISTS (SELECT [type_cd] AS [CFGTYPE],
                          [cfg_name] AS [CFGNAME],
                          [cfg_value] AS [CFGVALUE],
                          [cfg_xml_value] AS [CFGXMLVALUE],
                          [value_type] AS [VALUETYPE]
                   FROM   [dbo].[cfgValuesUnit]
                   WHERE  [unit_id] = @unit_id)
        BEGIN
            DECLARE @TEMP TABLE (
                [table_name]    VARCHAR (25),
                [type_cd]       VARCHAR (25),
                [cfg_name]      VARCHAR (40),
                [cfg_value]     DCFG_VALUES ,
                [cfg_xml_value] XML         ,
                [value_type]    VARCHAR (20));
            DECLARE @GLOBAL_TABLE AS VARCHAR (25) = 'cfgValuesGlobal', @FACTORY_TABLE AS VARCHAR (25) = 'cfgValuesFactory';
            INSERT INTO @TEMP
            SELECT @GLOBAL_TABLE,
                   [type_cd],
                   [cfg_name],
                   [cfg_value],
                   [cfg_xml_value],
                   [value_type]
            FROM   [dbo].[cfgValuesGlobal]
            WHERE  [global_type] = 'false';
            INSERT INTO @TEMP
            SELECT @FACTORY_TABLE,
                   [type_cd],
                   [cfg_name],
                   [cfg_value],
                   [cfg_xml_value],
                   [value_type]
            FROM   [dbo].[cfgValuesFactory]
            WHERE  [global_type] = 'false';
            DECLARE @CURRENT AS VARCHAR (25);
            SET @CURRENT = @GLOBAL_TABLE;
            IF NOT EXISTS (SELECT [type_cd],
                                  [cfg_name],
                                  [cfg_value],
                                  [cfg_xml_value],
                                  [value_type]
                           FROM   @TEMP
                           WHERE  [table_name] = @GLOBAL_TABLE)
                BEGIN
                    SET @CURRENT = @FACTORY_TABLE;
                END
            IF NOT EXISTS (SELECT [type_cd] AS [CFGTYPE],
                                  [cfg_name] AS [CFGNAME],
                                  [cfg_value] AS [CFGVALUE],
                                  [cfg_xml_value] AS [CFGXMLVALUE],
                                  [value_type] AS [VALUETYPE]
                           FROM   [dbo].[cfgValuesUnit]
                           WHERE  [unit_id] = @unit_id)
                BEGIN
                    INSERT INTO [dbo].[cfgValuesUnit]
                    SELECT @unit_id,
                           [type_cd],
                           [cfg_name],
                           [cfg_value],
                           [cfg_xml_value],
                           [value_type]
                    FROM   @TEMP
                    WHERE  [table_name] = @CURRENT;
                END
        END
    SELECT [type_cd] AS [CFGTYPE],
           [cfg_name] AS [CFGNAME],
           [cfg_value] AS [CFGVALUE],
           [cfg_xml_value] AS [CFGXMLVALUE],
           [value_type] AS [VALUETYPE],
           CAST (0 AS BIT) AS [GLOBALTYPE]
    FROM   [dbo].[cfgValuesUnit]
    WHERE  [unit_id] = @unit_id;
END

GO
CREATE PROCEDURE [dbo].[usp_CA_SaveConfigurationSetting]
@setting_type INT, @patient_id UNIQUEIDENTIFIER, @unit_id UNIQUEIDENTIFIER, @type_cd VARCHAR (25), @cfg_name VARCHAR (40), @cfg_value [dbo].[DCFG_VALUES], @cfg_xml_value XML, @global_type BIT, @value_type VARCHAR (40)
AS
BEGIN
    IF (@setting_type = 2)
        BEGIN
            IF EXISTS (SELECT 1
                       FROM   [dbo].[cfgValuesGlobal]
                       WHERE  [type_cd] = @type_cd
                              AND [cfg_name] = @cfg_name)
                BEGIN
                    UPDATE [dbo].[cfgValuesGlobal]
                    SET    [cfg_value]     = @cfg_value,
                           [cfg_xml_value] = @cfg_xml_value
                    WHERE  [type_cd] = @type_cd
                           AND [cfg_name] = @cfg_name;
                END
            ELSE
                BEGIN
                    INSERT  INTO [dbo].[cfgValuesGlobal] ([type_cd], [cfg_name], [cfg_value], [cfg_xml_value], [global_type], [value_type])
                    VALUES                              (@type_cd, @cfg_name, @cfg_value, @cfg_xml_value, @global_type, CAST (@value_type AS VARCHAR (20)));
                END
        END
    IF (@setting_type = 3)
        BEGIN
            IF EXISTS (SELECT 1
                       FROM   [dbo].[cfgValuesPatient]
                       WHERE  [patient_id] = @patient_id
                              AND [type_cd] = @type_cd
                              AND [cfg_name] = @cfg_name)
                BEGIN
                    UPDATE [dbo].[cfgValuesPatient]
                    SET    [cfg_value]     = @cfg_value,
                           [cfg_xml_value] = @cfg_xml_value
                    WHERE  [patient_id] = @patient_id
                           AND [type_cd] = @type_cd
                           AND [cfg_name] = @cfg_name;
                END
            ELSE
                BEGIN
                    INSERT  INTO [dbo].[cfgValuesPatient] ([patient_id], [type_cd], [cfg_name], [cfg_value], [cfg_xml_value], [value_type])
                    VALUES                               (@patient_id, @type_cd, @cfg_name, @cfg_value, @cfg_xml_value, CAST (@value_type AS VARCHAR (20)));
                END
        END
    IF (@setting_type = 4)
        BEGIN
            IF EXISTS (SELECT 1
                       FROM   [dbo].[cfgValuesUnit]
                       WHERE  [unit_id] = @unit_id
                              AND [type_cd] = @type_cd
                              AND [cfg_name] = @cfg_name)
                BEGIN
                    UPDATE [dbo].[cfgValuesUnit]
                    SET    [cfg_value]     = @cfg_value,
                           [cfg_xml_value] = @cfg_xml_value
                    WHERE  [unit_id] = @unit_id
                           AND [type_cd] = @type_cd
                           AND [cfg_name] = @cfg_name;
                END
            ELSE
                BEGIN
                    INSERT  INTO [dbo].[cfgValuesUnit] ([unit_id], [type_cd], [cfg_name], [cfg_value], [cfg_xml_value], [value_type])
                    VALUES                            (@unit_id, @type_cd, @cfg_name, @cfg_value, @cfg_xml_value, CAST (@value_type AS VARCHAR (20)));
                END
        END
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_DL_GetLiveVitals]
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [vlvd].[Name],
           [vlvd].[ResultValue],
           [vlvd].[GdsCode],
           [int_misc_code].[int_keystone_cd] AS [UOM],
           [int_misc_code].[short_dsc] AS [Short_Desc],
           [vlvd].[PatientId],
           [PATDATA].[MRN_ID] AS [ID1],
           [PATDATA].[ACCOUNT_ID] AS [ID2],
           [PATDATA].[UNIT_CODE] AS [organization_cd],
           [PATDATA].[patient_name],
           [PATDATA].[MONITOR_NAME],
           [PATDATA].[MONITOR_NAME] AS [NodeId]
    FROM   [dbo].[v_LiveVitalsData] AS [vlvd]
           INNER JOIN
           (SELECT   [TopicInstanceId],
                     MAX([DateTimeStampUTC]) AS [MaxVitalTime]
            FROM     [dbo].[v_LiveVitalsData]
            GROUP BY [TopicInstanceId]) AS [MaxLiveVital]
           ON [MaxLiveVital].[TopicInstanceId] = [vlvd].[TopicInstanceId]
              AND [MaxLiveVital].[MaxVitalTime] = [vlvd].[DateTimeStampUTC]
           LEFT OUTER JOIN
           [dbo].[v_PatientSessions] AS [PATDATA]
           ON [PATDATA].[patient_id] = [vlvd].[PatientId]
           INNER JOIN
           [dbo].[int_misc_code]
           ON [int_misc_code].[code] = [vlvd].[GdsCode]
    WHERE  [vlvd].[GdsCode] IS NOT NULL
           AND [int_misc_code].[method_cd] = N'GDS';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetAlarmTextAnd12SecWaveForm]
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [int_alarm].[alarm_id],
           [int_alarm].[start_dt],
           [int_alarm].[alarm_level],
           [int_alarm_retrieved].[annotation],
           [w1].[waveform_data] AS [waveform_data1],
           [w2].[waveform_data] AS [waveform_data2],
           CAST (224 AS SMALLINT) AS [sample_rate],
           [int_mrn_map].[mrn_xid],
           [int_mrn_map].[mrn_xid2],
           [int_person].[first_nm],
           [int_person].[middle_nm],
           [int_person].[last_nm],
           [int_person].[person_id],
           [int_organization].[organization_cd],
           [int_monitor].[node_id],
           [int_monitor].[monitor_name]
    FROM   [dbo].[int_alarm]
           INNER JOIN
           [dbo].[int_alarm_retrieved]
           ON [int_alarm].[alarm_id] = [int_alarm_retrieved].[alarm_id]
           INNER JOIN
           [dbo].[int_alarm_waveform] AS [w1]
           ON [int_alarm].[alarm_id] = [w1].[alarm_id]
           INNER JOIN
           [dbo].[int_alarm_waveform] AS [w2]
           ON [int_alarm].[alarm_id] = [w2].[alarm_id]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_alarm].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [int_alarm].[patient_id] = [int_person].[person_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [int_alarm].[patient_id] = [int_patient_monitor].[patient_id]
              AND [int_patient_monitor].[active_sw] = 1
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_patient_monitor].[monitor_id] = [int_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_organization]
           ON [int_monitor].[unit_org_id] = [int_organization].[organization_id]
    WHERE  [w2].[retrieved] = 0
           AND [w1].[seq_num] = 1
           AND [w2].[seq_num] = 2
           AND [int_mrn_map].[merge_cd] = 'C';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetAlarmTextAnd6SecWaveForm]
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [int_alarm].[alarm_id],
           [int_alarm].[start_dt],
           [int_alarm].[alarm_level],
           [int_alarm_retrieved].[annotation],
           [int_alarm_waveform].[waveform_data],
           CAST (224 AS SMALLINT) AS [sample_rate],
           [int_mrn_map].[mrn_xid],
           [int_mrn_map].[mrn_xid2],
           [int_person].[first_nm],
           [int_person].[middle_nm],
           [int_person].[last_nm],
           [int_person].[person_id],
           [int_organization].[organization_cd],
           [int_monitor].[node_id],
           [int_monitor].[monitor_name]
    FROM   [dbo].[int_alarm]
           INNER JOIN
           [dbo].[int_alarm_retrieved]
           ON [int_alarm].[alarm_id] = [int_alarm_retrieved].[alarm_id]
           INNER JOIN
           [dbo].[int_alarm_waveform]
           ON [int_alarm].[alarm_id] = [int_alarm_waveform].[alarm_id]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_alarm].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [int_alarm].[patient_id] = [int_person].[person_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [int_alarm].[patient_id] = [int_patient_monitor].[patient_id]
              AND [int_patient_monitor].[active_sw] = 1
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_patient_monitor].[monitor_id] = [int_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_organization]
           ON [int_monitor].[unit_org_id] = [int_organization].[organization_id]
    WHERE  [int_alarm_waveform].[retrieved] = 0
           AND [int_alarm_waveform].[seq_num] = 1
           AND [int_mrn_map].[merge_cd] = 'C';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetAlarmTextOnly]
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [int_alarm].[alarm_id],
           [int_alarm].[start_dt],
           [int_alarm].[alarm_level],
           [int_alarm_retrieved].[annotation],
           [int_mrn_map].[mrn_xid],
           [int_mrn_map].[mrn_xid2],
           [int_person].[first_nm],
           [int_person].[middle_nm],
           [int_person].[last_nm],
           [int_person].[person_id],
           [int_organization].[organization_cd],
           [int_monitor].[node_id],
           [int_monitor].[monitor_name]
    FROM   [dbo].[int_alarm]
           INNER JOIN
           [dbo].[int_alarm_retrieved]
           ON [int_alarm].[alarm_id] = [int_alarm_retrieved].[alarm_id]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_alarm].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [int_alarm].[patient_id] = [int_person].[person_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [int_alarm].[patient_id] = [int_patient_monitor].[patient_id]
              AND [int_patient_monitor].[active_sw] = 1
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_patient_monitor].[monitor_id] = [int_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_organization]
           ON [int_monitor].[unit_org_id] = [int_organization].[organization_id]
    WHERE  [int_alarm_retrieved].[retrieved] = 0
           AND [int_mrn_map].[merge_cd] = 'C';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetAlarmWaveform]
@PatientId UNIQUEIDENTIFIER, @channeltypeId UNIQUEIDENTIFIER, @StartDateTimeUTC DATETIME, @EndDateTimeUTC DATETIME
AS
BEGIN
    SELECT   [StartTimeUTC] AS [START_DT_UTC],
             [EndTimeUTC] AS [END_DT_UTC],
             [Samples] AS [WAVEFORM_DATA]
    FROM     [dbo].[WaveformLiveData]
    WHERE    [WaveformLiveData].[TopicInstanceId] IN (SELECT [TopicInstanceId]
                                                      FROM   [dbo].[v_PatientTopicSessions]
                                                             INNER JOIN
                                                             [dbo].[TopicSessions]
                                                             ON [TopicSessions].[Id] = [TopicSessionId]
                                                      WHERE  [PatientId] = @PatientId)
             AND [WaveformLiveData].[TypeId] = @channeltypeId
             AND [StartTimeUTC] <= @EndDateTimeUTC
             AND @StartDateTimeUTC <= [EndTimeUTC]
    ORDER BY [StartTimeUTC] ASC;
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetLatestAlarms]
@CutOffTimeUTC DATETIME, @locale VARCHAR (7)='en'
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @CutOffTimeUTC_arg AS DATETIME = @CutOffTimeUTC;
    DECLARE @locale_arg AS VARCHAR (7) = @locale;
    SELECT [AllAlarms].[AlarmId] AS [AlarmId],
           [v_PatientTopicSessions].[PatientId] AS [PatientId],
           [AllAlarms].[WaveformFeedTypeId] AS [WaveformFeedTypeId],
           [StartDateTime] AS [StartDateTimeUTC],
           ISNULL([Message], ISNULL([AlarmTypeName], N'')) + CASE WHEN [ValueFormat] IS NOT NULL THEN N' ' + REPLACE([ValueFormat], N'{0}', [ViolatingValue]) ELSE N'' END + CASE WHEN [LimitFormat] IS NOT NULL THEN N' ' + REPLACE([LimitFormat], N'{0}', [SettingViolated]) ELSE N'' END AS [Title],
           [AlarmResources].[AlarmTypeName] AS [AlarmType],
           [AllAlarms].[SettingViolated] AS [SettingViolated],
           [AllAlarms].[ViolatingValue] AS [ViolatingValue],
           CASE WHEN [PriorityWeightValue] = 0 THEN 0 WHEN [PriorityWeightValue] = 1 THEN 3 WHEN [PriorityWeightValue] = 2 THEN 2 ELSE 1 END AS [LegacyPriority],
           [TopicFeedTypes].[SampleRate] AS [SampleRate],
           [DSIUnit].[Value] AS [organization_cd],
           [int_mrn_map].[mrn_xid] AS [ID1],
           [int_mrn_map].[mrn_xid2] AS [ID2],
           ISNULL([int_person].[last_nm], N'') + N', ' + ISNULL([int_person].[first_nm], N'') AS [PatientName],
           RTRIM([DSIBed].[Value]) AS [BedName]
    FROM   (SELECT [AlarmId],
                   [SettingViolated],
                   [ViolatingValue],
                   [StartDateTime],
                   [PriorityWeightValue],
                   [WaveformFeedTypeId],
                   [TopicSessionId],
                   [IDEnumValue],
                   [EnumGroupId]
            FROM   [dbo].[LimitAlarmsData]
            WHERE  @CutOffTimeUTC_arg < [LimitAlarmsData].[AcquiredDateTimeUTC]
            UNION ALL
            SELECT [AlarmId],
                   CAST (NULL AS VARCHAR (25)) AS [SettingViolated],
                   CAST (NULL AS VARCHAR (25)) AS [ViolatingValue],
                   [StartDateTime],
                   [PriorityWeightValue],
                   [WaveformFeedTypeId],
                   [TopicSessionId],
                   [IDEnumValue],
                   [EnumGroupId]
            FROM   [dbo].[GeneralAlarmsData]
            WHERE  @CutOffTimeUTC_arg < [GeneralAlarmsData].[AcquiredDateTimeUTC]) AS [AllAlarms]
           INNER JOIN
           [dbo].[v_PatientTopicSessions]
           ON [v_PatientTopicSessions].[TopicSessionId] = [AllAlarms].[TopicSessionId]
           INNER JOIN
           [dbo].[TopicSessions]
           ON [TopicSessions].[Id] = [AllAlarms].[TopicSessionId]
           INNER JOIN
           [dbo].[AlarmResources]
           ON [AlarmResources].[Locale] = @locale_arg
              AND [AlarmResources].[EnumGroupId] = [AllAlarms].[EnumGroupId]
              AND [AlarmResources].[IDEnumValue] = [AllAlarms].[IDEnumValue]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_mrn_map].[patient_id] = [v_PatientTopicSessions].[PatientId]
           INNER JOIN
           [dbo].[int_person]
           ON [int_person].[person_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[TopicFeedTypes]
           ON [TopicFeedTypes].[FeedTypeId] = [AllAlarms].[WaveformFeedTypeId]
           INNER JOIN
           [dbo].[v_DeviceSessionInfo] AS [DSIBed]
           ON [DSIBed].[DeviceSessionId] = [TopicSessions].[DeviceSessionId]
              AND [DSIBed].[Name] = N'Bed'
           INNER JOIN
           [dbo].[v_DeviceSessionInfo] AS [DSIUnit]
           ON [DSIUnit].[DeviceSessionId] = [TopicSessions].[DeviceSessionId]
              AND [DSIUnit].[Name] = N'Unit';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetLicense]
AS
BEGIN
    SELECT [product_cd]
    FROM   [dbo].[int_product_access]
    WHERE  [product_cd] = 'cei';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetLicenseUnits]
AS
BEGIN
    SELECT [int_organization].[organization_cd]
    FROM   [dbo].[int_organization]
           INNER JOIN
           [dbo].[int_product_access]
           ON [int_organization].[organization_id] = [int_product_access].[organization_id]
    WHERE  [int_product_access].[product_cd] = 'cei';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetQueryCode]
AS
BEGIN
    SELECT [code_id],
           [short_dsc],
           [int_keystone_cd]
    FROM   [dbo].[int_misc_code]
    WHERE  [int_misc_code].[method_cd] = N'GDS'
           AND [int_misc_code].[verification_sw] IS NOT NULL
           AND [short_dsc] IS NOT NULL;
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetSettings]
AS
BEGIN
    SELECT [alarm_notification_mode],
           [vitals_update_interval],
           [alarm_polling_interval],
           [port_number],
           [track_alarm_execution],
           [track_vitals_update_execution]
    FROM   [dbo].[int_event_config];
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetTwo6SecWaveSeperate]
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [int_alarm].[alarm_id],
           [int_alarm].[start_dt],
           [int_alarm].[alarm_level],
           [int_alarm_retrieved].[annotation],
           [int_alarm_waveform].[waveform_data],
           CAST (224 AS SMALLINT) AS [sample_rate],
           [int_alarm_waveform].[seq_num],
           [int_mrn_map].[mrn_xid],
           [int_mrn_map].[mrn_xid2],
           [int_person].[first_nm],
           [int_person].[middle_nm],
           [int_person].[last_nm],
           [int_person].[person_id],
           [int_organization].[organization_cd],
           [int_monitor].[node_id],
           [int_monitor].[monitor_name]
    FROM   [dbo].[int_alarm]
           INNER JOIN
           [dbo].[int_alarm_retrieved]
           ON [int_alarm].[alarm_id] = [int_alarm_retrieved].[alarm_id]
           INNER JOIN
           [dbo].[int_alarm_waveform]
           ON [int_alarm].[alarm_id] = [int_alarm_waveform].[alarm_id]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_alarm].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [int_alarm].[patient_id] = [int_person].[person_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [int_alarm].[patient_id] = [int_patient_monitor].[patient_id]
              AND [int_patient_monitor].[active_sw] = 1
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_patient_monitor].[monitor_id] = [int_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_organization]
           ON [int_monitor].[unit_org_id] = [int_organization].[organization_id]
    WHERE  [int_alarm_waveform].[retrieved] = 0
           AND [int_mrn_map].[merge_cd] = 'C';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_GetVitalSigns]
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [int_vital_live].[patient_id],
           [int_vital_live].[collect_dt],
           [int_vital_live].[vital_value],
           [int_mrn_map].[mrn_xid],
           [int_mrn_map].[mrn_xid2],
           [int_person].[first_nm],
           [int_person].[middle_nm],
           [int_person].[last_nm],
           [int_person].[person_id],
           [int_organization].[organization_cd],
           [int_monitor].[node_id],
           [int_monitor].[monitor_name]
    FROM   [dbo].[int_vital_live]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_vital_live].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [int_vital_live].[patient_id] = [int_person].[person_id]
           INNER JOIN
           [dbo].[int_monitor]
           ON [int_vital_live].[monitor_id] = [int_monitor].[monitor_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [int_vital_live].[patient_id] = [int_patient_monitor].[patient_id]
              AND [int_patient_monitor].[active_sw] = 1
           INNER JOIN
           [dbo].[int_organization]
           ON [int_monitor].[unit_org_id] = [int_organization].[organization_id]
    WHERE  [int_mrn_map].[merge_cd] = 'C';
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_InsertLog]
@eventId UNIQUEIDENTIFIER, @PatientId UNIQUEIDENTIFIER=NULL, @type NVARCHAR (30), @eventDt DATETIME, @seqNum INT, @client NVARCHAR (50), @description NVARCHAR (300), @status INT
AS
BEGIN
    INSERT  INTO [dbo].[int_event_log] ([event_id], [patient_id], [type], [event_dt], [seq_num], [client], [description], [status])
    VALUES                            (@eventId, @PatientId, @type, @eventDt, @seqNum, @client, @description, @status);
END

GO
CREATE PROCEDURE [dbo].[usp_CEI_UpdateLog]
@status INT, @description NVARCHAR (300), @eventId UNIQUEIDENTIFIER, @seqNum INT, @client NVARCHAR (50)
AS
BEGIN
    UPDATE [dbo].[int_event_log]
    SET    [status]      = @status,
           [description] = @description
    WHERE  [event_id] = @eventId
           AND [seq_num] = @seqNum
           AND [client] = @client;
END

GO
CREATE PROCEDURE [dbo].[usp_CheckCodeUnique]
@value NVARCHAR (20), @orgID UNIQUEIDENTIFIER, @parentID UNIQUEIDENTIFIER
AS
BEGIN
    SELECT COUNT(*) AS [TotalCount]
    FROM   [dbo].[int_organization]
    WHERE  [organization_cd] = @value
           AND [organization_id] <> @orgID
           AND [parent_organization_id] = @parentID;
END

GO
CREATE PROCEDURE [dbo].[usp_CheckNewIDUnique]
@value INT
AS
BEGIN
    SELECT COUNT(*) AS [TotalCount]
    FROM   [dbo].[int_misc_code]
    WHERE  [code_id] = @value;
END

GO
CREATE PROCEDURE [dbo].[usp_Delete_OrganizationEntityByCategory]
@organization_id UNIQUEIDENTIFIER, @category_Code CHAR (1)
AS
BEGIN
    DELETE [io]
    FROM   [dbo].[int_organization] AS [io]
    WHERE  [organization_id] = @organization_id
           AND [category_cd] = @category_Code;
END

GO
CREATE PROCEDURE [dbo].[usp_DeleteApplicationSettings]
@applicationType VARCHAR (50), @instanceId VARCHAR (50)='%', @key VARCHAR (50)='%'
AS
BEGIN
    SET NOCOUNT ON;
    DELETE [as]
    FROM   [dbo].[ApplicationSettings] AS [as]
    WHERE  [as].[ApplicationType] = @applicationType
           AND [as].[InstanceId] LIKE @instanceId
           AND [as].[Key] LIKE @key;
END

GO
CREATE PROCEDURE [dbo].[usp_DeleteFacilityWithChildren]
AS
BEGIN
    DELETE [dbo].[int_organization]
    WHERE  [parent_organization_id] IS NOT NULL
           AND [parent_organization_id] NOT IN (SELECT [organization_id]
                                                FROM   [dbo].[int_organization]);
END

GO
CREATE PROCEDURE [dbo].[usp_DeleteGatewayDetails]
@gatewayID UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [ig]
    FROM   [dbo].[int_gateway] AS [ig]
    WHERE  [gateway_id] = @gatewayID;
END

GO
CREATE PROCEDURE [dbo].[usp_DeleteGatewayServerDetails]
@gatewayID UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [dbo].[int_gateway_server]
    WHERE  [gateway_id] = @gatewayID;
END

GO
CREATE PROCEDURE [dbo].[usp_DeleteMiscCode]
@code_id INT
AS
BEGIN
    DELETE [dbo].[int_misc_code]
    WHERE  [code_id] = @code_id;
END

GO
CREATE PROCEDURE [dbo].[usp_DeleteMonitor]
@monitor_id UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [dbo].[int_monitor]
    WHERE  [monitor_id] = @monitor_id;
END

GO
CREATE PROCEDURE [dbo].[usp_DeleteSendSys]
@sys_id UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [dbo].[int_send_sys]
    WHERE  [sys_id] = @sys_id;
END

GO
CREATE PROCEDURE [dbo].[usp_DL_ETR_AddGatewaySettings]
@gateway_id UNIQUEIDENTIFIER, @gateway_type NVARCHAR (10), @farm_name NVARCHAR (5), @network NVARCHAR (30), @et_do_not_store_waveforms TINYINT, @include_trans_chs NVARCHAR (256), @exclude_trans_chs NVARCHAR (256), @et_print_alarms TINYINT
AS
BEGIN
    INSERT  INTO [dbo].[int_DataLoader_ETR_Temp_Settings] ([gateway_id], [gateway_type], [farm_name], [network], [et_do_not_store_waveforms], [include_trans_chs], [exclude_trans_chs], [et_print_alarms])
    VALUES                                               (@gateway_id, @gateway_type, @farm_name, @network, @et_do_not_store_waveforms, CAST (@include_trans_chs AS NVARCHAR (255)), CAST (@exclude_trans_chs AS NVARCHAR (255)), @et_print_alarms);
END

GO
CREATE PROCEDURE [dbo].[usp_DL_ETR_DeleteGatewayDetails]
@gatewayID UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [idets]
    FROM   [dbo].[int_DataLoader_ETR_Temp_Settings] AS [idets]
    WHERE  [gateway_id] = @gatewayID;
END

GO
CREATE PROCEDURE [dbo].[usp_DL_ETR_GetGatewaySettings]
@GatewayType NVARCHAR (10)
AS
BEGIN
    SELECT   [gateway_id],
             [gateway_type],
             [farm_name],
             [network],
             [et_do_not_store_waveforms],
             [include_trans_chs],
             [exclude_trans_chs],
             [et_print_alarms]
    FROM     [dbo].[int_DataLoader_ETR_Temp_Settings]
    WHERE    [gateway_type] = @GatewayType
    ORDER BY [network];
END

GO
CREATE PROCEDURE [dbo].[usp_DL_ETR_UpdateGatewaySettings]
@gateway_type NVARCHAR (10), @farm_name NVARCHAR (5), @network NVARCHAR (30), @et_do_not_store_waveforms TINYINT, @include_trans_chs NVARCHAR (256), @exclude_trans_chs NVARCHAR (256), @et_print_alarms TINYINT, @gateway_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_DataLoader_ETR_Temp_Settings]
    SET    [gateway_type]              = @gateway_type,
           [farm_name]                 = @farm_name,
           [network]                   = @network,
           [et_do_not_store_waveforms] = @et_do_not_store_waveforms,
           [include_trans_chs]         = CAST (@include_trans_chs AS NVARCHAR (255)),
           [exclude_trans_chs]         = CAST (@exclude_trans_chs AS NVARCHAR (255)),
           [et_print_alarms]           = @et_print_alarms
    WHERE  [gateway_id] = @gateway_id;
END

GO
CREATE PROCEDURE [dbo].[usp_DL_UV_AddGatewaySettings]
@gateway_id UNIQUEIDENTIFIER, @gateway_type NVARCHAR (20), @network_name NVARCHAR (30), @network_id NVARCHAR (30), @node_name CHAR (5), @node_id CHAR (1024), @uv_organization_id UNIQUEIDENTIFIER, @uv_unit_id UNIQUEIDENTIFIER, @include_nodes NVARCHAR (255), @exclude_nodes NVARCHAR (255), @uv_do_not_store_waveforms TINYINT, @print_requests TINYINT, @make_time_master TINYINT, @auto_assign_id TINYINT, @new_mrn_format NVARCHAR (10), @uv_print_alarms TINYINT, @debug_level INT
AS
BEGIN
    INSERT  INTO [dbo].[int_DataLoader_UV_Temp_Settings] ([gateway_id], [gateway_type], [network_name], [network_id], [node_name], [node_id], [uv_organization_id], [uv_unit_id], [include_nodes], [exclude_nodes], [uv_do_not_store_waveforms], [print_requests], [make_time_master], [auto_assign_id], [new_mrn_format], [uv_print_alarms], [debug_level])
    VALUES                                              (@gateway_id, @gateway_type, CAST (@network_name AS NVARCHAR (20)), @network_id, @node_name, @node_id, @uv_organization_id, @uv_unit_id, @include_nodes, @exclude_nodes, @uv_do_not_store_waveforms, @print_requests, @make_time_master, @auto_assign_id, @new_mrn_format, @uv_print_alarms, @debug_level);
END

GO
CREATE PROCEDURE [dbo].[usp_DL_UV_DeleteGatewayDetails]
@gatewayID UNIQUEIDENTIFIER
AS
BEGIN
    DELETE [iduts]
    FROM   [dbo].[int_DataLoader_UV_Temp_Settings] AS [iduts]
    WHERE  [gateway_id] = @gatewayID;
END

GO
CREATE PROCEDURE [dbo].[usp_DL_UV_GetGatewaySettings]
@GatewayType NVARCHAR (10)
AS
BEGIN
    SELECT   [gateway_id],
             [gateway_type],
             [network_name],
             [network_id],
             [node_name],
             [node_id],
             [uv_organization_id],
             [uv_unit_id],
             [include_nodes],
             [exclude_nodes],
             [uv_do_not_store_waveforms],
             [print_requests],
             [make_time_master],
             [auto_assign_id],
             [new_mrn_format],
             [uv_print_alarms],
             [debug_level]
    FROM     [dbo].[int_DataLoader_UV_Temp_Settings]
    WHERE    [gateway_type] = @GatewayType
    ORDER BY [network_name];
END

GO
CREATE PROCEDURE [dbo].[usp_DL_UV_UpdateGatewaySettings]
@gateway_type NVARCHAR (10), @network_name NVARCHAR (30), @network_id NVARCHAR (30), @node_name CHAR (5), @node_id CHAR (1024), @uv_organization_id UNIQUEIDENTIFIER, @uv_unit_id UNIQUEIDENTIFIER, @include_nodes NVARCHAR (255), @exclude_nodes NVARCHAR (255), @uv_do_not_store_waveforms TINYINT, @print_requests TINYINT, @make_time_master TINYINT, @auto_assign_id TINYINT, @new_mrn_format NVARCHAR (10), @uv_print_alarms TINYINT, @debug_level INT, @gateway_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_DataLoader_UV_Temp_Settings]
    SET    [gateway_type]              = @gateway_type,
           [network_name]              = CAST (@network_name AS NVARCHAR (20)),
           [network_id]                = @network_id,
           [node_name]                 = @node_name,
           [node_id]                   = @node_id,
           [uv_organization_id]        = @uv_organization_id,
           [uv_unit_id]                = @uv_unit_id,
           [include_nodes]             = @include_nodes,
           [exclude_nodes]             = @exclude_nodes,
           [uv_do_not_store_waveforms] = @uv_do_not_store_waveforms,
           [print_requests]            = @print_requests,
           [make_time_master]          = @make_time_master,
           [auto_assign_id]            = @auto_assign_id,
           [new_mrn_format]            = @new_mrn_format,
           [uv_print_alarms]           = @uv_print_alarms,
           [debug_level]               = @debug_level
    WHERE  [gateway_id] = @gateway_id;
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_AddMonitor]
@MonitorId NVARCHAR (50), @Unit_Org_Id NVARCHAR (50)=NULL, @Network_Id NVARCHAR (50), @Node_Id NVARCHAR (50), @Monitor_Type_cd NVARCHAR (50)=NULL, @Monitor_Name NVARCHAR (50), @Subnet NVARCHAR (20)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_monitor] ([monitor_id], [unit_org_id], [network_id], [node_id], [bed_id], [bed_cd], [room], [monitor_type_cd], [monitor_name], [subnet])
    VALUES                          (CAST (@MonitorId AS UNIQUEIDENTIFIER), CAST (@Unit_Org_Id AS UNIQUEIDENTIFIER), CAST (@Network_Id AS NVARCHAR (15)), CAST (@Node_Id AS NVARCHAR (15)), N'0', N'0', N'0', CAST (@Monitor_Type_cd AS NVARCHAR (5)), CAST (@Monitor_Name AS NVARCHAR (30)), @Subnet);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_AddorUpdateVitals]
@PatientGUID NVARCHAR (50), @Monitor_Id NVARCHAR (50), @Collect_Date NVARCHAR (50), @Vital_Value NVARCHAR (4000), @Vital_Time NVARCHAR (3950)=NULL
AS
BEGIN
    IF EXISTS (SELECT 1
               FROM   [dbo].[int_vital_live]
               WHERE  [patient_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER)
                      AND [monitor_id] = CAST (@Monitor_Id AS UNIQUEIDENTIFIER))
        BEGIN
            UPDATE [dbo].[int_vital_live]
            SET    [collect_dt]  = CAST (@Collect_Date AS DATETIME),
                   [vital_value] = CAST (@Vital_Value AS VARCHAR (4000)),
                   [vital_time]  = CAST (@Vital_Time AS VARCHAR (3950))
            WHERE  [patient_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER)
                   AND [monitor_id] = CAST (@Monitor_Id AS UNIQUEIDENTIFIER);
        END
    ELSE
        BEGIN
            INSERT  INTO [dbo].[int_vital_live] ([patient_id], [monitor_id], [collect_dt], [vital_value], [vital_time])
            VALUES                             (CAST (@PatientGUID AS UNIQUEIDENTIFIER), CAST (@Monitor_Id AS UNIQUEIDENTIFIER), CAST (@Collect_Date AS DATETIME), CAST (@Vital_Value AS VARCHAR (4000)), CAST (@Vital_Time AS VARCHAR (3950)));
        END
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_AddPatient]
@PatientGUID NVARCHAR (50), @DOB NVARCHAR (50)=NULL, @Height NVARCHAR (50)=NULL, @Weight NVARCHAR (50)=NULL, @BSA NVARCHAR (50)=NULL
AS
BEGIN
    IF (@DOB = N'NULL')
        BEGIN
            SET @DOB = NULL;
        END
    INSERT  INTO [dbo].[int_patient] ([patient_id], [new_patient_id], [dob], [gender_cid], [height], [weight], [bsa])
    VALUES                          (CAST (@PatientGUID AS UNIQUEIDENTIFIER), NULL, CAST (@DOB AS DATETIME), NULL, CAST (@Height AS FLOAT), CAST (@Weight AS FLOAT), CAST (@BSA AS FLOAT));
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_AddPatientMonitor]
@PatientMonitorGUID NVARCHAR (50)=NULL, @PatientGUID NVARCHAR (50)=NULL, @MonitorID NVARCHAR (50)=NULL, @ConnectDate NVARCHAR (50)=NULL, @EncounterIDGUID NVARCHAR (50)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_patient_monitor] ([patient_monitor_id], [patient_id], [monitor_id], [monitor_interval], [poll_type], [monitor_connect_dt], [encounter_id], [active_sw])
    VALUES                                  (CAST (@PatientMonitorGUID AS UNIQUEIDENTIFIER), CAST (@PatientGUID AS UNIQUEIDENTIFIER), CAST (@MonitorID AS UNIQUEIDENTIFIER), 1, 'P', CAST (@ConnectDate AS DATETIME), CAST (@EncounterIDGUID AS UNIQUEIDENTIFIER), 1);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_AddPatientOrder]
@OrderIDGUID NVARCHAR (50)=NULL, @PatientGUID NVARCHAR (50)=NULL, @Result_usid NVARCHAR (50)=NULL, @EncounterGUID NVARCHAR (50)=NULL, @MainOrgGUID NVARCHAR (50)=NULL, @SendSysID NVARCHAR (50)=NULL, @Guid15 NVARCHAR (50)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_order_line] ([order_id], [seq_no], [patient_id], [orig_patient_id], [status_cid], [prov_svc_cid], [univ_svc_cid], [transport_cid], [order_line_comment], [clin_info_comment], [reason_comment], [scheduled_dt], [observ_dt], [status_chg_dt])
    VALUES                             (CAST (@OrderIDGUID AS UNIQUEIDENTIFIER), 1, CAST (@PatientGUID AS UNIQUEIDENTIFIER), NULL, NULL, NULL, CAST (@Result_usid AS INT), NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    INSERT  INTO [dbo].[int_order] ([encounter_id], [order_id], [patient_id], [orig_patient_id], [priority_cid], [status_cid], [univ_svc_cid], [order_person_id], [order_dt], [enter_id], [verif_id], [transcriber_id], [parent_order_id], [child_order_sw], [order_cntl_cid], [history_sw], [monitor_sw])
    VALUES                        (CAST (@EncounterGUID AS UNIQUEIDENTIFIER), CAST (@OrderIDGUID AS UNIQUEIDENTIFIER), CAST (@PatientGUID AS UNIQUEIDENTIFIER), NULL, NULL, NULL, CAST (@Result_usid AS INT), NULL, NULL, NULL, NULL, NULL, NULL, CAST (0 AS TINYINT), NULL, CAST (0 AS TINYINT), CAST (1 AS TINYINT));
    INSERT  INTO [dbo].[int_order_map] ([order_id], [patient_id], [orig_patient_id], [organization_id], [sys_id], [order_xid], [type_cd], [seq_no])
    VALUES                            (CAST (@OrderIDGUID AS UNIQUEIDENTIFIER), CAST (@PatientGUID AS UNIQUEIDENTIFIER), NULL, CAST (@MainOrgGUID AS UNIQUEIDENTIFIER), CAST (@SendSysID AS UNIQUEIDENTIFIER), CAST (@Guid15 AS NVARCHAR (30)), 'F', CAST (1 AS INT));
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_AddPerson]
@PatientGUID NVARCHAR (50), @First_Name NVARCHAR (50)=NULL, @Middle_Name NVARCHAR (50)=NULL, @Last_Name NVARCHAR (50)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_person] ([person_id], [new_patient_id], [first_nm], [middle_nm], [last_nm], [suffix], [tel_no], [line1_dsc], [line2_dsc], [line3_dsc], [city_nm], [state_code], [zip_code], [country_cid])
    VALUES                         (CAST (@PatientGUID AS UNIQUEIDENTIFIER), NULL, @First_Name, @Middle_Name, @Last_Name, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_AddResults]
@ResultGUID NVARCHAR (50)=NULL, @PatientGUID NVARCHAR (50)=NULL, @OrderIDGUID NVARCHAR (50)=NULL, @Result_usid NVARCHAR (50)=NULL, @Test_cid NVARCHAR (50)=NULL, @BTime NVARCHAR (50)=NULL, @BFileTime NVARCHAR (50)=NULL, @ResultVal NVARCHAR (50)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_result] ([result_id], [patient_id], [order_id], [univ_svc_cid], [test_cid], [obs_start_dt], [result_dt], [result_ft], [value_type_cd], [result_value], [mod_dt], [has_history], [is_history], [monitor_sw])
    VALUES                         (CAST (@ResultGUID AS UNIQUEIDENTIFIER), CAST (@PatientGUID AS UNIQUEIDENTIFIER), CAST (@OrderIDGUID AS UNIQUEIDENTIFIER), CAST (@Result_usid AS INT), CAST (@Test_cid AS INT), CAST (@BTime AS DATETIME), CAST (@BTime AS DATETIME), CAST (@BFileTime AS BIGINT), N'NM', @ResultVal, CAST (@BTime AS DATETIME), 0, 0, 1);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_DeleteVitals]
@COLLECTDATE NVARCHAR (30)
AS
BEGIN
    DELETE [ivl]
    FROM   [dbo].[int_vital_live] AS [ivl]
    WHERE  [collect_dt] < CAST (@COLLECTDATE AS DATETIME);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_DischargePatient]
@DischargeDate NVARCHAR (50)=NULL, @EncounterIDGUID NVARCHAR (50)=NULL, @MonitorID NVARCHAR (50)
AS
BEGIN
    IF (@DischargeDate = 'NULL')
        BEGIN
            SET @DischargeDate = CAST (GETDATE() AS NVARCHAR (50));
        END
    UPDATE [dbo].[int_encounter]
    SET    [discharge_dt] = CAST (@DischargeDate AS DATETIME),
           [status_cd]    = N'D'
    WHERE  [encounter_id] = CAST (@EncounterIDGUID AS UNIQUEIDENTIFIER);
    UPDATE [dbo].[int_patient_monitor]
    SET    [active_sw] = NULL
    WHERE  [monitor_id] = CAST (@MonitorID AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_GetChannelType]
AS
BEGIN
    SELECT [channel_type_id],
           [channel_code],
           [label]
    FROM   [dbo].[int_channel_type];
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_GetCodeID]
AS
BEGIN
    SELECT [code_id],
           [code]
    FROM   [dbo].[int_misc_code]
    WHERE  [organization_id] IS NULL
           AND [code] IS NOT NULL;
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_GetGatewayDetails]
@NetworkID NVARCHAR (30)
AS
BEGIN
    SELECT [gateway_id],
           [gateway_type],
           [network_id],
           [hostname],
           [enable_sw],
           [recv_app],
           [send_app],
           [reconnect_secs],
           [organization_id],
           [send_sys_id],
           [results_usid],
           [sleep_secs],
           [add_monitors_sw],
           [add_patients_sw],
           [add_results_sw],
           [debug_level],
           [unit_org_id],
           [patient_id_type],
           [auto_assign_id_sw],
           [new_mrn_format],
           [auto_chan_attach_sw],
           [live_vitals_sw],
           [live_waveform_size],
           [decnet_node],
           [node_name],
           [nodes_excluded],
           [nodes_included],
           [timemaster_sw],
           [waveform_size],
           [print_enabled_sw],
           [auto_record_alarm_sw],
           [collect_12_lead_sw],
           [print_auto_record_sw],
           [encryption_status]
    FROM   [dbo].[int_gateway]
    WHERE  [network_id] = @NetworkID;
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_GetMonitorEncounter]
@PatientGUID NVARCHAR (50)=NULL, @ConnectionDate NVARCHAR (50)=NULL
AS
BEGIN
    SELECT   [encounter_id],
             [organization_id],
             [mod_dt],
             [patient_id],
             [orig_patient_id],
             [account_id],
             [status_cd],
             [publicity_cid],
             [diet_type_cid],
             [patient_class_cid],
             [protection_type_cid],
             [vip_sw],
             [isolation_type_cid],
             [security_type_cid],
             [patient_type_cid],
             [admit_hcp_id],
             [med_svc_cid],
             [referring_hcp_id],
             [unit_org_id],
             [attend_hcp_id],
             [primary_care_hcp_id],
             [fall_risk_type_cid],
             [begin_dt],
             [ambul_status_cid],
             [admit_dt],
             [baby_cd],
             [rm],
             [recurring_cd],
             [bed],
             [discharge_dt],
             [newborn_sw],
             [discharge_dispo_cid],
             [monitor_created],
             [comment]
    FROM     [dbo].[int_encounter]
    WHERE    [patient_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER)
             AND [admit_dt] = CAST (@ConnectionDate AS DATETIME)
             AND [monitor_created] = 1
    ORDER BY [discharge_dt] DESC;
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_GetPatientInformation]
@PatientId NVARCHAR (50)=NULL, @OrgId NVARCHAR (50)=NULL
AS
BEGIN
    SELECT [int_patient].[patient_id],
           [int_person].[last_nm],
           [int_person].[first_nm],
           [int_person].[middle_nm],
           [int_mrn_map].[mrn_xid],
           [int_mrn_map].[mrn_xid2],
           [int_mrn_map].[organization_id],
           [int_patient].[dob],
           [int_patient].[gender_cid],
           [int_misc_code].[code],
           [int_patient].[height],
           [int_patient].[weight],
           [int_patient].[bsa],
           [int_mrn_map].[adt_adm_sw]
    FROM   [dbo].[int_patient]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_patient].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_person]
           ON [int_patient].[patient_id] = [int_person].[person_id]
           LEFT OUTER JOIN
           [dbo].[int_misc_code]
           ON [int_patient].[gender_cid] = [int_misc_code].[code_id]
    WHERE  [int_mrn_map].[mrn_xid] = @PatientId
           AND [int_mrn_map].[organization_id] = CAST (@OrgId AS UNIQUEIDENTIFIER)
           AND [int_mrn_map].[merge_cd] = 'C';
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_GetPatientMonitor]
@MonitorID NVARCHAR (50), @PatientGUID NVARCHAR (50), @Connectdate NVARCHAR (50)=NULL
AS
BEGIN
    SELECT [patient_monitor_id],
           [patient_id],
           [orig_patient_id],
           [monitor_id],
           [monitor_interval],
           [poll_type],
           [monitor_connect_dt],
           [monitor_connect_num],
           [disable_sw],
           [last_poll_dt],
           [last_result_dt],
           [last_episodic_dt],
           [poll_start_dt],
           [poll_end_dt],
           [last_outbound_dt],
           [monitor_status],
           [monitor_error],
           [encounter_id],
           [live_until_dt],
           [active_sw]
    FROM   [dbo].[int_patient_monitor]
    WHERE  [monitor_id] = CAST (@MonitorID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER)
           AND [monitor_connect_dt] = CAST (@Connectdate AS DATETIME);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_GetPatientOrder]
@EncounterGUID NVARCHAR (50), @Result_USID NVARCHAR (50)=NULL
AS
BEGIN
    SELECT [encounter_id],
           [order_id],
           [patient_id],
           [orig_patient_id],
           [priority_cid],
           [status_cid],
           [univ_svc_cid],
           [order_person_id],
           [order_dt],
           [enter_id],
           [verif_id],
           [transcriber_id],
           [parent_order_id],
           [child_order_sw],
           [order_cntl_cid],
           [history_sw],
           [monitor_sw]
    FROM   [dbo].[int_order]
    WHERE  [encounter_id] = CAST (@EncounterGUID AS UNIQUEIDENTIFIER)
           AND [univ_svc_cid] = CAST (@Result_USID AS INT);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_GetproductAccessDetails]
@Product NVARCHAR (30)
AS
BEGIN
    SELECT [product_cd],
           [organization_id],
           [license_no]
    FROM   [dbo].[int_product_access]
    WHERE  [product_cd] = @Product;
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_UpdateActive_sw_EncounterId_in_PatientMonitor]
@MonitorID NVARCHAR (50), @PatientGUID NVARCHAR (50), @Connectdate NVARCHAR (50)=NULL, @EncounterIDGUID NVARCHAR (50)=NULL
AS
BEGIN
    UPDATE [dbo].[int_patient_monitor]
    SET    [active_sw]    = 1,
           [encounter_id] = CAST (@EncounterIDGUID AS UNIQUEIDENTIFIER)
    WHERE  [monitor_id] = CAST (@MonitorID AS UNIQUEIDENTIFIER)
           AND [patient_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER)
           AND [monitor_connect_dt] = CAST (@Connectdate AS DATETIME);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_UpdateActive_sw_in_PatientMonitor]
@MonitorID NVARCHAR (50)
AS
BEGIN
    UPDATE [dbo].[int_patient_monitor]
    SET    [active_sw] = NULL
    WHERE  [monitor_id] = CAST (@MonitorID AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_UpdateDateInEncounter]
@MonitorId NVARCHAR (50)=NULL, @EncounterId NVARCHAR (50)=NULL
AS
BEGIN
    UPDATE [dbo].[int_encounter]
    SET    [discharge_dt] = GETDATE(),
           [status_cd]    = N'D'
    WHERE  [status_cd] = N'C'
           AND [encounter_id] IN (SELECT [encounter_id]
                                  FROM   [dbo].[int_patient_monitor]
                                  WHERE  [monitor_id] = CAST (@MonitorId AS UNIQUEIDENTIFIER)
                                         AND [encounter_id] <> CAST (@EncounterId AS UNIQUEIDENTIFIER));
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_UpdateLastPoleDate_ResultDate_in_patientmonitor]
@Last_Poll_Date NVARCHAR (30)=NULL, @PatientGUID NVARCHAR (50), @PatientMonitorGUID NVARCHAR (50)
AS
BEGIN
    UPDATE [dbo].[int_patient_monitor]
    SET    [last_poll_dt]   = CAST (@Last_Poll_Date AS DATETIME),
           [last_result_dt] = CAST (@Last_Poll_Date AS DATETIME)
    WHERE  [patient_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER)
           AND [patient_monitor_id] = CAST (@PatientMonitorGUID AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_UpdateMrnMap]
@PatientGUID NVARCHAR (50), @MainOrgID NVARCHAR (50)=NULL
AS
BEGIN
    UPDATE [dbo].[int_mrn_map]
    SET    [adt_adm_sw] = NULL
    WHERE  [patient_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER)
           AND [organization_id] = CAST (@MainOrgID AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[usp_DM3_UpdatePerson]
@LastName NVARCHAR (50)=NULL, @FirstName NVARCHAR (50)=NULL, @MiddleName NVARCHAR (50)=NULL, @ConstLastName NVARCHAR (50)=NULL, @ConstFirstName NVARCHAR (50)=NULL, @ConstMiddleName NVARCHAR (50)=NULL, @PatientGUID NVARCHAR (50)=NULL, @DOB NVARCHAR (40)=NULL, @Height NVARCHAR (10)=NULL, @Weight NVARCHAR (10)=NULL, @BSA NVARCHAR (10)=NULL
AS
BEGIN
    UPDATE [dbo].[int_person_name]
    SET    [last_nm]        = @LastName,
           [first_nm]       = @FirstName,
           [middle_nm]      = @MiddleName,
           [mpi_lname_cons] = CAST (@ConstLastName AS NVARCHAR (20)),
           [mpi_fname_cons] = CAST (@ConstFirstName AS NVARCHAR (20)),
           [mpi_mname_cons] = CAST (@ConstMiddleName AS NVARCHAR (20))
    WHERE  [person_nm_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER);
    UPDATE [dbo].[int_person]
    SET    [last_nm]   = @LastName,
           [first_nm]  = @FirstName,
           [middle_nm] = @MiddleName
    WHERE  [person_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER);
    UPDATE [dbo].[int_patient]
    SET    [dob]    = CAST (@DOB AS DATETIME),
           [height] = CAST (@Height AS FLOAT),
           [weight] = CAST (@Weight AS FLOAT),
           [bsa]    = CAST (@BSA AS FLOAT)
    WHERE  [patient_id] = CAST (@PatientGUID AS UNIQUEIDENTIFIER);
END

GO
CREATE PROCEDURE [dbo].[usp_GatewayServerDetails]
@gatewayID UNIQUEIDENTIFIER, @serverName NVARCHAR (50), @port INT
AS
BEGIN
    INSERT  INTO [dbo].[int_gateway_server] ([gateway_id], [server_name], [port])
    VALUES                                 (@gatewayID, @serverName, @port);
END

GO
CREATE PROCEDURE [dbo].[usp_Get_AuditLog]
@FromDate NVARCHAR (MAX), @ToDate NVARCHAR (MAX), @filters NVARCHAR (MAX)
AS
BEGIN
    DECLARE @Query AS NVARCHAR (MAX);
    SET @Query = '
        SELECT 
            ISNULL(int_audit_log.login_id, '''') AS [Login ID],
            int_audit_log.application_id AS [Application], 
            int_audit_log.device_name AS [Location], 
            int_audit_log.audit_dt AS [Date], 
            int_mrn_map.mrn_xid AS [Patient ID],
            int_misc_code.short_dsc AS [Event], 
            int_audit_log.audit_descr AS [Description] 
        FROM dbo.int_audit_log 
            LEFT OUTER JOIN dbo.int_mrn_map 
                ON int_audit_log.patient_id = int_mrn_map.mrn_xid 
            INNER JOIN dbo.int_misc_code 
                ON int_misc_code.code = int_audit_log.audit_type
        WHERE audit_dt BETWEEN ';
    SET @Query += '''' + @FromDate + '''';
    SET @Query += ' AND ';
    SET @Query += '''' + @ToDate + '''';
    IF (LEN(@filters) > 0)
        SET @Query += ' AND ';
    SET @Query += @filters;
    EXECUTE (@Query);
END

GO
CREATE PROCEDURE [dbo].[usp_Get_AuditLogDefault]
AS
BEGIN
    SELECT ISNULL([int_audit_log].[login_id], '') AS [Login ID],
           [int_audit_log].[application_id] AS [Application],
           [int_audit_log].[device_name] AS [Location],
           [int_audit_log].[audit_dt] AS [Date],
           [int_mrn_map].[mrn_xid] AS [Patient ID],
           [int_misc_code].[short_dsc] AS [Event],
           [int_audit_log].[audit_descr] AS [Description]
    FROM   [dbo].[int_audit_log]
           LEFT OUTER JOIN
           [dbo].[int_mrn_map]
           ON [int_audit_log].[patient_id] = [int_mrn_map].[mrn_xid]
           INNER JOIN
           [dbo].[int_misc_code]
           ON [int_misc_code].[code] = [int_audit_log].[audit_type];
END

GO
CREATE PROCEDURE [dbo].[usp_GetAllProducts]
AS
BEGIN
    SELECT   [product_cd],
             [descr],
             [has_access]
    FROM     [dbo].[int_product]
    ORDER BY [product_cd];
END

GO
CREATE PROCEDURE [dbo].[usp_GetApplicationSettingInstances]
@applicationType VARCHAR (50)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT DISTINCT [InstanceId]
    FROM   [dbo].[ApplicationSettings]
    WHERE  [ApplicationType] = @applicationType;
END

GO
CREATE PROCEDURE [dbo].[usp_GetApplicationSettings]
@applicationType VARCHAR (50), @instanceId VARCHAR (50)='%', @key VARCHAR (50)='%'
AS
BEGIN
    SET NOCOUNT ON;
    SELECT   [as].[ApplicationType],
             [as].[InstanceId],
             [as].[Key],
             [as].[Value]
    FROM     [dbo].[ApplicationSettings] AS [as]
    WHERE    [as].[ApplicationType] = @applicationType
             AND [as].[InstanceId] LIKE @instanceId
             AND [as].[Key] LIKE @key
    ORDER BY [as].[InstanceId];
END

GO
CREATE PROCEDURE [dbo].[usp_GetCEISettings]
AS
BEGIN
    SELECT [track_alarm_execution],
           [track_vitals_update_execution],
           [alarm_notification_mode],
           [vitals_update_interval],
           [port_number]
    FROM   [dbo].[int_event_config];
END

GO
CREATE PROCEDURE [dbo].[usp_GetCodeAndCategoryList]
AS
BEGIN
    SELECT   [cat_code]
    FROM     [dbo].[int_code_category]
    ORDER BY [cat_code];
END

GO
CREATE PROCEDURE [dbo].[usp_GetCodeByCategoryCode]
@categoryCd CHAR (4), @MethodCd NVARCHAR (10), @Code NVARCHAR (80), @OrganizationId UNIQUEIDENTIFIER, @SendingSysId UNIQUEIDENTIFIER, @CodeId INT OUTPUT
AS
BEGIN
    SET @CodeId = (SELECT [MiscCode].[code_id]
                   FROM   [dbo].[int_misc_code] AS [MiscCode]
                          INNER JOIN
                          [dbo].[int_code_category] AS [CodeCat]
                          ON [MiscCode].[category_cd] = [CodeCat].[cat_code]
                   WHERE  [MiscCode].[category_cd] = @categoryCd
                          AND [MiscCode].[code] = @Code
                          AND [MiscCode].[organization_id] = @OrganizationId
                          AND [MiscCode].[sys_id] = @SendingSysId
                          AND [MiscCode].[method_cd] = @MethodCd);
END

GO
CREATE PROCEDURE [dbo].[usp_GetCodeIDByName]
@short_dsc NVARCHAR (100)
AS
BEGIN
    SELECT [code_id]
    FROM   [dbo].[int_misc_code]
    WHERE  [short_dsc] = @short_dsc;
END

GO
CREATE PROCEDURE [dbo].[usp_GetCodeList]
@filters NVARCHAR (MAX)
AS
BEGIN
    DECLARE @QUERY AS NVARCHAR (MAX);
    SET @QUERY = '
        SELECT 
            int_organization.organization_cd AS [Facility],
            int_send_sys.code AS [System],
            int_misc_code.category_cd AS [Category],
            int_misc_code.method_cd AS [Method], 
            int_misc_code.code AS [Code],
            int_misc_code.int_keystone_cd AS [Internal Code],
            int_misc_code.short_dsc AS [Description], 
            ISNULL(int_misc_code.verification_sw,''0'') AS [Verified],
            int_misc_code.code_id AS [ID] 
        FROM dbo.int_misc_code 
            LEFT OUTER JOIN dbo.int_send_sys 
                ON int_misc_code.sys_id = int_send_sys.sys_id 
            LEFT OUTER JOIN dbo.int_organization 
                ON int_misc_code.organization_id = int_organization.organization_id 
            ';
    IF (LEN(@filters) > 0)
        BEGIN
            SET @QUERY += 'WHERE ';
            SET @QUERY += @filters;
        END
    EXECUTE (@QUERY);
END

GO
CREATE PROCEDURE [dbo].[usp_GetDebugSettings_FromDb]
AS
BEGIN
    SELECT [track_alarm_execution],
           [track_vitals_update_execution]
    FROM   [dbo].[int_event_config];
END

GO
CREATE PROCEDURE [dbo].[usp_GetEventList]
AS
BEGIN
    SELECT [code],
           [short_dsc]
    FROM   [dbo].[int_misc_code]
    WHERE  [category_cd] = 'SLOG';
END

GO
CREATE PROCEDURE [dbo].[usp_GetEventLogDetails]
AS
BEGIN
    SELECT   [int_event_log].[type],
             [int_event_log].[event_dt],
             [int_event_log].[description],
             [int_event_log].[status],
             [event_origin].[monitor_name],
             [event_origin].[first_nm],
             [event_origin].[middle_nm],
             [event_origin].[last_nm]
    FROM     [dbo].[int_event_log]
             INNER JOIN
             (SELECT [alarm_id] AS [event_id],
                     [int_monitor].[monitor_name],
                     [int_person].[first_nm],
                     [int_person].[middle_nm],
                     [int_person].[last_nm]
              FROM   [dbo].[int_alarm]
                     INNER JOIN
                     [dbo].[int_patient_monitor]
                     ON [int_patient_monitor].[patient_id] = [int_alarm].[patient_id]
                     INNER JOIN
                     [dbo].[int_monitor]
                     ON [int_monitor].[monitor_id] = [int_patient_monitor].[monitor_id]
                     INNER JOIN
                     [dbo].[int_person]
                     ON [int_person].[person_id] = [int_alarm].[patient_id]
              WHERE  [int_patient_monitor].[active_sw] = 1
              UNION
              SELECT [AlarmId] AS [event_id],
                     [MonitorName] AS [monitor_name],
                     [FIRST_NAME] AS [first_nm],
                     [MIDDLE_NAME] AS [middle_nm],
                     [LAST_NAME] AS [last_nm]
              FROM   [dbo].[v_LimitAlarms]
                     INNER JOIN
                     [dbo].[v_DeviceSessionAssignment]
                     ON [v_DeviceSessionAssignment].[DeviceSessionId] = [v_LimitAlarms].[DeviceSessionId]
                     INNER JOIN
                     [dbo].[v_PatientTopicSessions]
                     ON [v_PatientTopicSessions].[TopicSessionId] = [v_LimitAlarms].[TopicSessionId]
                     INNER JOIN
                     [dbo].[v_Patients]
                     ON [v_Patients].[patient_id] = [v_PatientTopicSessions].[PatientId]
              UNION
              SELECT [AlarmId] AS [event_id],
                     [MonitorName] AS [monitor_name],
                     [FIRST_NAME] AS [first_nm],
                     [MIDDLE_NAME] AS [middle_nm],
                     [LAST_NAME] AS [last_nm]
              FROM   [dbo].[v_GeneralAlarms]
                     INNER JOIN
                     [dbo].[v_DeviceSessionAssignment]
                     ON [v_DeviceSessionAssignment].[DeviceSessionId] = [v_GeneralAlarms].[DeviceSessionId]
                     INNER JOIN
                     [dbo].[v_PatientTopicSessions]
                     ON [v_PatientTopicSessions].[TopicSessionId] = [v_GeneralAlarms].[TopicSessionId]
                     INNER JOIN
                     [dbo].[v_Patients]
                     ON [v_Patients].[patient_id] = [v_PatientTopicSessions].[PatientId]) AS [event_origin]
             ON [event_origin].[event_id] = [int_event_log].[event_id]
    ORDER BY [int_event_log].[event_dt];
END

GO
CREATE PROCEDURE [dbo].[usp_GetFacility]
AS
BEGIN
    SELECT [organization_cd],
           [organization_nm],
           [organization_id],
           [parent_organization_id]
    FROM   [dbo].[int_organization]
    WHERE  [category_cd] = 'F';
END

GO
CREATE PROCEDURE [dbo].[usp_GetFeaturelstForProducts]
AS
BEGIN
    SELECT [int_product_map].[product_cd],
           [int_feature].[feature_cd],
           [int_feature].[descr] AS [feature_descr]
    FROM   [dbo].[int_product_map]
           INNER JOIN
           [dbo].[int_feature]
           ON [int_product_map].[feature_cd] = [int_feature].[feature_cd];
END

GO
CREATE PROCEDURE [dbo].[usp_GetGatewayDetailsByCategoryAndMethod]
AS
BEGIN
    SELECT   [code_id],
             [organization_id],
             [sys_id],
             [category_cd],
             [method_cd],
             [code],
             [verification_sw],
             [int_keystone_cd],
             [short_dsc],
             [spc_pcs_code]
    FROM     [dbo].[int_misc_code]
    WHERE    [category_cd] = 'USID'
             AND [method_cd] = N'GDS'
    ORDER BY [code];
END

GO
CREATE PROCEDURE [dbo].[usp_GetGatewayDetailsByCategoryCode]
@categoryCode CHAR (1)=NULL, @parentOrganizationId UNIQUEIDENTIFIER=NULL
AS
BEGIN
    IF (@parentOrganizationId IS NULL)
        BEGIN
            SELECT   [int_organization].[organization_id],
                     [int_organization].[category_cd],
                     [int_organization].[parent_organization_id],
                     [int_organization].[organization_cd],
                     [int_organization].[organization_nm],
                     [int_organization].[in_default_search],
                     [int_organization].[monitor_disable_sw],
                     [int_organization].[auto_collect_interval],
                     [int_organization].[outbound_interval],
                     [int_organization].[printer_name],
                     [int_organization].[alarm_printer_name]
            FROM     [dbo].[int_organization]
            WHERE    [category_cd] = @categoryCode
            ORDER BY [category_cd];
        END
    ELSE
        BEGIN
            SELECT   [int_organization].[organization_id],
                     [int_organization].[category_cd],
                     [int_organization].[parent_organization_id],
                     [int_organization].[organization_cd],
                     [int_organization].[organization_nm],
                     [int_organization].[in_default_search],
                     [int_organization].[monitor_disable_sw],
                     [int_organization].[auto_collect_interval],
                     [int_organization].[outbound_interval],
                     [int_organization].[printer_name],
                     [int_organization].[alarm_printer_name]
            FROM     [dbo].[int_organization]
            WHERE    [category_cd] = @categoryCode
                     AND [parent_organization_id] = @parentOrganizationId
            ORDER BY [category_cd];
        END
END

GO
CREATE PROCEDURE [dbo].[usp_GetGateWaySettingsByDeviceType]
@GatewayType NVARCHAR (10)
AS
BEGIN
    SELECT   [int_gateway].[gateway_id],
             [int_gateway].[gateway_type],
             [int_gateway].[network_id],
             [int_gateway].[hostname],
             [int_gateway].[enable_sw],
             [int_gateway].[recv_app],
             [int_gateway].[send_app],
             [int_gateway].[reconnect_secs],
             [int_gateway].[organization_id],
             [int_gateway].[send_sys_id],
             [int_gateway].[results_usid],
             [int_gateway].[sleep_secs],
             [int_gateway].[add_monitors_sw],
             [int_gateway].[add_patients_sw],
             [int_gateway].[add_results_sw],
             [int_gateway].[debug_level],
             [int_gateway].[unit_org_id],
             [int_gateway].[patient_id_type],
             [int_gateway].[auto_assign_id_sw],
             [int_gateway].[new_mrn_format],
             [int_gateway].[auto_chan_attach_sw],
             [int_gateway].[live_vitals_sw],
             [int_gateway].[live_waveform_size],
             [int_gateway].[decnet_node],
             [int_gateway].[node_name],
             [int_gateway].[nodes_excluded],
             [int_gateway].[nodes_included],
             [int_gateway].[timemaster_sw],
             [int_gateway].[waveform_size],
             [int_gateway].[print_enabled_sw],
             [int_gateway].[auto_record_alarm_sw],
             [int_gateway].[collect_12_lead_sw],
             [int_gateway].[print_auto_record_sw],
             [int_gateway].[encryption_status]
    FROM     [dbo].[int_gateway]
    WHERE    [gateway_type] = @GatewayType
    ORDER BY [network_id];
END

GO
CREATE PROCEDURE [dbo].[usp_GetGender]
AS
BEGIN
    SELECT [short_dsc]
    FROM   [dbo].[int_misc_code]
    WHERE  [category_cd] = 'SEX'
           AND [verification_sw] = 1;
END

GO
CREATE PROCEDURE [dbo].[usp_GetHL7LogInQueue]
@msg_no NVARCHAR (40)
AS
BEGIN
    SELECT [HL7Message] AS [Message]
    FROM   [dbo].[HL7InboundMessage]
    WHERE  [MessageControlId] = @msg_no;
END

GO
CREATE PROCEDURE [dbo].[usp_GetHL7LogList]
AS
BEGIN
    SELECT [MessageQueuedDate] AS [Date],
           [HL7InboundMessage].[MessageControlId] AS [HL7#],
           [HL7PatientLink].[PatientMrn] AS [Patient ID],
           [MessageStatus] AS [Status],
           [MessageSendingApplication] AS [Send System],
           [MessageTypeEventCode] AS [Event],
           [HL7Message] AS [Message],
           'I' AS [Direction]
    FROM   [dbo].[HL7InboundMessage]
           LEFT OUTER JOIN
           [dbo].[HL7PatientLink]
           ON [HL7PatientLink].[MessageNo] = [HL7InboundMessage].[MessageNo]
    UNION
    SELECT [queued_dt] AS [Date],
           [msg_no] AS [HL7#],
           [patient_id] AS [Patient ID],
           [msg_status] AS [Status],
           [msh_system] AS [Send System],
           [msh_event_cd] AS [Event],
           ISNULL([HL7_text_short], [HL7_text_long]) AS [Message],
           'O' AS [Direction]
    FROM   [dbo].[HL7_out_queue];
END

GO
CREATE PROCEDURE [dbo].[usp_GetHL7LogListBoth]
@FromDate NVARCHAR (MAX), @ToDate NVARCHAR (MAX), @MessageNumber NVARCHAR (40)=NULL, @PatientId NVARCHAR (40)=NULL, @MsgEventCode NCHAR (6)=NULL, @MsgEventType NCHAR (6)=NULL, @MsgSystem NVARCHAR (100)=NULL, @PatientVisitNo NVARCHAR (40)=NULL, @MsgStatusRead BIT, @MsgStatusError BIT, @MsgStatusNotProcessed BIT
AS
BEGIN
    DECLARE @ADTQuery AS NVARCHAR (MAX), @SubQuery AS NVARCHAR (200);
    SET @ADTQuery = N'
        SELECT 
            MessageQueuedDate AS [Date],
            HL7InboundMessage.MessageControlId AS [HL7#], 
            HL7PatientLink.PatientMrn AS [Patient ID],
            MessageStatus AS [Status], 
            MessageSendingApplication AS [Send System], 
            MessageTypeEventCode AS [Event],
            HL7Message AS [Message],
            ''I'' AS [Direction] 
        FROM dbo.HL7InboundMessage
            LEFT OUTER JOIN dbo.HL7PatientLink
                ON HL7PatientLink.MessageNo = HL7InboundMessage.MessageNo
        WHERE MessageQueuedDate BETWEEN ';
    SET @ADTQuery += N'''' + @FromDate + N'''';
    SET @ADTQuery += N' AND ';
    SET @ADTQuery += N'''' + @ToDate + N'''';
    IF (@MessageNumber IS NOT NULL
        AND @MessageNumber <> '')
        SET @ADTQuery += N' AND  HL7InboundMessage.MessageControlId=' + N'''' + @MessageNumber + N'''';
    IF (@PatientId IS NOT NULL
        AND @PatientId <> '')
        SET @ADTQuery += N' AND  HL7PatientLink.PatientMrn=' + N'''' + @PatientId + N'''';
    IF (@MsgEventCode IS NOT NULL
        AND @MsgEventCode <> '')
        SET @ADTQuery += N' AND  HL7InboundMessage.MessageTypeEventCode=' + N'''' + @MsgEventCode + N'''';
    IF (@MsgEventType IS NOT NULL
        AND @MsgEventType <> '')
        SET @ADTQuery += N' AND  HL7InboundMessage.MessageType=' + N'''' + @MsgEventType + N'''';
    IF (@MsgSystem IS NOT NULL
        AND @MsgSystem <> '')
        SET @ADTQuery += N' AND  HL7InboundMessage.MessageSendingApplication=' + N'''' + @MsgSystem + N'''';
    IF (@PatientVisitNo IS NOT NULL
        AND @PatientVisitNo <> '')
        SET @ADTQuery += N' AND  HL7PatientLink.PatientVisitNumber=' + N'''' + @PatientVisitNo + N'''';
    IF (@MsgStatusRead = 1
        OR @MsgStatusError = 1
        OR @MsgStatusNotProcessed = 1)
        BEGIN
            SET @ADTQuery += N' AND ';
            SET @SubQuery = '(';
            IF (@MsgStatusRead = 1)
                BEGIN
                    SET @SubQuery += N' HL7InboundMessage.MessageStatus=''R'' ';
                END
            IF (@MsgStatusError = 1)
                BEGIN
                    IF (LEN(@SubQuery) > 1)
                        SET @SubQuery += N' OR ';
                    SET @SubQuery += N' HL7InboundMessage.MessageStatus=''E'' ';
                END
            IF (@MsgStatusNotProcessed = 1)
                BEGIN
                    IF (LEN(@SubQuery) > 1)
                        SET @SubQuery += N' OR ';
                    SET @SubQuery += N' HL7InboundMessage.MessageStatus=''N'' ';
                END
            SET @SubQuery += N')';
            SET @ADTQuery += @SubQuery;
        END
    SET @ADTQuery += N' UNION ';
    DECLARE @OruQuery AS NVARCHAR (MAX), @SubQueryORU AS NVARCHAR (200);
    SET @OruQuery = N'
        SELECT 
            queued_dt AS Date, 
            msg_no AS HL7#, 
            patient_id AS ''Patient ID'',
            msg_status AS Status,
            msh_system AS ''Send System'', 
            msh_event_cd AS Event,
            ISNULL(HL7_text_short,
            HL7_text_long) AS Message,
            ''O'' AS Direction
        FROM dbo.HL7_out_queue 
        WHERE queued_dt BETWEEN ';
    SET @OruQuery = @OruQuery + N'''' + @FromDate + N'''';
    SET @OruQuery = @OruQuery + N' AND ';
    SET @OruQuery = @OruQuery + N'''' + @ToDate + N'''';
    IF (@MessageNumber IS NOT NULL
        AND @MessageNumber <> '')
        SET @OruQuery = @OruQuery + N' AND  msg_no=' + N'''' + @MessageNumber + N'''';
    IF (@PatientId IS NOT NULL
        AND @PatientId <> '')
        SET @OruQuery = @OruQuery + N' AND  patient_id=' + N'''' + @PatientId + N'''';
    IF (@MsgEventCode IS NOT NULL
        AND @MsgEventCode <> '')
        SET @OruQuery = @OruQuery + N' AND  msh_event_cd=' + N'''' + @MsgEventCode + N'''';
    IF (@MsgEventType IS NOT NULL
        AND @MsgEventType <> '')
        SET @OruQuery = @OruQuery + N' AND  msh_msg_type=' + N'''' + @MsgEventType + N'''';
    IF (@MsgSystem IS NOT NULL
        AND @MsgSystem <> '')
        SET @OruQuery = @OruQuery + N' AND  msh_system=' + N'''' + @MsgSystem + N'''';
    IF (@MsgStatusRead = 1
        OR @MsgStatusError = 1
        OR @MsgStatusNotProcessed = 1)
        BEGIN
            SET @OruQuery = @OruQuery + N' AND ';
            SET @SubQueryORU = '(';
            IF (@MsgStatusRead = 1)
                BEGIN
                    SET @SubQueryORU += N' msg_status=''R'' ';
                END
            IF (@MsgStatusError = 1)
                BEGIN
                    IF (LEN(@SubQueryORU) > 1)
                        SET @SubQueryORU += N' OR ';
                    SET @SubQueryORU += N' msg_status=''E'' ';
                END
            IF (@MsgStatusNotProcessed = 1)
                BEGIN
                    IF (LEN(@SubQueryORU) > 1)
                        SET @SubQueryORU += N' OR ';
                    SET @SubQueryORU += N' msg_status=''N'' ';
                END
            SET @SubQueryORU += N')';
            SET @OruQuery = @OruQuery + @SubQueryORU;
        END
    EXECUTE (@ADTQUERY + @OruQuery);
END

GO
CREATE PROCEDURE [dbo].[usp_GetHL7LogListInbound]
@FromDate NVARCHAR (MAX), @ToDate NVARCHAR (MAX), @MessageNumber NVARCHAR (40)=NULL, @PatientId NVARCHAR (40)=NULL, @MsgEventCode NCHAR (6)=NULL, @MsgEventType NCHAR (6)=NULL, @MsgSystem NVARCHAR (100)=NULL, @PatientVisitNo NVARCHAR (40)=NULL, @MsgStatusRead BIT, @MsgStatusError BIT, @MsgStatusNotProcessed BIT
AS
BEGIN
    DECLARE @ADTQuery AS NVARCHAR (MAX), @SubQuery AS NVARCHAR (200);
    SET @ADTQuery = N'
        SELECT 
            MessageQueuedDate AS Date,
            HL7InboundMessage.MessageControlId AS HL7#, 
            HL7PatientLink.PatientMrn AS ''Patient ID'',
            MessageStatus AS ''Status'', 
            MessageSendingApplication AS ''Send System'', 
            MessageTypeEventCode AS Event,
            HL7Message AS Message,
            ''I'' AS Direction 
        FROM dbo.HL7InboundMessage
            LEFT OUTER JOIN dbo.HL7PatientLink
                ON HL7PatientLink.MessageNo=HL7InboundMessage.MessageNo
        WHERE MessageQueuedDate BETWEEN ';
    SET @ADTQuery += N'''' + @FromDate + '''';
    SET @ADTQuery += N' AND ';
    SET @ADTQuery += N'''' + @ToDate + N'''';
    IF (@MessageNumber IS NOT NULL
        AND @MessageNumber <> N'')
        SET @ADTQuery += N' AND  HL7InboundMessage.MessageControlId=' + N'''' + @MessageNumber + N'''';
    IF (@PatientId IS NOT NULL
        AND @PatientId <> N'')
        SET @ADTQuery += N' AND  HL7PatientLink.PatientMrn=' + N'''' + @PatientId + N'''';
    IF (@MsgEventCode IS NOT NULL
        AND @MsgEventCode <> N'')
        SET @ADTQuery += N' AND  HL7InboundMessage.MessageTypeEventCode=' + N'''' + @MsgEventCode + N'''';
    IF (@MsgEventType IS NOT NULL
        AND @MsgEventType <> N'')
        SET @ADTQuery += N' AND  HL7InboundMessage.MessageType=' + N'''' + @MsgEventType + N'''';
    IF (@MsgSystem IS NOT NULL
        AND @MsgSystem <> '')
        SET @ADTQuery += N' AND  HL7InboundMessage.MessageSendingApplication=' + N'''' + @MsgSystem + N'''';
    IF (@PatientVisitNo IS NOT NULL
        AND @PatientVisitNo <> '')
        SET @ADTQuery += N' AND  HL7PatientLink.PatientVisitNumber=' + N'''' + @PatientVisitNo + N'''';
    IF (@MsgStatusRead = 1
        OR @MsgStatusError = 1
        OR @MsgStatusNotProcessed = 1)
        BEGIN
            SET @ADTQuery += N' AND ';
            SET @SubQuery = '(';
            IF (@MsgStatusRead = 1)
                BEGIN
                    SET @SubQuery += N' HL7InboundMessage.MessageStatus=''R'' ';
                END
            IF (@MsgStatusError = 1)
                BEGIN
                    IF (LEN(@SubQuery) > 1)
                        SET @SubQuery += N' OR ';
                    SET @SubQuery += N' HL7InboundMessage.MessageStatus=''E'' ';
                END
            IF (@MsgStatusNotProcessed = 1)
                BEGIN
                    IF (LEN(@SubQuery) > 1)
                        SET @SubQuery += N' OR ';
                    SET @SubQuery += N' HL7InboundMessage.MessageStatus=''N'' ';
                END
            SET @SubQuery += N')';
            SET @ADTQuery += @SubQuery;
        END
    EXECUTE (@ADTQuery);
END

GO
CREATE PROCEDURE [dbo].[usp_GetHL7LogListOutbound]
@FromDate NVARCHAR (MAX), @ToDate NVARCHAR (MAX), @MessageNumber NVARCHAR (40)=NULL, @PatientId NVARCHAR (40)=NULL, @MsgEventCode NCHAR (6)=NULL, @MsgEventType NCHAR (6)=NULL, @MsgSystem NVARCHAR (100)=NULL, @MsgStatusRead BIT, @MsgStatusError BIT, @MsgStatusNotProcessed BIT
AS
BEGIN
    DECLARE @Query AS NVARCHAR (MAX), @SubQuery AS NVARCHAR (200);
    SET @Query = N'
        SELECT 
            queued_dt AS [Date], 
            msg_no AS [HL7#], 
            patient_id AS [Patient ID],
            msg_status AS [Status],
            msh_system AS [Send System], 
            msh_event_cd AS [Event],
            ISNULL(HL7_text_short,
            HL7_text_long) AS [Message],
            ''O'' AS [Direction]
        FROM dbo.HL7_out_queue 
        WHERE queued_dt BETWEEN ';
    SET @Query += N'''' + @FromDate + N'''';
    SET @Query += N' AND ';
    SET @Query += N'''' + @ToDate + N'''';
    IF (@MessageNumber IS NOT NULL
        AND @MessageNumber <> '')
        SET @Query += N' AND msg_no=' + N'''' + @MessageNumber + N'''';
    IF (@PatientId IS NOT NULL
        AND @PatientId <> N'')
        SET @Query += N' AND patient_id=' + N'''' + @PatientId + N'''';
    IF (@MsgEventCode IS NOT NULL
        AND @MsgEventCode <> N'')
        SET @Query += N' AND msh_event_cd=' + N'''' + @MsgEventCode + N'''';
    IF (@MsgEventType IS NOT NULL
        AND @MsgEventType <> N'')
        SET @Query += N' AND msh_msg_type=' + N'''' + @MsgEventType + N'''';
    IF (@MsgSystem IS NOT NULL
        AND @MsgSystem <> N'')
        SET @Query += N' AND msh_system=' + N'''' + @MsgSystem + N'''';
    IF (@MsgStatusRead = 1
        OR @MsgStatusError = 1
        OR @MsgStatusNotProcessed = 1)
        BEGIN
            SET @Query += N' AND ';
            SET @SubQuery = N'(';
            IF (@MsgStatusRead = 1)
                BEGIN
                    SET @SubQuery += N' msg_status=''R'' ';
                END
            IF (@MsgStatusError = 1)
                BEGIN
                    IF (LEN(@SubQuery) > 1)
                        SET @SubQuery += N' OR ';
                    SET @SubQuery += N' msg_status=''E'' ';
                END
            IF (@MsgStatusNotProcessed = 1)
                BEGIN
                    IF (LEN(@SubQuery) > 1)
                        SET @SubQuery += N' OR ';
                    SET @SubQuery += N' msg_status=''N'' ';
                END
            SET @SubQuery += N')';
            SET @Query += @SubQuery;
        END
    EXECUTE (@Query);
END

GO
CREATE PROCEDURE [dbo].[usp_GetHL7LogOutQueue]
@msg_no CHAR (20)
AS
BEGIN
    SELECT ISNULL([HL7_text_short], [HL7_text_long]) AS [Message]
    FROM   [dbo].[HL7_out_queue]
    WHERE  [msg_no] = @msg_no;
END

GO
CREATE PROCEDURE [dbo].[usp_GetKeyvalue]
@keyname VARCHAR (40)
AS
BEGIN
    SELECT [keyvalue]
    FROM   [dbo].[int_cfg_values]
    WHERE  [keyname] = @keyname;
END

GO
CREATE PROCEDURE [dbo].[usp_GetMethodCode]
AS
BEGIN
    SELECT   DISTINCT [method_cd]
    FROM     [dbo].[int_misc_code]
    WHERE    [method_cd] IS NOT NULL
    ORDER BY [method_cd];
END

GO
CREATE PROCEDURE [dbo].[usp_GetMonitorList]
@filters NVARCHAR (MAX)
AS
BEGIN
    DECLARE @QUERY AS NVARCHAR (MAX), @QUERY1 AS NVARCHAR (MAX);
    SET @QUERY = N'
        SELECT [Name] = [v_Monitors].[monitor_name],
            [Network ID] = RTRIM([v_Monitors].[network_id]),
            [Node ID] = [v_Monitors].[node_id],
            [Bed ID] = [v_Monitors].[bed_id],
            [Channel] = RTRIM([v_Monitors].[channel]),
            [Description] = [v_Monitors].[monitor_dsc],
            [Unit] = [FacilityOrg].[organization_cd] + '' - '' + [UnitOrg].[organization_cd],
            [Room] = [v_Monitors].[room],
            [Bed] = RTRIM([v_Monitors].[bed_cd]),
            [Interval] = [UnitOrg].[auto_collect_interval],
            [Last Used] = [dbo].[fnUtcDateTimeToLocalTime](MAX([VitalsData].[TimestampUTC])),
            [Active] = MAX(CASE WHEN [DeviceSessions].[EndTimeUTC] IS NULL THEN ''Y'' ELSE ''N'' END),
            [Subnet] = [v_Monitors].[subnet],
            [monitor_id] = [v_Monitors].[monitor_id],
            [assignment_id] = [v_Monitors].[assignment_cd]
        FROM [dbo].[v_Monitors]
            LEFT OUTER JOIN [dbo].[DeviceSessions] ON [DeviceSessions].[DeviceId] = [v_Monitors].[monitor_id]
            LEFT OUTER JOIN [dbo].[TopicSessions] ON [TopicSessions].[DeviceSessionId] = [DeviceSessions].[Id]
            LEFT OUTER JOIN [dbo].[VitalsData] ON [TopicSessions].[Id] = [VitalsData].[TopicSessionId]
            LEFT OUTER JOIN [dbo].[int_organization] AS [UnitOrg] ON [UnitOrg].[organization_id] = [v_Monitors].[unit_org_id]
            LEFT OUTER JOIN [dbo].[int_organization] AS [FacilityOrg] ON [FacilityOrg].[organization_id] = [UnitOrg].[parent_organization_id]';
    SET @QUERY1 = N' GROUP BY [v_Monitors].[monitor_name],
                         [v_Monitors].[network_id],
                         [v_Monitors].[node_id],
                         [v_Monitors].[bed_id],
                         [v_Monitors].[channel],
                         [v_Monitors].[monitor_dsc],
                         [FacilityOrg].[organization_cd],
                         [UnitOrg].[organization_cd],
                         [v_Monitors].[room],
                         [v_Monitors].[bed_cd],
                         [UnitOrg].[auto_collect_interval],
                         [v_Monitors].[subnet],
                         [v_Monitors].[monitor_id],
                         [v_Monitors].[assignment_cd]
                ORDER BY [Name]';
    IF (LEN(@filters) > 0)
        BEGIN
            SET @Query += N' WHERE ';
            SET @Query += @filters;
            SET @Query += @QUERY1;
        END
    ELSE
        SET @Query += @QUERY1;
    EXECUTE (@QUERY);
END

GO
CREATE PROCEDURE [dbo].[usp_GetNetwork]
AS
BEGIN
    SELECT   DISTINCT [network_id]
    FROM     [dbo].[int_monitor]
    ORDER BY [network_id];
END

GO
CREATE PROCEDURE [dbo].[usp_GetOrganization]
AS
BEGIN
    SELECT [organization_cd],
           [organization_nm],
           [organization_id],
           [parent_organization_id]
    FROM   [dbo].[int_organization]
    WHERE  [category_cd] = 'O';
END

GO
CREATE PROCEDURE [dbo].[usp_GetOrganizationInformation]
@organizationCd NVARCHAR (40)=NULL, @categoryCd CHAR (1)=NULL
AS
BEGIN
    SET NOCOUNT ON;
    IF (@organizationCd IS NOT NULL
        AND @categoryCd IS NOT NULL)
        BEGIN
            SELECT [organization_id],
                   [category_cd],
                   [parent_organization_id],
                   [organization_cd],
                   [organization_nm],
                   [in_default_search],
                   [monitor_disable_sw],
                   [auto_collect_interval],
                   [outbound_interval],
                   [printer_name],
                   [alarm_printer_name]
            FROM   [dbo].[int_organization]
            WHERE  [category_cd] = @categoryCd
                   AND [organization_cd] = @organizationCd;
        END
    ELSE
        IF (@categoryCd IS NOT NULL)
            BEGIN
                SELECT [organization_id],
                       [category_cd],
                       [parent_organization_id],
                       [organization_cd],
                       [organization_nm],
                       [in_default_search],
                       [monitor_disable_sw],
                       [auto_collect_interval],
                       [outbound_interval],
                       [printer_name],
                       [alarm_printer_name]
                FROM   [dbo].[int_organization]
                WHERE  [category_cd] = @categoryCd;
            END
END

GO
CREATE PROCEDURE [dbo].[usp_GetPatientIdentificationType]
AS
BEGIN
    SELECT [patient_id_type] AS [IdentificationType]
    FROM   [dbo].[int_gateway]
    WHERE  [gateway_type] = 'UVN';
END

GO
CREATE PROCEDURE [dbo].[usp_GetPatientInfo]
@PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [int_mrn_map].[mrn_xid],
             [int_mrn_map].[mrn_xid2],
             [int_person].[last_nm],
             [int_person].[first_nm],
             [int_person].[middle_nm],
             [int_patient].[dob],
             [int_misc_code].[short_dsc],
             [int_patient].[height],
             [int_patient].[weight],
             [int_patient].[bsa],
             [org1].[organization_cd] + N' - ' + [org2].[organization_cd] AS [Unit],
             [int_encounter].[rm],
             [int_encounter].[bed],
             [int_encounter_map].[encounter_xid],
             CAST (0 AS TINYINT) AS [IsDataLoader],
             [int_patient_monitor].[last_result_dt] AS [Precedence]
    FROM     [dbo].[int_encounter]
             LEFT OUTER JOIN
             [dbo].[int_organization] AS [org1]
             ON ([int_encounter].[organization_id] = [org1].[organization_id])
             LEFT OUTER JOIN
             [dbo].[int_patient_monitor]
             INNER JOIN
             [dbo].[int_monitor]
             ON ([dbo].[int_patient_monitor].[monitor_id] = [int_monitor].[monitor_id])
             ON ([int_encounter].[encounter_id] = [dbo].[int_patient_monitor].[encounter_id])
                AND ([int_encounter].[patient_id] = [dbo].[int_patient_monitor].[patient_id])
             INNER JOIN
             [dbo].[int_encounter_map]
             ON ([int_encounter].[encounter_id] = [int_encounter_map].[encounter_id])
             INNER JOIN
             [dbo].[int_person]
             ON ([int_encounter].[patient_id] = [int_person].[person_id])
             INNER JOIN
             [dbo].[int_patient]
             ON ([int_person].[person_id] = [int_patient].[patient_id])
             INNER JOIN
             [dbo].[int_mrn_map]
             ON ([int_patient].[patient_id] = [int_mrn_map].[patient_id])
             INNER JOIN
             [dbo].[int_organization] AS [org2]
             ON ([int_encounter].[unit_org_id] = [org2].[organization_id])
             LEFT OUTER JOIN
             [dbo].[int_misc_code]
             ON [int_patient].[gender_cid] = [int_misc_code].[code_id]
    WHERE    [int_mrn_map].[merge_cd] = 'C'
             AND [int_mrn_map].[patient_id] = @PatientId
    UNION
    SELECT   [int_mrn_map].[mrn_xid],
             [int_mrn_map].[mrn_xid2],
             [int_person].[last_nm],
             [int_person].[first_nm],
             [int_person].[middle_nm],
             [int_patient].[dob],
             [int_misc_code].[short_dsc],
             [int_patient].[height],
             [int_patient].[weight],
             [int_patient].[bsa],
             [Facilities].[organization_cd] + N' - ' + [Units].[organization_cd] AS [Unit],
             [Devices].[Room] AS [rm],
             [Assignment].[BedName] AS [bed],
             CAST (NULL AS NVARCHAR (40)) AS [encounter_xid],
             CAST (1 AS TINYINT) AS [IsDataLoader],
             [dbo].[fnUtcDateTimeToLocalTime]([PatientSessions].[BeginTimeUTC]) AS [Precedence]
    FROM     [dbo].[PatientSessions]
             INNER JOIN
             (SELECT [PatientSessionId],
                     [PatientId]
              FROM   (SELECT [PatientSessionId],
                             [PatientId],
                             ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [RowNumber]
                      FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsAssignmentSequence]
              WHERE  [PatientSessionsAssignmentSequence].[RowNumber] = 1) AS [LatestPatientSessionAssignment]
             ON [LatestPatientSessionAssignment].[PatientSessionId] = [PatientSessions].[Id]
             INNER JOIN
             (SELECT [PatientSessionId],
                     [DeviceSessionId]
              FROM   (SELECT [PatientSessionId],
                             [DeviceSessionId],
                             ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [RowNumber]
                      FROM   [dbo].[PatientData]) AS [PatientSessionsDeviceSequence]
              WHERE  [PatientSessionsDeviceSequence].[RowNumber] = 1) AS [LatestPatientSessionDevice]
             ON [LatestPatientSessionDevice].[PatientSessionId] = [PatientSessions].[Id]
             INNER JOIN
             [dbo].[DeviceSessions]
             ON [DeviceSessions].[Id] = [LatestPatientSessionDevice].[DeviceSessionId]
             INNER JOIN
             [dbo].[Devices]
             ON [DeviceSessions].[DeviceId] = [Devices].[Id]
             INNER JOIN
             [dbo].[v_DeviceSessionAssignment] AS [Assignment]
             ON [Assignment].[DeviceSessionId] = [LatestPatientSessionDevice].[DeviceSessionId]
             LEFT OUTER JOIN
             [dbo].[int_organization] AS [Facilities]
             ON [Facilities].[organization_nm] = [Assignment].[FacilityName]
                AND [Facilities].[category_cd] = 'F'
             LEFT OUTER JOIN
             [dbo].[int_organization] AS [Units]
             ON [Units].[organization_nm] = [Assignment].[UnitName]
                AND [Units].[parent_organization_id] = [Facilities].[organization_id]
             LEFT OUTER JOIN
             [dbo].[int_mrn_map]
             ON [int_mrn_map].[patient_id] = [LatestPatientSessionAssignment].[PatientId]
                AND [int_mrn_map].[merge_cd] = 'C'
             LEFT OUTER JOIN
             [dbo].[int_patient]
             ON [int_patient].[patient_id] = [LatestPatientSessionAssignment].[PatientId]
             LEFT OUTER JOIN
             [dbo].[int_person]
             ON [int_person].[person_id] = [LatestPatientSessionAssignment].[PatientId]
             LEFT OUTER JOIN
             [dbo].[int_misc_code]
             ON [int_misc_code].[code_id] = [int_patient].[gender_cid]
    WHERE    [LatestPatientSessionAssignment].[PatientId] = @PatientId
    ORDER BY [Precedence] DESC;
END

GO
CREATE PROCEDURE [dbo].[usp_GetPatientInformation]
@deviceIds [dbo].[GetPatientUpdateInformationType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    WITH   [PatientSessionActiveDevice] ([PatientSessionId], [DeviceId], [MonitoringStatus])
    AS     (SELECT [PatientData].[PatientSessionId],
                   [DeviceSessions].[DeviceId],
                   [MonitoringStatusSequence].[MonitoringStatus]
            FROM   [dbo].[PatientData]
                   INNER JOIN
                   (SELECT   [PatientSessionId],
                             MAX([TimestampUTC]) AS [MaxTimestampUTC]
                    FROM     [dbo].[PatientData]
                    GROUP BY [PatientSessionId]) AS [PatientSessionMaxTimestampUTC]
                   ON [PatientData].[PatientSessionId] = [PatientSessionMaxTimestampUTC].[PatientSessionId]
                      AND [PatientData].[TimestampUTC] = [PatientSessionMaxTimestampUTC].[MaxTimestampUTC]
                   INNER JOIN
                   [dbo].[DeviceSessions]
                   ON [DeviceSessions].[Id] = [PatientData].[DeviceSessionId]
                      AND [DeviceSessions].[EndTimeUTC] IS NULL
                   LEFT OUTER JOIN
                   (SELECT [DeviceSessionId],
                           [Value] AS [MonitoringStatus],
                           ROW_NUMBER() OVER (PARTITION BY [DeviceSessionId], [Name] ORDER BY [TimestampUTC] DESC) AS [RowNumber]
                    FROM   [dbo].[DeviceInfoData] AS [DeviceInfoSequence]
                    WHERE  [Name] = N'MonitoringStatus') AS [MonitoringStatusSequence]
                   ON [MonitoringStatusSequence].[DeviceSessionId] = [DeviceSessions].[Id]
                      AND [MonitoringStatusSequence].[RowNumber] = 1)
    SELECT DISTINCT [Ids].[DeviceId],
                    CASE WHEN ([v_DevicePatientIdActive].[DeviceId] IS NULL
                               OR [Ids].[PatientSessionId] = [psad].[PatientSessionId]
                               OR [psad].[MonitoringStatus] = N'Standby')
                              AND ([int_patient_monitor].[monitor_id] IS NULL
                                   OR [int_monitor].[standby] IS NOT NULL) THEN [mrn_xid] ELSE [dbo].[fnMarkIdAsDuplicate]([mrn_xid]) END AS [ID1],
                    [mrn_xid2] AS [ID2],
                    [first_nm] AS [FirstName],
                    [middle_nm] AS [MiddleName],
                    [last_nm] AS [LastName],
                    CASE [gender_code].[code] WHEN 'M' THEN 'Male' WHEN 'F' THEN 'Female' ELSE NULL END AS [Gender],
                    CONVERT (VARCHAR, [dob], 126) AS [DOB],
                    CAST ([bsa] AS VARCHAR) AS [BSA]
    FROM   @deviceIds AS [Ids]
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [int_mrn_map].[mrn_xid] = [Ids].[ID1]
              AND [int_mrn_map].[merge_cd] = 'C'
           LEFT OUTER JOIN
           [dbo].[int_patient]
           ON [int_patient].[patient_id] = [int_mrn_map].[patient_id]
           LEFT OUTER JOIN
           [dbo].[int_person]
           ON [int_person].[person_id] = [int_mrn_map].[patient_id]
           LEFT OUTER JOIN
           [dbo].[int_misc_code] AS [gender_code]
           ON [gender_code].[code_id] = [int_patient].[gender_cid]
           LEFT OUTER JOIN
           [dbo].[v_DevicePatientIdActive]
           ON [v_DevicePatientIdActive].[DeviceId] <> [Ids].[DeviceId]
              AND [v_DevicePatientIdActive].[ID1] = [Ids].[ID1]
           LEFT OUTER JOIN
           [PatientSessionActiveDevice] AS [psad]
           ON [psad].[DeviceId] = [v_DevicePatientIdActive].[DeviceId]
           LEFT OUTER JOIN
           [dbo].[int_patient_monitor]
           ON [int_patient_monitor].[patient_id] = [int_mrn_map].[patient_id]
              AND [int_patient_monitor].[active_sw] = '1'
           LEFT OUTER JOIN
           [dbo].[int_monitor]
           ON [int_monitor].[monitor_id] = [int_patient_monitor].[monitor_id];
END

GO
CREATE PROCEDURE [dbo].[usp_GetPatientList]
@filters NVARCHAR (MAX), @showADTEncounters BIT
AS
BEGIN
    DECLARE @QUERY AS NVARCHAR (MAX);
    SET @QUERY = N'
        SELECT
            [FIRST_NAME] AS [First Name],
            [LAST_NAME] AS [Last Name],
            [MRN_ID] AS [Patient ID],
            [ACCOUNT_ID] AS [Patient ID2],
            [DOB] AS [DOB],
            (ISNULL(org1.organization_cd, ''-'') + '' '' + ISNULL(org2.organization_cd, ''-'') + '' '' + ISNULL([ROOM], ''-'') + '' '' + ISNULL([BED], ''-'')) AS [Location],
            [MONITOR_NAME] AS [Device],
            [LAST_RESULT] AS [Last Result],
            [ADMIT] AS [Admitted],
            [DISCHARGED] AS [Discharged],
            [SUBNET] AS [Subnet],
            [patient_id] AS [GUID],
            [FACILITY_PARENT_ID] AS [parent_organization_id]
        FROM [dbo].[v_CombinedEncounters]
            INNER JOIN [dbo].[int_organization] AS [org1] ON [org1].[organization_id] = [FACILITY_ID]
            INNER JOIN [dbo].[int_organization] AS [org2] ON [org2].[organization_id] = [UNIT_ID]
        WHERE [MERGE_CD] = ''C''';
    IF (@showADTEncounters <> 1)
        SET @Query += N' AND [PATIENT_MONITOR_ID] IS NOT NULL AND [MONITOR_CREATED] = 1';
    IF (LEN(@filters) > 0)
        BEGIN
            SET @Query += N' AND ';
            SET @Query += @filters;
        END
    EXECUTE (@QUERY);
END

GO
CREATE PROCEDURE [dbo].[usp_GetPrintJobList]
@filters NVARCHAR (MAX), @FromDate NVARCHAR (MAX), @ToDate NVARCHAR (MAX)
AS
BEGIN
    DECLARE @Query AS NVARCHAR (MAX) = N'
        SELECT 
            int_print_job.print_sw AS [Print], 
            int_print_job.printer_name AS [Printer],
            int_print_job.descr AS [Description],
            int_print_job.page_number AS [Pages],
            int_print_job.row_dt AS [Date],
            int_mrn_map.mrn_xid as [Patient],
            int_print_job.status_code AS [Status],
            int_print_job.status_msg AS [Message],
            int_print_job.job_type,
            int_mrn_map.patient_id  
        FROM 
            dbo.int_print_job 
                INNER JOIN dbo.int_mrn_map 
                    ON int_print_job.patient_id = int_mrn_map.patient_id 
        WHERE int_print_job.job_net_dt BETWEEN ';
    SET @Query += N'''' + @FromDate + N'''';
    SET @Query += N' AND ';
    SET @Query += N'''' + @ToDate + N'''';
    IF (LEN(@filters) > 0)
        SET @Query += N' AND ';
    SET @Query += @filters;
    EXECUTE (@Query);
END

GO
CREATE PROCEDURE [dbo].[usp_GetProductSecurity]
AS
BEGIN
    SELECT [p].[product_cd],
           [p].[organization_id],
           [p].[license_no]
    FROM   [dbo].[int_product_access] AS [p]
           INNER JOIN
           [dbo].[int_organization] AS [o]
           ON [p].[organization_id] = [o].[organization_id]
    WHERE  [o].[category_cd] = 'D';
END

GO
CREATE PROCEDURE [dbo].[usp_GetSelectedProducts]
@product_cd VARCHAR (25)
AS
BEGIN
    SELECT   [int_organization].[organization_id],
             [int_organization].[category_cd],
             [int_organization].[parent_organization_id],
             [int_organization].[organization_cd],
             [int_organization].[organization_nm],
             [int_organization].[in_default_search],
             [int_organization].[monitor_disable_sw],
             [int_organization].[auto_collect_interval],
             [int_organization].[outbound_interval],
             [int_organization].[printer_name],
             [int_organization].[alarm_printer_name]
    FROM     [dbo].[int_product_access]
             INNER JOIN
             [dbo].[int_organization]
             ON [int_product_access].[organization_id] = [int_organization].[organization_id]
    WHERE    [int_product_access].[product_cd] = @product_cd
    ORDER BY [organization_nm];
END

GO
CREATE PROCEDURE [dbo].[usp_GetSendSystemList]
@organization_id NVARCHAR (MAX)=NULL
AS
BEGIN
    DECLARE @Query AS NVARCHAR (MAX) = N'
        SELECT 
            code,
            dsc,
            sys_id 
        FROM 
            dbo.int_send_sys ';
    DECLARE @Query1 AS NVARCHAR (MAX) = N' ORDER BY code';
    IF (LEN(@organization_id) > 0)
        BEGIN
            SET @Query += N' WHERE organization_id = ';
            SET @Query += N'''' + @organization_id + N'''';
            SET @Query += @Query1;
        END
    ELSE
        BEGIN
            SET @Query += @Query1;
        END
    EXECUTE (@Query);
END

GO
CREATE PROCEDURE [dbo].[usp_GetSysgenDetails]
@product_cd VARCHAR (25)
AS
BEGIN
    SELECT   [int_sysgen].[product_cd],
             [int_sysgen].[feature_cd],
             [int_sysgen].[setting]
    FROM     [dbo].[int_sysgen]
    WHERE    [product_cd] = @product_cd
    ORDER BY [feature_cd];
END

GO
CREATE PROCEDURE [dbo].[usp_GetSystemLog]
@filters NVARCHAR (MAX), @FromDate NVARCHAR (MAX), @ToDate NVARCHAR (MAX)
AS
BEGIN
    DECLARE @Query AS NVARCHAR (MAX) = N'
        SELECT
            msg_dt AS [Date], 
            product AS [Product],
            type AS [Status],
            msg_text AS [Message]
        FROM
            dbo.int_msg_log
        WHERE
            msg_dt BETWEEN ';
    SET @Query += N'''' + @FromDate + N'''';
    SET @Query += N' AND ';
    SET @Query += N'''' + @ToDate + N'''';
    IF (LEN(@filters) > 0)
        SET @Query += N' AND ';
    SET @Query += @filters;
    EXECUTE (@Query);
END

GO
CREATE PROCEDURE [dbo].[usp_GetUnit]
AS
BEGIN
    SELECT [io1].[organization_cd] + ' - ' + [io].[organization_cd],
           [io].[organization_nm],
           [io].[organization_id],
           [io].[parent_organization_id],
           [io].[organization_cd]
    FROM   [dbo].[int_organization] AS [io]
           INNER JOIN
           [dbo].[int_organization] AS [io1]
           ON [io].[parent_organization_id] = [io1].[organization_id]
    WHERE  [io].[category_cd] = 'D';
END

GO
CREATE PROCEDURE [dbo].[usp_GetUnitDetail]
@organization_id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT [auto_collect_interval],
           [printer_name],
           [alarm_printer_name],
           [outbound_interval]
    FROM   [dbo].[int_organization]
    WHERE  [organization_id] = @organization_id;
END

GO
CREATE PROCEDURE [dbo].[usp_GetUnitLicense]
@productcd VARCHAR (25), @categoryCd CHAR (1), @organizationId UNIQUEIDENTIFIER, @organizationCd NVARCHAR (40)=NULL
AS
BEGIN
    IF (@organizationCd IS NOT NULL)
        BEGIN
            SELECT [ORG].[organization_cd] AS [ORGCD]
            FROM   [dbo].[int_organization] AS [ORG]
                   INNER JOIN
                   [dbo].[int_product_access] AS [PROACC]
                   ON [PROACC].[organization_id] = [ORG].[organization_id]
            WHERE  [PROACC].[product_cd] = @productcd
                   AND [ORG].[category_cd] = @categoryCd
                   AND ([ORG].[organization_id] = @organizationId
                        AND [ORG].[organization_cd] = @organizationCd);
        END
    ELSE
        BEGIN
            SELECT [ORG].[organization_cd] AS [ORGCD]
            FROM   [dbo].[int_organization] AS [ORG]
                   INNER JOIN
                   [dbo].[int_product_access] AS [PROACC]
                   ON [PROACC].[organization_id] = [ORG].[organization_id]
            WHERE  [PROACC].[product_cd] = @productcd
                   AND [ORG].[category_cd] = @categoryCd
                   AND [ORG].[organization_id] = @organizationId;
        END
END

GO
CREATE PROCEDURE [dbo].[usp_GetVersionList]
AS
BEGIN
    SELECT [ver_code],
           [install_dt],
           [status_cd],
           [install_pgm]
    FROM   [dbo].[int_db_ver];
END

GO
CREATE PROCEDURE [dbo].[usp_GetVisits]
@PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SELECT   [int_encounter].[admit_dt] AS [Admitted],
             [int_encounter].[discharge_dt] AS [Discharged],
             [int_encounter].[account_id] AS [Account Number],
             ISNULL([int_organization].[organization_cd], '-') + ' ' + ISNULL([int_encounter].[rm], N'-') + N' ' + ISNULL([int_encounter].[bed], N'-') AS [Location],
             [int_encounter_map].[encounter_xid] AS [Encounter Number],
             [int_encounter].[encounter_id] AS [GUID]
    FROM     [dbo].[int_encounter]
             INNER JOIN
             [dbo].[int_encounter_map]
             ON [int_encounter].[encounter_id] = [int_encounter_map].[encounter_id]
             INNER JOIN
             [dbo].[int_organization]
             ON [int_encounter].[unit_org_id] = [int_organization].[organization_id]
    WHERE    [int_encounter].[patient_id] = @PatientId
    ORDER BY [int_encounter].[admit_dt] DESC;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetAttendingHcpData]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [hcpMap].[hcp_xid] AS [hcpID],
           [last_nm] AS [hcpLastName],
           [first_nm] AS [hcpFirstName],
           [middle_nm] AS [hcpMiddleName]
    FROM   [dbo].[int_hcp] AS [hcp]
           INNER JOIN
           [dbo].[int_hcp_map] AS [hcpMap]
           ON [hcp].[hcp_id] = [hcpMap].[hcp_id]
           INNER JOIN
           [dbo].[int_encounter] AS [enc]
           ON [enc].[attend_hcp_id] = [hcp].[hcp_id]
           INNER JOIN
           [dbo].[int_encounter_map] AS [encMap]
           ON [enc].[encounter_id] = [encMap].[encounter_id]
    WHERE  [enc].[patient_id] = @patient_id
           AND [encMap].[seq_no] = 1
           AND [encMap].[status_cd] = N'C';
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetCommonOrderData]
AS
BEGIN
    SELECT TOP (1) [OrderNumber].[Value] AS [ORDER_ID],
                   [ig].[send_app] AS [SENDING_APPLICATION],
                   [OrderStatus].[Value] AS [ORDER_STATUS],
                   CAST (NULL AS DATETIME) AS [ORDER_DATE_TIME]
    FROM   [dbo].[int_gateway] AS [ig] CROSS JOIN (SELECT [as].[Value]
                                                   FROM   [dbo].[ApplicationSettings] AS [as]
                                                   WHERE  [as].[Key] = 'DefaultFillerOrderStatus') AS [OrderStatus] CROSS JOIN (SELECT [as].[Value]
                                                                                                                                FROM   [dbo].[ApplicationSettings] AS [as]
                                                                                                                                WHERE  [as].[Key] = 'DefaultFillerOrderNumber') AS [OrderNumber];
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetInboundMessages]
AS
BEGIN
    SELECT [HL7Msg].[MessageNo],
           [HL7Msg].[MessageType],
           [HL7Msg].[MessageTypeEventCode],
           [HL7Msg].[MessageControlId],
           [HL7Msg].[MessageHeaderDate],
           [HL7Msg].[MessageVersion],
           [Map].[mrn_xid] AS [PatientMrn],
           [Map].[mrn_xid2] AS [AccountNumber],
           [Pat].[patient_id] AS [PatientId],
           [Visit].[account_id] AS [AccountId],
           [Pat].[dob] AS [DateOfBirth],
           [Pat].[gender_cid] AS [GenderId],
           [MSCodeGender].[code] AS [PatientGender],
           [PER].[first_nm] AS [FirstName],
           [PER].[last_nm] AS [LastName],
           [PER].[middle_nm] AS [MiddleName],
           [Visit].[admit_dt] AS [PatientAdmitedDate],
           [ORG].[organization_cd] AS [Unit],
           [Visit].[vip_sw] AS [Vip],
           [Visit].[rm] AS [Room],
           [Visit].[bed] AS [Bed],
           [Visit].[patient_class_cid] AS [PatientClassId],
           [MSCodePatClass].[code] AS [PatientClass],
           [VisitMap].[encounter_xid],
           [Visit].[discharge_dt] AS [DischargeDateTime]
    FROM   [dbo].[HL7InboundMessage] AS [HL7Msg]
           INNER JOIN
           [dbo].[HL7PatientLink] AS [HL7Link]
           ON [HL7Link].[MessageNo] = [HL7Msg].[MessageNo]
           INNER JOIN
           [dbo].[int_mrn_map] AS [Map]
           ON [Map].[mrn_xid] = [HL7Link].[PatientMrn]
           INNER JOIN
           [dbo].[int_patient] AS [Pat]
           ON [Pat].[patient_id] = [Map].[patient_id]
           INNER JOIN
           [dbo].[int_person] AS [PER]
           ON [PER].[person_id] = [Pat].[patient_id]
           INNER JOIN
           [dbo].[int_encounter] AS [Visit]
           ON [Visit].[patient_id] = [Map].[patient_id]
           INNER JOIN
           [dbo].[int_encounter_map] AS [VisitMap]
           ON [VisitMap].[encounter_id] = [Visit].[encounter_id]
           INNER JOIN
           [dbo].[int_organization] AS [ORG]
           ON [ORG].[organization_id] = [Visit].[unit_org_id]
           LEFT OUTER JOIN
           [dbo].[int_misc_code] AS [MSCodeGender]
           ON [MSCodeGender].[code_id] = [Pat].[gender_cid]
              AND [MSCodeGender].[category_cd] = 'SEX'
              AND [MSCodeGender].[method_cd] = N'HL7'
           LEFT OUTER JOIN
           [dbo].[int_misc_code] AS [MSCodePatClass]
           ON [MSCodePatClass].[code_id] = [Visit].[patient_class_cid]
              AND [MSCodePatClass].[category_cd] = 'PCLS'
              AND [MSCodePatClass].[method_cd] = N'HL7';
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetLegacyGdsCodes]
AS
BEGIN
    SELECT [code_id] AS [CodeId],
           [code] AS [Gds_Code],
           [short_dsc] AS [Gds_Description],
           [int_keystone_cd] AS [Gds_UoM]
    FROM   [dbo].[int_misc_code];
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetLiveVitalsAndPatientDataByQuery]
@QRYItem NVARCHAR (80), @type INT=-1
AS
BEGIN
    DECLARE @patient_id AS UNIQUEIDENTIFIER;
    SET @patient_id = [dbo].[fn_HL7_GetPatientIdFromQueryItemType](@QRYItem, @type);
    SELECT DISTINCT [Pat].[dob] AS [DateOfBirth],
                    [Pat].[gender_cid] AS [GenderCd],
                    [Pat].[death_dt] AS [DeathDate],
                    [person].[first_nm] AS [FirstName],
                    [person].[middle_nm] AS [MiddleName],
                    [person].[last_nm] AS [LastName],
                    [int_mrn_map].[mrn_xid2] AS [AccountNumber],
                    [int_mrn_map].[mrn_xid] AS [MRN],
                    [int_mrn_map].[patient_id] AS [patient_id],
                    [int_patient_monitor].[monitor_id] AS [DeviceId]
    FROM   [dbo].[int_patient] AS [Pat]
           INNER JOIN
           [dbo].[int_person] AS [person]
           ON [Pat].[patient_id] = [person].[person_id]
              AND [Pat].[patient_id] = @patient_id
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [Pat].[patient_id] = [int_mrn_map].[patient_id]
           INNER JOIN
           [dbo].[int_patient_monitor]
           ON [Pat].[patient_id] = [int_patient_monitor].[patient_id]
    WHERE  [int_mrn_map].[merge_cd] = 'C'
    UNION ALL
    SELECT NULL AS [DateOfBirth],
           NULL AS [GenderCd],
           NULL AS [DeathDate],
           [FIRST_NAME] AS [FirstName],
           [MIDDLE_NAME] AS [MiddleName],
           [LAST_NAME] AS [LastName],
           [ACCOUNT_ID] AS [AccountNumber],
           [MRN_ID] AS [MRN],
           [v_PatientSessions].[patient_id],
           [DeviceId]
    FROM   [dbo].[v_PatientSessions]
    WHERE  [patient_id] = @patient_id
           AND [v_PatientSessions].[STATUS] = 'A';
    SELECT TOP 1 [OrderNumber].[Value] AS [ORDER_ID],
                 [send_app] AS [SENDING_APPLICATION],
                 CAST ([OrderStatus].[Value] AS INT) AS [ORDER_STATUS],
                 CAST (NULL AS DATETIME) AS [ORDER_DATE_TIME],
                 @patient_id AS [patient_id]
    FROM   [dbo].[int_gateway] CROSS JOIN (SELECT [Value]
                                           FROM   [dbo].[ApplicationSettings]
                                           WHERE  [Key] = 'DefaultFillerOrderStatus') AS [OrderStatus] CROSS JOIN (SELECT [Value]
                                                                                                                   FROM   [dbo].[ApplicationSettings]
                                                                                                                   WHERE  [Key] = 'DefaultFillerOrderNumber') AS [OrderNumber];
    SELECT DISTINCT [OrderNumber].[Value] AS [ORDER_ID],
                    [send_app] AS [SENDING_APPLICATION],
                    CAST (NULL AS DATETIME) AS [ORDER_DATE_TIME]
    FROM   [dbo].[int_gateway] CROSS JOIN (SELECT [Value]
                                           FROM   [dbo].[ApplicationSettings]
                                           WHERE  [Key] = 'DefaultFillerOrderNumber') AS [OrderNumber];
    SELECT   [enc].[patient_type_cid] AS [PatientType],
             [enc].[med_svc_cid] AS [HospService],
             [enc].[patient_class_cid] AS [PatientClass],
             [enc].[ambul_status_cid] AS [AmbulatorySts],
             [enc].[vip_sw] AS [VipIndic],
             [enc].[discharge_dispo_cid] AS [DischDisposition],
             [enc].[admit_dt] AS [AdmitDate],
             [enc].[discharge_dt] AS [DischargeDt],
             [encmap].[encounter_xid] AS [VisitNumber],
             [enc].[patient_id] AS [patient_id],
             [encmap].[seq_no] AS [SeqNo],
             [monitor].[monitor_name] AS [NodeName],
             [monitor].[node_id] AS [NodeId],
             [monitor].[room] AS [Room],
             [monitor].[bed_cd] AS [Bed],
             [organization].[organization_cd] AS [UnitName],
             [patMon].[monitor_id] AS [DeviceId]
    FROM     [dbo].[int_encounter] AS [enc]
             INNER JOIN
             [dbo].[int_encounter_map] AS [encmap]
             ON [enc].[encounter_id] = [encmap].[encounter_id]
             INNER JOIN
             [dbo].[int_patient_monitor] AS [patMon]
             ON [patMon].[encounter_id] = [enc].[encounter_id]
                AND [patMon].[active_sw] = 1
             INNER JOIN
             [dbo].[int_monitor] AS [monitor]
             ON [patMon].[monitor_id] = [monitor].[monitor_id]
             INNER JOIN
             [dbo].[int_organization] AS [organization]
             ON [organization].[organization_id] = [monitor].[unit_org_id]
    WHERE    [patMon].[patient_id] = @patient_id
             AND [enc].[discharge_dt] IS NULL
    UNION ALL
    SELECT   DISTINCT CAST (NULL AS INT) AS [PatientType],
                      CAST (NULL AS INT) AS [HospService],
                      CAST (NULL AS INT) AS [PatientClass],
                      CAST (NULL AS INT) AS [AmbulatorySts],
                      CAST (NULL AS NCHAR (2)) AS [VipIndic],
                      CAST (NULL AS INT) AS [DischDisposition],
                      [dbo].[fnUtcDateTimeToLocalTime]([v_PatientSessions].[ADMIT_TIME_UTC]) AS [AdmitDate],
                      [dbo].[fnUtcDateTimeToLocalTime]([v_PatientSessions].[DISCHARGED_TIME_UTC]) AS [DischargeDt],
                      CAST (NULL AS NVARCHAR (40)) AS [VisitNumber],
                      [v_PatientSessions].[patient_id] AS [patient_id],
                      CAST (NULL AS INT) AS [SeqNo],
                      [v_PatientSessions].[MONITOR_NAME] AS [NodeName],
                      CAST (NULL AS NVARCHAR (15)) AS [NodeId],
                      [v_PatientSessions].[ROOM] AS [Room],
                      [v_PatientSessions].[BED] AS [Bed],
                      [v_PatientSessions].[UNIT_NAME] AS [UnitName],
                      [v_PatientSessions].[DeviceId] AS [DeviceId]
    FROM     [dbo].[v_PatientSessions]
    WHERE    [patient_id] = @patient_id
             AND [v_PatientSessions].[DISCHARGED_TIME_UTC] IS NULL
    ORDER BY [AdmitDate] DESC;
    SELECT   DISTINCT [vl].[patient_id] AS [PATID],
                      [vl].[monitor_id] AS [MONITORID],
                      [vl].[collect_dt] AS [COLLECTDATE],
                      [vl].[vital_value] AS [VITALS],
                      [vl].[vital_time] AS [VITALSTIME],
                      [imm].[organization_id] AS [ORGID],
                      [imm].[mrn_xid] AS [MRN]
    FROM     [dbo].[int_vital_live_temp] AS [vl]
             INNER JOIN
             [dbo].[int_mrn_map] AS [imm]
             ON [vl].[patient_id] = [imm].[patient_id]
             INNER JOIN
             [dbo].[int_patient_monitor] AS [pm]
             ON [vl].[patient_id] = [pm].[patient_id]
                AND [vl].[monitor_id] = [pm].[monitor_id]
    WHERE    [vl].[patient_id] = @patient_id
             AND [merge_cd] = 'C'
             AND [vl].[createdDT] = (SELECT MAX([createdDT])
                                     FROM   [dbo].[int_vital_live_temp] AS [VL_SUBTAB]
                                     WHERE  [VL_SUBTAB].[monitor_id] = [vl].[monitor_id]
                                            AND [VL_SUBTAB].[patient_id] = [vl].[patient_id]
                                            AND [createdDT] > (GETDATE() - 0.002))
    ORDER BY [vl].[patient_id];
    SELECT [VitalsAll].[CodeId],
           [VitalsAll].[GdsCode] AS [Code],
           [VitalsAll].[Description] AS [Descr],
           [VitalsAll].[Units],
           [VitalsAll].[Value] AS [ResultValue],
           N'' AS [ValueTypeCd],
           NULL AS [ResultStatus],
           NULL AS [Probability],
           NULL AS [ReferenceRange],
           NULL AS [AbnormalNatureCd],
           NULL AS [AbnormalCd],
           [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) AS [ResultTime],
           [PatientId] AS [patient_id]
    FROM   (SELECT ROW_NUMBER() OVER (PARTITION BY [PatientId], [GdsCode] ORDER BY [TimestampUTC] DESC) AS [RowNumber],
                   [ld].[FeedTypeId],
                   [ld].[TopicInstanceId],
                   [ld].[Name],
                   [ld].[Value],
                   [GdsCode],
                   [gcm].[CodeId],
                   [Units],
                   [TimestampUTC],
                   [PatientId],
                   [Description]
            FROM   [dbo].[LiveData] AS [ld]
                   INNER JOIN
                   [dbo].[TopicSessions]
                   ON [TopicSessions].[TopicInstanceId] = [ld].[TopicInstanceId]
                      AND [TopicSessions].[EndTimeUTC] IS NULL
                   INNER JOIN
                   [dbo].[GdsCodeMap] AS [gcm]
                   ON [gcm].[FeedTypeId] = [ld].[FeedTypeId]
                      AND [gcm].[Name] = [ld].[Name]
                   INNER JOIN
                   [dbo].[v_PatientTopicSessions]
                   ON [TopicSessions].[Id] = [v_PatientTopicSessions].[TopicSessionId]
            WHERE  [PatientId] = @patient_id) AS [VitalsAll]
    WHERE  [VitalsAll].[RowNumber] = 1
           AND [Units] IS NOT NULL;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetLiveVitalsAndPatientDataForOru]
AS
BEGIN
    DECLARE @SelectedPatients TABLE (
        [PatientId] UNIQUEIDENTIFIER);
    DECLARE @LastRunDateTime AS DATETIME;
    SELECT @LastRunDateTime = DATEADD(s, -CAST ([keyvalue] AS INT), GETDATE())
    FROM   [dbo].[int_cfg_values]
    WHERE  [keyname] = 'vitalsRefreshInterval';
    INSERT INTO @SelectedPatients ([PatientId])
    (SELECT [MAP].[patient_id] AS [PATIENTID]
     FROM   [dbo].[int_mrn_map] AS [MAP]
            INNER JOIN
            [dbo].[int_patient_monitor] AS [PATMON]
            ON [PATMON].[patient_id] = [MAP].[patient_id]
            INNER JOIN
            [dbo].[int_monitor] AS [MONITOR]
            ON [MONITOR].[monitor_id] = [PATMON].[monitor_id]
            INNER JOIN
            [dbo].[int_product_access] AS [ACCESS]
            ON [ACCESS].[organization_id] = [MONITOR].[unit_org_id]
            INNER JOIN
            [dbo].[int_organization] AS [ORG]
            ON [ORG].[organization_id] = [MONITOR].[unit_org_id]
               AND [outbound_interval] > 0
            INNER JOIN
            [dbo].[int_encounter] AS [ENC]
            ON [PATMON].[encounter_id] = [ENC].[encounter_id]
     WHERE  [merge_cd] = 'C'
            AND [ACCESS].[product_cd] = 'outHL7'
            AND [ORG].[category_cd] = 'D'
            AND ([ENC].[discharge_dt] IS NULL
                 OR [ENC].[mod_dt] > @LastRunDateTime)
     UNION
     SELECT [DLPAT].[patient_id] AS [PATIENTID]
     FROM   [dbo].[v_PatientSessions] AS [DLPAT]
            INNER JOIN
            [dbo].[int_product_access] AS [Access]
            ON [Access].[organization_id] = [DLPAT].[UNIT_ID]
            INNER JOIN
            [dbo].[int_organization] AS [ORG]
            ON [ORG].[organization_id] = [DLPAT].[UNIT_ID]
               AND [outbound_interval] > 0
     WHERE  [DLPAT].[STATUS] = 'A'
            AND [Access].[product_cd] = 'outHL7'
            AND [ORG].[category_cd] = 'D');
    DECLARE @FilterUV AS BIT;
    SELECT @FilterUV = CASE [keyvalue] WHEN 'true' THEN 1 ELSE 0 END
    FROM   [dbo].[int_cfg_values]
    WHERE  [keyname] = 'DoNotSendUV';
    SELECT [Pat].[dob] AS [DateOfBirth],
           [Pat].[gender_cid] AS [GenderCd],
           [Pat].[death_dt] AS [DeathDate],
           [person].[first_nm] AS [FirstName],
           [person].[middle_nm] AS [MiddleName],
           [person].[last_nm] AS [LastName],
           [imm].[mrn_xid2] AS [AccountNumber],
           [imm].[mrn_xid] AS [MRN],
           [imm].[patient_id] AS [patient_id]
    FROM   [dbo].[int_patient] AS [Pat]
           INNER JOIN
           [dbo].[int_person] AS [person]
           ON [Pat].[patient_id] = [person].[person_id]
              AND [Pat].[patient_id] IN (SELECT [PatientId]
                                         FROM   @SelectedPatients)
           INNER JOIN
           [dbo].[int_mrn_map] AS [imm]
           ON [Pat].[patient_id] = [imm].[patient_id]
    WHERE  ([imm].[merge_cd] = 'C')
           AND ((@FilterUV = 1
                 AND [mrn_xid] NOT LIKE N'UV_%')
                OR (@FilterUV = 0));
    SELECT [OrderNumber].[Value] AS [ORDER_ID],
           CAST ([OrderStatus].[Value] AS INT) AS [ORDER_STATUS],
           CAST (NULL AS DATETIME) AS [ORDER_DATE_TIME],
           [Patients].[PatientId] AS [patient_id]
    FROM   (SELECT [PatientId]
            FROM   @SelectedPatients) AS [Patients] CROSS JOIN (SELECT [Value]
                                                                FROM   [dbo].[ApplicationSettings]
                                                                WHERE  [Key] = 'DefaultFillerOrderStatus') AS [OrderStatus] CROSS JOIN (SELECT [Value]
                                                                                                                                        FROM   [dbo].[ApplicationSettings]
                                                                                                                                        WHERE  [Key] = 'DefaultFillerOrderNumber') AS [OrderNumber];
    SELECT   DISTINCT [enc].[patient_type_cid] AS [PatientType],
                      [enc].[med_svc_cid] AS [HospService],
                      [enc].[patient_class_cid] AS [PatientClass],
                      [enc].[ambul_status_cid] AS [AmbulatorySts],
                      [enc].[vip_sw] AS [VipIndic],
                      [enc].[discharge_dispo_cid] AS [DischDisposition],
                      [enc].[admit_dt] AS [AdmitDate],
                      [enc].[discharge_dt] AS [DischargeDt],
                      [encmap].[encounter_xid] AS [VisitNumber],
                      [enc].[patient_id] AS [patient_id],
                      [encmap].[seq_no] AS [SeqNo],
                      [monitor].[monitor_name] AS [NodeName],
                      [monitor].[node_id] AS [NodeId],
                      [monitor].[room] AS [Room],
                      [monitor].[bed_cd] AS [Bed],
                      [organization].[organization_cd] AS [UnitName],
                      [monitor].[monitor_id] AS [DeviceId]
    FROM     [dbo].[int_encounter] AS [enc]
             INNER JOIN
             [dbo].[int_encounter_map] AS [encmap]
             ON [enc].[encounter_id] = [encmap].[encounter_id]
             INNER JOIN
             [dbo].[int_patient_monitor] AS [patMon]
             ON [patMon].[encounter_id] = [enc].[encounter_id]
                AND (([patMon].[active_sw] = 1)
                     OR ([enc].[mod_dt] > @LastRunDateTime))
             INNER JOIN
             [dbo].[int_monitor] AS [monitor]
             ON [patMon].[monitor_id] = [monitor].[monitor_id]
             INNER JOIN
             [dbo].[int_organization] AS [organization]
             ON [organization].[organization_id] = [monitor].[unit_org_id]
    WHERE    [patMon].[patient_id] IN (SELECT [PatientId]
                                       FROM   @SelectedPatients)
    UNION ALL
    SELECT   DISTINCT CAST (NULL AS INT) AS [PatientType],
                      CAST (NULL AS INT) AS [HospService],
                      CAST (NULL AS INT) AS [PatientClass],
                      CAST (NULL AS INT) AS [AmbulatorySts],
                      CAST (NULL AS NCHAR (2)) AS [VipIndic],
                      CAST (NULL AS INT) AS [DischDisposition],
                      [dbo].[fnUtcDateTimeToLocalTime]([v_PatientSessions].[ADMIT_TIME_UTC]) AS [AdmitDate],
                      [dbo].[fnUtcDateTimeToLocalTime]([v_PatientSessions].[DISCHARGED_TIME_UTC]) AS [DischargeDt],
                      CAST (NULL AS NVARCHAR (40)) AS [VisitNumber],
                      [v_PatientSessions].[patient_id] AS [patient_id],
                      CAST (NULL AS INT) AS [SeqNo],
                      [v_PatientSessions].[MONITOR_NAME] AS [NodeName],
                      CAST (NULL AS NVARCHAR (15)) AS [NodeId],
                      [v_PatientSessions].[ROOM] AS [Room],
                      [v_PatientSessions].[BED] AS [Bed],
                      [v_PatientSessions].[UNIT_NAME] AS [UnitName],
                      [v_PatientSessions].[DeviceId] AS [DeviceId]
    FROM     [dbo].[v_PatientSessions]
    WHERE    [patient_id] IN (SELECT [PatientId]
                              FROM   @SelectedPatients)
             AND [STATUS] = 'A'
    ORDER BY [AdmitDate] DESC;
    SELECT DISTINCT [VL].[patient_id] AS [PATID],
                    [VL].[monitor_id] AS [MONITORID],
                    [VL].[collect_dt] AS [COLLECTDATE],
                    [VL].[vital_value] AS [VITALS],
                    [VL].[vital_time] AS [VITALSTIME],
                    [MRNMAP].[organization_id] AS [ORGID],
                    [MRNMAP].[mrn_xid] AS [MRN]
    FROM   [dbo].[int_vital_live_temp] AS [VL]
           INNER JOIN
           [dbo].[int_mrn_map] AS [MRNMAP]
           ON [VL].[patient_id] = [MRNMAP].[patient_id]
           INNER JOIN
           [dbo].[int_patient_monitor] AS [PM]
           ON [VL].[patient_id] = [PM].[patient_id]
              AND [VL].[monitor_id] = [PM].[monitor_id]
    WHERE  [VL].[patient_id] IN (SELECT [PatientId]
                                 FROM   @SelectedPatients)
           AND [merge_cd] = 'C'
           AND [VL].[collect_dt] = (SELECT MAX([collect_dt])
                                    FROM   [dbo].[int_vital_live_temp] AS [VL_SUBTAB]
                                    WHERE  [VL_SUBTAB].[monitor_id] = [VL].[monitor_id]
                                           AND [VL_SUBTAB].[patient_id] = [VL].[patient_id]
                                           AND [createdDT] > (GETDATE() - 0.002));
    SELECT [VitalsAll].[CodeId],
           [VitalsAll].[GdsCode] AS [Code],
           [VitalsAll].[Description] AS [Descr],
           [VitalsAll].[Units],
           [VitalsAll].[Value] AS [ResultValue],
           '' AS [ValueTypeCd],
           NULL AS [ResultStatus],
           NULL AS [Probability],
           NULL AS [ReferenceRange],
           NULL AS [AbnormalNatureCd],
           NULL AS [AbnormalCd],
           [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) AS [ResultTime],
           [PatientId] AS [patient_id],
           [DeviceSessions].[DeviceId]
    FROM   (SELECT ROW_NUMBER() OVER (PARTITION BY [PatientId], [GdsCode] ORDER BY [TimestampUTC] DESC) AS [RowNumber],
                   [ld].[FeedTypeId],
                   [ld].[TopicInstanceId],
                   [ld].[Name],
                   [ld].[Value],
                   [GdsCode],
                   [GdsCodeMap].[CodeId],
                   [Units],
                   [TimestampUTC],
                   [PatientId],
                   [DeviceSessionId],
                   [Description]
            FROM   [dbo].[LiveData] AS [ld]
                   INNER JOIN
                   [dbo].[TopicSessions]
                   ON [TopicSessions].[TopicInstanceId] = [ld].[TopicInstanceId]
                      AND [TopicSessions].[EndTimeUTC] IS NULL
                   INNER JOIN
                   [dbo].[GdsCodeMap]
                   ON [GdsCodeMap].[FeedTypeId] = [ld].[FeedTypeId]
                      AND [GdsCodeMap].[Name] = [ld].[Name]
                   INNER JOIN
                   [dbo].[v_PatientTopicSessions]
                   ON [TopicSessions].[Id] = [v_PatientTopicSessions].[TopicSessionId]
            WHERE  [PatientId] IN (SELECT [PatientId]
                                   FROM   @SelectedPatients)) AS [VitalsAll]
           INNER JOIN
           [dbo].[DeviceSessions]
           ON [DeviceSessions].[Id] = [VitalsAll].[DeviceSessionId]
    WHERE  [VitalsAll].[RowNumber] = 1
           AND [Units] IS NOT NULL;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetObservationRequestData]
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN
        SELECT DISTINCT [OrderNumber].[Value] AS [ORDER_ID],
                        [ig].[send_app] AS [SENDING_APPLICATION],
                        CAST (NULL AS DATETIME) AS [ORDER_DATE_TIME]
        FROM   [dbo].[int_gateway] AS [ig] CROSS JOIN (SELECT [as].[Value]
                                                       FROM   [dbo].[ApplicationSettings] AS [as]
                                                       WHERE  [as].[Key] = 'DefaultFillerOrderNumber') AS [OrderNumber];
    END
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetObservationsByPatientId]
@patient_id UNIQUEIDENTIFIER, @StartTime DATETIME, @EndTime DATETIME, @StartTimeUtc DATETIME, @EndTimeUtc DATETIME
AS
BEGIN
    SET NOCOUNT ON;
    SELECT   DISTINCT [Code].[code_id] AS [CodeId],
                      [Code].[code] AS [Code],
                      [Code].[short_dsc] AS [Descr],
                      [Code].[int_keystone_cd] AS [Units],
                      [Result].[result_value] AS [ResultValue],
                      [Result].[value_type_cd] AS [ValueTypeCd],
                      [Result].[status_cid] AS [ResultStatus],
                      [Result].[probability] AS [Probability],
                      [Result].[reference_range_id] AS [ReferenceRange],
                      [Result].[abnormal_nature_cd] AS [AbnormalNatureCd],
                      [Result].[abnormal_cd] AS [AbnormalCd],
                      [Result].[result_dt] AS [ResultTime]
    FROM     [dbo].[int_result] AS [Result]
             INNER JOIN
             [dbo].[int_misc_code] AS [Code]
             ON [Result].[test_cid] = [Code].[code_id]
    WHERE    ([Result].[patient_id] = @patient_id)
             AND ([Result].[result_dt] BETWEEN @StartTime AND @EndTime)
             AND [Result].[result_value] IS NOT NULL
    UNION ALL
    SELECT   [GdsCodeMap].[CodeId],
             [GdsCodeMap].[GdsCode] AS [Code],
             [GdsCodeMap].[Description] AS [Descr],
             [GdsCodeMap].[Units],
             [VitalsData].[Value] AS [ResultValue],
             N'' AS [ValueTypeCd],
             NULL AS [ResultStatus],
             NULL AS [Probability],
             NULL AS [ReferenceRange],
             NULL AS [AbnormalNatureCd],
             NULL AS [AbnormalCd],
             [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) AS [ResultTime]
    FROM     [dbo].[VitalsData]
             INNER JOIN
             [dbo].[GdsCodeMap]
             ON [GdsCodeMap].[FeedTypeId] = [VitalsData].[FeedTypeId]
                AND [GdsCodeMap].[Name] = [VitalsData].[Name]
             INNER JOIN
             [dbo].[v_PatientTopicSessions]
             ON [VitalsData].[TopicSessionId] = [v_PatientTopicSessions].[TopicSessionId]
    WHERE    [PatientId] = @patient_id
             AND [TimestampUTC] BETWEEN @StartTimeUtc AND @EndTimeUtc
    ORDER BY [Code] ASC, [ResultTime] ASC;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetPatientVisitInformation]
@patient_id UNIQUEIDENTIFIER, @monitor_id [dbo].[MonitorIdTable] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    IF ((SELECT COUNT(*)
         FROM   @monitor_id) > 0
        AND @patient_id IS NOT NULL)
        BEGIN
            SELECT   TOP 1 [enc].[patient_type_cid] AS [PatientType],
                           [enc].[med_svc_cid] AS [HospService],
                           [enc].[patient_class_cid] AS [PatientClass],
                           [enc].[ambul_status_cid] AS [AmbulatorySts],
                           [enc].[vip_sw] AS [VipIndic],
                           [enc].[discharge_dispo_cid] AS [DischDisposition],
                           [enc].[admit_dt] AS [AdmitDate],
                           [enc].[discharge_dt] AS [DischargeDt],
                           [encmap].[encounter_xid] AS [VisitNumber],
                           [encmap].[seq_no] AS [SeqNo],
                           [monitor].[monitor_name] AS [NodeName],
                           [monitor].[node_id] AS [NodeId],
                           [monitor].[room] AS [Room],
                           [monitor].[bed_cd] AS [Bed],
                           [organization].[organization_cd] AS [UnitName]
            FROM     [dbo].[int_encounter] AS [enc]
                     INNER JOIN
                     [dbo].[int_encounter_map] AS [encmap]
                     ON [enc].[encounter_id] = [encmap].[encounter_id]
                     INNER JOIN
                     [dbo].[int_patient_monitor] AS [patMon]
                     ON [patMon].[encounter_id] = [enc].[encounter_id]
                        AND [patMon].[active_sw] = 1
                     INNER JOIN
                     [dbo].[int_monitor] AS [monitor]
                     ON [patMon].[monitor_id] = [monitor].[monitor_id]
                     INNER JOIN
                     [dbo].[int_organization] AS [organization]
                     ON [organization].[organization_id] = [monitor].[unit_org_id]
            WHERE    [patMon].[patient_id] = @patient_id
                     AND [monitor].[monitor_id] IN (SELECT [Monitor_Id]
                                                    FROM   @monitor_id)
            UNION ALL
            SELECT   DISTINCT CAST (NULL AS INT) AS [PatientType],
                              CAST (NULL AS INT) AS [HospService],
                              CAST (NULL AS INT) AS [PatientClass],
                              CAST (NULL AS INT) AS [AmbulatorySts],
                              CAST (NULL AS NCHAR (2)) AS [VipIndic],
                              CAST (NULL AS INT) AS [DischDisposition],
                              [dbo].[fnUtcDateTimeToLocalTime]([v_PatientSessions].[ADMIT_TIME_UTC]) AS [AdmitDate],
                              [dbo].[fnUtcDateTimeToLocalTime]([v_PatientSessions].[DISCHARGED_TIME_UTC]) AS [DischargeDt],
                              CAST (NULL AS NVARCHAR (40)) AS [VisitNumber],
                              CAST (NULL AS INT) AS [SeqNo],
                              [v_PatientSessions].[MONITOR_NAME] AS [NodeName],
                              CAST (NULL AS NVARCHAR (15)) AS [NodeId],
                              [v_PatientSessions].[ROOM] AS [Room],
                              [v_PatientSessions].[BED] AS [Bed],
                              [v_PatientSessions].[UNIT_NAME] AS [UnitName]
            FROM     [dbo].[v_PatientSessions]
            WHERE    [patient_id] = @patient_id
                     AND [PATIENT_MONITOR_ID] IN (SELECT [Monitor_Id]
                                                  FROM   @monitor_id)
            ORDER BY [AdmitDate] DESC;
        END
    ELSE
        BEGIN
            SELECT   TOP (1) [enc].[patient_type_cid] AS [PatientType],
                             [enc].[med_svc_cid] AS [HospService],
                             [enc].[patient_class_cid] AS [PatientClass],
                             [enc].[ambul_status_cid] AS [AmbulatorySts],
                             [enc].[vip_sw] AS [VipIndic],
                             [enc].[discharge_dispo_cid] AS [DischDisposition],
                             [enc].[admit_dt] AS [AdmitDate],
                             [enc].[discharge_dt] AS [DischargeDt],
                             [encmap].[encounter_xid] AS [VisitNumber],
                             [encmap].[seq_no] AS [SeqNo],
                             [monitor].[monitor_name] AS [NodeName],
                             [monitor].[node_id] AS [NodeId],
                             [monitor].[room] AS [Room],
                             [monitor].[bed_cd] AS [Bed],
                             [organization].[organization_cd] AS [UnitName]
            FROM     [dbo].[int_encounter] AS [enc]
                     INNER JOIN
                     [dbo].[int_encounter_map] AS [encmap]
                     ON [enc].[encounter_id] = [encmap].[encounter_id]
                     INNER JOIN
                     [dbo].[int_patient_monitor] AS [patMon]
                     ON [patMon].[encounter_id] = [enc].[encounter_id]
                        AND [patMon].[active_sw] = 1
                     INNER JOIN
                     [dbo].[int_monitor] AS [monitor]
                     ON [patMon].[monitor_id] = [monitor].[monitor_id]
                     INNER JOIN
                     [dbo].[int_organization] AS [organization]
                     ON [organization].[organization_id] = [monitor].[unit_org_id]
            WHERE    [patMon].[patient_id] = @patient_id
            UNION ALL
            SELECT   DISTINCT CAST (NULL AS INT) AS [PatientType],
                              CAST (NULL AS INT) AS [HospService],
                              CAST (NULL AS INT) AS [PatientClass],
                              CAST (NULL AS INT) AS [AmbulatorySts],
                              CAST (NULL AS NCHAR (2)) AS [VipIndic],
                              CAST (NULL AS INT) AS [DischDisposition],
                              [dbo].[fnUtcDateTimeToLocalTime]([v_PatientSessions].[ADMIT_TIME_UTC]) AS [AdmitDate],
                              [dbo].[fnUtcDateTimeToLocalTime]([v_PatientSessions].[DISCHARGED_TIME_UTC]) AS [DischargeDt],
                              CAST (NULL AS NVARCHAR (40)) AS [VisitNumber],
                              CAST (NULL AS INT) AS [SeqNo],
                              [v_PatientSessions].[MONITOR_NAME] AS [NodeName],
                              CAST (NULL AS NVARCHAR (15)) AS [NodeId],
                              [v_PatientSessions].[ROOM] AS [Room],
                              [v_PatientSessions].[BED] AS [Bed],
                              [v_PatientSessions].[UNIT_NAME] AS [UnitName]
            FROM     [dbo].[v_PatientSessions]
            WHERE    [patient_id] = @patient_id
            ORDER BY [AdmitDate] DESC;
        END
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetPersonAndPatientDataByPatientID]
@PatientId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    SELECT [Pat].[dob] AS [DateOfBirth],
           [Pat].[gender_cid] AS [GenderCd],
           [Pat].[race_cid] AS [RaceCd],
           [Pat].[primary_language_cid] AS [PrimLangCode],
           [Pat].[marital_status_cid] AS [MaritalStatusCd],
           [Pat].[religion_cid] AS [ReligionCd],
           [Pat].[ssn] AS [SSN],
           [Pat].[driv_lic_no] AS [DLNo],
           [Pat].[driv_lic_state_code] AS [DLStateCd],
           [Pat].[ethnic_group_cid] AS [EthnicGrpCd],
           [Pat].[birth_place] AS [BirthPlace],
           [Pat].[birth_order] AS [BirthOrder],
           [Pat].[nationality_cid] AS [NationalityCode],
           [Pat].[citizenship_cid] AS [CitizenshipCode],
           [Pat].[veteran_status_cid] AS [VeteranStatusCode],
           [Pat].[death_dt] AS [DeathDate],
           [Pat].[organ_donor_sw] AS [OrganDonor],
           [Pat].[living_will_sw] AS [LivingWill],
           [person].[first_nm] AS [FirstName],
           [person].[middle_nm] AS [MiddleName],
           [person].[last_nm] AS [LastName],
           [person].[suffix] AS [Suffix],
           [person].[tel_no] AS [Telephone],
           [person].[line1_dsc] AS [Address1],
           [person].[line2_dsc] AS [Address2],
           [person].[line3_dsc] AS [Address3],
           [person].[city_nm] AS [City],
           [person].[state_code] AS [StateCode],
           [person].[zip_code] AS [Zip],
           [person].[country_cid] AS [CountryCode],
           [int_mrn_map].[mrn_xid2] AS [AccountNumber],
           [int_mrn_map].[mrn_xid] AS [MRN]
    FROM   [dbo].[int_patient] AS [Pat]
           INNER JOIN
           [dbo].[int_person] AS [person]
           ON [Pat].[patient_id] = [person].[person_id]
              AND [Pat].[patient_id] = @PatientId
           INNER JOIN
           [dbo].[int_mrn_map]
           ON [Pat].[patient_id] = [int_mrn_map].[patient_id]
    WHERE  ([int_mrn_map].[merge_cd] = 'C')
    UNION
    SELECT NULL AS [DateOfBirth],
           NULL AS [GenderCd],
           NULL AS [RaceCd],
           NULL AS [PrimLangCode],
           NULL AS [MaritalStatusCd],
           NULL AS [ReligionCd],
           NULL AS [SSN],
           NULL AS [DLNo],
           NULL AS [DLStateCd],
           NULL AS [EthnicGrpCd],
           NULL AS [BirthPlace],
           NULL AS [BirthOrder],
           NULL AS [NationalityCode],
           NULL AS [CitizenshipCode],
           NULL AS [VeteranStatusCode],
           NULL AS [DeathDate],
           NULL AS [OrganDonor],
           NULL AS [LivingWill],
           [FIRST_NAME] AS [FirstName],
           [MIDDLE_NAME] AS [MiddleName],
           [LAST_NAME] AS [LastName],
           NULL AS [Suffix],
           NULL AS [Telephone],
           NULL AS [Address1],
           NULL AS [Address2],
           NULL AS [Address3],
           NULL AS [City],
           NULL AS [StateCode],
           NULL AS [Zip],
           NULL AS [CountryCode],
           [ACCOUNT_ID] AS [AccountNumber],
           [MRN_ID] AS [MRN]
    FROM   [dbo].[v_PatientSessions]
    WHERE  [patient_id] = @PatientId;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetPV1SegmentDataFromADTMsg]
@patient_id2 UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    SELECT   TOP (1) [enc].[patient_type_cid] AS [PatientType],
                     [enc].[med_svc_cid] AS [HospService],
                     [enc].[patient_class_cid] AS [PatientClass],
                     [enc].[ambul_status_cid] AS [AmbulatorySts],
                     [enc].[vip_sw] AS [VipIndic],
                     [enc].[discharge_dispo_cid] AS [DischDisposition],
                     [enc].[admit_dt] AS [AdmitDate],
                     [enc].[discharge_dt] AS [DischargeDt],
                     [enc].[status_cd],
                     [int_encounter_map].[encounter_xid] AS [VisitNumber]
    FROM     [dbo].[int_encounter] AS [enc]
             INNER JOIN
             [dbo].[int_encounter_map]
             ON [enc].[encounter_id] = [int_encounter_map].[encounter_id]
    WHERE    [enc].[patient_id] = @patient_id2
             AND [enc].[status_cd] = N'C'
             AND [enc].[encounter_id] NOT IN (SELECT [encounter_id]
                                              FROM   [dbo].[int_patient_monitor]
                                              WHERE  [active_sw] = 1)
    ORDER BY [AdmitDate] DESC;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_GetUnitLicense]
@productcd VARCHAR (25), @categoryCd CHAR (1), @organizationId UNIQUEIDENTIFIER, @OrgCode NVARCHAR (20) OUTPUT
AS
BEGIN
    SET @OrgCode = (SELECT [ORG].[organization_cd]
                    FROM   [dbo].[int_organization] AS [ORG]
                           INNER JOIN
                           [dbo].[int_product_access] AS [PROACC]
                           ON [PROACC].[organization_id] = [ORG].[organization_id]
                    WHERE  [PROACC].[product_cd] = @productcd
                           AND [ORG].[category_cd] = @categoryCd
                           AND [ORG].[organization_id] = @organizationId);
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_InsertHL7Ack]
@msgControlId NCHAR (40), @msgStatus NCHAR (20), @clientIP NCHAR (60), @ackMsgControlId NCHAR (40), @ackSystem NCHAR (100), @ackOrganization NCHAR (100)
AS
BEGIN
    INSERT  INTO [dbo].[HL7_msg_ack] ([msg_control_id], [msg_status], [clientIP], [ack_msg_control_id], [ack_system], [ack_organization], [received_dt], [num_retries])
    VALUES                          (CAST (@msgControlId AS NCHAR (20)), CAST (@msgStatus AS NCHAR (10)), CAST (@clientIP AS NCHAR (30)), CAST (@ackMsgControlId AS NCHAR (20)), CAST (@ackSystem AS NCHAR (50)), CAST (@ackOrganization AS NVARCHAR (50)), GETDATE(), 0);
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_InsertHL7InboundMessage]
@msg_status NCHAR (2), @msh_msg_type NCHAR (6), @msh_event_cd NCHAR (6), @msh_organization NVARCHAR (72), @msh_system NVARCHAR (72), @msh_dt DATETIME, @msh_control_id NVARCHAR (72), @msh_version NVARCHAR (10), @HL7TextShort NVARCHAR (510)=NULL, @HL7TextLong NVARCHAR (MAX)=NULL, @msg_no NUMERIC (9) OUTPUT
AS
BEGIN
    IF (@HL7TextShort IS NOT NULL)
        BEGIN
            INSERT  INTO [dbo].[HL7_in_queue] ([msg_status], [queued_dt], [msh_msg_type], [msh_event_cd], [msh_organization], [msh_system], [msh_dt], [msh_control_id], [msh_version], [HL7_text_short])
            VALUES                           (CAST (@msg_status AS NCHAR (1)), GETDATE(), CAST (@msh_msg_type AS NCHAR (3)), CAST (@msh_event_cd AS NCHAR (3)), CAST (@msh_organization AS NVARCHAR (36)), CAST (@msh_system AS NVARCHAR (36)), @msh_dt, CAST (@msh_control_id AS NVARCHAR (36)), CAST (@msh_version AS NVARCHAR (5)), CAST (@HL7TextShort AS NVARCHAR (255)));
        END
    ELSE
        BEGIN
            INSERT  INTO [dbo].[HL7_in_queue] ([msg_status], [queued_dt], [msh_msg_type], [msh_event_cd], [msh_organization], [msh_system], [msh_dt], [msh_control_id], [msh_version], [HL7_text_long])
            VALUES                           (CAST (@msg_status AS NCHAR (1)), GETDATE(), CAST (@msh_msg_type AS NCHAR (3)), CAST (@msh_event_cd AS NCHAR (3)), CAST (@msh_organization AS NVARCHAR (36)), CAST (@msh_system AS NVARCHAR (36)), @msh_dt, CAST (@msh_control_id AS NVARCHAR (36)), CAST (@msh_version AS NVARCHAR (5)), @HL7TextLong);
        END
    SET @msg_no = SCOPE_IDENTITY();
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_InsertHL7OutMessage]
@msg_no CHAR (20), @msg_status NCHAR (20), @HL7_text_long NVARCHAR (MAX), @patient_id NVARCHAR (120), @msh_system NVARCHAR (100), @msh_organization NCHAR (100), @msh_event_cd NCHAR (20), @msh_msg_type NCHAR (20), @realQueryVitalDT DATETIME
AS
BEGIN
    INSERT  INTO [dbo].[HL7_out_queue] ([msg_no], [msg_status], [HL7_text_long], [patient_id], [msh_system], [msh_organization], [msh_event_cd], [msh_msg_type], [queued_dt])
    VALUES                            (@msg_no, CAST (@msg_status AS NCHAR (10)), @HL7_text_long, CAST (@patient_id AS NVARCHAR (60)), CAST (@msh_system AS NVARCHAR (50)), CAST (@msh_organization AS NVARCHAR (50)), CAST (@msh_event_cd AS NCHAR (10)), CAST (@msh_msg_type AS NCHAR (10)), @realQueryVitalDT);
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_InsertInboundFacility]
@SendingFacility NVARCHAR (180), @DynAddOrgs BIT, @FacilityId UNIQUEIDENTIFIER=NULL OUTPUT
AS
BEGIN
    BEGIN TRY
        SET @FacilityId = (SELECT [organization_id]
                           FROM   [dbo].[int_organization]
                           WHERE  [category_cd] = 'F'
                                  AND [organization_cd] = @SendingFacility);
        IF (@FacilityId IS NULL
            AND @DynAddOrgs = 1)
            BEGIN
                DECLARE @PrimaryOrganization AS UNIQUEIDENTIFIER, @orgId AS UNIQUEIDENTIFIER = NEWID();
                SET @PrimaryOrganization = (SELECT [organization_id]
                                            FROM   [dbo].[int_organization]
                                            WHERE  [category_cd] = 'O');
                EXECUTE [dbo].[usp_InsertOrganizationInformation] @organizationId = @orgId, @categoryCd = 'F', @parentOrganizationId = @PrimaryOrganization, @organizationCd = @SendingFacility, @organizationNm = @SendingFacility;
                SET @FacilityId = @orgId;
            END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage AS NVARCHAR (4000);
        DECLARE @ErrorSeverity AS INT;
        DECLARE @ErrorState AS INT;
        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_InsertInboundMessage]
@MessageNo INT OUTPUT, @MessageStatus NCHAR (1), @HL7Message NVARCHAR (MAX), @MessageSendingApplication NVARCHAR (180), @MessageSendingFacility NVARCHAR (180), @MessageType NCHAR (3), @MessageTypeEventCode NCHAR (3), @MessageControlId NVARCHAR (20), @MessageVersion NVARCHAR (60), @MessageHeaderDate DATETIME
AS
BEGIN
    INSERT  INTO [dbo].[HL7InboundMessage] ([MessageStatus], [HL7Message], [MessageSendingApplication], [MessageSendingFacility], [MessageType], [MessageTypeEventCode], [MessageControlId], [MessageVersion], [MessageHeaderDate], [MessageQueuedDate])
    VALUES                                (@MessageStatus, @HL7Message, @MessageSendingApplication, @MessageSendingFacility, @MessageType, @MessageTypeEventCode, @MessageControlId, @MessageVersion, @MessageHeaderDate, GETDATE());
    SET @MessageNo = SCOPE_IDENTITY();
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_InsertInboundSendingSystem]
@SendingSystem NVARCHAR (180), @DynAddSendingSys BIT, @OrganizationId UNIQUEIDENTIFIER, @SendingSysId UNIQUEIDENTIFIER=NULL OUTPUT
AS
BEGIN
    BEGIN TRY
        SET @SendingSysId = (SELECT [sys_id]
                             FROM   [dbo].[int_send_sys]
                             WHERE  [code] = @SendingSystem
                                    AND [organization_id] = @OrganizationId);
        IF (@SendingSysId IS NULL
            AND @DynAddSendingSys = 1)
            BEGIN
                DECLARE @SendSysId AS UNIQUEIDENTIFIER = NEWID();
                EXECUTE [dbo].[usp_InsertSendingSystemInformation] @SendSysId, @OrganizationId, @SendingSystem, NULL;
                SET @SendingSysId = @SendSysId;
            END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage AS NVARCHAR (4000);
        DECLARE @ErrorSeverity AS INT;
        DECLARE @ErrorState AS INT;
        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_QueryPatientDataAndResults]
@QRYItem NVARCHAR (80), @type INT=-1, @StartDateTimeUTC DATETIME, @EndDateTimeUTC DATETIME
AS
BEGIN
    DECLARE @monitor_id AS MonitorIdTable;
    DECLARE @patient_id AS UNIQUEIDENTIFIER = [dbo].[fn_HL7_GetPatientIdFromQueryItemType](@QRYItem, @type);
    DECLARE @StartTime AS DATETIME = [dbo].[fnUtcDateTimeToLocalTime](@StartDateTimeUTC);
    DECLARE @EndTime AS DATETIME = [dbo].[fnUtcDateTimeToLocalTime](@EndDateTimeUTC);
    EXECUTE [dbo].[usp_HL7_GetPersonAndPatientDataByPatientID] @patient_id;
    EXECUTE [dbo].[usp_HL7_GetCommonOrderData] ;
    EXECUTE [dbo].[usp_HL7_GetObservationRequestData] ;
    EXECUTE [dbo].[usp_HL7_GetObservationsByPatientId] @patient_id, @StartTime, @EndTime, @StartDateTimeUTC, @EndDateTimeUTC;
    INSERT INTO @monitor_id ([Monitor_Id])
    SELECT [PATMON].[monitor_id]
    FROM   [dbo].[int_patient_monitor] AS [PATMON]
    WHERE  [PATMON].[patient_id] = @patient_id
    UNION ALL
    SELECT DISTINCT [PATMON].[PATIENT_MONITOR_ID]
    FROM   [dbo].[v_PatientSessions] AS [PATMON]
    WHERE  [PATMON].[patient_id] = @patient_id;
    EXECUTE [dbo].[usp_HL7_GetPatientVisitInformation] @patient_id, @monitor_id;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_SaveADTMessage]
@MessageNumber INT, @DynAddOrgs BIT, @DynAddSendingSys BIT, @PatientTypeAccountNo BIT, @UniqueVisitNumber BIT, @DynamicallyAddNursingUnits BIT, @DynamicallyAddUSID BIT, @SendingSystem NVARCHAR (180), @SendingFacility NVARCHAR (180), @PatientMrn NVARCHAR (20), @PatientAccount NVARCHAR (20)=NULL, @PatientGivenName NVARCHAR (48)=NULL, @PatientFamilyName NVARCHAR (48)=NULL, @PatientMiddleName NVARCHAR (48)=NULL, @PatientDob DATETIME=NULL, @PatientSex NVARCHAR (1)=NULL, @PatientClass NVARCHAR (1), @PatientPointOfCare NVARCHAR (80), @PatientVisitNumber NVARCHAR (20), @PatientRoom NVARCHAR (80)=NULL, @PatientBed NVARCHAR (80)=NULL, @VIPIndicator NCHAR (2)=NULL, @AdmitDateTime DATETIME=NULL, @DischargeDateTime DATETIME=NULL
AS
BEGIN
    BEGIN TRY
        DECLARE @MessageControlId AS NVARCHAR (10);
        SET @MessageControlId = (SELECT [MessageControlId]
                                 FROM   [dbo].[HL7InboundMessage]
                                 WHERE  [MessageNo] = @MessageNumber);
        DECLARE @FacilityId AS UNIQUEIDENTIFIER, @SendingSysId AS UNIQUEIDENTIFIER;
        EXECUTE [dbo].[usp_HL7_InsertInboundFacility] @SendingFacility, @DynAddOrgs, @FacilityId OUTPUT;
        IF (@FacilityId IS NOT NULL)
            BEGIN
                EXECUTE [dbo].[usp_HL7_InsertInboundSendingSystem] @SendingSystem, @DynAddSendingSys, @FacilityId, @SendingSysId OUTPUT;
            END
        IF (@FacilityId IS NULL
            OR @SendingSysId IS NULL)
            BEGIN
                INSERT  INTO [dbo].[HL7PatientLink] ([MessageNo], [PatientMrn], [PatientVisitNumber], [PatientId])
                VALUES                             (@MessageNumber, @PatientMrn, @PatientVisitNumber, NULL);
                RAISERROR (N'Sending Application "%s" or Sending Facility "%s" is not present at the database for MessageControlId="%s".', 16, 1, @SendingSystem, @SendingFacility, @MessageControlId);
                RETURN;
            END
        DECLARE @UnitId AS UNIQUEIDENTIFIER;
        SET @UnitId = (SELECT [organization_id]
                       FROM   [dbo].[int_organization]
                       WHERE  [category_cd] = 'D'
                              AND [organization_cd] = @PatientPointOfCare
                              AND [parent_organization_id] = @FacilityId);
        IF (@UnitId IS NULL)
            BEGIN
                IF (@DynamicallyAddNursingUnits = 1)
                    BEGIN
                        SET @UnitId = NEWID();
                        EXECUTE [dbo].[usp_InsertOrganizationInformation] @organizationId = @UnitId, @categoryCd = 'D', @autoCollectInterval = 1, @parentOrganizationId = @FacilityId, @organizationCd = @PatientPointOfCare, @organizationNm = @PatientPointOfCare;
                    END
                ELSE
                    BEGIN
                        INSERT  INTO [dbo].[HL7PatientLink] ([MessageNo], [PatientMrn], [PatientVisitNumber], [PatientId])
                        VALUES                             (@MessageNumber, @PatientMrn, @PatientVisitNumber, NULL);
                        RAISERROR (N'Facility for "%s" unit is not present at the database or DynAddNursingUnits configuration is set to false for MessageControlId="%s".', 16, 1, @PatientPointOfCare, @MessageControlId);
                        RETURN;
                    END
            END
        DECLARE @UnitCode AS NVARCHAR (20);
        EXECUTE [dbo].[usp_HL7_GetUnitLicense] 'inHL7', 'D', @UnitId, @UnitCode OUTPUT;
        IF (@UnitCode IS NULL)
            BEGIN
                INSERT  INTO [dbo].[HL7PatientLink] ([MessageNo], [PatientMrn], [PatientVisitNumber], [PatientId])
                VALUES                             (@MessageNumber, @PatientMrn, @PatientVisitNumber, NULL);
                RAISERROR (N'Unit "%s" is not Licensed for MessageControlId="%s".', 16, 1, @PatientPointOfCare, @MessageControlId);
                RETURN;
            END
    END TRY
    BEGIN CATCH
        UPDATE [dbo].[HL7InboundMessage]
        SET    [MessageStatus] = N'E'
        WHERE  [MessageNo] = @MessageNumber;
        DECLARE @ErrorMessage AS NVARCHAR (4000);
        DECLARE @ErrorSeverity AS INT;
        DECLARE @ErrorState AS INT;
        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
        RETURN;
    END CATCH
    BEGIN TRY
        BEGIN TRANSACTION;
        DECLARE @PatientGenderCodeId AS INT;
        IF (@PatientSex IS NOT NULL)
            BEGIN
                EXECUTE [dbo].[usp_GetCodeByCategoryCode] @categoryCd = 'SEX', @MethodCd = N'HL7', @Code = @PatientSex, @OrganizationId = @FacilityId, @SendingSysId = @SendingSysId, @CodeId = @PatientGenderCodeId OUTPUT;
                IF (@PatientGenderCodeId IS NULL
                    AND @DynamicallyAddUSID = 1)
                    BEGIN
                        SET @PatientGenderCodeId = (SELECT CAST (RAND() * 10000 AS INT) AS [RandomNumber]);
                        WHILE ((SELECT [code_id]
                                FROM   [dbo].[int_misc_code]
                                WHERE  [code_id] = @PatientGenderCodeId) IS NOT NULL)
                            BEGIN
                                SET @PatientGenderCodeId = @PatientGenderCodeId + 1;
                            END
                        EXECUTE [dbo].[usp_InsertMiscCodeDetails] @PatientGenderCodeId, @FacilityId, @SendingSysId, 'SEX', N'HL7', @PatientSex;
                    END
            END
        DECLARE @PatientClassCId AS INT;
        EXECUTE [dbo].[usp_GetCodeByCategoryCode] @categoryCd = 'PCLS', @MethodCd = 'HL7', @Code = @PatientClass, @OrganizationId = @FacilityId, @SendingSysId = @SendingSysId, @CodeId = @PatientClassCId OUTPUT;
        IF (@PatientClassCId IS NULL
            AND @DynamicallyAddUSID = 1)
            BEGIN
                SET @PatientClassCId = (SELECT CAST (RAND() * 10000 AS INT) AS [RandomNumber]);
                WHILE ((SELECT [code_id]
                        FROM   [dbo].[int_misc_code]
                        WHERE  [code_id] = @PatientClassCId) IS NOT NULL)
                    BEGIN
                        SET @PatientClassCId = @PatientClassCId + 1;
                    END
                EXECUTE [dbo].[usp_InsertMiscCodeDetails] @PatientClassCId, @FacilityId, @SendingSysId, 'PCLS', 'HL7', @PatientClass;
            END
        DECLARE @PatientId AS UNIQUEIDENTIFIER, @AcctId AS UNIQUEIDENTIFIER;
        EXECUTE [dbo].[usp_HL7_SavePatientDemographicInformation] @PatientTypeAccountNo, @PatientMrn, @PatientAccount, @FacilityId, @PatientGivenName, @PatientFamilyName, @PatientMiddleName, @PatientDob, @PatientGenderCodeId, @PatientId OUTPUT, @AcctId OUTPUT;
        EXECUTE [dbo].[usp_HL7_SavePatientVisitInformation] @UniqueVisitNumber, @UnitId, @FacilityId, @PatientId, @SendingSysId, @PatientClassCId, @PatientPointOfCare, @PatientVisitNumber, @MessageNumber, @PatientRoom, @PatientBed, @AcctId, @VIPIndicator, @AdmitDateTime, @DischargeDateTime;
        INSERT  INTO [dbo].[HL7PatientLink] ([MessageNo], [PatientMrn], [PatientVisitNumber], [PatientId])
        VALUES                             (@MessageNumber, @PatientMrn, @PatientVisitNumber, @PatientId);
        UPDATE [dbo].[HL7InboundMessage]
        SET    [MessageStatus]        = 'R',
               [MessageProcessedDate] = GETDATE()
        WHERE  [MessageNo] = @MessageNumber;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
        UPDATE [dbo].[HL7InboundMessage]
        SET    [MessageStatus] = 'E'
        WHERE  [MessageNo] = @MessageNumber;
        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_SaveOruMessages]
@messageList [dbo].[OruMessages] READONLY
AS
BEGIN
    INSERT INTO [dbo].[HL7_out_queue]
    SELECT [msg_status],
           [msg_no],
           [HL7_text_long],
           [HL7_text_short],
           [patient_id],
           [msh_system],
           [msh_organization],
           [msh_event_cd],
           [msh_msg_type],
           [sent_dt],
           [queued_dt]
    FROM   @messageList;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_SavePatientDemographicInformation]
@PatientTypeAccountNo BIT, @PatientMrn NVARCHAR (20), @PatientAccount NVARCHAR (20)=NULL, @OrganizationId UNIQUEIDENTIFIER, @PatientGivenName NVARCHAR (48), @PatientFamilyName NVARCHAR (48), @PatientMiddleName NVARCHAR (48), @PatientDob DATETIME, @PatientGenderCodeId INT, @PatientId UNIQUEIDENTIFIER OUTPUT, @AccountId UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    BEGIN TRY
        DECLARE @PatientMrnId AS UNIQUEIDENTIFIER, @PatientAccountId AS UNIQUEIDENTIFIER;
        SET @PatientMrnId = (SELECT patient_id
                             FROM   [dbo].[int_mrn_map]
                             WHERE  mrn_xid = @PatientMrn
                                    AND organization_id = @OrganizationId
                                    AND merge_cd <> 'L');
        IF (@PatientTypeAccountNo = 1)
            BEGIN
                SET @PatientAccountId = (SELECT patient_id
                                         FROM   [dbo].[int_mrn_map]
                                         WHERE  mrn_xid = @PatientAccount
                                                AND organization_id = @OrganizationId
                                                AND merge_cd <> 'L');
            END
        IF (@PatientMrnId IS NOT NULL)
            BEGIN
                SET @PatientId = @PatientMrnId;
                EXECUTE dbo.usp_HL7_UpdatePatientInfo @PatientId = @PatientId, @mrn1 = @PatientMrn, @mrn2 = @PatientAccount, @FirstNm = @PatientGivenName, @MiddleNm = @PatientMiddleName, @LastNm = @PatientFamilyName, @dob = @PatientDob, @GenderCid = @PatientGenderCodeId;
            END
        ELSE
            BEGIN
                IF (@PatientAccountId IS NOT NULL)
                    BEGIN
                        SET @PatientId = @PatientAccountId;
                        EXECUTE dbo.usp_HL7_UpdatePatientInfo @PatientId = @PatientId, @mrn1 = @PatientMrn, @mrn2 = @PatientAccount, @FirstNm = @PatientGivenName, @MiddleNm = @PatientMiddleName, @LastNm = @PatientFamilyName, @dob = @PatientDob, @GenderCid = @PatientGenderCodeId;
                    END
                ELSE
                    BEGIN
                        SET @PatientId = NEWID();
                        EXECUTE dbo.usp_HL7_SavePatientInformation @organizationId = @OrganizationId, @PatientId = @PatientId, @mrn1 = @PatientMrn, @mrn2 = @PatientAccount, @FirstNm = @PatientGivenName, @MiddleNm = @PatientMiddleName, @LastNm = @PatientFamilyName, @dob = @PatientDob, @GenderCid = @PatientGenderCodeId, @AccountId = @AccountId OUTPUT;
                    END
            END
        IF (@PatientAccount IS NOT NULL)
            BEGIN
                SET @AccountId = (SELECT   TOP (1) account_id
                                  FROM     dbo.int_account
                                  WHERE    account_xid = @PatientAccount
                                           AND organization_id = @OrganizationId
                                  ORDER BY account_open_dt DESC);
                IF (@AccountId IS NULL)
                    BEGIN
                        SET @AccountId = NEWID();
                        EXECUTE dbo.[usp_InsertAccountInformation] @AccountId = @AccountId, @orgId = @organizationId, @accountNumber = @PatientAccount;
                    END
            END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage AS NVARCHAR (4000);
        DECLARE @ErrorSeverity AS INT;
        DECLARE @ErrorState AS INT;
        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_SavePatientInformation]
@organizationId UNIQUEIDENTIFIER, @PatientId UNIQUEIDENTIFIER, @mrn1 NVARCHAR (20), @mrn2 NVARCHAR (20)=NULL, @FirstNm NVARCHAR (48)=NULL, @MiddleNm NVARCHAR (48)=NULL, @LastNm NVARCHAR (48)=NULL, @dob DATETIME=NULL, @GenderCid INT=NULL, @AccountId UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    BEGIN TRY
        INSERT  INTO [dbo].[int_mrn_map] ([organization_id], [mrn_xid], [patient_id], [mrn_xid2], [merge_cd], [adt_adm_sw])
        VALUES                          (@organizationId, @mrn1, @PatientId, @mrn2, 'C', 1);
        INSERT  INTO [dbo].[int_patient] ([patient_id], [dob], [gender_cid])
        VALUES                          (@PatientId, @dob, @GenderCid);
        INSERT  INTO [dbo].[int_person] ([person_id], [first_nm], [middle_nm], [last_nm])
        VALUES                         (@PatientId, @FirstNm, @MiddleNm, @LastNm);
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage AS NVARCHAR (4000);
        DECLARE @ErrorSeverity AS INT;
        DECLARE @ErrorState AS INT;
        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_SavePatientVisitInformation]
@UniqueVisitNumber BIT, @UnitId UNIQUEIDENTIFIER, @OrganizationId UNIQUEIDENTIFIER, @PatientId UNIQUEIDENTIFIER, @SendingApplicationId UNIQUEIDENTIFIER, @PatientClassCid INT, @PatientPointOfCare NVARCHAR (80), @PatientVisitNumber NVARCHAR (20), @MessageNumber INT, @PatientRoom NVARCHAR (80)=NULL, @PatientBed NCHAR (80)=NULL, @AccountId UNIQUEIDENTIFIER=NULL, @VIPIndicator NCHAR (2)=NULL, @AdmitDateTime DATETIME=NULL, @DischargeDateTime DATETIME=NULL
AS
BEGIN
    BEGIN TRY
        DECLARE @VisitNumberExists AS INT, @EncounterId AS UNIQUEIDENTIFIER, @StatusCode AS NCHAR (1), @MessageControlId AS NVARCHAR (10);
        SET @MessageControlId = (SELECT [MessageControlId]
                                 FROM   [dbo].[HL7InboundMessage]
                                 WHERE  [MessageNo] = @MessageNumber);
        SET @StatusCode = N'C';
        IF @DischargeDateTime IS NOT NULL
            BEGIN
                SET @StatusCode = N'D';
            END
        SET @VisitNumberExists = (SELECT COUNT(1)
                                  FROM   [dbo].[int_encounter_map]
                                  WHERE  [encounter_xid] = @PatientVisitNumber
                                         AND [organization_id] = @OrganizationId);
        IF (@VisitNumberExists > 0)
            BEGIN
                SET @EncounterId = (SELECT [encounter_id]
                                    FROM   [dbo].[int_encounter_map]
                                    WHERE  [encounter_xid] = @PatientVisitNumber
                                           AND [organization_id] = @OrganizationId
                                           AND [patient_id] = @PatientId);
                IF NOT EXISTS (SELECT [patient_id]
                               FROM   [dbo].[int_encounter_map]
                               WHERE  [encounter_xid] = @PatientVisitNumber
                                      AND [organization_id] = @OrganizationId
                                      AND [patient_id] = @PatientId)
                    BEGIN
                        IF (@UniqueVisitNumber = 1)
                            BEGIN
                                RAISERROR ('VisitNumber = "%s" already exists in the database for a different patient,change visit number for MessageControlId="%s".', 16, 1, @PatientVisitNumber, @MessageControlId);
                                RETURN;
                            END
                        ELSE
                            BEGIN
                                SET @EncounterId = NEWID();
                                INSERT  INTO [dbo].[int_encounter] ([encounter_id], [organization_id], [mod_dt], [patient_id], [status_cd], [account_id])
                                VALUES                            (@EncounterId, @OrganizationId, GETDATE(), @PatientId, CAST (@StatusCode AS NVARCHAR (3)), @AccountId);
                                INSERT  INTO [dbo].[int_encounter_map] ([encounter_xid], [organization_id], [encounter_id], [patient_id], [seq_no], [status_cd], [account_id])
                                VALUES                                (@PatientVisitNumber, @OrganizationId, @EncounterId, @PatientId, 1, @StatusCode, @AccountId);
                            END
                    END
            END
        ELSE
            BEGIN
                SET @EncounterId = NEWID();
                INSERT  INTO [dbo].[int_encounter] ([encounter_id], [organization_id], [mod_dt], [patient_id], [status_cd], [account_id])
                VALUES                            (@EncounterId, @OrganizationId, GETDATE(), @PatientId, CAST (@StatusCode AS NVARCHAR (3)), @AccountId);
                INSERT  INTO [dbo].[int_encounter_map] ([encounter_xid], [organization_id], [encounter_id], [patient_id], [seq_no], [status_cd], [account_id])
                VALUES                                (@PatientVisitNumber, @OrganizationId, @EncounterId, @PatientId, 1, @StatusCode, @AccountId);
            END
        DECLARE @VIPIndicator1 AS NCHAR (1) = CAST (@VIPIndicator AS NCHAR (1));
        EXECUTE [dbo].[usp_HL7_UpdatePatientVisitInformation] @EncounterId = @EncounterId, @AccountId = @AccountId, @StatusCd = @StatusCode, @VipSw = @VIPIndicator1, @PatientClassCid = @PatientClassCid, @UnitOrgId = @UnitId, @AdmitDt = @AdmitDateTime, @Rm = @PatientRoom, @Bed = @PatientBed, @DischargeDt = @DischargeDateTime;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage AS NVARCHAR (4000);
        DECLARE @ErrorSeverity AS INT;
        DECLARE @ErrorState AS INT;
        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_SetAddressInformation]
@AddressId UNIQUEIDENTIFIER, @AddrLocCd NCHAR (2), @AddrTypCd NCHAR (2), @SeqNo INT, @ActiveSw TINYINT=NULL, @OrgPatientId UNIQUEIDENTIFIER=NULL, @Line1Dsc NVARCHAR (160)=NULL, @Line2Dsc NVARCHAR (160)=NULL, @Line3Dsc NVARCHAR (160)=NULL, @CityNm NVARCHAR (60)=NULL, @CountryCid INT=NULL, @StateCode NVARCHAR (6)=NULL, @ZipCode NVARCHAR (30)=NULL, @StartDt DATETIME=NULL
AS
BEGIN
    IF (@StartDt = '')
        SET @StartDt = GETDATE();
    UPDATE [dbo].[int_address]
    SET    [active_sw]       = ISNULL(@ActiveSw, [active_sw]),
           [orig_patient_id] = ISNULL(@OrgPatientId, [orig_patient_id]),
           [line1_dsc]       = ISNULL(@Line1Dsc, [line1_dsc]),
           [line2_dsc]       = ISNULL(@Line2Dsc, [line2_dsc]),
           [line3_dsc]       = ISNULL(@Line3Dsc, [line3_dsc]),
           [city_nm]         = ISNULL(@CityNm, [city_nm]),
           [county_cid]      = ISNULL(@CountryCid, [county_cid]),
           [state_code]      = ISNULL(@StateCode, [state_code]),
           [zip_code]        = ISNULL(@ZipCode, [zip_code]),
           [start_dt]        = ISNULL(@StartDt, [start_dt])
    WHERE  [address_id] = @AddressId
           AND [addr_loc_cd] = @AddrLocCd
           AND [addr_type_cd] = @AddrTypCd
           AND [seq_no] = @SeqNo;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_SetHL7InboundMessage]
@MsgNo INT, @PidMrn NVARCHAR (40)=NULL, @Pv1VisitNo NVARCHAR (100)=NULL, @MsgStatus NCHAR (2)=NULL, @ProcessedDt DATETIME=NULL
AS
BEGIN
    IF @ProcessedDt IS NULL
        SET @ProcessedDt = GETDATE();
    UPDATE [dbo].[HL7_in_queue]
    SET    [pid_mrn]      = ISNULL(@PidMrn, [pid_mrn]),
           [pv1_visit_no] = ISNULL(@Pv1VisitNo, [pv1_visit_no]),
           [msg_status]   = ISNULL(@MsgStatus, [msg_status]),
           [processed_dt] = @ProcessedDt
    WHERE  [msg_no] = CAST (@MsgNo AS NUMERIC (10));
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdateAccountInformation]
@AccountId UNIQUEIDENTIFIER, @accountStatusCid INT, @badDebtSw TINYINT, @totPaymentsAmt SMALLMONEY, @totChargesAmt SMALLMONEY, @totAdjsAmt SMALLMONEY, @curBalAmt SMALLMONEY, @accountCloseDt DATETIME
AS
BEGIN
    UPDATE [dbo].[int_account]
    SET    [account_status_cid] = @accountStatusCid,
           [bad_debt_sw]        = @badDebtSw,
           [tot_payments_amt]   = @totPaymentsAmt,
           [tot_charges_amt]    = @totChargesAmt,
           [tot_adjs_amt]       = @totAdjsAmt,
           [cur_bal_amt]        = @curBalAmt,
           [account_close_dt]   = @accountCloseDt
    WHERE  [account_id] = @AccountId;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdateEncounterInformation]
@EncounterId UNIQUEIDENTIFIER, @ModDt DATETIME=NULL, @AccountId UNIQUEIDENTIFIER, @StatusCd NVARCHAR (6), @PatientClassCid INT, @VipSw NCHAR (2), @PatientTypeCid INT, @MedSvcCid INT, @UnitOrgId UNIQUEIDENTIFIER, @BeginDt DATETIME, @AmbulStatusCid INT, @AdmitDt DATETIME, @Rm NVARCHAR (12), @Bed NCHAR (12), @DischargeDt DATETIME, @DischargeDispoCid INT
AS
BEGIN
    IF @ModDt IS NULL
        SET @ModDt = GETDATE();
    UPDATE [dbo].[int_encounter]
    SET    [account_id]          = @AccountId,
           [mod_dt]              = @ModDt,
           [status_cd]           = CAST (@StatusCd AS NVARCHAR (3)),
           [patient_class_cid]   = @PatientClassCid,
           [vip_sw]              = @VipSw,
           [patient_type_cid]    = @PatientTypeCid,
           [med_svc_cid]         = @MedSvcCid,
           [unit_org_id]         = @UnitOrgId,
           [begin_dt]            = @BeginDt,
           [ambul_status_cid]    = @AmbulStatusCid,
           [admit_dt]            = @AdmitDt,
           [rm]                  = @Rm,
           [bed]                 = @Bed,
           [discharge_dt]        = @DischargeDt,
           [discharge_dispo_cid] = @DischargeDispoCid
    WHERE  [encounter_id] = @EncounterId;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdateEncounterMapInformation]
@EncounterId UNIQUEIDENTIFIER, @AccountId UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_encounter_map]
    SET    [account_id] = @AccountId
    WHERE  [encounter_id] = @EncounterId;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdateHCPInformation]
@hcpId UNIQUEIDENTIFIER, @LastNm NVARCHAR (100)=NULL, @FirstNm NVARCHAR (100)=NULL, @MiddleNm NVARCHAR (100)=NULL, @Degree NVARCHAR (40)=NULL
AS
BEGIN
    UPDATE [dbo].[int_hcp]
    SET    [last_nm]   = CAST (@LastNm AS NVARCHAR (50)),
           [first_nm]  = CAST (@FirstNm AS NVARCHAR (50)),
           [middle_nm] = CAST (@MiddleNm AS NVARCHAR (50)),
           [degree]    = CAST (@Degree AS NVARCHAR (20))
    WHERE  [hcp_id] = @hcpId;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdateInboundMessageResponse]
@MessageNo INT, @MessageResponse NVARCHAR (MAX)
AS
BEGIN
    UPDATE [dbo].[HL7InboundMessage]
    SET    [HL7MessageResponse] = @MessageResponse
    WHERE  [MessageNo] = @MessageNo;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdateInboundMessageStatus]
@MessageStatus NCHAR (1), @MessageNo INT
AS
BEGIN
    UPDATE [dbo].[HL7InboundMessage]
    SET    [MessageStatus]        = @MessageStatus,
           [MessageProcessedDate] = GETDATE()
    WHERE  [MessageNo] = @MessageNo;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdateMrnInformation]
@mrn1 NVARCHAR (60), @PatientId UNIQUEIDENTIFIER, @mrn2 NVARCHAR (60)
AS
BEGIN
    UPDATE [dbo].[int_mrn_map]
    SET    [mrn_xid]  = CAST (@mrn1 AS NVARCHAR (30)),
           [mrn_xid2] = CAST (@mrn2 AS NVARCHAR (30))
    WHERE  [patient_id] = @PatientId
           AND [merge_cd] <> 'L';
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdatePatientInfo]
@PatientId UNIQUEIDENTIFIER, @mrn1 NVARCHAR (20), @mrn2 NVARCHAR (20)=NULL, @FirstNm NVARCHAR (48)=NULL, @MiddleNm NVARCHAR (48)=NULL, @LastNm NVARCHAR (48)=NULL, @dob DATETIME=NULL, @GenderCid INT=NULL
AS
BEGIN
    BEGIN TRY
        UPDATE [dbo].[int_mrn_map]
        SET    [mrn_xid]  = @mrn1,
               [mrn_xid2] = @mrn2
        WHERE  [patient_id] = @PatientId;
        UPDATE [dbo].[int_patient]
        SET    [dob]        = @dob,
               [gender_cid] = @GenderCid
        WHERE  [patient_id] = @PatientId;
        UPDATE [dbo].[int_person]
        SET    [first_nm]  = @FirstNm,
               [middle_nm] = @MiddleNm,
               [last_nm]   = @LastNm
        WHERE  [person_id] = @PatientId;
        IF ((SELECT [patient_id]
             FROM   [dbo].[int_patient_monitor]
             WHERE  [patient_id] = @PatientId
                    AND [active_sw] = 1) IS NOT NULL)
            BEGIN
                UPDATE [dbo].[int_patient_monitor]
                SET    [monitor_status] = 'UPD'
                WHERE  [patient_id] = @PatientId
                       AND [active_sw] = 1;
            END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage AS NVARCHAR (4000);
        DECLARE @ErrorSeverity AS INT;
        DECLARE @ErrorState AS INT;
        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdatePatientInformation]
@PatientId UNIQUEIDENTIFIER, @BirthOrder TINYINT, @VeteranStatusCid INT, @BirthPlace NVARCHAR (100), @Ssn NVARCHAR (30), @DrivLicNo NVARCHAR (50), @DrivLicStateCode NVARCHAR (6), @dob NVARCHAR (50), @deathdt NVARCHAR (50), @NationalityCid INT, @CitizenshipCid INT, @EthnicGroupCid INT, @RaceCid INT, @GenderCid INT, @PrimaryLanguageCid INT, @MaritalStatusCid INT, @ReligionCid INT, @LivingWillSw NCHAR (4)=NULL, @OrganDonorSw NCHAR (4)=NULL
AS
BEGIN
    UPDATE [dbo].[int_patient]
    SET    [birth_order]          = @BirthOrder,
           [veteran_status_cid]   = @VeteranStatusCid,
           [birth_place]          = CAST (@BirthPlace AS NVARCHAR (50)),
           [ssn]                  = CAST (@Ssn AS NVARCHAR (15)),
           [driv_lic_no]          = CAST (@DrivLicNo AS NVARCHAR (25)),
           [driv_lic_state_code]  = CAST (@DrivLicStateCode AS NVARCHAR (3)),
           [dob]                  = CAST (@dob AS DATETIME),
           [death_dt]             = CAST (@deathdt AS DATETIME),
           [nationality_cid]      = @NationalityCid,
           [citizenship_cid]      = @CitizenshipCid,
           [ethnic_group_cid]     = @EthnicGroupCid,
           [race_cid]             = @RaceCid,
           [gender_cid]           = @GenderCid,
           [primary_language_cid] = @PrimaryLanguageCid,
           [marital_status_cid]   = @MaritalStatusCid,
           [religion_cid]         = @ReligionCid,
           [organ_donor_sw]       = ISNULL(@OrganDonorSw, [organ_donor_sw]),
           [living_will_sw]       = ISNULL(@LivingWillSw, [living_will_sw])
    WHERE  [patient_id] = @PatientId;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdatePatientVisitInformation]
@EncounterId UNIQUEIDENTIFIER, @ModDt DATETIME=NULL, @AccountId UNIQUEIDENTIFIER=NULL, @StatusCd NVARCHAR (3), @PatientClassCid INT=NULL, @VipSw NCHAR (1)=NULL, @PatientTypeCid INT=NULL, @UnitOrgId UNIQUEIDENTIFIER, @AdmitDt DATETIME=NULL, @Rm NVARCHAR (80)=NULL, @Bed NVARCHAR (80)=NULL, @DischargeDt DATETIME=NULL, @MessageDateTime DATETIME=NULL
AS
BEGIN
    SELECT [int_encounter].[encounter_id],
           [int_encounter].[organization_id],
           [int_encounter].[mod_dt],
           [int_encounter].[patient_id],
           [int_encounter].[orig_patient_id],
           [int_encounter].[account_id],
           [int_encounter].[status_cd],
           [int_encounter].[publicity_cid],
           [int_encounter].[diet_type_cid],
           [int_encounter].[patient_class_cid],
           [int_encounter].[protection_type_cid],
           [int_encounter].[vip_sw],
           [int_encounter].[isolation_type_cid],
           [int_encounter].[security_type_cid],
           [int_encounter].[patient_type_cid],
           [int_encounter].[admit_hcp_id],
           [int_encounter].[med_svc_cid],
           [int_encounter].[referring_hcp_id],
           [int_encounter].[unit_org_id],
           [int_encounter].[attend_hcp_id],
           [int_encounter].[primary_care_hcp_id],
           [int_encounter].[fall_risk_type_cid],
           [int_encounter].[begin_dt],
           [int_encounter].[ambul_status_cid],
           [int_encounter].[admit_dt],
           [int_encounter].[baby_cd],
           [int_encounter].[rm],
           [int_encounter].[recurring_cd],
           [int_encounter].[bed],
           [int_encounter].[discharge_dt],
           [int_encounter].[newborn_sw],
           [int_encounter].[discharge_dispo_cid],
           [int_encounter].[monitor_created],
           [int_encounter].[comment]
    FROM   [dbo].[int_encounter];
    IF @ModDt IS NULL
        SET @ModDt = GETDATE();
    UPDATE [dbo].[int_encounter]
    SET    [account_id]        = @AccountId,
           [mod_dt]            = @ModDt,
           [status_cd]         = @StatusCd,
           [vip_sw]            = @VipSw,
           [patient_type_cid]  = @PatientTypeCid,
           [patient_class_cid] = @PatientClassCid,
           [unit_org_id]       = @UnitOrgId,
           [admit_dt]          = @AdmitDt,
           [rm]                = @Rm,
           [bed]               = @Bed,
           [begin_dt]          = @MessageDateTime,
           [discharge_dt]      = @DischargeDt
    WHERE  [encounter_id] = @EncounterId;
    UPDATE [dbo].[int_encounter_map]
    SET    [account_id] = @AccountId
    WHERE  [encounter_id] = @EncounterId;
END

GO
CREATE PROCEDURE [dbo].[usp_HL7_UpdatePersonDemographics]
@PersonId UNIQUEIDENTIFIER, @FirstNm NVARCHAR (100), @LastNm NVARCHAR (100), @MiddleNm NVARCHAR (100), @TelNo NVARCHAR (80), @CityNm NVARCHAR (50), @StateCode NVARCHAR (60), @ZipCode NVARCHAR (6), @Suffix NVARCHAR (10), @Line1Dsc NVARCHAR (160), @Line2Dsc NVARCHAR (160), @CountryCid INT
AS
BEGIN
    UPDATE [dbo].[int_person]
    SET    [first_nm]    = CAST (@FirstNm AS NVARCHAR (50)),
           [last_nm]     = CAST (@LastNm AS NVARCHAR (50)),
           [middle_nm]   = CAST (@MiddleNm AS NVARCHAR (50)),
           [tel_no]      = CAST (@TelNo AS NVARCHAR (40)),
           [city_nm]     = CAST (@CityNm AS NVARCHAR (30)),
           [state_code]  = CAST (@StateCode AS NVARCHAR (3)),
           [zip_code]    = @ZipCode,
           [suffix]      = CAST (@Suffix AS NVARCHAR (5)),
           [line1_dsc]   = CAST (@Line1Dsc AS NVARCHAR (80)),
           [line2_dsc]   = CAST (@Line2Dsc AS NVARCHAR (80)),
           [country_cid] = @CountryCid
    WHERE  [person_id] = @PersonId;
END

GO
CREATE PROCEDURE [dbo].[usp_IcsPrintSvc_GetActivePrintItem]
@FActivePrintJobId UNIQUEIDENTIFIER, @NullBooleanTrue TINYINT
AS
BEGIN
    SELECT   [print_job_id],
             [page_number],
             [end_of_job_sw]
    FROM     [dbo].[int_print_job]
    WHERE    [print_job_id] = @FActivePrintJobId
             AND [print_sw] = @NullBooleanTrue
    ORDER BY [page_number];
END

GO
CREATE PROCEDURE [dbo].[usp_IcsPrintSvc_LoadPrintItems]
@NullBooleanTrue TINYINT
AS
BEGIN
    SELECT   [print_job_id],
             [page_number],
             [end_of_job_sw]
    FROM     [dbo].[int_print_job]
    WHERE    [print_sw] = @NullBooleanTrue
    ORDER BY [job_net_dt], [print_job_id], [page_number];
END

GO
CREATE PROCEDURE [dbo].[usp_InsertAccountInformation]
@AccountId UNIQUEIDENTIFIER, @orgId UNIQUEIDENTIFIER, @accountNumber NVARCHAR (80), @accountStatusCid INT=NULL, @badDebtSw TINYINT=NULL, @totPaymentsAmt SMALLMONEY=NULL, @totChargesAmt SMALLMONEY=NULL, @totAdjsAmt SMALLMONEY=NULL, @curBalAmt SMALLMONEY=NULL, @accountOpenDt DATETIME=NULL, @accountCloseDt DATETIME=NULL
AS
BEGIN
    IF @accountOpenDt IS NULL
        SET @accountOpenDt = GETDATE();
    INSERT  INTO [dbo].[int_account] ([account_id], [organization_id], [account_xid], [account_status_cid], [bad_debt_sw], [tot_payments_amt], [tot_charges_amt], [tot_adjs_amt], [cur_bal_amt], [account_open_dt], [account_close_dt])
    VALUES                          (@AccountId, @orgId, CAST (@accountNumber AS NVARCHAR (40)), @accountStatusCid, @badDebtSw, @totPaymentsAmt, @totChargesAmt, @totAdjsAmt, @curBalAmt, @accountOpenDt, @accountCloseDt);
END

GO
CREATE PROCEDURE [dbo].[usp_InsertEncounterInformation]
@EncounterId UNIQUEIDENTIFIER, @OrgId UNIQUEIDENTIFIER=NULL, @ModDt DATETIME=NULL, @PatientId UNIQUEIDENTIFIER=NULL, @OrgPatientId UNIQUEIDENTIFIER=NULL, @AccountId UNIQUEIDENTIFIER=NULL, @StatusCd NVARCHAR (6)=NULL, @PublicityCid INT=NULL, @DietTypeCid INT=NULL, @PatientClassCid INT=NULL, @protectionTypeCid INT=NULL, @VipSw NCHAR (2)=NULL, @IsolationTypeCid INT=NULL, @SecurityTypeCid INT=NULL, @PatientTypeCid INT=NULL, @AdmitHcpId UNIQUEIDENTIFIER=NULL, @MedSvcCid INT=NULL, @ReferringHcpId UNIQUEIDENTIFIER=NULL, @UnitOrgId UNIQUEIDENTIFIER=NULL, @AttendHcpId UNIQUEIDENTIFIER=NULL, @PrimaryCareHcpId UNIQUEIDENTIFIER=NULL, @FallRiskTypeCid INT=NULL, @BeginDt DATETIME=NULL, @AmbulStatusCid INT=NULL, @AdmitDt DATETIME=NULL, @BabyCd NCHAR (2)=NULL, @Rm NVARCHAR (12)=NULL, @RecurringCd NCHAR (2)=NULL, @Bed NCHAR (12)=NULL, @Discharge_dt DATETIME=NULL, @NewbornSw NCHAR (2)=NULL, @DischargeDispoCid INT=NULL, @MonitorCreated TINYINT=NULL, @comment NVARCHAR (200)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_encounter] ([encounter_id], [organization_id], [mod_dt], [patient_id], [orig_patient_id], [account_id], [status_cd], [publicity_cid], [diet_type_cid], [patient_class_cid], [protection_type_cid], [vip_sw], [isolation_type_cid], [security_type_cid], [patient_type_cid], [admit_hcp_id], [med_svc_cid], [referring_hcp_id], [unit_org_id], [attend_hcp_id], [primary_care_hcp_id], [fall_risk_type_cid], [begin_dt], [ambul_status_cid], [admit_dt], [baby_cd], [rm], [recurring_cd], [bed], [discharge_dt], [newborn_sw], [discharge_dispo_cid], [monitor_created], [comment])
    VALUES                            (@EncounterId, @OrgId, GETDATE(), @PatientId, @OrgPatientId, @AccountId, CAST (@StatusCd AS NVARCHAR (3)), @PublicityCid, @DietTypeCid, @PatientClassCid, @protectionTypeCid, @VipSw, @IsolationTypeCid, @SecurityTypeCid, @PatientTypeCid, @AdmitHcpId, @MedSvcCid, @ReferringHcpId, @UnitOrgId, @AttendHcpId, @PrimaryCareHcpId, @FallRiskTypeCid, @BeginDt, @AmbulStatusCid, @AdmitDt, CAST (@BabyCd AS NCHAR (1)), @Rm, CAST (@RecurringCd AS NCHAR (1)), @Bed, @Discharge_dt, CAST (@NewbornSw AS NCHAR (1)), @DischargeDispoCid, @MonitorCreated, @comment);
END

GO
CREATE PROCEDURE [dbo].[usp_InsertEncounterMapInformation]
@EncounterXid NVARCHAR (80), @OrgId UNIQUEIDENTIFIER, @EncounterId UNIQUEIDENTIFIER, @PatientId UNIQUEIDENTIFIER, @SeqNo INT, @OrgPatientId UNIQUEIDENTIFIER=NULL, @StatusCd NCHAR (2)=NULL, @EventCd NVARCHAR (8)=NULL, @AccountId UNIQUEIDENTIFIER=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_encounter_map] ([encounter_xid], [organization_id], [encounter_id], [patient_id], [seq_no], [orig_patient_id], [status_cd], [event_cd], [account_id])
    VALUES                                (CAST (@EncounterXid AS NVARCHAR (40)), @OrgId, @EncounterId, @PatientId, @SeqNo, @OrgPatientId, CAST (@StatusCd AS NCHAR (1)), CAST (@EventCd AS NVARCHAR (4)), @AccountId);
END

GO
CREATE PROCEDURE [dbo].[usp_InsertMiscCodeDetails]
@codeId INT, @organizationId UNIQUEIDENTIFIER, @sysId UNIQUEIDENTIFIER, @category_cd CHAR (4), @method_cd NVARCHAR (10), @code NVARCHAR (80), @verification_sw TINYINT=NULL, @int_keystone_cd NVARCHAR (80)=NULL, @short_dsc NVARCHAR (100)=NULL, @spc_pcs_code CHAR (1)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_misc_code] ([code_id], [organization_id], [sys_id], [category_cd], [method_cd], [code], [verification_sw], [int_keystone_cd], [short_dsc], [spc_pcs_code])
    VALUES                            (@codeId, @organizationId, @sysId, @category_cd, @method_cd, @code, @verification_sw, @int_keystone_cd, @short_dsc, @spc_pcs_code);
END

GO
CREATE PROCEDURE [dbo].[usp_InsertMrnInformation]
@organizationId UNIQUEIDENTIFIER, @mrn1 NVARCHAR (60), @PatientId UNIQUEIDENTIFIER, @orgPatientId UNIQUEIDENTIFIER=NULL, @priorPatientId UNIQUEIDENTIFIER=NULL, @mrn2 NVARCHAR (60)=NULL, @AdtAdmsw TINYINT=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_mrn_map] ([organization_id], [mrn_xid], [patient_id], [orig_patient_id], [merge_cd], [prior_patient_id], [mrn_xid2], [adt_adm_sw])
    VALUES                          (@organizationId, CAST (@mrn1 AS NVARCHAR (30)), @PatientId, @orgPatientId, 'C', @priorPatientId, CAST (@mrn2 AS NVARCHAR (30)), @AdtAdmsw);
END

GO
CREATE PROCEDURE [dbo].[usp_InsertOrganizationInformation]
@organizationId UNIQUEIDENTIFIER, @categoryCd CHAR (1)=NULL, @parentOrganizationId UNIQUEIDENTIFIER=NULL, @organizationCd NVARCHAR (180)=NULL, @organizationNm NVARCHAR (180)=NULL, @inDefaultSearch TINYINT=NULL, @monitorDisableSw TINYINT=NULL, @autoCollectInterval INT=NULL, @outboundInterval INT=NULL, @printerName VARCHAR (255)=NULL, @alarmPrinterName VARCHAR (255)=NULL
AS
BEGIN
    INSERT  INTO [dbo].[int_organization] ([organization_id], [category_cd], [parent_organization_id], [organization_cd], [organization_nm], [in_default_search], [monitor_disable_sw], [auto_collect_interval], [outbound_interval], [printer_name], [alarm_printer_name])
    VALUES                               (@organizationId, @categoryCd, @parentOrganizationId, @organizationCd, @organizationNm, @inDefaultSearch, @monitorDisableSw, @autoCollectInterval, @outboundInterval, @printerName, @alarmPrinterName);
END

GO
CREATE PROCEDURE [dbo].[usp_InsertPersonDemographics]
@PersonId UNIQUEIDENTIFIER, @RecognizeNmCd NVARCHAR (10)=NULL, @SeqNo INT=NULL, @ActiveSw TINYINT, @OrigPatientId UNIQUEIDENTIFIER=NULL, @Prefix NVARCHAR (8)=NULL, @FirstNm NVARCHAR (100)=NULL, @MiddleNm NVARCHAR (100)=NULL, @LastNm NVARCHAR (100)=NULL, @Suffix NVARCHAR (10)=NULL, @Degree NVARCHAR (40)=NULL, @mpiLnamecons NVARCHAR (40)=NULL, @mpiFnameCons NVARCHAR (40)=NULL, @mpiMnameCons NVARCHAR (40)=NULL, @startDt DATETIME=NULL
AS
BEGIN
    IF (@startDt IS NULL)
        SET @startDt = GETDATE();
    INSERT  INTO [dbo].[int_person_name] ([person_nm_id], [recognize_nm_cd], [seq_no], [active_sw], [orig_patient_id], [prefix], [first_nm], [middle_nm], [last_nm], [suffix], [degree], [mpi_lname_cons], [mpi_fname_cons], [mpi_mname_cons], [start_dt])
    VALUES                              (@PersonId, CAST (@RecognizeNmCd AS CHAR (2)), @SeqNo, @ActiveSw, @OrigPatientId, CAST (@Prefix AS NVARCHAR (4)), CAST (@FirstNm AS NVARCHAR (50)), CAST (@MiddleNm AS NVARCHAR (50)), CAST (@LastNm AS NVARCHAR (50)), CAST (@Suffix AS NVARCHAR (5)), CAST (@Degree AS NVARCHAR (20)), CAST (@mpiLnamecons AS NVARCHAR (20)), CAST (@mpiFnameCons AS NVARCHAR (20)), CAST (@mpiMnameCons AS NVARCHAR (20)), @startDt);
END

GO
CREATE PROCEDURE [dbo].[usp_InsertSendingSystemInformation]
@SysId UNIQUEIDENTIFIER, @OrganizationId UNIQUEIDENTIFIER, @code NVARCHAR (180), @dsc NVARCHAR (180)
AS
BEGIN
    INSERT  INTO [dbo].[int_send_sys] ([sys_id], [organization_id], [code], [dsc])
    VALUES                           (@SysId, @OrganizationId, @code, @dsc);
END

GO
CREATE PROCEDURE [dbo].[usp_InsertSendSysDetails]
@sys_id UNIQUEIDENTIFIER, @organization_id UNIQUEIDENTIFIER, @code NVARCHAR (30), @dsc NVARCHAR (80)
AS
BEGIN
    INSERT  INTO [dbo].[int_send_sys] ([sys_id], [organization_id], [code], [dsc])
    VALUES                           (@sys_id, @organization_id, @code, @dsc);
END

GO
CREATE PROCEDURE [dbo].[usp_IsVIPPatient]
@mrn_xid NVARCHAR (30)
AS
BEGIN
    SELECT [ENC].[vip_sw]
    FROM   [dbo].[int_encounter] AS [ENC]
           INNER JOIN
           [dbo].[int_mrn_map] AS [MRNMAP]
           ON [MRNMAP].[patient_id] = [ENC].[patient_id]
    WHERE  [MRNMAP].[mrn_xid] = @mrn_xid;
END

GO
CREATE PROCEDURE [dbo].[usp_PM_CopyETVitalsAndWaveforms]
AS
BEGIN
    BEGIN TRANSACTION;
    EXECUTE [dbo].[usp_PM_CopyETWaveformData] ;
    EXECUTE [dbo].[usp_PM_CopyETVitalsData] ;
    COMMIT TRANSACTION;
END

GO
CREATE PROCEDURE [dbo].[usp_PM_CopyETVitalsData]
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @preAlarmDataMinutes AS INT = 15;
    DECLARE @tMinusPaddingSeconds AS INT;
    SELECT @tMinusPaddingSeconds = CAST ([Value] AS INT)
    FROM   [dbo].[ApplicationSettings]
    WHERE  [ApplicationType] = 'Global'
           AND [Key] = 'PrintJobPaddingSeconds';
    IF @tMinusPaddingSeconds IS NULL
        RAISERROR (N'Global setting "%s" from the ApplicationSettings table was null or missing', 13, 1, N'PrintJobPaddingSeconds');
    MERGE INTO [dbo].[int_print_job_et_vitals]
     AS [Target]
    USING (SELECT DISTINCT [ipjea].[PatientId],
                           [vd].[TopicSessionId],
                           [gcm].[GdsCode] AS [GDSCode],
                           [vd].[Name],
                           [vd].[Value] AS [Value],
                           [vd].[TimestampUTC] AS [ResultTimeUTC]
           FROM   [dbo].[VitalsData] AS [vd]
                  INNER JOIN
                  [dbo].[GdsCodeMap] AS [gcm]
                  ON [gcm].[FeedTypeId] = [vd].[FeedTypeId]
                     AND [gcm].[Name] = [vd].[Name]
                  INNER JOIN
                  [dbo].[TopicSessions] AS [ts]
                  ON [ts].[Id] = [vd].[TopicSessionId]
                  INNER JOIN
                  [dbo].[int_print_job_et_alarm] AS [ipjea]
                  ON [ipjea].[DeviceSessionId] = [ts].[DeviceSessionId]
           WHERE  [vd].[TimestampUTC] >= DATEADD(MINUTE, -@preAlarmDataMinutes, [ipjea].[AlarmStartTimeUTC])
                  AND [vd].[TimestampUTC] <= DATEADD(SECOND, @tMinusPaddingSeconds, [ipjea].[AlarmEndTimeUTC])) AS [Source] ON [Target].[TopicSessionId] = [Source].[TopicSessionId]
                                                                                                                               AND [Target].[GDSCode] = [Source].[GDSCode]
                                                                                                                               AND [Target].[ResultTimeUTC] = [Source].[ResultTimeUTC]
    WHEN NOT MATCHED THEN INSERT ([Id], [PatientId], [TopicSessionId], [GDSCode], [Name], [Value], [ResultTimeUTC]) VALUES (NEWID(), [Source].[PatientId], [Source].[TopicSessionId], [Source].[GDSCode], [Source].[Name], [Source].[Value], [Source].[ResultTimeUTC]);
END

GO
CREATE PROCEDURE [dbo].[usp_PM_CopyETWaveformData]
AS
BEGIN
    DECLARE @tMinusPaddingSeconds AS INT;
    SELECT @tMinusPaddingSeconds = CAST ([Value] AS INT)
    FROM   [dbo].[ApplicationSettings]
    WHERE  [ApplicationType] = 'Global'
           AND [Key] = 'PrintJobPaddingSeconds';
    IF @tMinusPaddingSeconds IS NULL
        RAISERROR (N'Global setting "%s" from the ApplicationSettings table was null or missing', 13, 1, N'PrintJobPaddingSeconds');
    MERGE INTO [dbo].[int_print_job_et_waveform]
     AS [Target]
    USING (SELECT DISTINCT [AlarmTopics].[DeviceSessionId],
                           [Waveform].[TimeStampBeginUTC] AS [StartTimeUTC],
                           [Waveform].[TimeStampEndUTC] AS [EndTimeUTC],
                           [Waveform].[SampleRate],
                           [Waveform].[WaveformData],
                           [ChannelTypes].[ChannelCode],
                           [ChannelTypes].[CdiLabel]
           FROM   [dbo].[v_LegacyWaveform] AS [Waveform]
                  LEFT OUTER JOIN
                  [dbo].[v_LegacyChannelTypes] AS [ChannelTypes]
                  ON [Waveform].[TypeId] = [ChannelTypes].[TypeId]
                  INNER JOIN
                  (SELECT   [int_print_job_et_alarm].[DeviceSessionId],
                            MIN([int_print_job_et_alarm].[AlarmStartTimeUTC]) AS [MinAlarmStartTimeUTC],
                            MAX([int_print_job_et_alarm].[AlarmEndTimeUTC]) AS [MaxAlarmEndTimeUTC]
                   FROM     [dbo].[int_print_job_et_alarm]
                            INNER JOIN
                            [dbo].[TopicSessions]
                            ON [TopicSessions].[DeviceSessionId] = [int_print_job_et_alarm].[DeviceSessionId]
                   GROUP BY [int_print_job_et_alarm].[DeviceSessionId]) AS [AlarmTopics]
                  ON [AlarmTopics].[DeviceSessionId] = [Waveform].[DeviceSessionId]
           WHERE  [Waveform].[TimeStampBeginUTC] < DATEADD(SECOND, @tMinusPaddingSeconds, [AlarmTopics].[MaxAlarmEndTimeUTC])
                  AND [Waveform].[TimeStampEndUTC] > DATEADD(SECOND, -@tMinusPaddingSeconds, [AlarmTopics].[MinAlarmStartTimeUTC])) AS [Source] ON [Target].[DeviceSessionId] = [Source].[DeviceSessionId]
                                                                                                                                                   AND [Target].[StartTimeUTC] = [Source].[StartTimeUTC]
                                                                                                                                                   AND [Target].[EndTimeUTC] = [Source].[EndTimeUTC]
                                                                                                                                                   AND [Target].[ChannelCode] = [Source].[ChannelCode]
    WHEN NOT MATCHED THEN INSERT ([Id], [DeviceSessionId], [StartTimeUTC], [EndTimeUTC], [SampleRate], [WaveformData], [ChannelCode], [CdiLabel]) VALUES (NEWID(), [Source].[DeviceSessionId], [Source].[StartTimeUTC], [Source].[EndTimeUTC], [Source].[SampleRate], [Source].[WaveformData], [Source].[ChannelCode], [Source].[CdiLabel]);
END

GO
CREATE PROCEDURE [dbo].[usp_PM_GetAlarmData]
@alarmId UNIQUEIDENTIFIER, @locale VARCHAR (2)='en'
AS
BEGIN
    IF (@alarmId IS NULL)
        RAISERROR (14043, -1, -1, '@alarmId', 'usp_PM_GetAlarmData');
    IF (@locale IS NULL
        OR @locale NOT IN ('de', 'en', 'es', 'fr', 'it', 'nl', 'pl', 'zh', 'cs', 'pt'))
        SET @locale = 'en';
    DECLARE @paddingSeconds AS INT;
    SELECT @paddingSeconds = CAST ([Value] AS INT)
    FROM   [dbo].[ApplicationSettings]
    WHERE  [ApplicationType] = 'Global'
           AND [Key] = 'PrintJobPaddingSeconds';
    IF @paddingSeconds IS NULL
        RAISERROR (N'Global setting "%s" from the ApplicationSettings table was null or missing', 13, 1, N'PrintJobPaddingSeconds');
    SELECT [Alarms].[AlarmId] AS [Id],
           [Alarms].[PatientId],
           ISNULL(ISNULL([ResMessage].[Value], '') + '  ' + REPLACE(ISNULL([ResValue].[Value], ''), '{0}', [Alarms].[ViolatingValue]) + '  ' + REPLACE(ISNULL([ResLimit].[Value], ''), '{0}', [Alarms].[SettingViolated]), [ResMessage].[Value]) AS [Title],
           DATEADD(s, -@paddingSeconds, [Alarms].[AlarmStartTimeUTC]) AS [ReportStartTimeUTC],
           DATEADD(s, @paddingSeconds, [Alarms].[AlarmEndTimeUTC]) AS [ReportEndTimeUTC],
           ISNULL([ResLabel].[Value], '') AS [TitleLabel],
           [Alarms].[FirstName],
           [Alarms].[LastName],
           [Alarms].[FullName],
           [Alarms].[ID1],
           [Alarms].[ID2],
           [Alarms].[DOB],
           [Alarms].[FacilityName],
           [Alarms].[UnitName],
           [Alarms].[MonitorName]
    FROM   [dbo].[int_print_job_et_alarm] AS [Alarms]
           LEFT OUTER JOIN
           [dbo].[ResourceStrings] AS [ResMessage]
           ON [ResMessage].[Name] = [Alarms].[StrMessage]
              AND [ResMessage].[Locale] = @locale
           LEFT OUTER JOIN
           [dbo].[ResourceStrings] AS [ResLimit]
           ON [ResLimit].[Name] = [Alarms].[StrLimitFormat]
              AND [ResLimit].[Locale] = @locale
           LEFT OUTER JOIN
           [dbo].[ResourceStrings] AS [ResValue]
           ON [ResValue].[Name] = [Alarms].[StrValueFormat]
              AND [ResValue].[Locale] = @locale
           LEFT OUTER JOIN
           [dbo].[ResourceStrings] AS [ResLabel]
           ON [ResLabel].[Name] = [Alarms].[StrTitleLabel]
              AND [ResLabel].[Locale] = @locale
    WHERE  [Alarms].[AlarmId] = @alarmId;
END

GO
CREATE PROCEDURE [dbo].[usp_PM_GetPatientVitalsByGDS]
@gdsCodes [dbo].[GdsCodes] READONLY, @PatientId UNIQUEIDENTIFIER, @startTimeUTC DATETIME, @endTimeUTC DATETIME
AS
BEGIN
    SELECT [Vitals].[GDSCode],
           [Vitals].[Name],
           [Vitals].[Value],
           [Vitals].[ResultTimeUTC]
    FROM   (SELECT [Vitals].[GDSCode],
                   [Vitals].[Name],
                   [Vitals].[Value],
                   [Vitals].[ResultTimeUTC]
            FROM   [dbo].[int_print_job_et_vitals] AS [Vitals]
                   INNER JOIN
                   (SELECT [GdsCode]
                    FROM   @gdsCodes) AS [Codes]
                   ON [Codes].[GdsCode] = [Vitals].[GDSCode]
            WHERE  [Vitals].[PatientId] = @PatientId
                   AND [Vitals].[ResultTimeUTC] >= @startTimeUTC
                   AND [Vitals].[ResultTimeUTC] <= @endTimeUTC
            UNION ALL
            SELECT [GdsCodeMap].[GdsCode] AS [GDSCode],
                   [VitalsData].[Name] AS [Name],
                   [VitalsData].[Value] AS [Value],
                   [VitalsData].[TimestampUTC] AS [ResultTimeUTC]
            FROM   [dbo].[VitalsData]
                   INNER JOIN
                   [dbo].[GdsCodeMap]
                   ON [GdsCodeMap].[GdsCode] IN (SELECT [GdsCode]
                                                 FROM   @gdsCodes)
                      AND [GdsCodeMap].[FeedTypeId] = [VitalsData].[FeedTypeId]
                      AND [GdsCodeMap].[Name] = [VitalsData].[Name]
            WHERE  [VitalsData].[TopicSessionId] IN (SELECT [Id]
                                                     FROM   [dbo].[TopicSessions]
                                                     WHERE  [PatientSessionId] IN (SELECT DISTINCT [PatientSessionId]
                                                                                   FROM   [dbo].[PatientSessionsMap]
                                                                                   WHERE  [PatientId] = @PatientId))
                   AND [VitalsData].[TimestampUTC] >= @startTimeUTC
                   AND [VitalsData].[TimestampUTC] <= @endTimeUTC
            UNION ALL
            SELECT [GdsCodeMap].[GdsCode] AS [GDSCode],
                   [LiveData].[Name] AS [Name],
                   [LiveData].[Value] AS [Value],
                   [LiveData].[TimestampUTC] AS [ResultTimeUTC]
            FROM   [dbo].[LiveData]
                   INNER JOIN
                   [dbo].[GdsCodeMap]
                   ON [GdsCodeMap].[GdsCode] IN (SELECT [GdsCode]
                                                 FROM   @gdsCodes)
                      AND [GdsCodeMap].[FeedTypeId] = [LiveData].[FeedTypeId]
                      AND [GdsCodeMap].[Name] = [LiveData].[Name]
            WHERE  [LiveData].[TopicInstanceId] IN (SELECT [TopicInstanceId]
                                                    FROM   [dbo].[TopicSessions]
                                                    WHERE  [PatientSessionId] IN (SELECT DISTINCT [PatientSessionId]
                                                                                  FROM   [dbo].[PatientSessionsMap]
                                                                                  WHERE  [PatientId] = @PatientId)
                                                           AND [TopicSessions].[EndTimeUTC] IS NULL)
                   AND [LiveData].[TimestampUTC] >= @startTimeUTC
                   AND [LiveData].[TimestampUTC] <= @endTimeUTC) AS [Vitals];
END

GO
CREATE PROCEDURE [dbo].[usp_PM_GetPatientWaveformData]
@alarmId UNIQUEIDENTIFIER, @numberOfSeconds INT=-1, @locale NVARCHAR (2)=N'en'
AS
BEGIN
    IF (@locale IS NULL
        OR @locale NOT IN (N'de', N'en', N'es', N'fr', N'it', N'nl', N'pl', N'zh', N'cs', N'pt'))
        SET @locale = N'en';
    DECLARE @deviceSessionId AS UNIQUEIDENTIFIER;
    DECLARE @alarmStartTimeUTC AS DATETIME;
    DECLARE @alarmEndTimeUTC AS DATETIME;
    DECLARE @Waveforms TABLE (
        [ReportStartTimeUTC]   DATETIME       ,
        [ReportEndTimeUTC]     DATETIME       ,
        [WaveformStartTimeUTC] DATETIME       ,
        [WaveformEndTimeUTC]   DATETIME       ,
        [SampleRate]           INT            ,
        [WaveformData]         VARBINARY (MAX),
        [ChannelCode]          INT            ,
        [WaveformLabel]        NVARCHAR (250) ,
        [Compressed]           INT            );
    DECLARE @paddingSeconds AS INT = 6;
    SELECT @deviceSessionId = [DeviceSessionId],
           @alarmStartTimeUTC = DATEADD(SECOND, -@paddingSeconds, [AlarmStartTimeUTC]),
           @alarmEndTimeUTC = DATEADD(SECOND, @paddingSeconds, [AlarmEndTimeUTC])
    FROM   [dbo].[int_print_job_et_alarm]
    WHERE  [AlarmId] = @alarmId;
    IF (@numberOfSeconds > 0)
        SET @alarmEndTimeUTC = DATEADD(SECOND, @numberOfSeconds, @alarmStartTimeUTC);
    IF (@alarmEndTimeUTC IS NULL)
        SET @alarmEndTimeUTC = GETUTCDATE();
    INSERT INTO @Waveforms
    SELECT DISTINCT @alarmStartTimeUTC AS [ReportStartTimeUTC],
                    @alarmEndTimeUTC AS [ReportEndTimeUTC],
                    [Waveforms].[StartTimeUTC] AS [WaveformStartTimeUTC],
                    [Waveforms].[EndTimeUTC] AS [WaveformEndTimeUTC],
                    [Waveforms].[SampleRate],
                    [Waveforms].[WaveformData],
                    [Waveforms].[ChannelCode],
                    [ResourceStrings].[Value] AS [WaveformLabel],
                    [Waveforms].[Compressed]
    FROM   (SELECT [ipjew].[StartTimeUTC],
                   [ipjew].[EndTimeUTC],
                   [ipjew].[SampleRate],
                   [ipjew].[WaveformData],
                   [ipjew].[ChannelCode],
                   [ipjew].[CdiLabel],
                   1 AS [Compressed]
            FROM   [dbo].[int_print_job_et_waveform] AS [ipjew]
            WHERE  [DeviceSessionId] = @deviceSessionId
                   AND [StartTimeUTC] < @alarmEndTimeUTC
            UNION ALL
            SELECT [WaveformData].[StartTimeUTC] AS [StartTimeUTC],
                   [WaveformData].[EndTimeUTC] AS [EndTimeUTC],
                   [TopicFeedTypes].[SampleRate] AS [SampleRate],
                   [WaveformData].[Samples] AS [WaveformData],
                   [TopicFeedTypes].[ChannelCode] AS [ChannelCode],
                   [TopicFeedTypes].[Label] AS [CdiLabel],
                   [WaveformData].[Compressed]
            FROM   [dbo].[WaveformData]
                   INNER JOIN
                   [dbo].[TopicSessions]
                   ON [WaveformData].[TopicSessionId] = [TopicSessions].[Id]
                   INNER JOIN
                   [dbo].[TopicFeedTypes]
                   ON [TopicFeedTypes].[FeedTypeId] = [WaveformData].[TypeId]
            WHERE  [TopicSessions].[DeviceSessionId] = @deviceSessionId
                   AND [WaveformData].[StartTimeUTC] < @alarmEndTimeUTC) AS [Waveforms]
           INNER JOIN
           [dbo].[ResourceStrings]
           ON [CdiLabel] = [ResourceStrings].[Name]
              AND [Locale] = @locale
    WHERE  [Waveforms].[EndTimeUTC] > @alarmStartTimeUTC;
    DECLARE @LatestSample AS DATETIME;
    SELECT @LatestSample = MAX([WaveformEndTimeUTC])
    FROM   @Waveforms;
    IF (@alarmEndTimeUTC > @LatestSample)
        BEGIN
            INSERT INTO @Waveforms
            SELECT DISTINCT @alarmStartTimeUTC AS [ReportStartTimeUTC],
                            @alarmEndTimeUTC AS [ReportEndTimeUTC],
                            [StartTimeUTC] AS [WaveformStartTimeUTC],
                            [EndTimeUTC] AS [WaveformEndTimeUTC],
                            [SampleRate],
                            [WaveformData],
                            [ChannelCode],
                            [ResourceStrings].[Value] AS [WaveformLabel],
                            [Waveforms].[Compressed]
            FROM   (SELECT [TopicSessions].[DeviceSessionId],
                           [WaveformLiveData].[StartTimeUTC] AS [StartTimeUTC],
                           [WaveformLiveData].[EndTimeUTC] AS [EndTimeUTC],
                           [TopicFeedTypes].[SampleRate] AS [SampleRate],
                           [WaveformLiveData].[Samples] AS [WaveformData],
                           [TopicFeedTypes].[ChannelCode] AS [ChannelCode],
                           [TopicFeedTypes].[Label] AS [CdiLabel],
                           0 AS [Compressed]
                    FROM   [dbo].[WaveformLiveData]
                           INNER JOIN
                           [dbo].[TopicSessions]
                           ON [WaveformLiveData].[TopicInstanceId] = [TopicSessions].[TopicInstanceId]
                           INNER JOIN
                           [dbo].[TopicFeedTypes]
                           ON [TopicFeedTypes].[FeedTypeId] = [WaveformLiveData].[TypeId]
                    WHERE  [TopicSessions].[DeviceSessionId] = @deviceSessionId
                           AND [WaveformLiveData].[StartTimeUTC] < @alarmEndTimeUTC) AS [Waveforms]
                   INNER JOIN
                   [dbo].[ResourceStrings]
                   ON [CdiLabel] = [ResourceStrings].[Name]
                      AND [Locale] = @locale
            WHERE  [Waveforms].[EndTimeUTC] > @LatestSample;
        END
    SELECT   [ReportStartTimeUTC],
             [ReportEndTimeUTC],
             [WaveformStartTimeUTC],
             [WaveformEndTimeUTC],
             [SampleRate],
             [WaveformData],
             [ChannelCode],
             [WaveformLabel],
             [Compressed]
    FROM     @Waveforms
    ORDER BY [ChannelCode], [WaveformStartTimeUTC] ASC;
END

GO
CREATE PROCEDURE [dbo].[usp_PurgeDlAlarmData]
@FChunkSize INT, @PurgeDateUTC DATETIME, @AlarmsRowsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [gad]
            FROM   [dbo].[GeneralAlarmsData] AS [gad]
            WHERE  [gad].[StartDateTime] < @PurgeDateUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [lad]
            FROM   [dbo].[LimitAlarmsData] AS [lad]
            WHERE  [lad].[StartDateTime] < @PurgeDateUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [lcd]
            FROM   [dbo].[LimitChangeData] AS [lcd]
            WHERE  [lcd].[AcquiredDateTimeUTC] < @PurgeDateUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [asd]
            FROM   [dbo].[AlarmsStatusData] AS [asd]
            WHERE  [asd].[AcquiredDateTimeUTC] < @PurgeDateUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @AlarmsRowsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[usp_PurgeDlEncounterData]
@FChunkSize INT, @EncounterDataPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @PurgeDateTimeUTC AS DATETIME = DATEADD(DAY, -10, GETUTCDATE());
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[DeviceSessions]
            WHERE  [DeviceSessions].[EndTimeUTC] IS NOT NULL
                   AND [DeviceSessions].[EndTimeUTC] <= @PurgeDateTimeUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[TopicSessions]
            WHERE  [TopicSessions].[EndTimeUTC] IS NOT NULL
                   AND [TopicSessions].[EndTimeUTC] <= @PurgeDateTimeUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[PatientSessions]
            WHERE  [PatientSessions].[EndTimeUTC] IS NOT NULL
                   AND [PatientSessions].[EndTimeUTC] <= @PurgeDateTimeUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [dbo].[PatientData]
            WHERE  [PatientData].[PatientSessionId] IN (SELECT [PatientSessions].[Id]
                                                        FROM   [dbo].[PatientSessions]
                                                        WHERE  [EndTimeUTC] IS NOT NULL)
                   AND [PatientData].[TimestampUTC] <= @PurgeDateTimeUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @EncounterDataPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[usp_PurgeDlPrintJobsData]
@FChunkSize INT, @PurgeDate VARCHAR (30), @PrintJobsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DELETE TOP (@FChunkSize)
           [dbo].[PrintBlobData]
    WHERE  [PrintRequestId] IN (SELECT [Id]
                                FROM   [dbo].[PrintRequests]
                                WHERE  [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) < CAST (@PurgeDate AS DATETIME));
    SET @RC = @RC + @@ROWCOUNT;
    DELETE TOP (@FChunkSize)
           [dbo].[WaveformPrintData]
    WHERE  [PrintRequestId] IN (SELECT [Id]
                                FROM   [dbo].[PrintRequests]
                                WHERE  [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) < CAST (@PurgeDate AS DATETIME));
    SET @RC = @RC + @@ROWCOUNT;
    DELETE TOP (@FChunkSize)
           [dbo].[PrintRequests]
    WHERE  [dbo].[fnUtcDateTimeToLocalTime]([TimestampUTC]) < CAST (@PurgeDate AS DATETIME);
    SET @RC = @RC + @@ROWCOUNT;
    IF (@RC <> 0)
        SET @PrintJobsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[usp_PurgeDlVitalsData]
@FChunkSize INT, @PurgeDateUTC DATETIME, @HL7MonitorRowsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [vd]
            FROM   [dbo].[VitalsData] AS [vd]
            WHERE  [vd].[TimestampUTC] < @PurgeDateUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [sd]
            FROM   [dbo].[StatusData] AS [sd]
            WHERE  [sd].[SetId] IN (SELECT [sds].[Id]
                                    FROM   [dbo].[StatusDataSets] AS [sds]
                                    WHERE  [sds].[TimestampUTC] < @PurgeDateUTC);
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    SET @Loop = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [sds]
            FROM   [dbo].[StatusDataSets] AS [sds]
            WHERE  [sds].[TimestampUTC] < @PurgeDateUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @HL7MonitorRowsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[usp_PurgeDlWaveformData]
@FChunkSize INT, @PurgeDateUTC DATETIME, @WaveformDataPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0, @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [wd]
            FROM   [dbo].[WaveformData] AS [wd]
            WHERE  [wd].[StartTimeUTC] < @PurgeDateUTC;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @WaveformDataPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[usp_PurgeEventsData]
@FChunkSize INT, @PurgeDate DATETIME, @EventsDataRowsPurged INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RC AS INT = 0;
    DECLARE @Loop AS INT = 1;
    WHILE (@Loop > 0)
        BEGIN
            DELETE TOP (@FChunkSize)
                   [ed]
            FROM   [dbo].[EventsData] AS [ed]
            WHERE  [ed].[TimestampUTC] < @PurgeDate;
            SET @Loop = @@ROWCOUNT;
            SET @RC += @Loop;
        END
    IF (@RC <> 0)
        SET @EventsDataRowsPurged = @RC;
END

GO
CREATE PROCEDURE [dbo].[usp_PurgeTasks]
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        DECLARE @ChunkSize AS INT = 200;
        DECLARE @HL7SuccessPurgeDate AS DATETIME, @HL7SuccessRowsPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'HL7Success', @PurgeDate = @HL7SuccessPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @HL7ErrorPurgeDate AS DATETIME, @HL7ErrorRowsPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'HL7Error', @PurgeDate = @HL7ErrorPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @MonitorResultsPurgeDate AS DATETIME, @HL7MonitorRowsPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'MonitorResults', @PurgeDate = @MonitorResultsPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @EventsDataPurgeDate AS DATETIME, @EventsDataRowsPurged AS INT;
        EXECUTE [dbo].[PurgerwaveformParameters] @PurgeDate = @EventsDataPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @EventsDataPurgeDateUTC AS DATETIME = DATEADD(HOUR, 1, [dbo].[fnLocalDateTimeToUtcTime](@EventsDataPurgeDate));
        DECLARE @TwelveLeadRowsPurgeDate AS DATETIME, @TwelveLeadRowsPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'TwelveLead', @PurgeDate = @TwelveLeadRowsPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @AlarmRowsPurgedDate AS DATETIME, @AlarmsRowsPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'Alarm', @PurgeDate = @AlarmRowsPurgedDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @AlarmRowsPurgedDateUTC AS DATETIME = DATEADD(HOUR, 1, [dbo].[fnLocalDateTimeToUtcTime](@AlarmRowsPurgedDate));
        DECLARE @PrintJobsPurgedDate AS DATETIME, @PrintJobsPurgeCount AS INT;
        EXECUTE [dbo].[PurgerParameters] 'PrintJob', @PurgeDate = @PrintJobsPurgedDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @MessageLogPurgeDate AS DATETIME, @MessageLogPurgeCount AS INT;
        EXECUTE [dbo].[PurgerParameters] 'MsgLog', @PurgeDate = @MessageLogPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @HL7NotReadPurgedDate AS DATETIME, @HL7NotReadPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'HL7NotRead', @PurgeDate = @HL7NotReadPurgedDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @CEILogPurgeDate AS DATETIME, @CEILogPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'CEILog', @PurgeDate = @CEILogPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @WaveformPurgeDate AS DATETIME, @WaveformDataPurged AS INT;
        EXECUTE [dbo].[PurgerwaveformParameters] @PurgeDate = @WaveformPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @WaveformPurgeDateUTC AS DATETIME = DATEADD(HOUR, 1, [dbo].[fnLocalDateTimeToUtcTime](@WaveformPurgeDate));
        DECLARE @HL7PendingPurgeDate AS DATETIME, @HL7PendingDataPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'HL7Pending', @PurgeDate = @HL7PendingPurgeDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @EncounterDataPurged AS INT;
        DECLARE @CHAuditLogDate AS DATETIME, @ChAuditDataPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'CHAUDITLOG', @PurgeDate = @CHAuditLogDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @CHPatientSettingsDate AS DATETIME, @PatientSettingsDataPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'CHPATSETTINGS', @PurgeDate = @CHPatientSettingsDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        DECLARE @CHLogDataDate AS DATETIME, @CHLogDataPurged AS INT;
        EXECUTE [dbo].[PurgerParameters] 'CHLOGDATA', @PurgeDate = @CHLogDataDate OUTPUT, @ChunkSize = @ChunkSize OUTPUT;
        SET @HL7SuccessRowsPurged = 0;
        SET @HL7ErrorRowsPurged = 0;
        SET @HL7MonitorRowsPurged = 0;
        SET @EventsDataRowsPurged = 0;
        SET @TwelveLeadRowsPurged = 0;
        SET @AlarmsRowsPurged = 0;
        SET @PrintJobsPurgeCount = 0;
        SET @MessageLogPurgeCount = 0;
        SET @HL7NotReadPurged = 0;
        SET @CEILogPurged = 0;
        SET @WaveformDataPurged = 0;
        SET @HL7PendingDataPurged = 0;
        SET @ChAuditDataPurged = 0;
        SET @EncounterDataPurged = 0;
        SET @PatientSettingsDataPurged = 0;
        SET @CHLogDataPurged = 0;
        DECLARE @ErrorMessage AS NVARCHAR (4000), @ErrorNumber AS INT, @ErrorSeverity AS INT, @ErrorState AS INT, @ErrorLine AS INT, @ErrorProcedure AS NVARCHAR (200);
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_HL7_Success] @FChunkSize = @ChunkSize, @PurgeDate = @HL7SuccessPurgeDate, @HL7SuccessRowsPurged = @HL7SuccessRowsPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@HL7SuccessRowsPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_HL7_Success) at configured time interval : ' + RTRIM(CAST (@HL7SuccessPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_HL7_Error] @FChunkSize = @ChunkSize, @PurgeDate = @HL7ErrorPurgeDate, @HL7ErrorRowsPurged = @HL7ErrorRowsPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@HL7ErrorRowsPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_HL7_Error) at configured time interval : ' + RTRIM(CAST (@HL7ErrorPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            SET @HL7MonitorRowsPurged = 0;
            EXECUTE [dbo].[p_Purge_Result_Data] @FChunkSize = @ChunkSize, @PurgeDate = @MonitorResultsPurgeDate, @HL7MonitorRowsPurged = @HL7MonitorRowsPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@HL7MonitorRowsPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_Result_Data) at configured time interval : ' + RTRIM(CAST (@MonitorResultsPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[usp_PurgeEventsData] @FChunkSize = @ChunkSize, @PurgeDate = @EventsDataPurgeDateUTC, @EventsDataRowsPurged = @EventsDataRowsPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@EventsDataRowsPurged AS NVARCHAR (20)) + ') purged from ICS (usp_PurgeEventsData) at configured time interval : ' + RTRIM(CAST (@EventsDataPurgeDateUTC AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            SET @HL7MonitorRowsPurged = 0;
            EXECUTE [dbo].[usp_PurgeDlVitalsData] @FChunkSize = @ChunkSize, @PurgeDateUTC = @MonitorResultsPurgeDate, @HL7MonitorRowsPurged = @HL7MonitorRowsPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@HL7MonitorRowsPurged AS NVARCHAR (20)) + ') purged from ICS (usp_PurgeDlVitalsData) at configured time interval : ' + RTRIM(CAST (@MonitorResultsPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_12Lead_Data] @FChunkSize = @ChunkSize, @PurgeDate = @TwelveLeadRowsPurgeDate, @TwelveLeadRowsPurged = @TwelveLeadRowsPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@TwelveLeadRowsPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_12Lead_Data) at configured time interval : ' + RTRIM(CAST (@TwelveLeadRowsPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_Alarm_Data] @FChunkSize = @ChunkSize, @PurgeDate = @AlarmRowsPurgedDate, @AlarmsRowsPurged = @AlarmsRowsPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@AlarmsRowsPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_Alarm_Data) at configured time interval : ' + RTRIM(CAST (@AlarmRowsPurgedDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            SET @AlarmsRowsPurged = 0;
            EXECUTE [dbo].[usp_PurgeDlAlarmData] @FChunkSize = @ChunkSize, @PurgeDateUTC = @AlarmRowsPurgedDateUTC, @AlarmsRowsPurged = @AlarmsRowsPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@AlarmsRowsPurged AS NVARCHAR (20)) + ') purged from ICS (usp_PurgeDlAlarmData) at configured time interval : ' + RTRIM(CAST (@AlarmRowsPurgedDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_Print_Job_Data] @FChunkSize = @ChunkSize, @PurgeDate = @PrintJobsPurgedDate, @PrintJobsPurged = @PrintJobsPurgeCount OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@PrintJobsPurgeCount AS NVARCHAR (20)) + ') purged from ICS (p_Purge_Print_Job_Data) at configured time interval : ' + RTRIM(CAST (@PrintJobsPurgedDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            SET @PrintJobsPurgeCount = 0;
            EXECUTE [dbo].[p_Purge_ETPrintJobs_Data] @FChunkSize = @ChunkSize, @PurgeDate = @PrintJobsPurgedDate, @PrintJobsPurged = @PrintJobsPurgeCount OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@PrintJobsPurgeCount AS NVARCHAR (20)) + ') purged from ICS (p_Purge_ETPrintJobs_Data) at configured time interval : ' + RTRIM(CAST (@PrintJobsPurgedDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_msg_Log_Data] @FChunkSize = @ChunkSize, @PurgeDate = @MessageLogPurgeDate, @MessageLogPurged = @MessageLogPurgeCount OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@MessageLogPurgeCount AS NVARCHAR (20)) + ') purged from ICS (p_Purge_msg_Log_Data) at configured time interval : ' + RTRIM(CAST (@MessageLogPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_HL7_Not_Read] @FChunkSize = @ChunkSize, @PurgeDate = @HL7NotReadPurgedDate, @HL7NotReadPurged = @HL7NotReadPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@HL7NotReadPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_HL7_Not_Read) at configured time interval : ' + RTRIM(CAST (@HL7NotReadPurgedDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_CEI_Log_Data] @FChunkSize = @ChunkSize, @PurgeDate = @CEILogPurgeDate, @CEILogPurged = @CEILogPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@CEILogPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_CEI_Log_Data) at configured time interval : ' + RTRIM(CAST (@CEILogPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_WaveForm_Data] @FChunkSize = @ChunkSize, @PurgeDate = @WaveformPurgeDate, @WaveformDataPurged = @WaveformDataPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@WaveformDataPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_WaveForm_Data) at configured time interval : ' + RTRIM(CAST (@WaveformPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            SET @WaveformDataPurged = 0;
            EXECUTE [dbo].[usp_PurgeDlWaveformData] @FChunkSize = @ChunkSize, @PurgeDateUTC = @WaveformPurgeDateUTC, @WaveformDataPurged = @WaveformDataPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@WaveformDataPurged AS NVARCHAR (20)) + ') purged from ICS (usp_PurgeDlWaveformData) at configured time interval : ' + RTRIM(CAST (@WaveformPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_HL7_Pending] @FChunkSize = @ChunkSize, @PurgeDate = @HL7PendingPurgeDate, @HL7PendingDataPurged = @HL7PendingDataPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@HL7PendingDataPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_HL7_Pending) at configured time interval : ' + RTRIM(CAST (@HL7PendingPurgeDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_Encounter_Data] @FChunkSize = @ChunkSize, @EncounterDataPurged = @EncounterDataPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@EncounterDataPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_Encounter_Data).');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            SET @EncounterDataPurged = 0;
            EXECUTE [dbo].[usp_PurgeDlEncounterData] @FChunkSize = @ChunkSize, @EncounterDataPurged = @EncounterDataPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@EncounterDataPurged AS NVARCHAR (20)) + ') purged from ICS (usp_PurgeDlEncounterData).');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_ch_Audit_Log] @FChunkSize = @ChunkSize, @PurgeDate = @CHAuditLogDate, @ChAuditDataPurged = @ChAuditDataPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@ChAuditDataPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_ch_Audit_Log) at configured time interval : ' + RTRIM(CAST (@CHAuditLogDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_ch_Patient_Settings] @FChunkSize = @ChunkSize, @PurgeDate = @CHPatientSettingsDate, @PatientSettingsDataPurged = @PatientSettingsDataPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@PatientSettingsDataPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_ch_Patient_Settings) at configured time interval : ' + RTRIM(CAST (@CHPatientSettingsDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
        BEGIN TRY
            EXECUTE [dbo].[p_Purge_ch_Log_Data] @FChunkSize = @ChunkSize, @PurgeDate = @CHLogDataDate, @CHLogDataPurged = @CHLogDataPurged OUTPUT;
            PRINT (CONVERT (VARCHAR (30), GETDATE(), 121) + ' -- Records (' + CAST (@CHLogDataPurged AS NVARCHAR (20)) + ') purged from ICS (p_Purge_ch_Log_Data) at configured time interval : ' + RTRIM(CAST (@CHLogDataDate AS NVARCHAR (30))) + N'.');
        END TRY
        BEGIN CATCH
            SELECT @ErrorNumber = ERROR_NUMBER(),
                   @ErrorSeverity = ERROR_SEVERITY(),
                   @ErrorState = ERROR_STATE(),
                   @ErrorLine = ERROR_LINE(),
                   @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
            SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
            RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
                WITH LOG;
        END CATCH
    END TRY
    BEGIN CATCH
        SELECT @ErrorNumber = ERROR_NUMBER(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE(),
               @ErrorLine = ERROR_LINE(),
               @ErrorProcedure = COALESCE (ERROR_PROCEDURE(), N'(null)');
        SELECT @ErrorMessage = N'ICS Purger Error: %d, Level %d, State %d, Procedure %s, Line %d, Message: ' + COALESCE (ERROR_MESSAGE(), N'(null)');
        RAISERROR (@ErrorMessage, 10, 1, @ErrorNumber, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine)
            WITH LOG;
    END CATCH
END

GO
CREATE PROCEDURE [dbo].[usp_RemoveTrailingLiveData]
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @ChunkSize AS INT = 1500;
    DECLARE @DateString AS VARCHAR (30) = CAST (SYSDATETIME() AS VARCHAR (30));
    DECLARE @RowCount AS INT = @ChunkSize;
    WHILE (@RowCount > 0)
        BEGIN
            DELETE TOP (@ChunkSize)
                   [ld]
            FROM   [dbo].[LiveData] AS [ld]
                   INNER JOIN
                   (SELECT   [ld].[TopicInstanceId],
                             [ld].[FeedTypeId],
                             DATEADD(SECOND, -150, MAX([ld].[TimestampUTC])) AS [LatestUTC]
                    FROM     [dbo].[LiveData] AS [ld]
                    GROUP BY [ld].[TopicInstanceId], [ld].[FeedTypeId]) AS [TopicFeedLatestToKeep]
                   ON [ld].[TopicInstanceId] = [TopicFeedLatestToKeep].[TopicInstanceId]
                      AND [ld].[FeedTypeId] = [TopicFeedLatestToKeep].[FeedTypeId]
            WHERE  [ld].[TimestampUTC] < [TopicFeedLatestToKeep].[LatestUTC];
            SET @RowCount = @@ROWCOUNT;
            SET @DateString = CAST (SYSDATETIME() AS VARCHAR (30));
            RAISERROR (N'%s - %d rows deleted', 10, 1, @DateString, @RowCount)
                WITH NOWAIT;
        END
    DECLARE @PurgeDate AS DATETIME2 = DATEADD(DAY, -10, SYSUTCDATETIME());
    SET @RowCount = @ChunkSize;
    WHILE (@RowCount > 0)
        BEGIN
            DELETE TOP (@ChunkSize)
                   [ld]
            FROM   [dbo].[LiveData] AS [ld]
            WHERE  [ld].[TimestampUTC] < @PurgeDate;
            SET @RowCount = @@ROWCOUNT;
            SET @DateString = CAST (SYSDATETIME() AS VARCHAR (30));
            RAISERROR (N'%s - %d rows deleted', 10, 1, @DateString, @RowCount)
                WITH NOWAIT;
        END
END

GO
CREATE PROCEDURE [dbo].[usp_RemoveTrailingLiveWaveformData]
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @ChunkSize AS INT = 1500;
    DECLARE @DateString AS VARCHAR (30) = CAST (SYSUTCDATETIME() AS VARCHAR (30));
    DECLARE @RowCount AS INT = @ChunkSize;
    WHILE (@RowCount > 0)
        BEGIN
            DELETE TOP (@ChunkSize)
                   [wld]
            FROM   [dbo].[WaveformLiveData] AS [wld]
                   INNER JOIN
                   [dbo].[WaveformLiveData] AS [wld1]
                   ON [wld].[Id] = [wld1].[Id]
                   INNER JOIN
                   (SELECT   [wld2].[TopicInstanceId],
                             MAX([wld2].[EndTimeUTC]) AS [LatestUTC]
                    FROM     [dbo].[WaveformLiveData] AS [wld2]
                    GROUP BY [wld2].[TopicInstanceId]) AS [TopicFeedLatestToKeep]
                   ON [wld1].[TopicInstanceId] = [TopicFeedLatestToKeep].[TopicInstanceId]
            WHERE  [wld].[StartTimeUTC] < [TopicFeedLatestToKeep].[LatestUTC];
            SET @RowCount = @@ROWCOUNT;
            SET @DateString = CAST (SYSDATETIME() AS VARCHAR (30));
            RAISERROR (N'%s - %d rows deleted', 10, 1, @DateString, @RowCount)
                WITH NOWAIT;
        END
END

GO
CREATE PROCEDURE [dbo].[usp_RetrieveConfigurationSection]
@ApplicationName NVARCHAR (256), @SectionName NVARCHAR (256)
AS
BEGIN
    SELECT [SectionData],
           [UpdatedTimeStampUTC]
    FROM   [dbo].[tbl_ConfigurationData]
    WHERE  [ApplicationName] = @ApplicationName
           AND [SectionName] = @SectionName;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveBeginDeviceSession]
@beginDeviceSessionData [dbo].[DeviceSessionDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[Devices] ([Id], [Name])
    SELECT DISTINCT [DeviceId],
                    [UniqueDeviceName]
    FROM   @beginDeviceSessionData
    WHERE  NOT EXISTS (SELECT *
                       FROM   [dbo].[Devices]
                       WHERE  [Id] = [@beginDeviceSessionData].[DeviceId]);
    UPDATE [dbo].[DeviceSessions]
    SET    [EndTimeUTC] = [x].[BeginTimeUTC]
    FROM   (SELECT [ss].[Id],
                   [dd].[BeginTimeUTC]
            FROM   [dbo].[DeviceSessions] AS [ss]
                   INNER JOIN
                   @beginDeviceSessionData AS [dd]
                   ON [ss].[DeviceId] = [dd].[DeviceId]
                      AND [ss].[EndTimeUTC] IS NULL) AS [x]
    WHERE  [x].[Id] = [DeviceSessions].[Id];
    MERGE INTO [dbo].[DeviceSessions]
     AS [Target]
    USING @beginDeviceSessionData AS [Source] ON [Source].[Id] = [Target].[Id]
    WHEN NOT MATCHED BY TARGET THEN INSERT ([Id], [DeviceId], [BeginTimeUTC]) VALUES ([Source].[Id], [Source].[DeviceId], [Source].[BeginTimeUTC])
    WHEN MATCHED THEN UPDATE 
    SET [Target].[DeviceId]     = [Source].[DeviceId],
        [Target].[BeginTimeUTC] = [Source].[BeginTimeUTC];
END

GO
CREATE PROCEDURE [dbo].[usp_SaveBeginPatientSession]
@beginPatientSessionData [dbo].[PatientSessionDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    MERGE INTO [dbo].[PatientSessions]
    
    USING @beginPatientSessionData AS [Source] ON [Source].[Id] = [PatientSessions].[Id]
    WHEN NOT MATCHED THEN INSERT ([Id], [BeginTimeUTC]) VALUES ([Source].[Id], [Source].[BeginTimeUTC])
    WHEN MATCHED THEN UPDATE 
    SET [PatientSessions].[EndTimeUTC] = NULL;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveBeginTopicSession]
@beginTopicSessionData [dbo].[TopicSessionDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @zippedTopicSessionData AS [dbo].[TopicSessionDataType];
    INSERT INTO @zippedTopicSessionData ([Id], [TopicTypeId], [TopicInstanceId], [DeviceSessionId], [PatientSessionId], [BeginTimeUTC])
    SELECT   [Source].[Id],
             [Source].[TopicTypeId],
             [Source].[TopicInstanceId],
             [Source].[DeviceSessionId],
             [DataWithPatientSession].[PatientSessionId],
             MIN([Source].[BeginTimeUTC])
    FROM     @beginTopicSessionData AS [Source]
             LEFT OUTER JOIN
             @beginTopicSessionData AS [DataWithPatientSession]
             ON [DataWithPatientSession].[Id] = [Source].[Id]
                AND [DataWithPatientSession].[PatientSessionId] IS NOT NULL
    GROUP BY [Source].[Id], [Source].[TopicTypeId], [Source].[TopicInstanceId], [Source].[DeviceSessionId], [DataWithPatientSession].[PatientSessionId];
    UPDATE [dbo].[TopicSessions]
    SET    [TopicSessions].[EndTimeUTC] = [x].[BeginTimeUTC]
    FROM   (SELECT [ss].[Id],
                   [dd].[BeginTimeUTC]
            FROM   [dbo].[TopicSessions] AS [ss]
                   INNER JOIN
                   (SELECT [TopicInstanceId],
                           [PatientSessionId],
                           [BeginTimeUTC],
                           ROW_NUMBER() OVER (PARTITION BY [TopicInstanceId] ORDER BY [BeginTimeUTC] ASC) AS [RowNumber]
                    FROM   @zippedTopicSessionData AS [Source]) AS [dd]
                   ON [ss].[TopicInstanceId] = [dd].[TopicInstanceId]
                      AND [dd].[RowNumber] = 1
                      AND [ss].[EndTimeUTC] IS NULL
                      AND ([dd].[PatientSessionId] IS NULL
                           OR [ss].[PatientSessionId] IS NOT NULL)) AS [x]
    WHERE  [TopicSessions].[Id] = [x].[Id];
    INSERT INTO [dbo].[TopicSessions] ([Id], [TopicTypeId], [TopicInstanceId], [DeviceSessionId], [PatientSessionId], [BeginTimeUTC])
    SELECT [Source].[Id],
           [Source].[TopicTypeId],
           [Source].[TopicInstanceId],
           [Source].[DeviceSessionId],
           [Source].[PatientSessionId],
           [Source].[BeginTimeUTC]
    FROM   @zippedTopicSessionData AS [Source]
    WHERE  [Source].[Id] NOT IN (SELECT [Id]
                                 FROM   [dbo].[TopicSessions]);
    UPDATE [dbo].[TopicSessions]
    SET    [TopicSessions].[TopicTypeId]      = [Updates].[TopicTypeId],
           [TopicSessions].[TopicInstanceId]  = [Updates].[TopicInstanceId],
           [TopicSessions].[DeviceSessionId]  = [Updates].[DeviceSessionId],
           [TopicSessions].[PatientSessionId] = [Updates].[PatientSessionId],
           [TopicSessions].[BeginTimeUTC]     = [Updates].[BeginTimeUTC]
    FROM   (SELECT [Target].[Id],
                   [Source].[TopicTypeId],
                   [Source].[TopicInstanceId],
                   [Source].[DeviceSessionId],
                   [Source].[PatientSessionId],
                   [Source].[BeginTimeUTC]
            FROM   [dbo].[TopicSessions] AS [Target]
                   INNER JOIN
                   @zippedTopicSessionData AS [Source]
                   ON [Target].[Id] = [Source].[Id]
            WHERE  [Target].[BeginTimeUTC] IS NULL
                   AND [Target].[EndTimeUTC] IS NOT NULL) AS [Updates]
    WHERE  [Updates].[Id] = [TopicSessions].[Id];
    UPDATE [dbo].[TopicSessions]
    SET    [TopicSessions].[PatientSessionId] = [Updates].[PatientSessionId]
    FROM   (SELECT [Target].[Id],
                   [Source].[PatientSessionId]
            FROM   [dbo].[TopicSessions] AS [Target]
                   INNER JOIN
                   @zippedTopicSessionData AS [Source]
                   ON [Target].[Id] = [Source].[Id]
            WHERE  [Target].[BeginTimeUTC] IS NOT NULL
                   AND [Target].[PatientSessionId] IS NULL) AS [Updates]
    WHERE  [Updates].[Id] = [TopicSessions].[Id];
END

GO
CREATE PROCEDURE [dbo].[usp_SaveBlobPrintRequestDataSet]
@PrintRequestDataSetEntries [dbo].[PrintRequestDataSetEntriesType] READONLY, @PrintRequestDataSet [dbo].[PrintRequestDataType] READONLY, @BlobDataSet [dbo].[BlobDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[PrintJobs] ([Id], [TopicSessionId], [FeedTypeId])
    SELECT [PrintJobId] AS [Id],
           [TopicSessionId],
           [FeedTypeId]
    FROM   (SELECT DISTINCT [PrintJobId],
                            [TopicSessionId],
                            [FeedTypeId]
            FROM   @PrintRequestDataSetEntries
            WHERE  NOT EXISTS (SELECT *
                               FROM   [dbo].[PrintJobs]
                               WHERE  [PrintJobs].[Id] = [PrintJobId])) AS [NewPrintJobs];
    INSERT INTO [dbo].[PrintRequests] ([Id], [PrintJobId], [RequestTypeEnumValue], [RequestTypeEnumId], [TimestampUTC])
    SELECT [PrintRequestId] AS [Id],
           [PrintJobId],
           [RequestTypeEnumValue],
           [RequestTypeEnumId],
           [TimestampUTC]
    FROM   @PrintRequestDataSetEntries;
    INSERT INTO [dbo].[PrintRequestData]
    SELECT [Id],
           [PrintRequestId],
           [Name],
           [Value]
    FROM   @PrintRequestDataSet;
    INSERT INTO [dbo].[PrintBlobData]
    SELECT [Id],
           [PrintRequestId],
           [NumBytes],
           [Value]
    FROM   @BlobDataSet;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveCfgValues]
@keyname VARCHAR (40), @keyvalue VARCHAR (100)
AS
BEGIN
    IF NOT EXISTS (SELECT [keyname]
                   FROM   [dbo].[int_cfg_values]
                   WHERE  [keyname] = @keyname)
        INSERT  INTO [dbo].[int_cfg_values] ([keyname], [keyvalue])
        VALUES                             (@keyname, @keyvalue);
    ELSE
        UPDATE [dbo].[int_cfg_values]
        SET    [keyvalue] = @keyvalue
        WHERE  [keyname] = @keyname;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveConfigurationSection]
@ApplicationName NVARCHAR (256), @SectionName NVARCHAR (256), @SectionData XML
AS
BEGIN
    IF EXISTS (SELECT 1
               FROM   [dbo].[tbl_ConfigurationData]
               WHERE  [ApplicationName] = @ApplicationName
                      AND [SectionName] = @SectionName)
        BEGIN
            UPDATE [dbo].[tbl_ConfigurationData]
            SET    [SectionData]         = @SectionData,
                   [UpdatedTimeStampUTC] = GETUTCDATE()
            WHERE  [ApplicationName] = @ApplicationName
                   AND [SectionName] = @SectionName;
        END
    ELSE
        BEGIN
            INSERT  INTO [dbo].[tbl_ConfigurationData] ([ApplicationName], [SectionName], [SectionData], [UpdatedTimeStampUTC])
            VALUES                                    (@ApplicationName, CAST (@SectionName AS NVARCHAR (150)), @SectionData, GETUTCDATE());
        END
END

GO
CREATE PROCEDURE [dbo].[usp_SaveDeviceInfoDataSet]
@deviceInfoData [dbo].[DeviceInfoDataSetType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[DeviceInfoData] ([Id], [DeviceSessionId], [Name], [Value], [TimestampUTC])
    SELECT [Id],
           [DeviceSessionId],
           [Name],
           [Value],
           [TimestampUTC]
    FROM   @deviceInfoData;
    MERGE INTO [dbo].[int_mrn_map]
     AS [Dest]
    USING (SELECT ISNULL([PatientSessionsMapSequence].[PatientId], NEWID()) AS [PatientId],
                  [Facilities].[organization_id] AS [FacilityId],
                  [LatestPatientData].[ID1] AS [ID1],
                  [LatestPatientData].[ID2] AS [ID2]
           FROM   (SELECT [DeviceSessionId],
                          CASE WHEN CHARINDEX('+', [Value]) > 0 THEN LEFT([Value], CHARINDEX('+', [Value]) - 1) ELSE NULL END AS [FacilityValue]
                   FROM   (SELECT [DeviceSessionId],
                                  [Value],
                                  ROW_NUMBER() OVER (PARTITION BY [DeviceSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                           FROM   @deviceInfoData
                           WHERE  [Name] = 'Unit') AS [DeviceSessionFacilitySequence]
                   WHERE  [R] = 1) AS [LatestDeviceSessionFacility]
                  INNER JOIN
                  [dbo].[int_organization] AS [Facilities]
                  ON [category_cd] = 'F'
                     AND [organization_nm] = [LatestDeviceSessionFacility].[FacilityValue]
                  INNER JOIN
                  (SELECT [PatientSessionId],
                          [DeviceSessionId],
                          [ID1],
                          [ID2]
                   FROM   (SELECT [PatientSessionId],
                                  [DeviceSessionId],
                                  [ID1],
                                  [ID2],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                           FROM   [dbo].[PatientData]) AS [PatientDataSequence]
                   WHERE  [R] = 1
                          AND [ID1] IS NOT NULL) AS [LatestPatientData]
                  ON [LatestPatientData].[DeviceSessionId] = [LatestDeviceSessionFacility].[DeviceSessionId]
                  INNER JOIN
                  (SELECT [PatientSessionId],
                          [PatientId],
                          ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [R]
                   FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsMapSequence]
                  ON [PatientSessionsMapSequence].[R] = 1
                     AND [PatientSessionsMapSequence].[PatientSessionId] = [LatestPatientData].[PatientSessionId]) AS [Src] ON [Src].[PatientId] = [Dest].[patient_id]
                                                                                                                               AND [Dest].[merge_cd] = 'C'
    WHEN NOT MATCHED BY TARGET THEN INSERT ([organization_id], [mrn_xid], [patient_id], [merge_cd], [mrn_xid2]) VALUES ([Src].[FacilityId], [Src].[ID1], [Src].[PatientId], 'C', [Src].[ID2]);
END

GO
CREATE PROCEDURE [dbo].[usp_SaveEndDeviceSession]
@endDeviceSessionData [dbo].[DeviceSessionDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @closedDeviceSessions AS TABLE (
        [DeviceSessionId] UNIQUEIDENTIFIER NOT NULL,
        [EndTimeUTC]      DATETIME         NOT NULL);
    INSERT INTO @closedDeviceSessions
    SELECT [ss].[Id],
           [dd].[EndTimeUTC]
    FROM   [dbo].[DeviceSessions] AS [ss]
           INNER JOIN
           @endDeviceSessionData AS [dd]
           ON [ss].[Id] = [dd].[Id]
              AND [ss].[EndTimeUTC] IS NULL;
    UPDATE [dbo].[TopicSessions]
    SET    [TopicSessions].[EndTimeUTC] = [x].[EndTimeUTC]
    FROM   @closedDeviceSessions AS [x]
    WHERE  [TopicSessions].[DeviceSessionId] = [x].[DeviceSessionId]
           AND [TopicSessions].[EndTimeUTC] IS NULL;
    MERGE INTO [dbo].[DeviceSessions]
     AS [Target]
    USING @endDeviceSessionData AS [Source] ON [Source].[Id] = [Target].[Id]
    WHEN NOT MATCHED BY TARGET THEN INSERT ([Id], [DeviceId], [EndTimeUTC]) VALUES ([Source].[Id], [Source].[DeviceId], [Source].[EndTimeUTC])
    WHEN MATCHED THEN UPDATE 
    SET [Target].[EndTimeUTC] = [Source].[EndTimeUTC];
END

GO
CREATE PROCEDURE [dbo].[usp_SaveEndPatientSession]
@endPatientSessionData [dbo].[PatientSessionDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [dbo].[PatientSessions]
    SET    [EndTimeUTC] = [x].[EndTimeUTC]
    FROM   @endPatientSessionData AS [x]
    WHERE  [PatientSessions].[Id] = [x].[Id]
           AND [PatientSessions].[EndTimeUTC] IS NULL;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveEndTopicSession]
@endTopicSessionData [dbo].[TopicSessionDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    MERGE INTO [dbo].[TopicSessions]
     AS [Target]
    USING @endTopicSessionData AS [Source] ON [Source].[Id] = [Target].[Id]
    WHEN NOT MATCHED BY TARGET THEN INSERT ([Id], [EndTimeUTC]) VALUES ([Source].[Id], [Source].[EndTimeUTC])
    WHEN MATCHED THEN UPDATE 
    SET [Target].[EndTimeUTC] = [Source].[EndTimeUTC];
END

GO
CREATE PROCEDURE [dbo].[usp_SaveEventsDataSet]
@eventsData [dbo].[EventDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[EventsData] ([CategoryValue], [Type], [Subtype], [Value1], [Value2], [Status], [Valid_Leads], [TopicSessionId], [FeedTypeId], [TimestampUTC])
    SELECT [CategoryValue],
           [Type],
           [Subtype],
           [Value1],
           [Value2],
           [Status],
           [Valid_Leads],
           [TopicSessionId],
           [FeedTypeId],
           [TimestampUTC]
    FROM   @eventsData;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveGeneralAlarmsDataSet]
@GeneralAlarmsData [dbo].[GeneralAlarmsDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[AlarmsStatusData] ([Id], [AlarmId], [StatusTimeout], [StatusValue], [AcquiredDateTimeUTC], [Leads], [WaveformFeedTypeId], [TopicSessionId], [FeedTypeId], [IDEnumValue], [EnumGroupId])
    SELECT NEWID(),
           [AlarmId],
           [StatusTimeout],
           [StatusValue],
           [AcquiredDateTimeUTC],
           [Leads],
           [WaveformFeedTypeId],
           [TopicSessionId],
           [FeedTypeId],
           [IDEnumValue],
           [EnumGroupId]
    FROM   @GeneralAlarmsData
    WHERE  [StartDateTime] IS NULL;
    MERGE INTO [dbo].[GeneralAlarmsData]
     AS [Dest]
    USING (SELECT [StartingUpdatesSequence].[AlarmId],
                  [StatusTimeout],
                  [StartDateTime],
                  ISNULL([EndingUpdatesSequence].[EndDateTime], [TopicSessions].[EndTimeUTC]) AS [EndDateTime],
                  [StatusValue],
                  [PriorityWeightValue],
                  [AcquiredDateTimeUTC],
                  [Leads],
                  [WaveformFeedTypeId],
                  [TopicSessionId],
                  [FeedTypeId],
                  [IDEnumValue],
                  [EnumGroupId]
           FROM   (SELECT [AlarmId],
                          [StatusTimeout],
                          [StartDateTime],
                          [StatusValue],
                          [PriorityWeightValue],
                          [AcquiredDateTimeUTC],
                          [Leads],
                          [WaveformFeedTypeId],
                          [TopicSessionId],
                          [FeedTypeId],
                          [IDEnumValue],
                          [EnumGroupId],
                          ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] ASC) AS [RowNumber]
                   FROM   @GeneralAlarmsData
                   WHERE  [StartDateTime] IS NOT NULL) AS [StartingUpdatesSequence]
                  LEFT OUTER JOIN
                  (SELECT [AlarmId],
                          [EndDateTime],
                          ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] DESC) AS [RowNumber]
                   FROM   @GeneralAlarmsData
                   WHERE  [EndDateTime] IS NOT NULL) AS [EndingUpdatesSequence]
                  ON [EndingUpdatesSequence].[AlarmId] = [StartingUpdatesSequence].[AlarmId]
                     AND [EndingUpdatesSequence].[RowNumber] = 1
                  LEFT OUTER JOIN
                  [dbo].[TopicSessions]
                  ON [TopicSessions].[Id] = [StartingUpdatesSequence].[TopicSessionId]
           WHERE  [StartingUpdatesSequence].[RowNumber] = 1) AS [Src] ON [Src].[AlarmId] = [Dest].[AlarmId]
    WHEN NOT MATCHED BY TARGET THEN INSERT ([AlarmId], [StatusTimeout], [StartDateTime], [EndDateTime], [StatusValue], [PriorityWeightValue], [AcquiredDateTimeUTC], [Leads], [WaveformFeedTypeId], [TopicSessionId], [FeedTypeId], [IDEnumValue], [EnumGroupId]) VALUES ([Src].[AlarmId], [Src].[StatusTimeout], [Src].[StartDateTime], [Src].[EndDateTime], [Src].[StatusValue], [Src].[PriorityWeightValue], [Src].[AcquiredDateTimeUTC], [Src].[Leads], [Src].[WaveformFeedTypeId], [Src].[TopicSessionId], [Src].[FeedTypeId], [Src].[IDEnumValue], [Src].[EnumGroupId])
    WHEN MATCHED THEN UPDATE 
    SET [Dest].[EndDateTime] = [Src].[EndDateTime];
END

GO
CREATE PROCEDURE [dbo].[usp_SaveLimitAlarmDataSet]
@LimitAlarmsData [dbo].[LimitAlarmsDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[AlarmsStatusData] ([Id], [AlarmId], [StatusValue], [AcquiredDateTimeUTC], [Leads], [WaveformFeedTypeId], [TopicSessionId], [FeedTypeId], [IDEnumValue], [EnumGroupId])
    SELECT NEWID(),
           [AlarmId],
           [StatusValue],
           [AcquiredDateTimeUTC],
           [Leads],
           [WaveformFeedTypeId],
           [TopicSessionId],
           [FeedTypeId],
           [IDEnumValue],
           [EnumGroupId]
    FROM   @LimitAlarmsData
    WHERE  [StartDateTime] IS NULL;
    MERGE INTO [dbo].[LimitAlarmsData]
     AS [Dest]
    USING (SELECT [StartingUpdatesSequence].[AlarmId],
                  [SettingViolated],
                  [ViolatingValue],
                  [StartDateTime],
                  ISNULL([EndingUpdatesSequence].[EndDateTime], [TopicSessions].[EndTimeUTC]) AS [EndDateTime],
                  [StatusValue],
                  [DetectionTimestamp],
                  [Acknowledged],
                  [PriorityWeightValue],
                  [AcquiredDateTimeUTC],
                  [Leads],
                  [WaveformFeedTypeId],
                  [TopicSessionId],
                  [FeedTypeId],
                  [IDEnumValue],
                  [EnumGroupId]
           FROM   (SELECT [AlarmId],
                          [SettingViolated],
                          [ViolatingValue],
                          [StartDateTime],
                          [StatusValue],
                          [DetectionTimestamp],
                          [Acknowledged],
                          [PriorityWeightValue],
                          [AcquiredDateTimeUTC],
                          [Leads],
                          [WaveformFeedTypeId],
                          [TopicSessionId],
                          [FeedTypeId],
                          [IDEnumValue],
                          [EnumGroupId],
                          ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] ASC) AS [RowNumber]
                   FROM   @LimitAlarmsData
                   WHERE  [StartDateTime] IS NOT NULL) AS [StartingUpdatesSequence]
                  LEFT OUTER JOIN
                  (SELECT [AlarmId],
                          [EndDateTime],
                          ROW_NUMBER() OVER (PARTITION BY [AlarmId] ORDER BY [AcquiredDateTimeUTC] DESC) AS [RowNumber]
                   FROM   @LimitAlarmsData
                   WHERE  [EndDateTime] IS NOT NULL) AS [EndingUpdatesSequence]
                  ON [EndingUpdatesSequence].[AlarmId] = [StartingUpdatesSequence].[AlarmId]
                     AND [EndingUpdatesSequence].[RowNumber] = 1
                  LEFT OUTER JOIN
                  [dbo].[TopicSessions]
                  ON [TopicSessions].[Id] = [StartingUpdatesSequence].[TopicSessionId]
           WHERE  [StartingUpdatesSequence].[RowNumber] = 1) AS [Src] ON [Src].[AlarmId] = [Dest].[AlarmId]
    WHEN NOT MATCHED BY TARGET THEN INSERT ([AlarmId], [SettingViolated], [ViolatingValue], [StartDateTime], [EndDateTime], [StatusValue], [DetectionTimestamp], [Acknowledged], [PriorityWeightValue], [AcquiredDateTimeUTC], [Leads], [WaveformFeedTypeId], [TopicSessionId], [FeedTypeId], [IDEnumValue], [EnumGroupId]) VALUES ([Src].[AlarmId], [Src].[SettingViolated], [Src].[ViolatingValue], [Src].[StartDateTime], [Src].[EndDateTime], [Src].[StatusValue], [Src].[DetectionTimestamp], [Src].[Acknowledged], [Src].[PriorityWeightValue], [Src].[AcquiredDateTimeUTC], [Src].[Leads], [Src].[WaveformFeedTypeId], [Src].[TopicSessionId], [Src].[FeedTypeId], [Src].[IDEnumValue], [Src].[EnumGroupId])
    WHEN MATCHED THEN UPDATE 
    SET [Dest].[EndDateTime] = [Src].[EndDateTime];
END

GO
CREATE PROCEDURE [dbo].[usp_SaveLimitChangeDataSet]
@limitChangeData [dbo].[LimitChangeDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[LimitChangeData]
    SELECT [Id],
           [High],
           [Low],
           [ExtremeHigh],
           [ExtremeLow],
           [Desat],
           [AcquiredDateTimeUTC],
           [TopicSessionId],
           [FeedTypeId],
           [EnumGroupId],
           [IDEnumValue]
    FROM   @limitChangeData;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveLiveDataSet]
@LiveData [dbo].[NameValueDataSetType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[LiveData] ([Id], [TopicInstanceId], [FeedTypeId], [Name], [Value], [TimestampUTC])
    SELECT [ld].[Id],
           [ts].[TopicInstanceId],
           [ld].[FeedTypeId],
           [ld].[Name],
           [ld].[Value],
           [ld].[TimestampUTC]
    FROM   @LiveData AS [ld]
           INNER JOIN
           [dbo].[TopicSessions] AS [ts]
           ON [ts].[Id] = [ld].[TopicSessionId];
END

GO
CREATE PROCEDURE [dbo].[usp_SavePatientData]
@patientData [dbo].[PatientDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[PatientData] ([Id], [PatientSessionId], [DeviceSessionId], [LastName], [MiddleName], [FirstName], [FullName], [Gender], [ID1], [ID2], [DOB], [Weight], [WeightUOM], [Height], [HeightUOM], [BSA], [Location], [PatientType], [TimestampUTC])
    SELECT [d].[Id],
           [d].[PatientSessionId],
           [d].[DeviceSessionId],
           [d].[LastName],
           [d].[MiddleName],
           [d].[FirstName],
           [d].[FullName],
           [d].[Gender],
           [d].[ID1],
           [d].[ID2],
           [d].[DOB],
           [d].[Weight],
           [d].[WeightUOM],
           [d].[Height],
           [d].[HeightUOM],
           [d].[BSA],
           [d].[Location],
           [d].[PatientType],
           [d].[TimestampUTC]
    FROM   @patientData AS [d];
    INSERT INTO [dbo].[PatientSessionsMap] ([PatientSessionId], [PatientId])
    SELECT [Src].[PatientSessionId],
           [Src].[PatientId]
    FROM   (SELECT [LatestPatientData].[PatientSessionId] AS [PatientSessionId],
                   COALESCE ([int_mrn_map].[patient_id], [PatientSessionsMapSequence].[PatientId], NEWID()) AS [PatientId]
            FROM   (SELECT [PatientSessionId],
                           [ID1]
                    FROM   (SELECT [PatientSessionId],
                                   [ID1],
                                   ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                            FROM   @patientData) AS [PatientDataSequence]
                    WHERE  [R] = 1) AS [LatestPatientData]
                   LEFT OUTER JOIN
                   (SELECT [PatientSessionId],
                           [PatientId],
                           ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [R]
                    FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsMapSequence]
                   ON [PatientSessionsMapSequence].[R] = 1
                      AND [PatientSessionsMapSequence].[PatientSessionId] = [LatestPatientData].[PatientSessionId]
                      AND LEFT([LatestPatientData].[ID1], 1) <> '*'
                   LEFT OUTER JOIN
                   [dbo].[int_mrn_map]
                   ON [int_mrn_map].[mrn_xid] = [LatestPatientData].[ID1]
                      AND [int_mrn_map].[merge_cd] = 'C') AS [Src]
           LEFT OUTER JOIN
           (SELECT [PatientSessionId],
                   [PatientId],
                   ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [R]
            FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsMapSequence]
           ON [PatientSessionsMapSequence].[R] = 1
              AND [PatientSessionsMapSequence].[PatientSessionId] = [Src].[PatientSessionId]
              AND [PatientSessionsMapSequence].[PatientId] = [Src].[PatientId]
    WHERE  [PatientSessionsMapSequence].[PatientSessionId] IS NULL;
    MERGE INTO [dbo].[int_mrn_map]
     AS [Dest]
    USING (SELECT [int_organization].[organization_id] AS [FacilityId],
                  [LatestPatientSessionsMap].[PatientId] AS [PatientId],
                  [ID1],
                  [ID2]
           FROM   (SELECT [PatientSessionId],
                          [DeviceSessionId],
                          [ID1],
                          [ID2]
                   FROM   (SELECT [PatientSessionId],
                                  [DeviceSessionId],
                                  [ID1],
                                  [ID2],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                           FROM   @patientData) AS [PatientDataSequence]
                   WHERE  [R] = 1
                          AND LTRIM(RTRIM(ISNULL([ID1], ''))) <> '') AS [LatestPatientData]
                  INNER JOIN
                  (SELECT [DeviceSessionId],
                          CASE WHEN CHARINDEX('+', [Value]) > 0 THEN LEFT([Value], CHARINDEX('+', [Value]) - 1) ELSE NULL END AS [FacilityValue]
                   FROM   (SELECT [DeviceSessionId],
                                  [Value],
                                  ROW_NUMBER() OVER (PARTITION BY [DeviceSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                           FROM   [dbo].[DeviceInfoData]
                           WHERE  [Name] = 'Unit') AS [DeviceSessionFacilitySequence]
                   WHERE  [R] = 1) AS [LatestDeviceSessionFacility]
                  ON [LatestDeviceSessionFacility].[DeviceSessionId] = [LatestPatientData].[DeviceSessionId]
                  INNER JOIN
                  [dbo].[int_organization]
                  ON [organization_nm] = [LatestDeviceSessionFacility].[FacilityValue]
                     AND [category_cd] = 'F'
                  LEFT OUTER JOIN
                  (SELECT [PatientSessionId],
                          [PatientId]
                   FROM   (SELECT [PatientSessionId],
                                  [PatientId],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [R]
                           FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsMapSequence]
                   WHERE  [R] = 1) AS [LatestPatientSessionsMap]
                  ON [LatestPatientSessionsMap].[PatientSessionId] = [LatestPatientData].[PatientSessionId]) AS [Src] ON [Src].[PatientId] = [Dest].[patient_id]
                                                                                                                         AND [Dest].[merge_cd] = 'C'
    WHEN NOT MATCHED BY TARGET THEN INSERT ([organization_id], [mrn_xid], [patient_id], [merge_cd], [mrn_xid2]) VALUES ([Src].[FacilityId], [Src].[ID1], [Src].[PatientId], 'C', [Src].[ID2])
    WHEN MATCHED THEN UPDATE 
    SET [mrn_xid2] = ISNULL(NULLIF ([Src].[ID2], ''), [Dest].[mrn_xid2]),
        [mrn_xid]  = [Src].[ID1];
    MERGE INTO [dbo].[int_patient]
     AS [Dest]
    USING (SELECT [PatientId],
                  [DOB],
                  [int_misc_code].[code_id] AS [GenderCodeId]
           FROM   (SELECT [PatientSessionId],
                          [ID1],
                          [Gender],
                          [DOB]
                   FROM   (SELECT [PatientSessionId],
                                  [ID1],
                                  [Gender],
                                  [DOB],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                           FROM   @patientData) AS [PatientDataSequence]
                   WHERE  [R] = 1
                          AND [ID1] IS NOT NULL) AS [LatestPatientData]
                  INNER JOIN
                  (SELECT [PatientSessionId],
                          [PatientId]
                   FROM   (SELECT [PatientSessionId],
                                  [PatientId],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [R]
                           FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsMapSequence]
                   WHERE  [R] = 1) AS [LatestPatientSessionsMap]
                  ON [LatestPatientSessionsMap].[PatientSessionId] = [LatestPatientData].[PatientSessionId]
                  LEFT OUTER JOIN
                  [dbo].[int_misc_code]
                  ON [int_misc_code].[category_cd] = 'SEX'
                     AND [int_misc_code].[short_dsc] = [LatestPatientData].[Gender]) AS [Src] ON [Dest].[patient_id] = [Src].[PatientId]
    WHEN NOT MATCHED BY TARGET THEN INSERT ([patient_id], [dob], [gender_cid]) VALUES ([Src].[PatientId], [Src].[DOB], [Src].[GenderCodeId])
    WHEN MATCHED THEN UPDATE 
    SET [dob]        = ISNULL([Src].[DOB], [Dest].[dob]),
        [gender_cid] = ISNULL([Src].[GenderCodeId], [Dest].[gender_cid]);
    MERGE INTO [dbo].[int_person]
     AS [Dest]
    USING (SELECT [PatientId],
                  [FirstName],
                  [MiddleName],
                  [LastName]
           FROM   (SELECT [PatientSessionId],
                          [ID1],
                          [FirstName],
                          [MiddleName],
                          [LastName]
                   FROM   (SELECT [PatientSessionId],
                                  [ID1],
                                  [FirstName],
                                  [MiddleName],
                                  [LastName],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                           FROM   @patientData) AS [PatientDataSequence]
                   WHERE  [R] = 1
                          AND [ID1] IS NOT NULL) AS [LatestPatientData]
                  INNER JOIN
                  (SELECT [PatientSessionId],
                          [PatientId]
                   FROM   (SELECT [PatientSessionId],
                                  [PatientId],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [R]
                           FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsMapSequence]
                   WHERE  [R] = 1) AS [LatestPatientSessionsMap]
                  ON [LatestPatientSessionsMap].[PatientSessionId] = [LatestPatientData].[PatientSessionId]) AS [Src] ON [Dest].[person_id] = [Src].[PatientId]
    WHEN NOT MATCHED BY TARGET THEN INSERT ([person_id], [first_nm], [middle_nm], [last_nm]) VALUES ([Src].[PatientId], [Src].[FirstName], [Src].[MiddleName], [Src].[LastName])
    WHEN MATCHED THEN UPDATE 
    SET [first_nm]  = ISNULL(NULLIF ([Src].[FirstName], ''), [Dest].[first_nm]),
        [middle_nm] = ISNULL(NULLIF ([Src].[MiddleName], ''), [Dest].[middle_nm]),
        [last_nm]   = ISNULL(NULLIF ([Src].[LastName], ''), [Dest].[last_nm]);
END

GO
CREATE PROCEDURE [dbo].[usp_SavePrintRequestDataSet]
@PrintRequestDataSetEntries [dbo].[PrintRequestDataSetEntriesType] READONLY, @PrintRequestDataSet [dbo].[PrintRequestDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[PrintJobs] ([Id], [TopicSessionId], [FeedTypeId])
    SELECT [PrintJobId] AS [Id],
           [TopicSessionId],
           [FeedTypeId]
    FROM   (SELECT DISTINCT [PrintJobId],
                            [TopicSessionId],
                            [FeedTypeId]
            FROM   @PrintRequestDataSetEntries
            WHERE  NOT EXISTS (SELECT *
                               FROM   [dbo].[PrintJobs]
                               WHERE  [PrintJobs].[Id] = [PrintJobId])) AS [NewPrintJobs];
    INSERT INTO [dbo].[PrintRequests] ([Id], [PrintJobId], [RequestTypeEnumValue], [RequestTypeEnumId], [TimestampUTC])
    SELECT [PrintRequestId] AS [Id],
           [PrintJobId],
           [RequestTypeEnumValue],
           [RequestTypeEnumId],
           [TimestampUTC]
    FROM   @PrintRequestDataSetEntries;
    INSERT INTO [dbo].[PrintRequestData]
    SELECT [Id],
           [PrintRequestId],
           [Name],
           [Value]
    FROM   @PrintRequestDataSet;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveStatusDataSet]
@statusData [dbo].[NameValueDataSetType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[StatusDataSets] ([Id], [TopicSessionId], [FeedTypeId], [TimestampUTC])
    SELECT DISTINCT [SetId] AS [Id],
                    [TopicSessionId],
                    [FeedTypeId],
                    [TimestampUTC]
    FROM   @statusData;
    INSERT INTO [dbo].[StatusData] ([Id], [SetId], [Name], [Value])
    SELECT [Id],
           [SetId],
           [Name],
           [Value]
    FROM   @statusData;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveVitalsDataSet]
@vitalsData [dbo].[NameValueDataSetType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[VitalsData] ([SetId], [Name], [Value], [TopicSessionId], [FeedTypeId], [TimestampUTC])
    SELECT [SetId],
           [Name],
           [Value],
           [TopicSessionId],
           [FeedTypeId],
           [TimestampUTC]
    FROM   @vitalsData;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformAnnotationDataSet]
@WaveformAnnotationDataSet [dbo].[WaveformAnnotationDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[WaveformAnnotationData]
    SELECT [Id],
           [PrintRequestId],
           [ChannelIndex],
           [Annotation]
    FROM   @WaveformAnnotationDataSet;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformDataSet]
@waveformData [dbo].[WaveformDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[WaveformData] ([Id], [SampleCount], [TypeName], [TypeId], [Samples], [Compressed], [TopicSessionId], [StartTimeUTC], [EndTimeUTC])
    SELECT [Id],
           [SampleCount],
           [TypeName],
           [TypeId],
           [Samples],
           [Compressed],
           [TopicSessionId],
           [StartTimeUTC],
           [EndTimeUTC]
    FROM   @waveformData;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformLiveDataSet]
@waveformData [dbo].[WaveformDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[WaveformLiveData] ([Id], [SampleCount], [TypeName], [TypeId], [Samples], [TopicInstanceId], [StartTimeUTC], [EndTimeUTC])
    SELECT [wf].[Id],
           [wf].[SampleCount],
           [wf].[TypeName],
           [wf].[TypeId],
           [wf].[Samples],
           [ts].[TopicInstanceId],
           [wf].[StartTimeUTC],
           [wf].[EndTimeUTC]
    FROM   @waveformData AS [wf]
           INNER JOIN
           [dbo].[TopicSessions] AS [ts]
           ON [ts].[Id] = [wf].[TopicSessionId];
END

GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformPrintDataSet]
@WaveformPrintDataSet [dbo].[WaveformPrintDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[WaveformPrintData]
    SELECT [Id],
           [PrintRequestId],
           [ChannelIndex],
           [NumSamples],
           [Samples]
    FROM   @WaveformPrintDataSet;
END

GO
CREATE PROCEDURE [dbo].[usp_SaveWaveformPrintRequestDataSet]
@PrintRequestDataSetEntries [dbo].[PrintRequestDataSetEntriesType] READONLY, @PrintRequestDataSet [dbo].[PrintRequestDataType] READONLY, @ChannelInfoDataSet [dbo].[ChannelInfoDataType] READONLY
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO [dbo].[PrintJobs] ([Id], [TopicSessionId], [FeedTypeId])
    SELECT [PrintJobId] AS [Id],
           [TopicSessionId],
           [FeedTypeId]
    FROM   (SELECT DISTINCT [PrintJobId],
                            [TopicSessionId],
                            [FeedTypeId]
            FROM   @PrintRequestDataSetEntries
            WHERE  NOT EXISTS (SELECT *
                               FROM   [dbo].[PrintJobs]
                               WHERE  [PrintJobs].[Id] = [PrintJobId])) AS [NewPrintJobs];
    INSERT INTO [dbo].[PrintRequests] ([Id], [PrintJobId], [RequestTypeEnumValue], [RequestTypeEnumId], [TimestampUTC])
    SELECT [PrintRequestId] AS [Id],
           [PrintJobId],
           [RequestTypeEnumValue],
           [RequestTypeEnumId],
           [TimestampUTC]
    FROM   @PrintRequestDataSetEntries;
    INSERT INTO [dbo].[PrintRequestData]
    SELECT [Id],
           [PrintRequestId],
           [Name],
           [Value]
    FROM   @PrintRequestDataSet;
    INSERT INTO [dbo].[ChannelInfoData]
    SELECT [Id],
           [PrintRequestId],
           [ChannelIndex],
           [IsPrimaryECG],
           [IsSecondaryECG],
           [IsNonWaveformType],
           [SampleRate],
           [Scale],
           [ScaleValue],
           [ScaleMin],
           [ScaleMax],
           [ScaleTypeEnumValue],
           [Baseline],
           [YPointsPerUnit],
           [ChannelType]
    FROM   @ChannelInfoDataSet;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateApplicationSettingsInstanceId]
@applicationType VARCHAR (50), @oldInstanceId VARCHAR (50), @newInstanceId VARCHAR (50)
AS
BEGIN
    UPDATE [dbo].[ApplicationSettings]
    SET    [InstanceId] = @newInstanceId
    WHERE  [InstanceId] = @oldInstanceId;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateCEISettings]
@alarmNotificationMode INT=NULL, @vitalsUpdateInterval INT=NULL, @portNumber INT=NULL, @trackAlarmExecution TINYINT=NULL, @trackVitalsUpdateExecution TINYINT=NULL
AS
BEGIN
    UPDATE [dbo].[int_event_config]
    SET    [alarm_notification_mode]       = ISNULL(@alarmNotificationMode, [alarm_notification_mode]),
           [vitals_update_interval]        = ISNULL(@vitalsUpdateInterval, [vitals_update_interval]),
           [port_number]                   = ISNULL(@portNumber, [port_number]),
           [track_alarm_execution]         = ISNULL(@trackAlarmExecution, [track_alarm_execution]),
           [track_vitals_update_execution] = ISNULL(@trackVitalsUpdateExecution, [track_vitals_update_execution]);
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateEncounter]
@unit_org_id UNIQUEIDENTIFIER, @organization_id UNIQUEIDENTIFIER, @rm NVARCHAR (6), @bed NVARCHAR (6), @patient_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_encounter]
    SET    [unit_org_id]     = @unit_org_id,
           [organization_id] = @organization_id,
           [rm]              = @rm,
           [bed]             = @bed
    WHERE  [status_cd] = N'C'
           AND [patient_id] = @patient_id;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateGatewaySettings]
@network_id NVARCHAR (30), @enable_sw TINYINT, @recv_app NVARCHAR (30), @send_app NVARCHAR (30), @organization_id UNIQUEIDENTIFIER, @send_sys_id UNIQUEIDENTIFIER, @results_usid INT, @sleep_secs INT, @debug_level INT, @unit_org_id UNIQUEIDENTIFIER, @patient_id_type CHAR (4), @gateway_type CHAR (4), @auto_assign_id_sw TINYINT, @new_mrn_format NVARCHAR (80), @auto_chan_attach_sw TINYINT, @live_vitals_sw TINYINT, @live_waveform_size INT, @decnet_node INT, @node_name CHAR (5), @nodes_excluded NVARCHAR (255), @nodes_included NVARCHAR (255), @timemaster_sw TINYINT, @waveform_size INT, @print_enabled_sw TINYINT, @auto_record_alarm_sw TINYINT, @collect_12_lead_sw TINYINT, @print_auto_record_sw TINYINT, @encryption_status BIT, @gateway_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_gateway]
    SET    [network_id]           = @network_id,
           [hostname]             = N'localhost',
           [enable_sw]            = @enable_sw,
           [reconnect_secs]       = 0,
           [recv_app]             = @recv_app,
           [send_app]             = @send_app,
           [organization_id]      = @organization_id,
           [send_sys_id]          = @send_sys_id,
           [results_usid]         = @results_usid,
           [sleep_secs]           = @sleep_secs,
           [add_monitors_sw]      = 1,
           [debug_level]          = @debug_level,
           [unit_org_id]          = @unit_org_id,
           [patient_id_type]      = @patient_id_type,
           [add_patients_sw]      = 1,
           [gateway_type]         = @gateway_type,
           [auto_assign_id_sw]    = @auto_assign_id_sw,
           [new_mrn_format]       = @new_mrn_format,
           [auto_chan_attach_sw]  = @auto_chan_attach_sw,
           [live_vitals_sw]       = @live_vitals_sw,
           [live_waveform_size]   = @live_waveform_size,
           [decnet_node]          = @decnet_node,
           [node_name]            = @node_name,
           [nodes_excluded]       = @nodes_excluded,
           [nodes_included]       = @nodes_included,
           [timemaster_sw]        = @timemaster_sw,
           [waveform_size]        = @waveform_size,
           [print_enabled_sw]     = @print_enabled_sw,
           [auto_record_alarm_sw] = @auto_record_alarm_sw,
           [collect_12_lead_sw]   = @collect_12_lead_sw,
           [print_auto_record_sw] = @print_auto_record_sw,
           [encryption_status]    = @encryption_status
    WHERE  [gateway_id] = @gateway_id;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateMiscCode]
@organization_id UNIQUEIDENTIFIER, @sys_id UNIQUEIDENTIFIER, @category_cd CHAR (4), @method_cd NVARCHAR (10), @code NVARCHAR (80), @int_keystone_cd NVARCHAR (80), @short_dsc NVARCHAR (100), @verification_sw TINYINT, @code_id INT
AS
BEGIN
    UPDATE [dbo].[int_misc_code]
    SET    [organization_id] = @organization_id,
           [sys_id]          = @sys_id,
           [category_cd]     = @category_cd,
           [method_cd]       = @method_cd,
           [code]            = @code,
           [int_keystone_cd] = @int_keystone_cd,
           [short_dsc]       = @short_dsc,
           [verification_sw] = @verification_sw
    WHERE  [code_id] = @code_id;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateMonitor]
@monitor_dsc NVARCHAR (50), @unit_Org_id UNIQUEIDENTIFIER, @room NVARCHAR (12), @bed_cd NVARCHAR (20), @monitor_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_monitor]
    SET    [monitor_dsc] = @monitor_dsc,
           [unit_org_id] = @unit_Org_id,
           [room]        = @room,
           [bed_cd]      = @bed_cd
    WHERE  [monitor_id] = @monitor_id;
    UPDATE [dbo].[Devices]
    SET    [Description] = CAST (@monitor_dsc AS VARCHAR (50)),
           [Room]        = CAST (@room AS VARCHAR (12))
    WHERE  [Id] = @monitor_id;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateMrn]
@mrn_xid NVARCHAR (30), @mrn_xid2 NVARCHAR (30), @patient_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_mrn_map]
    SET    [mrn_xid]  = @mrn_xid,
           [mrn_xid2] = @mrn_xid2
    WHERE  [patient_id] = @patient_id;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateOrg]
@organizationCd NVARCHAR (20), @organizationNm NVARCHAR (50), @organizationId UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_organization]
    SET    [organization_cd] = @organizationCd,
           [organization_nm] = @organizationNm
    WHERE  [organization_id] = @organizationId;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateOrgRecord]
@auto_collect_interval INT, @outbound_interval INT, @printer_name VARCHAR (255), @alarm_printer_name VARCHAR (255), @organization_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_organization]
    SET    [auto_collect_interval] = @auto_collect_interval,
           [outbound_interval]     = @outbound_interval,
           [printer_name]          = @printer_name,
           [alarm_printer_name]    = @alarm_printer_name
    WHERE  [organization_id] = @organization_id;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdatePatient]
@dob DATETIME, @gender_cid INT, @patient_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_patient]
    SET    [dob]        = @dob,
           [gender_cid] = @gender_cid
    WHERE  [patient_id] = @patient_id;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdatePatientDemographicsToMonitor]
@patient_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_patient_monitor]
    SET    [monitor_status] = 'UPD'
    WHERE  [patient_id] = @patient_id
           AND [active_sw] = 1;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdatePerson]
@last_nm NVARCHAR (50), @first_nm NVARCHAR (50), @middle_nm NVARCHAR (50), @person_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_person]
    SET    [last_nm]   = @last_nm,
           [first_nm]  = @first_nm,
           [middle_nm] = @middle_nm
    WHERE  [person_id] = @person_id;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdatePersonName]
@last_nm NVARCHAR (50), @first_nm NVARCHAR (50), @middle_nm NVARCHAR (50), @person_nm_id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE [dbo].[int_person_name]
    SET    [last_nm]   = @last_nm,
           [first_nm]  = @first_nm,
           [middle_nm] = @middle_nm
    WHERE  [person_nm_id] = @person_nm_id
           AND [active_sw] = 1;
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateSysParameter_debugSw]
@debug_sw TINYINT
AS
BEGIN
    UPDATE [dbo].[int_system_parameter]
    SET    [debug_sw] = @debug_sw
    WHERE  [system_parameter_id] IN (1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 14);
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateSysParameter_parmVal]
@parm_value NVARCHAR (80), @name NVARCHAR (30)
AS
BEGIN
    UPDATE [dbo].[int_system_parameter]
    SET    [parm_value] = @parm_value
    WHERE  UPPER([name]) = @name;
END

GO
CREATE PROCEDURE [dbo].[WriteAnalysisTime]
@UserID UNIQUEIDENTIFIER, @PatientId UNIQUEIDENTIFIER, @StartFt BIGINT, @EndFt BIGINT, @AnalysisType INT
AS
BEGIN
    INSERT  INTO [dbo].[AnalysisTime] ([user_id], [patient_id], [start_ft], [end_ft], [analysis_type])
    VALUES                           (@UserID, @PatientId, @StartFt, @EndFt, @AnalysisType);
END

GO
CREATE PROCEDURE [dbo].[WriteBeatTimeLog]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @StartFt BIGINT, @NumBeats INT, @BeatData IMAGE, @SampleRate SMALLINT
AS
BEGIN
    INSERT  INTO [dbo].[int_beat_time_log] ([user_id], [patient_id], [start_ft], [num_beats], [beat_data], [sample_rate])
    VALUES                                (CAST (@UserID AS UNIQUEIDENTIFIER), CAST (@PatientId AS UNIQUEIDENTIFIER), @StartFt, @NumBeats, @BeatData, @SampleRate);
END

GO
CREATE PROCEDURE [dbo].[WriteBinInfo]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @TemplateSetIndex INT, @TemplateIndex INT, @BinNumber INT, @Source INT, @BeatCount INT, @FirstBeatNumber INT, @NonIgnoredCount INT, @FirstNonIgnoredBeat INT, @ISOOffset INT, @STOffset INT, @IPoint INT, @JPoint INT, @STClass INT, @SinglesBin INT, @EditBin INT, @SubclassNumber INT
AS
BEGIN
    INSERT  INTO [dbo].[int_bin_info] ([user_id], [patient_id], [template_set_index], [template_index], [bin_number], [source], [beat_count], [first_beat_number], [non_ignored_count], [first_non_ignored_beat], [iso_offset], [st_offset], [i_point], [j_point], [st_class], [singles_bin], [edit_bin], [subclass_number], [bin_image])
    VALUES                           (CAST (@UserID AS UNIQUEIDENTIFIER), CAST (@PatientId AS UNIQUEIDENTIFIER), @TemplateSetIndex, @TemplateIndex, @BinNumber, @Source, @BeatCount, @FirstBeatNumber, @NonIgnoredCount, @FirstNonIgnoredBeat, @ISOOffset, @STOffset, @IPoint, @JPoint, @STClass, @SinglesBin, @EditBin, @SubclassNumber, NULL);
END

GO
CREATE PROCEDURE [dbo].[WriteEventData]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @Type INT, @NumEvents INT, @EventData IMAGE, @SampleRate SMALLINT
AS
BEGIN
    INSERT  INTO [dbo].[AnalysisEvents] ([user_id], [patient_id], [type], [num_events], [sample_rate], [event_data])
    VALUES                             (CAST (@UserID AS UNIQUEIDENTIFIER), CAST (@PatientId AS UNIQUEIDENTIFIER), @Type, @NumEvents, @SampleRate, @EventData);
END

GO
CREATE PROCEDURE [dbo].[WritePacerSpikeLog]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @SampleRate SMALLINT, @StartFt BIGINT, @NumSpikes INT, @SpikeData IMAGE
AS
BEGIN
    INSERT  INTO [dbo].[PacerSpikeLog] ([user_id], [patient_id], [sample_rate], [start_ft], [num_spikes], [spike_data])
    VALUES                            (CAST (@UserID AS UNIQUEIDENTIFIER), CAST (@PatientId AS UNIQUEIDENTIFIER), @SampleRate, @StartFt, @NumSpikes, @SpikeData);
END

GO
CREATE PROCEDURE [dbo].[WriteTemplateSetInfo]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @TemplateSetIndex INT, @LeadOne INT, @LeadTwo INT, @NumberOfBins INT, @NumberOfTemplates INT
AS
BEGIN
    INSERT  INTO [dbo].[int_template_set_info] ([user_id], [patient_id], [template_set_index], [lead_one], [lead_two], [number_of_bins], [number_of_templates])
    VALUES                                    (CAST (@UserID AS UNIQUEIDENTIFIER), CAST (@PatientId AS UNIQUEIDENTIFIER), @TemplateSetIndex, @LeadOne, @LeadTwo, @NumberOfBins, @NumberOfTemplates);
END

GO
CREATE PROCEDURE [dbo].[WriteTrendData]
@UserID [dbo].[DUSER_ID], @PatientId [dbo].[DPATIENT_ID], @TotalCategories INT, @StartFT BIGINT, @TotalPeriods INT, @SamplesPerPeriod FLOAT (53), @TrendData IMAGE
AS
BEGIN
    INSERT  INTO [dbo].[TrendData] ([user_id], [patient_id], [total_categories], [start_ft], [total_periods], [samples_per_period], [trend_data])
    VALUES                        (CAST (@UserID AS UNIQUEIDENTIFIER), CAST (@PatientId AS UNIQUEIDENTIFIER), @TotalCategories, @StartFT, @TotalPeriods, CAST (@SamplesPerPeriod AS INT), @TrendData);
END

GO
CREATE PROCEDURE [dbo].[WriteTwelveLeadData]
@PatientId VARCHAR (256), @ReportID VARCHAR (256), @ReportDT DATETIME, @VersionNumber SMALLINT, @PatientName VARCHAR (50), @IdNum VARCHAR (20), @Birthdate VARCHAR (15), @Age VARCHAR (15), @Sex VARCHAR (1), @Height VARCHAR (15), @Weight VARCHAR (15), @ReportDate VARCHAR (15), @ReportTime VARCHAR (15), @VentRate INT, @PRInterval INT, @QT INT, @QTC INT, @QRSDuration INT, @PAxis INT, @QRSAxis INT, @TAxis INT, @Interpretation NVARCHAR (MAX), @SampleRate INT, @SampleCount INT, @NumYPoints INT, @Baseline INT, @YPointsPerUnit INT, @WaveformData IMAGE
AS
BEGIN
    INSERT  INTO [dbo].[int_12lead_report_new] ([patient_id], [report_id], [report_dt], [version_number], [patient_name], [id_number], [birthdate], [age], [sex], [height], [weight], [report_date], [report_time], [vent_rate], [pr_interval], [qt], [qtc], [qrs_duration], [p_axis], [qrs_axis], [t_axis], [interpretation], [sample_rate], [sample_count], [num_Ypoints], [baseline], [Ypoints_per_unit], [waveform_data])
    VALUES                                    (CAST (@PatientId AS UNIQUEIDENTIFIER), CAST (@ReportID AS UNIQUEIDENTIFIER), @ReportDT, @VersionNumber, @PatientName, @IdNum, @Birthdate, @Age, @Sex, @Height, @Weight, @ReportDate, @ReportTime, @VentRate, @PRInterval, @QT, @QTC, @QRSDuration, @PAxis, @QRSAxis, @TAxis, @Interpretation, @SampleRate, @SampleCount, @NumYPoints, @Baseline, @YPointsPerUnit, @WaveformData);
END

GO
CREATE TRIGGER [dbo].[FillVitalCopyTempTable]
    ON [dbo].[int_vital_live]
    AFTER INSERT, UPDATE
    AS BEGIN
           SET NOCOUNT ON;
           INSERT INTO [dbo].[int_vital_live_temp] ([patient_id], [orig_patient_id], [monitor_id], [collect_dt], [vital_value], [vital_time])
           SELECT [Inserted].[patient_id],
                  [Inserted].[orig_patient_id],
                  [Inserted].[monitor_id],
                  [Inserted].[collect_dt],
                  [Inserted].[vital_value],
                  [Inserted].[vital_time]
           FROM   [Inserted]
           WHERE  [Inserted].[vital_time] IS NOT NULL;
       END

GO
CREATE TRIGGER [dbo].[trg_Copy_General_Alarm]
    ON [dbo].[GeneralAlarmsData]
    FOR INSERT
    AS BEGIN
           SET NOCOUNT ON;
           INSERT INTO [dbo].[int_print_job_et_alarm] ([AlarmId], [PatientId], [TopicSessionId], [DeviceSessionId], [AlarmStartTimeUTC], [AlarmEndTimeUTC], [StrTitleLabel], [FirstName], [LastName], [FullName], [ID1], [ID2], [DOB], [FacilityName], [UnitName], [MonitorName], [StrMessage], [RowLastUpdatedOn])
           SELECT [Inserted].[AlarmId] AS [AlarmId],
                  [LatestPatientAssignment].[PatientId] AS [PatientId],
                  [TopicSessions].[Id] AS [TopicSessionId],
                  [DeviceSessions].[Id] AS [DeviceSessionId],
                  [Inserted].[StartDateTime] AS [AlarmStartTimeUTC],
                  [Inserted].[EndDateTime] AS [AlarmEndTimeUTC],
                  [AlarmResources].[Label] AS [StrTitleLabel],
                  [int_person].[first_nm] AS [FirstName],
                  [int_person].[last_nm] AS [LastName],
                  ISNULL([int_person].[last_nm], '') + ', ' + ISNULL([int_person].[first_nm], '') AS [FullName],
                  [int_mrn_map].[mrn_xid] AS [ID1],
                  [int_mrn_map].[mrn_xid2] AS [ID2],
                  [int_patient].[dob] AS [DOB],
                  [v_DeviceSessionAssignment].[FacilityName] AS [FacilityName],
                  [v_DeviceSessionAssignment].[UnitName] AS [UnitName],
                  [v_DeviceSessionAssignment].[MonitorName] AS [MonitorName],
                  [AlarmResources].[StrMessage] AS [StrMessage],
                  CAST (GETDATE() AS SMALLDATETIME) AS [RowLastUpdatedOn]
           FROM   [Inserted]
                  INNER JOIN
                  [dbo].[TopicSessions]
                  ON [TopicSessions].[Id] = [Inserted].[TopicSessionId]
                  INNER JOIN
                  [dbo].[DeviceSessions]
                  ON [DeviceSessions].[Id] = [TopicSessions].[DeviceSessionId]
                  INNER JOIN
                  (SELECT [PatientSessionId],
                          [PatientId]
                   FROM   (SELECT [PatientSessionId],
                                  [PatientId],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [RowNumber]
                           FROM   [dbo].[PatientSessionsMap]) AS [PatientAssignmentSequence]
                   WHERE  [PatientAssignmentSequence].[RowNumber] = 1) AS [LatestPatientAssignment]
                  ON [LatestPatientAssignment].[PatientSessionId] = [TopicSessions].[PatientSessionId]
                  LEFT OUTER JOIN
                  [dbo].[int_mrn_map]
                  ON [int_mrn_map].[patient_id] = [LatestPatientAssignment].[PatientId]
                     AND [int_mrn_map].[merge_cd] = 'C'
                  LEFT OUTER JOIN
                  [dbo].[int_patient]
                  ON [int_patient].[patient_id] = [LatestPatientAssignment].[PatientId]
                  LEFT OUTER JOIN
                  [dbo].[int_person]
                  ON [int_person].[person_id] = [LatestPatientAssignment].[PatientId]
                  INNER JOIN
                  [dbo].[v_DeviceSessionAssignment]
                  ON [v_DeviceSessionAssignment].[DeviceSessionId] = [DeviceSessions].[Id]
                  INNER JOIN
                  [dbo].[AlarmResources]
                  ON [AlarmResources].[EnumGroupId] = [Inserted].[EnumGroupId]
                     AND [AlarmResources].[IDEnumValue] = [Inserted].[IDEnumValue]
                     AND [Locale] = 'en'
           WHERE  [Inserted].[StatusValue] >= 32
                  AND [Inserted].[StatusValue] & 32 = 32;
       END

GO
CREATE TRIGGER [dbo].[trg_Copy_Limit_Alarm]
    ON [dbo].[LimitAlarmsData]
    FOR INSERT
    AS BEGIN
           SET NOCOUNT ON;
           INSERT INTO [dbo].[int_print_job_et_alarm] ([AlarmId], [PatientId], [TopicSessionId], [DeviceSessionId], [AlarmStartTimeUTC], [AlarmEndTimeUTC], [StrTitleLabel], [FirstName], [LastName], [FullName], [ID1], [ID2], [DOB], [FacilityName], [UnitName], [MonitorName], [StrMessage], [StrLimitFormat], [StrValueFormat], [ViolatingValue], [SettingViolated], [RowLastUpdatedOn])
           SELECT [Inserted].[AlarmId] AS [AlarmId],
                  [LatestPatientAssignment].[PatientId] AS [PatientId],
                  [TopicSessions].[Id] AS [TopicSessionId],
                  [DeviceSessions].[Id] AS [DeviceSessionId],
                  [Inserted].[StartDateTime] AS [AlarmStartTimeUTC],
                  [Inserted].[EndDateTime] AS [AlarmEndTimeUTC],
                  [AlarmResources].[Label] AS [StrTitleLabel],
                  [int_person].[first_nm] AS [FirstName],
                  [int_person].[last_nm] AS [LastName],
                  ISNULL([int_person].[last_nm], '') + ', ' + ISNULL([int_person].[first_nm], '') AS [FullName],
                  [int_mrn_map].[mrn_xid] AS [ID1],
                  [int_mrn_map].[mrn_xid2] AS [ID2],
                  [int_patient].[dob] AS [DOB],
                  [v_DeviceSessionAssignment].[FacilityName] AS [FacilityName],
                  [v_DeviceSessionAssignment].[UnitName] AS [UnitName],
                  [v_DeviceSessionAssignment].[MonitorName] AS [MonitorName],
                  [AlarmResources].[StrMessage] AS [StrMessage],
                  [AlarmResources].[StrLimitFormat] AS [StrLimitFormat],
                  [AlarmResources].[StrValueFormat] AS [StrValueFormat],
                  [Inserted].[ViolatingValue] AS [ViolatingValue],
                  [Inserted].[SettingViolated] AS [SettingViolated],
                  CAST (GETDATE() AS SMALLDATETIME) AS [RowLastUpdatedOn]
           FROM   [Inserted]
                  INNER JOIN
                  [dbo].[TopicSessions]
                  ON [TopicSessions].[Id] = [Inserted].[TopicSessionId]
                  INNER JOIN
                  [dbo].[DeviceSessions]
                  ON [DeviceSessions].[Id] = [TopicSessions].[DeviceSessionId]
                  INNER JOIN
                  (SELECT [PatientSessionId],
                          [PatientId]
                   FROM   (SELECT [PatientSessionId],
                                  [PatientId],
                                  ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [RowNumber]
                           FROM   [dbo].[PatientSessionsMap]) AS [PatientAssignmentSequence]
                   WHERE  [PatientAssignmentSequence].[RowNumber] = 1) AS [LatestPatientAssignment]
                  ON [LatestPatientAssignment].[PatientSessionId] = [TopicSessions].[PatientSessionId]
                  LEFT OUTER JOIN
                  [dbo].[int_mrn_map]
                  ON [int_mrn_map].[patient_id] = [LatestPatientAssignment].[PatientId]
                  LEFT OUTER JOIN
                  [dbo].[int_patient]
                  ON [int_patient].[patient_id] = [LatestPatientAssignment].[PatientId]
                  LEFT OUTER JOIN
                  [dbo].[int_person]
                  ON [int_person].[person_id] = [LatestPatientAssignment].[PatientId]
                  INNER JOIN
                  [dbo].[v_DeviceSessionAssignment]
                  ON [v_DeviceSessionAssignment].[DeviceSessionId] = [DeviceSessions].[Id]
                  INNER JOIN
                  [dbo].[AlarmResources]
                  ON [AlarmResources].[EnumGroupId] = [Inserted].[EnumGroupId]
                     AND [AlarmResources].[IDEnumValue] = [Inserted].[IDEnumValue]
                     AND [Locale] = 'en'
           WHERE  [Inserted].[StatusValue] >= 32
                  AND [Inserted].[StatusValue] & 32 = 32;
       END

GO
CREATE TRIGGER [dbo].[trg_int_encounter_HL7_Update_Map_AccountNumber_Encounter]
    ON [dbo].[int_encounter]
    AFTER INSERT
    AS BEGIN
           SET NOCOUNT ON;
           DECLARE @act_guid AS UNIQUEIDENTIFIER, @org_guid AS UNIQUEIDENTIFIER, @pat_guid AS UNIQUEIDENTIFIER;
           SELECT @act_guid = [ACCOUNT].[account_id],
                  @org_guid = [ACCOUNT].[organization_id],
                  @pat_guid = [Inserted].[patient_id]
           FROM   [Inserted]
                  INNER JOIN
                  [dbo].[int_mrn_map] AS [MAP]
                  ON [MAP].[patient_id] = [Inserted].[patient_id]
                  INNER JOIN
                  [dbo].[int_account] AS [ACCOUNT]
                  ON [ACCOUNT].[account_xid] = [MAP].[mrn_xid2]
           WHERE  ([Inserted].[discharge_dt] IS NULL)
                  AND ([Inserted].[status_cd] = N'C');
           UPDATE [dbo].[int_encounter]
           SET    [account_id] = @act_guid
           WHERE  [patient_id] = @pat_guid
                  AND [status_cd] = N'C'
                  AND [monitor_created] = 1
                  AND [organization_id] = @org_guid;
       END

GO
CREATE TRIGGER [dbo].[trg_TopicSessions_CloseAlarms]
    ON [dbo].[TopicSessions]
    FOR INSERT, UPDATE
    AS BEGIN
           SET NOCOUNT ON;
           SELECT   [TopicSessionUpdatesWithEndTime].[TopicSessionId],
                    MAX([TopicSessionUpdatesWithEndTime].[EndTimeUTC]) AS [EndTimeUTC]
           INTO     [#ClosingTimes]
           FROM     (SELECT [Inserted].[Id] AS [TopicSessionId],
                            [Inserted].[EndTimeUTC]
                     FROM   [Inserted]
                     WHERE  [Inserted].[EndTimeUTC] IS NOT NULL) AS [TopicSessionUpdatesWithEndTime]
           GROUP BY [TopicSessionUpdatesWithEndTime].[TopicSessionId];
           UPDATE [dbo].[GeneralAlarmsData]
           SET    [EndDateTime] = [Src].[EndTimeUTC]
           FROM   [#ClosingTimes] AS [Src]
           WHERE  [GeneralAlarmsData].[TopicSessionId] = [Src].[TopicSessionId]
                  AND [GeneralAlarmsData].[EndDateTime] IS NULL;
           UPDATE [dbo].[LimitAlarmsData]
           SET    [EndDateTime] = [Src].[EndTimeUTC]
           FROM   [#ClosingTimes] AS [Src]
           WHERE  [LimitAlarmsData].[TopicSessionId] = [Src].[TopicSessionId]
                  AND [LimitAlarmsData].[EndDateTime] IS NULL;
       END

GO
CREATE TRIGGER [dbo].[trg_Update_General_Alarm]
    ON [dbo].[GeneralAlarmsData]
    FOR UPDATE
    AS BEGIN
           SET NOCOUNT ON;
           UPDATE [dbo].[int_print_job_et_alarm]
           SET    [AlarmEndTimeUTC]  = [Inserted].[EndDateTime],
                  [RowLastUpdatedOn] = CAST (GETDATE() AS SMALLDATETIME)
           FROM   [dbo].[int_print_job_et_alarm]
                  INNER JOIN
                  [Inserted]
                  ON [int_print_job_et_alarm].[AlarmId] = [Inserted].[AlarmId]
           WHERE  [Inserted].[EndDateTime] IS NOT NULL;
       END

GO
CREATE TRIGGER [dbo].[TRG_UPDATE_HL7_ACCOUNT]
    ON [dbo].[int_mrn_map]
    FOR INSERT, UPDATE
    AS BEGIN
           SET NOCOUNT ON;
           DECLARE @act_xid AS NVARCHAR (40), @org_guid AS UNIQUEIDENTIFIER, @app_name AS VARCHAR (35);
           SET @app_name = APP_NAME();
           SELECT @act_xid = [Inserted].[mrn_xid2]
           FROM   [Inserted];
           IF @act_xid = ''
               SET @act_xid = NULL;
           IF ((@app_name <> '.Net SqlClient Data Provider')
               AND (@act_xid IS NOT NULL))
               BEGIN
                   IF NOT EXISTS (SELECT [int_account].[account_xid]
                                  FROM   [Inserted]
                                         INNER JOIN
                                         [dbo].[int_encounter]
                                         ON ([Inserted].[patient_id] = [int_encounter].[patient_id])
                                         INNER JOIN
                                         [dbo].[int_account]
                                         ON ([int_encounter].[account_id] = [int_account].[account_id])
                                  WHERE  ([int_account].[account_xid] = [Inserted].[mrn_xid2])
                                         AND ([int_encounter].[discharge_dt] IS NULL)
                                         AND ([int_encounter].[patient_id] = [Inserted].[patient_id]))
                       BEGIN
                           SELECT @org_guid = [Inserted].[organization_id]
                           FROM   [Inserted];
                           MERGE INTO [dbo].[int_account]
                            AS [Dst]
                           USING (VALUES (@act_xid)) AS [Src]([account_xid]) ON [Dst].[account_xid] = [Src].[account_xid]
                           WHEN NOT MATCHED BY TARGET THEN INSERT ([account_id], [organization_id], [account_xid], [account_open_dt]) VALUES (NEWID(), @org_guid, @act_xid, GETDATE())
                           WHEN MATCHED THEN UPDATE 
                           SET [organization_id] = @org_guid;
                       END
               END
       END

GO
CREATE TRIGGER [dbo].[trg_Update_Limit_Alarm]
    ON [dbo].[LimitAlarmsData]
    FOR UPDATE
    AS BEGIN
           SET NOCOUNT ON;
           UPDATE [dbo].[int_print_job_et_alarm]
           SET    [AlarmEndTimeUTC]  = [Inserted].[EndDateTime],
                  [RowLastUpdatedOn] = CAST (GETDATE() AS SMALLDATETIME)
           FROM   [dbo].[int_print_job_et_alarm]
                  INNER JOIN
                  [Inserted]
                  ON [int_print_job_et_alarm].[AlarmId] = [Inserted].[AlarmId]
           WHERE  [Inserted].[EndDateTime] IS NOT NULL;
       END

GO
CREATE TRIGGER [dbo].[trgRefreshVitalDataCopy]
    ON [dbo].[int_vital_live_temp]
    AFTER INSERT
    AS BEGIN
           SET NOCOUNT ON;
           DELETE [dbo].[int_vital_live_temp]
           WHERE  [createdDT] < GETDATE() - 0.002;
       END

GO
CREATE TRIGGER [dbo].[trig_mrn_map]
    ON [dbo].[int_mrn_map]
    FOR INSERT, UPDATE
    AS INSERT INTO [dbo].[PatientSessionsMap]
       SELECT [LatestID1Assignment].[PatientSessionId] AS [PatientSessionId],
              inserted.[patient_id] AS [PatientId]
       FROM   inserted
              INNER JOIN
              (SELECT [PatientSessionId],
                      [ID1]
               FROM   (SELECT [PatientSessionId],
                              [ID1],
                              ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [TimestampUTC] DESC) AS [R]
                       FROM   [dbo].[PatientData]) AS [AssignmentSequence]
               WHERE  [R] = 1) AS [LatestID1Assignment]
              ON [ID1] = inserted.[mrn_xid]
              LEFT OUTER JOIN
              (SELECT [PatientSessionId],
                      [PatientId],
                      ROW_NUMBER() OVER (PARTITION BY [PatientSessionId] ORDER BY [Sequence] DESC) AS [R]
               FROM   [dbo].[PatientSessionsMap]) AS [PatientSessionsMapSequence]
              ON [PatientSessionsMapSequence].[R] = 1
                 AND [PatientSessionsMapSequence].[PatientSessionId] = [LatestID1Assignment].[PatientSessionId]
                 AND [PatientSessionsMapSequence].[PatientId] = inserted.[patient_id]
       WHERE  [PatientSessionsMapSequence].[PatientSessionId] IS NULL
              AND inserted.[merge_cd] = 'C';

GO
CREATE TYPE [dbo].[DCFG_VALUES]
    FROM NVARCHAR (1800) NULL;

GO
CREATE TYPE [dbo].[DCHANNEL_TYPE]
    FROM VARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DCHANNEL_TYPE_ID]
    FROM VARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DCOMMENT]
    FROM NVARCHAR (200) NULL;

GO
CREATE TYPE [dbo].[DFACILITY_ID]
    FROM VARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DFIRST_NAME]
    FROM NVARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DGDS_CODE]
    FROM VARCHAR (80) NULL;

GO
CREATE TYPE [dbo].[DKEY_NAME]
    FROM VARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DLAST_NAME]
    FROM NVARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DMRN_ID]
    FROM NVARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DPASSWORD]
    FROM NVARCHAR (80) NULL;

GO
CREATE TYPE [dbo].[DPATIENT_ID]
    FROM VARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DTITLE]
    FROM NVARCHAR (50) NULL;

GO
CREATE TYPE [dbo].[DUNIT_ID]
    FROM VARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DUSER_ID]
    FROM VARCHAR (40) NULL;

GO
CREATE TYPE [dbo].[DUSER_NAME]
    FROM VARCHAR (64) NULL;

GO
CREATE TYPE [dbo].[DWAVE_COLOR]
    FROM VARCHAR (50) NULL;

GO
CREATE TYPE [dbo].[BlobDataType] AS TABLE (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId] UNIQUEIDENTIFIER NOT NULL,
    [NumBytes]       INT              NOT NULL,
    [Value]          VARBINARY (MAX)  NOT NULL);

GO
CREATE TYPE [dbo].[ChannelInfoDataType] AS TABLE (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId]     UNIQUEIDENTIFIER NOT NULL,
    [ChannelIndex]       INT              NOT NULL,
    [IsPrimaryECG]       BIT              NOT NULL,
    [IsSecondaryECG]     BIT              NOT NULL,
    [IsNonWaveformType]  BIT              NOT NULL,
    [SampleRate]         INT              NULL,
    [Scale]              INT              NULL,
    [ScaleValue]         FLOAT (53)       NULL,
    [ScaleMin]           FLOAT (53)       NULL,
    [ScaleMax]           FLOAT (53)       NULL,
    [ScaleTypeEnumValue] INT              NULL,
    [Baseline]           INT              NULL,
    [YPointsPerUnit]     INT              NULL,
    [ChannelType]        INT              NOT NULL);

GO
CREATE TYPE [dbo].[DeviceInfoDataSetType] AS TABLE (
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [Name]            VARCHAR (25)     NOT NULL,
    [Value]           VARCHAR (100)    NULL,
    [DeviceSessionId] UNIQUEIDENTIFIER NOT NULL,
    [TimestampUTC]    DATETIME         NOT NULL);

GO
CREATE TYPE [dbo].[DeviceSessionDataType] AS TABLE (
    [Id]               UNIQUEIDENTIFIER NULL,
    [DeviceId]         UNIQUEIDENTIFIER NULL,
    [UniqueDeviceName] VARCHAR (50)     NULL,
    [BeginTimeUTC]     DATETIME         NULL,
    [EndTimeUTC]       DATETIME         NULL);

GO
CREATE TYPE [dbo].[EventDataType] AS TABLE (
    [CategoryValue]  INT              NOT NULL,
    [Type]           INT              NOT NULL,
    [Subtype]        INT              NOT NULL,
    [Value1]         REAL             NOT NULL,
    [Value2]         REAL             NOT NULL,
    [Status]         INT              NOT NULL,
    [Valid_Leads]    INT              NOT NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]     UNIQUEIDENTIFIER NOT NULL,
    [TimestampUTC]   DATETIME         NOT NULL);

GO
CREATE TYPE [dbo].[GdsCodes] AS TABLE (
    [GdsCode] VARCHAR (40) NULL);

GO
CREATE TYPE [dbo].[GeneralAlarmsDataType] AS TABLE (
    [AlarmId]             UNIQUEIDENTIFIER NOT NULL,
    [StatusTimeout]       TINYINT          NULL,
    [StartDateTime]       DATETIME         NULL,
    [EndDateTime]         DATETIME         NULL,
    [StatusValue]         INT              NOT NULL,
    [PriorityWeightValue] INT              NOT NULL,
    [AcquiredDateTimeUTC] DATETIME         NOT NULL,
    [Leads]               INT              NOT NULL,
    [WaveformFeedTypeId]  UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId]      UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]          UNIQUEIDENTIFIER NOT NULL,
    [IDEnumValue]         INT              NOT NULL,
    [EnumGroupId]         UNIQUEIDENTIFIER NOT NULL);

GO
CREATE TYPE [dbo].[GetPatientUpdateInformationType] AS TABLE (
    [DeviceId]         UNIQUEIDENTIFIER NOT NULL,
    [PatientSessionId] UNIQUEIDENTIFIER NOT NULL,
    [ID1]              VARCHAR (MAX)    NOT NULL);

GO
CREATE TYPE [dbo].[GuidList] AS TABLE (
    [Item] UNIQUEIDENTIFIER NOT NULL);

GO
CREATE TYPE [dbo].[KeyValueTableType] AS TABLE (
    [ApplicationType] VARCHAR (50)   NOT NULL,
    [InstanceId]      VARCHAR (50)   NOT NULL,
    [Key]             VARCHAR (50)   NOT NULL,
    [Value]           VARCHAR (5000) NULL);

GO
CREATE TYPE [dbo].[LimitAlarmsDataType] AS TABLE (
    [AlarmId]             UNIQUEIDENTIFIER NOT NULL,
    [SettingViolated]     VARCHAR (25)     NOT NULL,
    [ViolatingValue]      VARCHAR (25)     NOT NULL,
    [StartDateTime]       DATETIME         NULL,
    [EndDateTime]         DATETIME         NULL,
    [StatusValue]         INT              NOT NULL,
    [DetectionTimestamp]  DATETIME         NULL,
    [Acknowledged]        BIT              NOT NULL,
    [PriorityWeightValue] INT              NOT NULL,
    [AcquiredDateTimeUTC] DATETIME         NOT NULL,
    [Leads]               INT              NOT NULL,
    [WaveformFeedTypeId]  UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId]      UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]          UNIQUEIDENTIFIER NOT NULL,
    [IDEnumValue]         INT              NULL,
    [EnumGroupId]         UNIQUEIDENTIFIER NOT NULL);

GO
CREATE TYPE [dbo].[LimitChangeDataType] AS TABLE (
    [Id]                  UNIQUEIDENTIFIER NOT NULL,
    [High]                VARCHAR (25)     NULL,
    [Low]                 VARCHAR (25)     NULL,
    [ExtremeHigh]         VARCHAR (25)     NULL,
    [ExtremeLow]          VARCHAR (25)     NULL,
    [Desat]               VARCHAR (25)     NULL,
    [AcquiredDateTimeUTC] DATETIME         NOT NULL,
    [TopicSessionId]      UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]          UNIQUEIDENTIFIER NOT NULL,
    [EnumGroupId]         UNIQUEIDENTIFIER NOT NULL,
    [IDEnumValue]         INT              NOT NULL);

GO
CREATE TYPE [dbo].[MonitorIdTable] AS TABLE (
    [Monitor_Id] UNIQUEIDENTIFIER NULL);

GO
CREATE TYPE [dbo].[NameValueDataSetType] AS TABLE (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [SetId]          UNIQUEIDENTIFIER NOT NULL,
    [Name]           VARCHAR (25)     NOT NULL,
    [Value]          VARCHAR (25)     NULL,
    [FeedTypeId]     UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [TimestampUTC]   DATETIME         NOT NULL);

GO
CREATE TYPE [dbo].[OruMessages] AS TABLE (
    [msg_status]       NCHAR (10)     NOT NULL,
    [msg_no]           CHAR (20)      NOT NULL,
    [HL7_text_long]    NTEXT          NULL,
    [HL7_text_short]   NVARCHAR (255) NULL,
    [patient_id]       NVARCHAR (60)  NULL,
    [msh_system]       NVARCHAR (50)  NOT NULL,
    [msh_organization] NVARCHAR (50)  NOT NULL,
    [msh_event_cd]     NCHAR (10)     NOT NULL,
    [msh_msg_type]     NCHAR (10)     NOT NULL,
    [sent_dt]          DATETIME       NULL,
    [queued_dt]        DATETIME       NOT NULL);

GO
CREATE TYPE [dbo].[PatientDataType] AS TABLE (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [PatientSessionId] UNIQUEIDENTIFIER NULL,
    [DeviceSessionId]  UNIQUEIDENTIFIER NULL,
    [LastName]         NVARCHAR (MAX)   NULL,
    [MiddleName]       NVARCHAR (MAX)   NULL,
    [FirstName]        NVARCHAR (MAX)   NULL,
    [FullName]         NVARCHAR (MAX)   NULL,
    [Gender]           NVARCHAR (MAX)   NULL,
    [ID1]              NVARCHAR (MAX)   NULL,
    [ID2]              NVARCHAR (MAX)   NULL,
    [DOB]              NVARCHAR (MAX)   NULL,
    [Weight]           NVARCHAR (MAX)   NULL,
    [WeightUOM]        NVARCHAR (MAX)   NULL,
    [Height]           NVARCHAR (MAX)   NULL,
    [HeightUOM]        NVARCHAR (MAX)   NULL,
    [BSA]              NVARCHAR (MAX)   NULL,
    [Location]         NVARCHAR (MAX)   NULL,
    [PatientType]      NVARCHAR (MAX)   NULL,
    [TimestampUTC]     DATETIME         NOT NULL);

GO
CREATE TYPE [dbo].[PatientSessionDataType] AS TABLE (
    [Id]           UNIQUEIDENTIFIER NULL,
    [BeginTimeUTC] DATETIME         NULL,
    [EndTimeUTC]   DATETIME         NULL);

GO
CREATE TYPE [dbo].[PrintRequestDataSetEntriesType] AS TABLE (
    [PrintRequestId]       UNIQUEIDENTIFIER NOT NULL,
    [PrintJobId]           UNIQUEIDENTIFIER NOT NULL,
    [TopicSessionId]       UNIQUEIDENTIFIER NOT NULL,
    [FeedTypeId]           UNIQUEIDENTIFIER NOT NULL,
    [RequestTypeEnumId]    UNIQUEIDENTIFIER NOT NULL,
    [RequestTypeEnumValue] INT              NOT NULL,
    [TimestampUTC]         DATETIME         NOT NULL);

GO
CREATE TYPE [dbo].[PrintRequestDataType] AS TABLE (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId] UNIQUEIDENTIFIER NOT NULL,
    [Name]           VARCHAR (50)     NULL,
    [Value]          VARCHAR (MAX)    NULL);

GO
CREATE TYPE [dbo].[StringList] AS TABLE (
    [Item] VARCHAR (50) NULL);

GO
CREATE TYPE [dbo].[TopicSessionDataType] AS TABLE (
    [Id]               UNIQUEIDENTIFIER NULL,
    [TopicTypeId]      UNIQUEIDENTIFIER NULL,
    [TopicInstanceId]  UNIQUEIDENTIFIER NULL,
    [DeviceSessionId]  UNIQUEIDENTIFIER NULL,
    [PatientSessionId] UNIQUEIDENTIFIER NULL,
    [BeginTimeUTC]     DATETIME         NULL,
    [EndTimeUTC]       DATETIME         NULL);

GO
CREATE TYPE [dbo].[VitalType] AS TABLE (
    [GdsCode] NVARCHAR (80) NULL);

GO
CREATE TYPE [dbo].[VitalValues] AS TABLE (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [VitalValue] VARCHAR (4000) NULL);

GO
CREATE TYPE [dbo].[WaveformAnnotationDataType] AS TABLE (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId] UNIQUEIDENTIFIER NOT NULL,
    [ChannelIndex]   INT              NOT NULL,
    [Annotation]     VARCHAR (MAX)    NOT NULL);

GO
CREATE TYPE [dbo].[WaveformDataType] AS TABLE (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [SampleCount]    INT              NOT NULL,
    [TypeName]       VARCHAR (50)     NULL,
    [TypeId]         UNIQUEIDENTIFIER NULL,
    [Samples]        VARBINARY (MAX)  NOT NULL,
    [Compressed]     BIT              NOT NULL,
    [TopicSessionId] UNIQUEIDENTIFIER NOT NULL,
    [StartTimeUTC]   DATETIME         NOT NULL,
    [EndTimeUTC]     DATETIME         NOT NULL);

GO
CREATE TYPE [dbo].[WaveformPrintDataType] AS TABLE (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [PrintRequestId] UNIQUEIDENTIFIER NOT NULL,
    [ChannelIndex]   INT              NOT NULL,
    [NumSamples]     INT              NOT NULL,
    [Samples]        VARCHAR (MAX)    NOT NULL);

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A system assigned random ID for this node.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group', @level2type = N'COLUMN', @level2name = N'node_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name that is displayed in the tree.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group', @level2type = N'COLUMN', @level2name = N'node_name';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Defines the parent node for this node. If NULL this is a root level node. (can have multiple root level nodes).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group', @level2type = N'COLUMN', @level2name = N'parent_node_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Defines the order of the nodes in the tree. They are loaded in this order.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group', @level2type = N'COLUMN', @level2name = N'rank';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Text to be displayed on button', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'descr';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of form to display if button clicked', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'form_name';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Index to button image list which tells which image to display on button', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'image_index';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to TEST_GROUP. if form is a result screen, the node_id of result to display.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'node_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Order of the button on screen (1,2,3..) 1 is the first button on the left side of the screen.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'position';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Short cut key for the button', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button', @level2type = N'COLUMN', @level2name = N'shortcut';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The id of the unit which is restricted for given user_category_id. FK to ORGANIZATION', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_restricted_organization', @level2type = N'COLUMN', @level2name = N'organization_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'User category id restricted in the given unit.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_restricted_organization', @level2type = N'COLUMN', @level2name = N'user_role_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original HL7 message (if > 255 characters long).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'HL7_text_long';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original HL7 message (if <= 255 characters long)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'HL7_text_short';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The internal ID for the HL7 message that was replayed. FK to the HL7_in_queue table (although it may be purged from that table).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'msg_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The status of the original HL/7 message (before replaying).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'msg_status';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Not used', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'outb_analyzed_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the original message was processed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'processed_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The duration (in milliseconds) that the original HL7 message took to process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'processed_dur';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the original HL7 message was queued. When a message is replayed, this date is updated to the new time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'queued_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sequence # (if replayed multiple times).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'rec_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The thread ID that the HL7 message was processed on. This is helpful for debugging.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'thread_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The person who caused the replay (either a login ID or name).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist', @level2type = N'COLUMN', @level2name = N'who';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The actual HL7 message (if > 255 characters)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'HL7_text_long';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The actual HL7 message (if <= 255 characters)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'HL7_text_short';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A system generated number for this HL7 message. This number is incremented and guarantees that if sorted ascending, you will get the messages in the same order received from the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msg_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A status that represents the current state of this message. "N" = Not Read (not processed by loader yet) "R" = Processed by loader and no errors "E" = Processed by loader and error(s) occurred "any other value" = Ignored by loader', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msg_status';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The ACK code in the MSH segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_ack_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The control ID (Number that the external system identifies this message by). Control ID in the MSH segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_control_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time of the message (DateTime in the MSH segment). Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The event code in the MSH segment (A08, R01, etc). Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_event_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Message Type in the MSH segment (ADT, ORU, etc) . Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_msg_type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sending organization (the organization in the MSH segment). Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_organization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sending system (The sending system in the MSH segment) Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_system';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Version field in the MSH segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'msh_version';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Not used.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'outb_analyzed_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient ID in the PID segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The MRN field in the PID segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'pid_mrn';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time the DataLoader finished processing a message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'processed_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The # milliseconds that the DataLoader took to process this message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'processed_dur';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Visit Number field in the PV1 segment. Parsed out by the communicator.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'pv1_visit_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time that this message was inserted into this table (within milliseconds of receiving it in the communicator).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'queued_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The thread # within the DataLoader that processed this message. It is generally a requirement that all messages for a given patient get processed in the same thread (otherwise they may get processed out of order).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'thread_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Not used.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue', @level2type = N'COLUMN', @level2name = N'who';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column defines ACK message control id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'ack_msg_control_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column contains information on Sending Facility from ACK message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'ack_organization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column contains information on Sending Application from ACK message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'ack_system';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column indicates IP address of client to whom outbound message was send and from whom ACK should be received.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'clientIP';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Message control id included in outbound messages.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'msg_control_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This information indicates if valid ACK message was received from the client. The status can be R or E.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'msg_status';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field is not in use.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'notes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This information indicates how many from user-defined time message was sent to the client (error case).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'num_retries';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This column indicates the DateTime ACK message was received from client system.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack', @level2type = N'COLUMN', @level2name = N'received_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name assigned to this list. This is the value that is passed to the DataLoader to only process a certain list.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_list', @level2type = N'COLUMN', @level2name = N'list_name';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The msg_no in the HL7_in_queue table that is part of this list.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_list', @level2type = N'COLUMN', @level2name = N'msg_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sequence # (starting at 1) of this HL7 message within a list. The DataLoader processes them according to this sequence.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_list', @level2type = N'COLUMN', @level2name = N'seq';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'If an HL/7 message is more than 255 chars, then this represents the complete HL/7 message (most will be in here).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'HL7_text_long';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'If the HL/7 message is less than 255 chars, then the message is stored here.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'HL7_text_short';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A system generated number for this message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msg_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The status of the outbound HL/7 message (whether it has been sent or not) "N" = not sent yet "R" = sent "E" = error sending message', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msg_status';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The HL/7 event code of this message (ex: A01, R01, etc).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msh_event_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This higher-level type of message (ex: ADT, ORU).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msh_msg_type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Organization identifier used in the MSH of the outbound message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msh_organization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sending system that is in the MSH of the outbound message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'msh_system';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the patient table. This is the patient this message was generated for.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time this HL/7 message was inserted into this table. Depending on the polling cycle and how backed up the receiver is, it may be a while before it is actually sent.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'queued_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time the message was successfully sent to the receiver.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue', @level2type = N'COLUMN', @level2name = N'sent_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether the report is active or not(?!?)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'export_sw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The monitor ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'monitor_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Original patient ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying a patient. Foreign key to the int_patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The 12 lead report data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'report_data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time of the 12 lead report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'report_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying a 12 lead report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'report_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Report sequence number used along with patient_id and report_dt to create unique ID for 12-Leads reports', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report', @level2type = N'COLUMN', @level2name = N'report_number';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient age.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'age';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient birthdate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'birthdate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient height.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'height';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient MRN.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'id_number';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time the row was inserted into the table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'insert_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Description.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'interpretation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'P-axis for heart rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'p_axis';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the patient on the 12-lead report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'patient_name';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'PR interval for heart rate', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'pr_interval';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'QRS-axis for heart rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'qrs_axis';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'QRS duration for heart rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'qrs_duration';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'QT interval for heart rate', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'qt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'QT interval corrected for heart rate', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'qtc';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Report date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'report_date';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying a 12-lead report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'report_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Report time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'report_time';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient sex.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'sex';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'T-axis for heart rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N't_axis';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying the user who added the 12-lead report edits', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'user_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Ventilation rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'vent_rate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The version number of the 12-lead report edits.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'version_number';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patient weight.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit', @level2type = N'COLUMN', @level2name = N'weight';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field identifies the date the account was closed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_close_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID for this account. It is a system generated GUID that is guaranteed to always be unique.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field identifies the date the account was opened.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_open_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the state that the ACCOUNT is in. This is defined in HL/7 (PV1).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_status_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The external ACCOUNT number within the ORGANIZATION that owns the ACCOUNT. This is the account number that the facility/organization knows.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'account_xid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A YES/NO flag that identifies an ACCOUNT is in delinquent status. If the transfer amount is greater than zero, the BAD_DEBT_SW will be set to (1). This is defined in the PV1 segment.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'bad_debt_sw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount due for an ENCOUNTER. Sometimes referred to as the ''ACCOUNT BALANCE''. Defined in HL/7 (PV1)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'cur_bal_amt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization this account belongs to (one that created the account). FK to the organization table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'organization_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount that was adjusted towards a unique ACCOUNT. Defined in HL/7 (PV1)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'tot_adjs_amt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount that contains the total amount of charges for an ACCOUNT Defined in HL/7 (PV1)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'tot_charges_amt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The total amount paid to a unique ACCOUNT. Defined in HL/7 (PV1).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account', @level2type = N'COLUMN', @level2name = N'tot_payments_amt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether an address is active or not.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'active_sw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the type of ADDRESS (business or residential) for this occurrence.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'addr_loc_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the category of the ADDRESS being described (e.g. billing, Mailing, Temporary, etc.). For Billing information, this value is routing information between the bill and the ENTITY.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'addr_type_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The associated person, NOK, organization, etc. This is a FK to either the person/patient table, external_organization, NOK, etc. table. It is not easy to trace back who the owner for a given address is (because it could reside in one of several tables).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'address_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name of a city that identifies where the ADDRESS is located.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'city_nm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name of the country that identifies where the ADDRESS is located. This is a FK to the MISC_CODE table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'country_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code of the county that identifies where the ADDRESS is located. A code_id that references a code for the county where the ADDRESS is located, if null the ADDRESS This is a FK to the MISC_CODE table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'county_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description that identifies the line of an ADDRESS. First line of the address.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'line1_dsc';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description that identifies the line of an ADDRESS. Second line of the address.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'line2_dsc';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description that identifies the line of an ADDRESS. Third line of the address.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'line3_dsc';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient ID (if linked). Used by MPI logic to "unlink" a patient if necessary.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the sequence or order of the ADDRESS. This allows multiple addresses of the same type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'seq_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When this data became active (i.e. when the data became valid for the given patient, etc).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'start_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The common postal authority approved code that represents the state or province where the address exists. This field is not a code_id since these codes are issued by the government or the region and generally do not change.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'state_code';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the postal/area code.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address', @level2type = N'COLUMN', @level2name = N'zip_code';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A text value representing the alarm Subtype (ie Vfib).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'alarm_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The alarm annotation text.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'alarm_dsc';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying an alarm', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'alarm_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Alarm severity level', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'alarm_level';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date of the alarm', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'end_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The bigint representation of the utc end date of the alarm.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'end_ft';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates if alarm level has changed during it''s lifetime', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'is_level_changed';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates if alarm type has changed during it''s lifetime', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'is_stacked';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Original patient Id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID identifying a channel type. Foreign key to the int_channel_type table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'patient_channel_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique ID indentifying a patient. Foreign key to the int_patient table', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The start time of the alarm', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'start_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The bigint representation of the utc start time of the alarm', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm', @level2type = N'COLUMN', @level2name = N'start_ft';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the int_alarm_event table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved', @level2type = N'COLUMN', @level2name = N'alarm_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Explanation of the event', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved', @level2type = N'COLUMN', @level2name = N'annotation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the alarm event was retrieved.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved', @level2type = N'COLUMN', @level2name = N'insert_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 - not retrieved 1 - retrieved.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved', @level2type = N'COLUMN', @level2name = N'retrieved';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the int_alarm_event table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'alarm_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the alarm data was taken.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'insert_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 - not retrieved 1 - retrieved.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'retrieved';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequential number of the data: 1, 2', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'seq_num';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Raw waveform data is stored here. It is in an unprocessed state from the monitor.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform', @level2type = N'COLUMN', @level2name = N'waveform_data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether this allergy is still active. Allergies can be "deactivated" if the allergy no longer persists.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'active_sw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The allergy code id for the patient/encounter. FK to the MISC_CODE table (cat_code = ''ALGRY''). For each pat_ent_id/enc_ent_id this  code id will be unique. HL7: Seg AL1, Item# 00205.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'allergy_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of allergy. For example:   DA Drug Allergy   FA  Food Allergy   MA  Misc Allergy   MC  Misc Contraindication', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'allergy_type_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the allergy was identified. HL7 - Seg AL1, Item# 00208.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'identification_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient ID (if linked). Used by MPI logic to "unlink" a patient if necessary.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient this allergy belongs to. FK to the PATIENT table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Short textual description of the specific allergy reaction (convulsions, sneeze, rash, etc.). HL7 - Seg AL1, Item# 00207.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'reaction';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The severity of the allergy. For example:   SV  Severe   MO Moderate   MI   Mild. FK to the misc code table (cat = "ALGSEV"). HL7 - Seg AL1, Item# 00206.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy', @level2type = N'COLUMN', @level2name = N'severity_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The application that triggered the log entry. It may be NULL if the portal generated the entry or some other non-product specific action caused the entry.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'application_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The description of the audit event. Some key data may be encoded in the description.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'audit_descr';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time the event was logged (not necessary the exact time the event occurred).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'audit_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code (number) of the type of security event.  These are hard-coded in each application (module). They are not codified in a database table at this time.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'audit_type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The result detail record that this audit event occurred for (if known). FK to the results table(s).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'detail_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The IP Address of the machine where the information was accessed. Either the hostname or the Address. OR, this could be some other meaningful description of where the data was accessed (in the browser, it may be whatever the web server has access to).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'device_name';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this audit event occurred on (if known). FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The user that triggered this audit log entry. FK to their int_user table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'login_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient record that was accessed. It is possible that this log entry is not patient related in which case this column will be NULL. FK to the patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The actual action text to perform. Some examples are: download,cowboys,jeffk,horse,Setup.exe,/cdrversions/5.10.14,$carewindows" downloadrun,cowboys,jeffk,horse,Setup.exe,/cdrversions/5.10.14,$temp" regfile,cowboys,jeffk,horse,Reg1.Reg,/RegFiles,$temp" ReplaceSelf,cowboys,jeffk,horse,/AutoUpdater" regfile,cowboys,jeffk,horse,chgtime.reg,/Regfiles,$temp" message,300,Carewindows will exit in 10 seconds to be replaced with a new version" kill,carewindows" download,cowboys,jeffk,horse,carewindows.exe,/cdrversions/jefftest,$CAREWINDOWS" run,False,$CAREWINDOWS,carewindows.exe" run,False,$CAREWINDOWS,cwcfg.exe" download,cowboys,jeffk,horse,carewindows.exe,/carewindows/55,$carewindows"', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate', @level2type = N'COLUMN', @level2name = N'action';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'NULL or zero if you want to have the autoupdate server tell the clients to skip over updating this action. Instead of sending the acton text associated with the aciton, autoupdate server just sends NOP if disabled is greater than zero.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate', @level2type = N'COLUMN', @level2name = N'disabled';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Product for auto update like CDR, CPI, ... Field 2 of primary key.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate', @level2type = N'COLUMN', @level2name = N'prod';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequences the autoupdate actions  Field 1 of primary key.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate', @level2type = N'COLUMN', @level2name = N'seq';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date action was applied to machine', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'action_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'IP address or NT network name of machine that update was for.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'machine';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Product that action applied to like CDR, CPI, ...', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'prod';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains the error text passed from the client of action failed to be applied to that client. Example : Couldnt overwrite file Carewindow.exe, file in use.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'reason';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'1 if action was ACKed 0 if action was NACKed', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log', @level2type = N'COLUMN', @level2name = N'success';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether to disable all automatic processes from running.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'disable_autoprocs';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether to keep ALL users from logging into the CDR.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'keep_out';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'How many minutes to wait before forcing ALL users to exit the CDR. If 0 then it will not force them out.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'log_out_minutes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A message to display to ALL users attempting to login to the CDR.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'login_msg';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Message to display to ALL users ASAP. Periodically, every Carewindow that is running checks this table for a message to display. This table has at most 1 record (or no records if there are no messages to display).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg', @level2type = N'COLUMN', @level2name = N'timer_msg';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Configuration parameter''s name', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_cfg_values', @level2type = N'COLUMN', @level2name = N'keyname';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Parameter''s value', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_cfg_values', @level2type = N'COLUMN', @level2name = N'keyvalue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code of the channel.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'channel_code';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique ID representing a channel type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'channel_type_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The color of display.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'color';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'How many values per second this channel produces.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'freq';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The GDS code identifying the channel. Foreign key to the int_misc_code table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'gds_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The channel''s label.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'label';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Maximum value for a channel', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'max_value';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Minimum value for the channel', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'min_value';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The order the channel is displayed in the vital sign viewer. The vital signs viewer only has room to display so many channels, so this column also determines which channels are displayed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'priority';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The default sweeping speed for the vital signs viewer waveforms display.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'sweep_speed';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of channel. WAVEFORM or NUMBER.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'type_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Units to use when displaying data in vital signs viewer.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type', @level2type = N'COLUMN', @level2name = N'units';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'How to display a vital on a given channel.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_vital', @level2type = N'COLUMN', @level2name = N'format_string';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The GDS code that is on a channel. Foreign key to the int_misc_code. The format is: <label>|{|$>|<S|M|L>|<B|R>|<L|C|R> #=direct replacement for a value $=has coding associated with it S= small size M=medium size L=large size B=Bold R=Regular L=Left align C=Center align R=Right align', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_vital', @level2type = N'COLUMN', @level2name = N'gds_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of mapping. Generally this is just used for IP address (or workstation ID) mappings to a particular unit.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_client_map', @level2type = N'COLUMN', @level2name = N'map_type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the value of the mapping (i.e. the actual IP address or workstation name)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_client_map', @level2type = N'COLUMN', @level2name = N'map_val';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the Unit (code) that this value is mapped to.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_client_map', @level2type = N'COLUMN', @level2name = N'unit_nm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code "category". This has the list of values used in the "cat_code" column in the int_misc_code table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_code_category', @level2type = N'COLUMN', @level2name = N'cat_code';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the code category (how it is used).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_code_category', @level2type = N'COLUMN', @level2name = N'cat_name';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time the row was inserted into the table. Also can be used to help select the latest version number inserted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'CreateDate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date this version was installed (and became active).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'install_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'install_pgm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'install_pgm_flags';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'post_install_pgm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'post_install_pgm_flags';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'pre_install_pgm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to help auto-update workstations. Not used in the web-based solution.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'pre_install_pgm_flags';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The status of the release. Currently only "Complete" is used. There can be multiple records with "Complete", so the one with the most recent install_dt is the currently active release.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'status_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code of the version. Ex: 1.01.03. This should match the version of code running on the servers (one with most recent install_dt)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver', @level2type = N'COLUMN', @level2name = N'ver_code';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field contains the timestamp that indicates the date that the attestation was signed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'attestation_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field indicates if the patient information  is for a diagnosis or a non-diagnosis code.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'class_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field indicates whether the diagnosis is confidential. 1=Confidential', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'confidential_ind';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the MISC_CODE table (cat_code=''xxxx''). A code that identifies the PATIENT problem into a specific category. This could be an ICD-9 code. This can be NULL because the diagnosis may not be codified (may be a textual diagnosis that is stored in the dsc column).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'diagnosis_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field contains the date/time that the diagnosis was determined.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'diagnosis_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that indicates the type of ENC_DIAGNOSIS. See permitted values. Examples include (Admit, final, etc).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'diagnosis_type_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The non-codified diagnosis (if the diagnosis_cid is NULL). This can be a free-formatted description of the diagnosis. Some sites may never use this and only allow codified diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'dsc';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this result is associated with. FK to the ENCOUNTER table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' A yes/no flag to indicate the state or status of the row associated with this column. When the value is (1), this means that the  diagnosis has a new value from the DB Loader and this current value is no longer an active diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'inactive_sw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sequence of this diagnosis for the given encounter. Each encounter can have multiple diagnosis of the same type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis', @level2type = N'COLUMN', @level2name = N'seq_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The account associated with this DRG. FK to the account table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'account_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A descending key to guarantee uniqueness for this table (part of the PK). Also used to get the most recent record.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'desc_key';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code to indicate if an ACCOUNT_DRG has been approved. Defined in HL/7', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_approval_ind';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the ACCOUNT_DRG was assigned to a specific group.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_assignment_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the Diagnostic Related Group (DRG) for the ACCOUNT. Defined in HL/7.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code to indicate what type of assignment has taken place. Ex: A - Admit        P - Preliminary        F - Final Defined in HL/7', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_grper_rvw_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field relates to the broad category for a disease type. Defined in HL/7 (DG1)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_grper_ver_type_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' A code that categorizes the reason for the DRG OUTLIER DAYS NO. Defined in HL/7', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_outlier_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' The amount that is allocated to a DRG Outlier', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_outlier_cost_amt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of days as defined by the DRG outlier.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'drg_outlier_days_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter associated with this DRG. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient associated with this DRG. FK to the patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This allows multiple HCP''s for each diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'desc_key';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'diagnosis_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this diagnosis/HCP refers to. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'diagnosis_seq_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this diagnosis/HCP refers to. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'diagnosis_type_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this diagnosis/HCP refers to. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The HCP that is "linked" to the diagnosis. FK to the HCP table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'hcp_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether this relationship is active or not (0/NULL=active, 1=inactive).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int', @level2type = N'COLUMN', @level2name = N'inactive_sw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The account associated with this encounter. FK to the account table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'account_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The admission date and time in which the PATIENT interacts with an HEALTHCARE PROVIDER. For Pre-admit class, it is the scheduled admit date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'admit_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The admitting HCP for this encounter. FK to the HCP table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'admit_hcp_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that indicates the PATIENT''s transportation capabilities. Refer to HL7, table 0009 for all values and  descriptions.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'ambul_status_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the HCP table. The attending HCP.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'attend_hcp_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether the patient is a baby.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'baby_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The bed that the patient is in (or was last in).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'bed';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date from the MSH segment for the message that actually caused the encounter row to get inserted into the database.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'begin_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A comment that can be associated with this encounter.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'comment';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field indicates a special diet type for a patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'diet_type_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the int_misc_code table. The discharge disposition of this encounter.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'discharge_dispo_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date/time the patient was discharged.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'discharge_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the unique system-generated ID for each encounter. It is a random GUID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the medical service that is provided. Ex: MED, SUR, OBS, NUR, EYE, CLI', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'med_svc_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The last date/time the encounter was modified.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'mod_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'If True (1), then this encounter was created by a Monitor Loader (gateway). This is helpful when trying to re-locate a specific encounter associated with a connection epsiode.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'monitor_created';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the ORGANIZATION table. This is the facility where the encounter was "serviced".', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'organization_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the PATIENT category at the time of the ENCOUNTER.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'patient_class_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient this encounter is associated with. FK to the patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field contains site-specific values that identify the patient type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'patient_type_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The primary care physician of the patient at the time of this encounter. FK to the HCP table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'primary_care_hcp_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field id''s the person''s protection that determines, in turn, whether access to info. abut this person should be kept from unauthorized users.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'protection_type_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains a code that defines what level of publicity is allowed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'publicity_cid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This field indicates whether the treatment is continuous.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'recurring_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the HCP table. The referring HCP.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'referring_hcp_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The room that the patient is currently in (or was last in) for the encounter.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'rm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the type of ENCOUNTER.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'status_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the location of the PATIENT at the time that the ENCOUNTER is ''assigned''. This includes the Nursing Unit, Ancillary Departments, or temporary locations.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'unit_org_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether person is a VIP.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter', @level2type = N'COLUMN', @level2name = N'vip_sw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The account that is associated with this encounter link.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'account_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this result is associated with. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The external ID for the encounter (encounter number). These numbers must be unique for each organization.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'encounter_xid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' A code that identifies the action that was processed  Probably not currently used', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'event_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization that this external ID is assigned by.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'organization_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient this encounter is associated with. FK to the patient table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequence # guarantees a unique record.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'seq_no';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the state in which the occurrence was created.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map', @level2type = N'COLUMN', @level2name = N'status_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization that the encounter that was moved/merged is associated with.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An attribute that uniquely identifies the External Visit Number assigned by the ENCOUNTER assigning ORGANIZATION. This is usually the patient number or billing number for simple  encounter/account relationships. Whenever an external system provides an identifier to  the system, that eXternal IDentifier is referred to as an XID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'encounter_xid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the action that was processed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'event_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization that the encounter that was moved/merged is associated with.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'organization_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The original patient (used by MPI linking).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'orig_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The patient associated with the transfer (not necessarily the source or destination).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code that identifies the state in which the occurrence was created.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'status_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time in which the transfer has taken place.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfr_txn_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time in which the transfer has taken place.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfrd_from_encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This attribute identifies the ENCOUNTER ENTITY IDENTIFICATION for the non-surviving PATIENT.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfrd_from_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This attribute identifies the ENCOUNTER ENTITY IDENTIFICATION for the surviving ENCOUNTER.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfrd_to_encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This attribute identifies the Patient (patient_id) for the surviving PATIENT.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history', @level2type = N'COLUMN', @level2name = N'tfrd_to_patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Whether this relationship is active (or whether it was unlinked). 1=Active, 0=No longer active', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'active_sw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The encounter this result is associated with. FK to the encounter table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'encounter_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date and time that the association takes place.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'end_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The HCP that is associated with this encounter. FK to the HCP table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'hcp_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK to the MISC_CODE table (cat_code = xxx). A code that indicates the type of role (category/specialty) for the HEALTHCARE PROVIDER and this particular ENCOUNTER. This is any HEALTHCARE PROVIDER who participates in the care of a PATIENT for a specific episode of care. Ex: Radiologist, Cardiologist, GP, Resident, RN, LPN, LCSW, etc.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int', @level2type = N'COLUMN', @level2name = N'hcp_role_cd';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Name of environment', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_environment', @level2type = N'COLUMN', @level2name = N'display_name';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique identifier for each environment', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_environment', @level2type = N'COLUMN', @level2name = N'env_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequence to list environments in', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_environment', @level2type = N'COLUMN', @level2name = N'seq';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Alarm mode', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'alarm_notification_mode';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Interval (min.) of polling information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'alarm_polling_interval';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Port number', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'port_number';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Flag: 1 = alarm execution', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'track_alarm_execution';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Flag: 1 = update vital  signs', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'track_vitals_update_execution';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Interval (min.) of updating', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config', @level2type = N'COLUMN', @level2name = N'vitals_update_interval';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Client name', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'client';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Description of the event', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'description';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date of the event', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'event_dt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Event Id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'event_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Status', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'patient_id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Sequential number', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'seq_num';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Status', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'status';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Event type', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log', @level2type = N'COLUMN', @level2name = N'type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Seuqence of data insertion', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_result', @level2type = N'COLUMN', @level2name = N'Sequence';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by monitor event log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'end_ms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by lead change log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'lead_type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by monitor event log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'monitor_event_type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by lead change log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'primary_channel';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by lead change and monitor event log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'start_ms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by lead change and monitor events log', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log', @level2type = N'COLUMN', @level2name = N'timetag_type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'To get the patient details inserted from ADTA01 FOR QRY - HL7 BEGIN - Retrieves the patient Id from given query item type (MRN, ACC, NODE ID or NODE NAME)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fn_HL7_GetPatientIdFromQueryItemType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Split a text string using the delimiter into multiple rows', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fn_Split';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Merge vital values into a single string.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fn_Vital_Merge';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert datetime to filetime format', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnDateTimeToFileTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert filetime to local datetime format', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnFileTimeToDateTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert the local datetime to UTC datetime.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnLocalDateTimeToUtcTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Mark ID as duplicate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnMarkIdAsDuplicate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert UTC datetime format into local datetime format.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntDateTimeToFileTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert filetime format into local datetime format.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntFileTimeToDateTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert filetime format into UTC datetime format.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntFileTimeToUtc';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert UTC datetime format into local datetime format.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntUtcDateTimeToLocalTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return 0 if value is greater than maxValue, otherwise return the value.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fntZeroIfBigger';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Convert the UTC datetime to the local datetime.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnUtcDateTimeToLocalTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return 0 if value is greater than maxValue, otherwise return the value.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'fnZeroIfBigger';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve the fully qualified domain name in which the SQL Server resides.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'FQDN';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the latest device information for a device session and device name.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'ufnDeviceSessionInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Create a user and assign the role for the user.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'AssignUserRole';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'Change_Starter_Set';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Change role for user.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'ChangeUserRole';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'ClearAuditLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Clear event log data for a patient or all patients where date less than start date or all dates if start date is null.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'ClearEventLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Create a role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'CreateRole';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Create user and assign a role for the user.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'CreateUser';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteAnalysisTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteBeatTimeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteBinInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteEventData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeletePacerSpikeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeletePatientSavedEvent';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeletePatientTwelveLeadReport';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Delete all the restricted organizations based on role ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteRestrictedUnits';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Delete a User Role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteRole';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteTemplateSetInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteTrendData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteUnitSetting';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteUnitSettingByType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Delete ICS user by user ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'DeleteUser';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Fix flowsheet_detail rows the sub test test_code id from cmplus points to its parent''s test code had to generate new ones', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'Fix_FlowSheet_Detail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve the security settings of a Role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetAccessSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get all Roles.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetAllRoles';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetAnalysisTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetAuditLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetDefaultSettingNameList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET alarms.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETAlarms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET beat time log.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETBeatTimeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET events by subtype.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETEventsBySubtype';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETEventsByType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET status events.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETStatusEvents';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get ET tech alarms.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetETTechAlarms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetFacilities';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetFacilityNameByUnitId';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetGDSChannelList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetIntCfgValues';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the list of leads for the specified patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLeadList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get a list of alarms from a non enhanced tele patient', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientAlarms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientChannelList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientChannelTimes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientStartftFromVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get legacy patient vitals by GDS codes.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsByGDSCodes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the vitals of one patient for one given type, only from the legacy tables.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsByType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Dummy view creation for ET - Temp fix for resolving dependencies for smooth installation of the build. --Remove / Replace this with actual view when it becomes available. --Get vitals data for trends view in CA', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsByTypeUpdate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsTimeUpdate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientVitalsTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientWaveFormDataByChannels';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLegacyPatientWaveFormTimeHistory';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DM3...', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLicensedPersonAndPatientDataByPatientId';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the minimum and maximum patient times from waveform data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetMinMaxPatientTimes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetMinMaxPatientTimesFromVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the number of leads configured for the specified patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetNumLeadConfigs';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the number of processed statistics for the specified patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetNumProcStats';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the organization structure.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetOrganizationData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the organizational structure as XML.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetOrganizationDataAsXml';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get a list of alarms for an enhanced tele patient', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientAlarms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientAlarmsByType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientAlarmTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientAuditLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientByExternalID';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient information by the external medical record ID and device name.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientByExternalIdAndDevice';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the list of channels with live data for an active patient', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientChannelList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientChannelTimes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient channel start and end times from vitals.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientChannelTimesFromVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientEventsByType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientEventsCountByType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientEventTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient demographics in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientLeadChangeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientMonitorData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEvent';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventCalipers';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventLeadLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventMonitorLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventSummary';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventVitalsNew';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientSavedEventWaveForm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Search for patients by last name, first name, medical record number (MRN), VIP status and restricted unit.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientsBySearch';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientsList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientStartftFromVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTimeOfDay';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTimes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTwelveLeadReport';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTwelveLeadReportNew';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientTwelveLeadReports';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient vitals by GDS codes.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsByGDSCodes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the patients'' vitals by type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsByType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the patients'' vitals by type after sequence number and after date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsByTypeUpdate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalSignByChannels';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patients'' vitals time history.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsTimeHistory';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patients'' vitals time update.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsTimeUpdate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the patients'' vitals types, codes and units.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientVitalsTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientWaveFormDataByChannels';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patients'' waveform time history.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientWaveFormTimeHistory';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetPatientWaveFormTimeUpdate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get proc stat list.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetProcStatList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetProductAccess';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get live patient vitals.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetQryLivePatientVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get Live Patient Vitals By Monitor', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetQryLivePatientVitalsByMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetRawECGData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetRecvSendAndOrderInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get all the restricted units of role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetRestrictedUnitList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetSavedEventBeatTimeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetSavedEventWaveFormType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetSaveEventArrhythmiaEventTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetTwelveLeadReports';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUnitAutoCollectInterval';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUnitsByFacility';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve User details by User ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserByGuid';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve User details by User Login Name.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserByName';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve User details by user security identifier.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserByUsId';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserPatientsList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUsers';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetUserSettingByType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns the latest version number of the ICS database using the new CreateDate column to break the possible tie.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetVersionNumber';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetvsvAccess';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'GetWaveFormTimes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used by ICS Admin to log information to audit log.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'InsertAdminAuditLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert information into the AuditLogData table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'InsertAuditLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'InsertEventLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the patient Information from any component.  @PatientId is mandatory and the remaining are optional with default NULL values.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'InsertPatientInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Duplicated_Patient_List';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_enc_det_drs';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Encounters_det';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Encounters_Detail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_fs_Distrib';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_fs_Results';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Get_cfg_Values';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Get_Lang';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_Channels_Info';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_Input_Rate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_mp_List';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_Purge_gts_Tables';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_gts_WaveForm_Index_Rate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_HL7_Status';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Ins_Guarantor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Ins_Plcys';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Load_fs_Detail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Loader_Pat_Poll';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Delete_Duplicate_Info';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Insert_Duplicate_Info';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Is_Id_On_Monitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Load_Monitor_By_Gateway_Info';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Load_Monitor_By_Id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ml_Load_Patient_By_Pat_Id';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Newest_fs_Result_Date';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Node_Distrib';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Node_Results';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Nok';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_On_Monitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Parents';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Pat_Summary';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_12Lead_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Alarm_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_All_Patient_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_CEI_Log_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'CH Audit Logs purge.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_ch_Audit_Log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_ch_Log_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'CH Patient Settings purge', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_ch_Patient_Settings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Encounter_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purges old alarm report data previously saved for ET Print Jobs.  Used by the ICS_PurgeData SqlAgentJob.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_ETPrintJobs_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_eval';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Get_Task';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge - get task list.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Get_Task_List';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge Waveform Hours.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Get_wf_Hours';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_HL7_Error';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_HL7_Not_Read';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_HL7_Pending';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_HL7_Success';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Input_Rate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_msg_Log_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Print_Job_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Release_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge old int_results data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Result_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_Set_Task';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge old Waveform data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Purge_WaveForm_Data';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_rel_CleanUp';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Set_cfg_Values';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Set_Lang';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_Test_Groups';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_ugTest';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'p_update_vital_live_temp';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'PurgerParameters';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'PurgerwaveformParameters';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RemoveAlarm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save the restricted organization of a role.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RestrictUnit';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveBeatTimeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveBeatTimeLogWithSampleRate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveBinInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrievePacerSpikeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveTemplateSetInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'RetrieveTrendData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveArrhythmiaEventTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEvent';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventBeatTimeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventCalipers';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventLeadLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventMonitorEventLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SaveEventWaveForm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SendRequestPatientTwelveLeadReport';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'SetPatientDataCollect';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update analysis insert date.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdateAnalysisInsertDt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdatePatientSavedEvent';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdatePatientTwelveLeadReport';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdatePatientTwelveLeadReportNew';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update Role and Security tables', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdateRole';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdateUserSetting';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'UpdateXmlValue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add application settings.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_AddApplicationSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_AddNewGatewaySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Check the latest electronic transmitter sequence number for a patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_CheckETSession';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_Get12LeadPrintJobByPatientnPrintJobsIDs';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_Get12LeadPrintJobByPatientnReportIDs';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns the ET print alarm job information.  If an unknown or invalid locale is specified, English will be used.  @PatientId: The unique patient identifier to get print jobs associated with.  @alarmStartMinUTC: The minimum/earliest alarm start date time to retrieve (for retrieving alarms in a window/range) in UTC.  @alarmStartMaxUTC: The maximum/lastest alarm start date time to retrieve (for retrieving alarms in a window/range) in UTC.  @locale: The two digit locale to translate the descriptions string into.  Returns: [AlarmId]: The unique alarm identifier associated with the print job, [Description]: A localized and formatted alarm description, [AlarmStartTimeUTC]: The date/time that the alarm was created/started in UTC, [NumPages]: The estimated number of pages of this et print alarm print report.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetEtPrintJobs';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetFactorySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the global settings', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetGlobalSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetLegacyPatientWaveForms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the patient settings.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPatientSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the waveform data for the given list of channels.  This is to make Waveform requests from.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPatientWaveForms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPrintJobBitMapByJobIDnPageNo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPrintJobByPatientnPrintJobIDsnPageNo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPrintJobsListByPatientIDnStartnEndDt';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetPrintJobWaveformData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetProcStatList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the unit settings.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_GetUnitSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Saves the configuration setting.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CA_SaveConfigurationSetting';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_DL_GetLiveVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetAlarmTextAnd12SecWaveForm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetAlarmTextAnd6SecWaveForm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'CEI Procedures - QueryTextOnly - GetAlarmTextOnly', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetAlarmTextOnly';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the waveforms for the Alarm in CEI.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetAlarmWaveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the latest Alarms for CEI.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetLatestAlarms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetLicense';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetLicenseUnits';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetQueryCode';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetTwo6SecWaveSeperate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_GetVitalSigns';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_InsertLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CEI_UpdateLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CheckCodeUnique';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_CheckNewIDUnique';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_Delete_OrganizationEntityByCategory';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Stored procedure for removing all application settings for a specific ApplicationType and optionally filtered by instanceId and/or key. If instanceId is specified then only application settings for that specific instanceId will be deleted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteApplicationSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteFacilityWithChildren';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteGatewayDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteGatewayServerDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteMiscCode';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DeleteSendSys';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_ETR_AddGatewaySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_ETR_DeleteGatewayDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_ETR_GetGatewaySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_ETR_UpdateGatewaySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_UV_AddGatewaySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_UV_DeleteGatewayDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_UV_GetGatewaySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DL_UV_UpdateGatewaySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddorUpdateVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddPatient';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add or Update Encounter Table values in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddPatientMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add or Update Encounter Table values in DM3 Loader', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddPatientOrder';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddPerson';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add or Update Encounter Table values in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_AddResults';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_DeleteVitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_DischargePatient';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetChannelType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetCodeID';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetGatewayDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetMonitorEncounter';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetPatientInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetPatientMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetPatientOrder';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_GetproductAccessDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateActive_sw_EncounterId_in_PatientMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateActive_sw_in_PatientMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update MonitorId and EncounterId in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateDateInEncounter';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateLastPoleDate_ResultDate_in_patientmonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdateMrnMap';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Add or Update Encounter Table values in DM3 Loader.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_DM3_UpdatePerson';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GatewayServerDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_Get_AuditLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_Get_AuditLogDefault';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetAllProducts';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve all Instance Ids for a given ApplicationSettings Application Type.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetApplicationSettingInstances';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve all application settings for a specific ApplicationType optionally filtered by instanceId and/or key.  If instanceId is specified then only application settings for that specific instanceId will be returned.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetApplicationSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCEISettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCodeAndCategoryList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets code id by category code.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCodeByCategoryCode';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCodeIDByName';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetCodeList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetDebugSettings_FromDb';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetEventList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetEventLogDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetFacility';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetFeaturelstForProducts';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetGatewayDetailsByCategoryAndMethod';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetGatewayDetailsByCategoryCode';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetGateWaySettingsByDeviceType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetGender';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogInQueue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogListBoth';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogListInbound';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get HL7 Log List Outbound', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogListOutbound';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetHL7LogOutQueue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetKeyvalue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetMethodCode';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetMonitorList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetNetwork';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetOrganization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Fetch the organization details based on the Organization code or Category Code.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetOrganizationInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets the Patient Identification for the ICS Application.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPatientIdentificationType';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Inline queries to SPs/ICS Admin Component.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPatientInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get basic patient information for a list of devices.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPatientInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPatientList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetPrintJobList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetProductSecurity';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetSelectedProducts';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetSendSystemList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetSysgenDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetSystemLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetUnit';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetUnitDetail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get Unit license by Unit Code Or Unit Id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetUnitLicense';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetVersionList';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_GetVisits';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get attending HCP data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetAttendingHcpData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the common order information for a given patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetCommonOrderData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient details inserted from ADTA01.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetInboundMessages';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve the legacy Gds codes.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetLegacyGdsCodes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the vitals and other patient data of all the active patients to generate the Oru messages', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetLiveVitalsAndPatientDataByQuery';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the vitals and other patient data of all the active patients to generate the Oru messages', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetLiveVitalsAndPatientDataForOru';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get HL7 observation request data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetObservationRequestData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retreive the patient observations by patient id.  @PatientId is mandatory.  If @StartTime and @EndTime are passed it will return the observations between the given time span', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetObservationsByPatientId';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get patient visit data.  1) Query by Patient Id  2) Query by Patient Id and Monitor Id', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetPatientVisitInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient details by patient id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetPersonAndPatientDataByPatientID';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get the patient details by Account Number.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetPV1SegmentDataFromADTMsg';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Get Unit license by Unit Code Or Unit ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_GetUnitLicense';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert HL7 Ack Message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertHL7Ack';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert HL7 inbound message', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertHL7InboundMessage';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the HL7 outbound message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertHL7OutMessage';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This procedure returns the organization_id, if the sending facility exists in the category code ''F''.  If not exists and Dynamically Add Organizations is set to True, it will add the organization in the table.
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertInboundFacility';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'To link the HL7InboundMessage table with HL7 patients.  HL7_InsertInboundMessage is used to insert inbound messages of type ADT and QRY.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertInboundMessage';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This procedure returns the SendingSystemId from the sending system table with organization id.  If it does not exist and Dynamically sending system is set to True, it will add the system system in the table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_InsertInboundSendingSystem';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the patient data and results for the given HL7 QRY02.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_QueryPatientDataAndResults';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Saves ADT A01 message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SaveADTMessage';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves the legacy Gds codes', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SaveOruMessages';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert/Update the patient information into respective tables.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SavePatientDemographicInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert HL7 patient information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SavePatientInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Saves the patient visit Information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SavePatientVisitInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the HL7 address information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SetAddressInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update HL7INQUEUE.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_SetHL7InboundMessage';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the patient Account Information from HL7 component.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateAccountInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateEncounterInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateEncounterMapInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateHCPInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update status of inbound messages of type ADT and QRY.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateInboundMessageResponse';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the Inbound Response message of type ADT and QRY.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateInboundMessageStatus';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdateMrnInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Updates patient Demographics related to HL7 tables.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdatePatientInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdatePatientInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the patients Visit Information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdatePatientVisitInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Update the persons demographics.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_HL7_UpdatePersonDemographics';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_IcsPrintSvc_GetActivePrintItem';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_IcsPrintSvc_LoadPrintItems';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert Account Information from any component @AccountId, @orgId, @accountNumber are mandatory and the remaining are optional with default NULL values', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertAccountInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert Encounter information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertEncounterInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert Encounter map information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertEncounterMapInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertMiscCodeDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the patient MRN Information from any component @organizationId, @mrn1 is mandatory and the remaining are optional with default NULL values', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertMrnInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the Organization Information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertOrganizationInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the persons demographic information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertPersonDemographics';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Insert the sending system details.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertSendingSystemInformation';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_InsertSendSysDetails';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_IsVIPPatient';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Copies all alarm, vitals, and waveform data relating to ET alarms for printing and reprinting. Used by the ICS_PrintJobDataCopier SqlAgentJob.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_CopyETVitalsAndWaveforms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Copies vitals data related to ET Alarms for printing and reprinting. Used by the ICS_PrintJobDataCopier SqlAgentJob.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_CopyETVitalsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Copies waveform data relating to ET alarms for printing and reprinting. Used by the ICS_PrintJobDataCopier SqlAgentJob.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_CopyETWaveformData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purpose: Retreives alarm data for a given alarm id.  @alarmId: The alarm id associated with the print job.  @locale: The two digit locale to translate the descriptions string into.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_GetAlarmData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieves Patient Vital information from the copied ET Vitals data.  @gdsCodes: The alarm id associated with the print job.  @PatientId: The patient Id associated with the patient vitals to return.  @startTimeUTC: The start time in UTC to start grabbing vitals from.  @endTimeUTC:  The end time in UTC to finish grabbing vitals from.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_GetPatientVitalsByGDS';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PM_GetPatientWaveformData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge DL alarm data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlAlarmData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlEncounterData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlPrintJobsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge data loader vitals data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlVitalsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Purge DL waveform data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeDlWaveformData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeEventsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Execute all of the purging tasks with error handling and error reporting to Windows event log.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_PurgeTasks';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Remove the live data attached to a topic instance that is over 2.5 minutes old.  Then delete any live data that is more than 10 days old.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_RemoveTrailingLiveData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Remove the waveform live data where start times are less than the latest end times per topic instance ID.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_RemoveTrailingLiveWaveformData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Retrieve Configuration data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_RetrieveConfigurationSection';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveBeginDeviceSession';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveBeginPatientSession';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveBeginTopicSession';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveBlobPrintRequestDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveCfgValues';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Used to save Configuration data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveConfigurationSection';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save device information data set.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveDeviceInfoDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveEndDeviceSession';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveEndPatientSession';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveEndTopicSession';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveEventsDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveGeneralAlarmsDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveLimitAlarmDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveLimitChangeDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save the patient topic session live data from the caller via a table variable.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveLiveDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save patient data - name, gender, weight, etc.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SavePatientData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SavePrintRequestDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveStatusDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveVitalsDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformAnnotationDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Save the patient topic session waveform live data from the caller via a table variable.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformLiveDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformPrintDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_SaveWaveformPrintRequestDataSet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Updates an the instance Id for a group of application settings in the database.  @applicationType: The application type of the instance id to update.  @oldInstanceId: The instance Id to update.  @newInstanceId: The new instance Id to replace the old one with', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateApplicationSettingsInstanceId';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateCEISettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateEncounter';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateGatewaySettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateMiscCode';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateMrn';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateOrg';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateOrgRecord';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdatePatient';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdatePatientDemographicsToMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdatePerson';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdatePersonName';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateSysParameter_debugSw';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'usp_UpdateSysParameter_parmVal';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteAnalysisTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteBeatTimeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteBinInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteEventData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WritePacerSpikeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteTemplateSetInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteTrendData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'PROCEDURE', @level1name = N'WriteTwelveLeadData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AlarmResources';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AlarmsStatusData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains arrhythmia events. Has additional PK of ''type'' because it contains one row for each type of event for that analysis', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AnalysisEvents';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains the start and end time of the analysis (one row for each user/patient analysis)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AnalysisTime';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Application settings', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ApplicationSettings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains audit log information', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AuditLogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines a grouping of documents for document imaging. A site defines a "tree" structure that documents are mapped into. This table defines that tree.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_document_group';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table holds the information about the navigation buttons for the front end application. This includes the color, image, whether it is visible or not and what form name is associated with the button.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_navigation_button';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The RESTRICTED_ORGANIZATION table identifies Nursing Units whose patient related information is secured from the general user population. The users under the given user category id are not allowed to access the patients in the given department code (unless they are given ability to view patients on restricted units).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cdr_restricted_organization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains factory defaults for CH settings. ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cfgValuesFactory';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains global CH settings (gets populated if user goes into ICS Admin and overwrites factory defaults). type_cd and cfg_name should be PKs.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cfgValuesGlobal';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains CH patient settings (gets populated if user goes into CH and modifies settings). type_cd, cfg_name, and patient_id should be PKs.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cfgValuesPatient';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains CH unit settings (gets populated if user goes into ICS Admin and modifies settings for a given unit). type_cd, cfg_name, and unit_id should be PKs.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'cfgValuesUnit';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ChannelInfoData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DeviceInfoData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Devices';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Device session', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DeviceSessions';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Enums';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Data from the XTR/ETR receivers.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'EventsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'GdsCodeMap';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains information about general alarms for patient topic sessions.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'GeneralAlarmsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Stores input rate for monitored tables. This data can be used to evaluate for possible DataLoader problems', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'gts_input_rate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Tracks input rate per channel and can be used to evaluate problems with waveform collection', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'gts_waveform_index_rate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores a history of any HL/7 messages that are replayed in order to correct data issues. The HL7 services provides a mechanism to replay an HL/7 message (with changes) in order to fix data problems. This table ensures any such replays are audited.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_qhist';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is the primary queuing table for inbound HL/7 messages. All messages that are destined for any Intesys product are stored in this table. The message is originally inserted into this table with a status of "N" (not read) and later the DataLoader takes the message and does the real work of parsing it and storing the data in the appropriate tables. If it succeeds, then it changes the status to "R" (read), otherwise it flags it with a status of "E" (error). Note: Usually sites are configured to purge all successful ("R") messages after several weeks. Keeping all HL/7 messages indefinitely is generally not practical.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_in_queue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table keeps tracks of information from which client valid ACK was received on previously send outbound message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_ack';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table allows the creation of temporary "lists" of HL7 messages. The DataLoader can then be configured to only process a certain list. This is usefull for debugging DataLoaders, since DataLoaders normally process all unprocessed messages in the order they were queued.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_msg_list';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is a queue for outbound HL/7 messages. Any messages that are being sent to another system are first copied here. Once they are sent, the status of the message is changed. A batch process can remove rows from here once messages are sent.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7_out_queue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7InboundMessage';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'HL7PatientLink';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the 12 lead reports collected from the monitor. Each record is uniquely identified by the report_id. The data in this table is populated by the monitor loader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores 12-lead report text edits. Each record is uniquely identified by the report_id and insert_dt. The data in this table is populated by the patsrv process. New records are added and no records are deleted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_edit';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains 12-lead demographics, measurements, interpretation, and waveform data. The int_report column matches that in the int_12lead_report table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_12lead_report_new';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores accounts associated with patients. HL/7 defines most of the account information in the PV1 segment. While P01 events contain the account details, summary level information is contained in the PV1 (which this table stores).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_account';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Store addresses for patients, NOK''s, guarantors, external organizations, etc. Any/all addresses stored for entities are stored in this table. The PK of this table is always a FK to another entity (such as the patient or organization). There really isn''t a way to go "out" from this table and determine what the address is for (i.e. it is not easy to determine what is the parent of any given address). Normal access is always from the "owner" record to the address(es).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_address';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores alarm events collected from the monitor. Each record is uniquely identified by alarm_id. The data in this table is populated by the MonitorLoader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores information about alarm event retrieval.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_retrieved';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the raw waveform data of the alarm event (ECG). It refers to the int_alarm_event table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_alarm_waveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data for allergies on a patient for an encounter. It can also store "lifetime" or permanent allergies (ones that are independent of encounters).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_allergy';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table logs information that pertains to PATIENT access. Any time the USER accesses a PATIENT, the middle tier will log the accessing information.This information is logged everytime the USER goes beyond the PATIENT_LIST screen. This log is also used for any other logged activities that involve data access (i.e. VIP overrides, search overrides, etc.). Certain modules may have additional log tables to handle unique or high-volume audit requirements. This is intended to only store user-generated events that need to be recorded for very long time periods (or indefinitely).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_audit_log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains update information read by the autoupdate service that is then sent out to each client on demand. Each product has update actions that are in order by sequence. When a client want the first update action for CDR, he asks for CDR update 0. When the update action completes successfully, update 1 is next....', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table logs all successful and unsuccessful autoupdate attempts. Each client sends either an ACK or a NACK to the service, and the service then puts the appropriate row in the database. The intention is to use the OCX I wrote which views the log within MMC to have a realtime viewer of system updates.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_autoupdate_log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains beat time log information (one row for each user/patient analysis)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_beat_time_log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains template/bin information. It contains 2 additional PKs:  template_set_index and template_index. The template_set_index column will refer back to a template set in the int_template_set_info table. This table will contain multiple rows per user/patient analysis (one row for each template). I think we should consider renaming it to int_template_info (or some variation of that).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_bin_info';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The table is used to store the system broadcast message to be sent to users. It also contains a message to display to users on login. This table has at most 1 record in it (if there is any kind of message to display).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_broadcast_msg';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains information about system''s configurations values.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_cfg_values';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data about channel types. Each row is uniquely identified by the channel_type_id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_type';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data about which vitals are displayed for a given channel. Each record represents one vital collected on the channel.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_channel_vital';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the legal code categories used in the int_misc_code table. It is primarily a documentation tool, since very little logic requires these values. It is also used in System Administration. This table is pre-loaded with a set of rows that does not change for a given release.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_client_map';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_cmtry_report';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the legal code categories used in the int_misc_code table. It is primarily a documentation tool, since very little logic requires these values. It is also used in System Administration. This table is pre-loaded with a set of rows that does not change for a given release.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_code_category';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_DataLoader_ETR_Temp_Settings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_DataLoader_UV_Temp_Settings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the current version of the database as well as the history of prior versions. As the Clinical Browser is installed/upgraded over time, new records will be inserted into this table. The current version of the database schema is the record with the latest install_dt with a status of "Complete".', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_db_ver';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The determination in the nature of the disease or problem. It is made form the study of the signs and symptoms of the disease or problem. The diagnosis can either be codified (ex: ICD9 or they can be free-formated text). This table is designed to track the various diagnosis associated with a given ENCOUNTER and PATIENT. The primary key of this table is a combination of the encounter_id, diagnosis_type_cid, and seq_no. This is because an encounter can have multiple diagnosis (including multiple of each type). The sequence # quarantees uniqueness.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A classification of diagnosis in which a particular ACCOUNT can be tracked for one or more ENCOUNTERs. This is a snapshot of codes at a given point in time. DRG information takes a snapshot of existing diagnosis. Contains code, description, when it was calculated, age, sex, who calculated. Physicians have to sign attestatinos that codes are assigned in correct sequence. DRG''s are applied at the end of the ENCOUNTER. Interim DRG''s are only performed to know how a hospital is doing against average Length Of Stay (LOS), etc. DRG codes appl to inpatient accounts. (Outpatient accounts do not yet have a set of codes for this purpose. Ambulatory product groups is most likely to become the coding scheme for outpatient.) DRG coding scheme contains regional norms, local norms, and adjustment for age. This table contains diagnostic related group (DRG) information specific to the combination entered in the PAT_ACCT_ENC_INT table. The DRG information is the standard HL7 required DRG information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_drg';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table allows for multiple diagnosis clinicians for each encounter diagnosis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_diagnosis_hcp_int';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all encounters for each patient. Most of this information comes from the HL/7 PV1 & PV2 segments. Usually an encounter represents a single "visit" or "stay" at a facility. Although a site can define an encounter to be broader (i.e. multiple actual visits) or a sub-set of an entire "visit". 99% of the time, encounter and visit are synonymous.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A table that assigns an external visit number to an internal encounter record. This table allows an organization''s specific healthcare identifier (i.e. visit) to be mapped into a unique internal identifier (encounter_id). Within a specific organization, their identifiers for an encounter must be unique.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_map';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A table that tracks the moving and merging of encounters within the Database. When an encounter move or merge takes place, this table will capture the surviving and non-surviving patient and encounter ID''s.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_tfr_history';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the relationship of HCP''s to Encounters. It defines the role(s) a HCP plays for a specific encounter (or multiple HCP''s for a single encounter). Currently, only Consulting physician information is stored (attending, admitting and referring are stored in the encounter table). That is because in HL/7, the only type of physician that there can me multiple is the consulting physician.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_encounter_to_hcp_int';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to store the "Environments" that a site has defined. Environments are shown on the CB homepage and allow a site to customize behaviour. Environments are a lot like products (e.x. L&D, NICU, ED, etc). Usually each environment has a patient list that is specific to the way that department works.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_environment';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the information about configuration of alarm handling events.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_config';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores information about events.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_event_log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all "external" organizations. External organizations have been separated from internal organizations. External organizations are organizations that are not located within the hospital or facility such as insurance companies and employers. Internal organizations are those that are part of the hospital or facility such as  units.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_external_organization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains a list of features the ICW product has. A product has many features. If no access was given to a product then all of the features in the product are turned off.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_feature';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all "flowsheets" defined by the site. A flowsheet is a high-level grouping of tests, results, values. Usually each department has unique flowsheets and sometimes types of doctors may have their own (i.e. Cardiologists). It is very similar to to concept of Test Groups but is geared towards data entry as opposed to display.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines what tests and results should show on a given flowsheet. It is the detail table for the int_flowsheet table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet_detail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to control validation of each field (for data entry). It is used in conjunction with the int_flowsheet_detail table to drive the display/input logic.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet_entry';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the list of drop-down fields. It is the parent record for the int_flowsheet_list_detail table. There will be one record in this table for every drop-down (and one row in int_flowsheet_list_detail for every item in the drop-down).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet_list';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the "Valid Values" for a given field. It is the drop-down list of choices for each field. It is tied to a int_flowsheet_list record. This is the child records of a list. Every entry in the drop-down list will have a record in this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_flowsheet_list_detail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The int_gateway table stores configuration information about all known "gateways". Gateways provide connectivity to monitors (SLMD, S5, Cosmos, etc). Each gateway is responsible for keeping the database current for the monitors it knows about. It is also responsible for updating monitors when patient changes are made to the database.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_gateway';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data about the S5 central workstations.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_gateway_server';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores guarantor information supplied in the GT1 segment of HL/7.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_guarantor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The HCP table stores all HCP''s referenced in HL/7 messages. HCP''s are any individuals who perform a role as a clinical employee, provider or authorized affiliates of a Healthcare ORGANIZATION. The HCP''s name (first name, last name, middle initial, and degree) are carried as redundant data within the HCP table in order to eliminate a join back to the PERSON_NAME table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the contact information for HCP''s. This includes phone #''s, pagers, e-mail addresses, etc.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp_contact';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all certification(s) associated with each HCP. A certification that is acquired by a HEALTHCARE PROFESSIONAL to provide a service in a Healthcare FACILITY/ORGANIZATION.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp_license';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table maps the external id for an HCP to the internal id (HCP_ID). An HCP may have multiple external id''s so this table is required. However, within an organization, ID''s must be unique.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp_map';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the specialty(s) for each HCP. It includes information about what group/board certified the HCP.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_hcp_specialty';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the insurance plan information used by patients. This stores the actual plans that are used by insurance policies. An insurance policy refers to a plan. An account refers to an insurance policy.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_insurance_plan';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the insurance policies that are referenced in patient accounts.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_insurance_policy';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all parameters used to control the HL/7 loader. A site can customize the behavior of the Loader by adding/modifying values in this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_loader_parameter';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores statistics for the back-end processing of HL/7 messages. It stores temporary data in this table to help keep track of how many HL/7 messages have been processed since startup, etc. Data in this table is not critical and can be truncated if the back-end is not running.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_loader_stats';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores multiple code sets (miscellaneous codes). It stores many of the codified fields that HL/7 defines. All of these codes can be dynamically added by the back-end (DataLoader). However to ensure good descriptions of the code (for display), it is necessary for the administrator to update these dynamically added codes. Codes are unique for a given organization, feeder system and category (cat_code).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_misc_code';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the request for monitors'' information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_mon_request';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all monitors known by all gateways. Records are dynamically added/updated in this table as the monitor Loader service(s) run. Monitor records are NOT dynamically removed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_monitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to uniquely identify a medical record number to a PATIENT. This table allows the tracking of the MRNs assigned to a given PATIENT across time. This table takes an ORGANIZATION, their identifier and maps it into a uniquely generated patient ID (GUID). The assumption is that no matter how many MRN''s a patient is know by, there will only be one patient_id for that patient (especially since the MPI should handle minor inconsistencies with data-entry).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_mrn_map';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores messages that are produced from the system back-end. It is used to log messages that may or may not be related to HL/7 processing. Most of the rows in this table come about from informational msgs or errors related to HL/7 processing. Purging of this table may need to be done periodically (or done with the purging of the HL7_in_queue table).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_msg_log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the "template" for all error/warning messages displayed to the user. The DataLoader and communicator will report any warnings or errors using this template. Parameters to the message can be passed and substituted anywere in the message.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_msg_template';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the Next of Kin for patients. Every patient can have Next of Kin (as defined in the NK1 segment in HL/7). NOK''s are not encounter based, they are patient based. However there can be multiple NOK''s for each patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_nok';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to keep track of the next ascending key. Certain tables use the concept of an ascending key. Ascending keys must be unique and always counting up. This table keeps track of the last one assigned. In general, the Clinical Browser has reduced its need on these types of keys since they are a single point of locks.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_nxt_ascending_key';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to keep track of the next descending key. Certain tables use the concept of an descending key. Descending keys must be unique and always counting down. This table keeps track of the last one assigned. In general, the Clinical Browser has reduced its need on these types of keys since they are a single point of locks.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_nxt_descending_key';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all orders for every patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the grouping of orders and how they should appear in the order index. The Order Index displays groups of USID''s and this table defines those groups.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order_group';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is a detail table for the int_order_group table. It defines the USID''s that belong to a given order group. A USID can appear in multiple order groups.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order_group_detail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The request for a specific service. One detailed entry of an ORDER requesting an instance of a service. The ORDER_LINE entity type is used to hold individual orderable items within an ORDER. It is the detail of an order. Deleted Columns: priority_code_id, ord_cntl_code_id', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order_line';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table''s purpose is to take the ORGANZATION_ENTITY_ID, SYSTEM_ENTITY_ID, and ORDER_EXTERNAL_ENTITY_ID and from these values create a unique ORDER_ID (ORD_ID). This entity type is used to capture the external order number from feeder system and cross check with the internal order number. Also capture information about where the ORDER originated from. This table takes an ORGANIZATION, their identifier and map into a unique CDR generated FK.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_order_map';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table identifies the work schedule for a unit (schedule of work, determined by the SHIFT_START_TM for the ORGANIZATION). This information will initially be used by the front-end to calculate volumes for nursing asessments. It will be maintained by a System Administration tool.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_org_shift_sched';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the organizational structure of the enterprise. It describes a "tree structure" which includes the organization, facilities and units. This table must be defined before HL7 messages are played in since Feeder systems are defined as part of each Facility.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_organization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The int_outbound_queue table is used to start the outbound messaging process. A row is inserted into the int_outbound_queue telling the backend processes that an HL7 message needs to be generated for the corresponding patient_id and order_id. A msg_status of N means the request has not been processed. A msg_status of R means the request has been processed. A msg_status of E means the request errored when trying to process. Generally only not processed (N) or Errored (E) records are kept in this table. Processed records imply a HL/7 message was successfully placed into the HL7_out_queue.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_outbound_queue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores time tag events (lead change events and module status events). Each record is uniquely identified by patient_id, param_type, timetag_type, and param_ft. The data in this table is populated by teh MonitorLoader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_param_timetag';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores each patient record. Every patient is assigned a unique internal ID (GUID) that can never be duplicated. This table also has MPI specific fields used by the MPI engine to ensure that patients are not duplicated because of minor data-entry errors.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains channel data active for a given patient. Each record is uniquely identified by the patient_channel_id, monitor_id and patient_id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_channel';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table links document images (Optika) to a patient. And indexing application would insert into this table linking the document to the patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_document';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Links Dome medical images to each patient. OrderId links the image to a specific order so that when viewing a report detail screen, we can display an image button if an image is present. The image button then displays all images for the current order.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_image';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table tracks all patients that have been linked or merged. It allows patients to be linked (i.e. they are identified to be the same patient). It also allows patients to later be unlinked if they were mistakenly linked.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_link';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is the "master" list for the patient lists. It contains an entry for each list (not for each entry on those lists). The detail of which patients belong on the list is contained in int_patient_list_detail. A patient list is any logical collection of patients that can not be generated quickly enough through a direct query from other tables. It is also sometimes under the user control (for example user lists that the user can add/remove patients manually to). Other lists are system maintained by "events" such as admits/discharges (like practicing lists).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_list';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the patients that exist on a given patient list. It is the detail for a patient list. It therefore contains all patient entries for all patient lists (Unit, practicing, personal, etc.) It does not contain entries for the Search or Group lists (these are generated at run-time).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_list_detail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table allows a user (usually a physician) to allow other users to view their patients. One typical usage is when a physician takes vacation and needs to "assign" patients to another physician for coverage. This table allows either complete assignment (all patients), or individual patients.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_list_link';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is the key table that tracks what patients are currently connected to monitors. It maintains records ONLY for patients that the gateways believe to be on monitor. It does NOT maintain history of who was connected (that is in the int_encounter table). As the monitor loaders communicate to the monitors through the gateways, this table is kept 100% current with the real-world. Patients are created/updated as necessary. And encounters are created/updated as necessary. Purging this table should have no real consequences because the data will be rebuilt by the loaders (with the exception of any manually overriden collection intervals).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_monitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains information relative to various types of procedures that can be performed on a patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_patient_procedure';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores information that is common to certain types of people in the database. This includes patients, gurantors, NOK''s. It does NOT have entries for users (even though they are people). This table only contains attributes (columns) for data that is likely to available for NOK''s, guarantor''s, etc. Data that is generally only known for patients is in the int_patient table. A person''s current/primary name, telephone and address is de-normalized into this table for quick access. However, all names, addresses, and phone #''s are available in the int_address, int_telephone and int_person_name tables.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_person';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores all names.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_person_name';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores preferences for all users, roles and global. These preferences are stored as an XML string that each application defines. The XML hierarchy allows each application to have a very large number of preferences and to add/remove values without requiring a database change. Preferences are any user configuration values that do NOT deal with security AND are generally available for the user to change. Preferences and security are arranged into a 3-tier hierarchy (Global->Role->User). There is the capability for a lower level to override a higher level. There is also the ability for the higher level to lock down the value (prevent lower-level overrides).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_pref';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines "Differences" that occur when a lower-level value is changed. This only occurs when a user or role value is changed. It is used to quickly display a change indicator at the global or role level if a lower-level value is different from the higher-level value. These records are only removed if a push-down is applied for a specific level in the XML.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_pref_diff';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores any locks that are applied (at any level). Locks prevent lower levels from having different values than the current level. For example, if a value is locked at global, then all user_role''s and users must have the same value. This allows a site to prevent users from changing certain preferences. By default, users can change any preference unless they are locked.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_pref_lock';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores "pushdowns". A pushdown is an attempt by the administrator to push-out a value to all users of the global or user_role level. When a change is made by the administrator to a preference at the global or category level, the default is to "push out" the new value to all users affected by that level. However, there are times when an administrator may want to make a change to the value for a level, but leave the current user''s value alone. This is particularly true when talking about display preferences for sorting, etc. By changing a value and not pushing it out, the administrator is changing new users (before they have a chance to set/save their prefs). A pushdown record is removed once a user logs in. Pushdown''s could be proprogated to the actual int_pref table as soon as possible, but this would require a lot of processing time during each change made at the global or category levels.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_pref_pushdown';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the printing job information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job_et_alarm';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job_et_vitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job_et_waveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the waveform printing job information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_print_job_waveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains information relative to various types of procedures that can be performed on a patient.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_procedure';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the HCP(s) that were involved in a procedure. There can multiple HCP(s) for each procedure and multiple types of HCP(s).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_procedure_hcp_int';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains data containing the product codes used in the ICW product suite. A product contains features that can be turned on an off. Each record is uniquely identified by the product_cd.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_product';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the product access information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_product_access';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An associative table between the int_product table and the int_feature table. This table contains each feature within a given product. Each row is uniquely identified by the product_cd and feature_cd.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_product_map';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains the results value ranges that are associated with a specific RESULT.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_reference_range';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Result-based information, most of which comes from OBX segments. The CUR_RSLT_xxxx table holds all current results, hence the name. When a result is updated the original CUR_RSLT_xxxx is copied into the HIST_RSLT_xxxx table. The two tables are exactly the same to facilitate easily coping one table to the other. Seven current result data stores are used by CDR: - CUR_RSLT_LAB (Laboratory/Microbiology) - CUR_RSLT_RAD (Radiology/X-ray/Nuclear Medicine) - CUR_RSLT_VITL (Vital Signs/Statistics) - CUR_RSLT_RPT (Reports/Transcriptions/Progress Reports) - CUR_RSLT_IO (Intake/Ouput) - CUR_RSLT_ASSMT (Nursing Assessments) - CUR_RSLT_ECG (Ecg) In the HIST_RSLT_xxxx table the DESC_KEY should be used to display reverse chronological history of changes. Note that the DESC_KEY is a surrogate primary key for all result tables. HL7 to database mappings: ORC -> ORDER_TBL OBR -> ORDER_LINE,SPECIMEN OBX -> CUR_RSLT_xxxx Relationship between tests and results: Panels and Test Groups: Panels and Test Groups must be transmitted in OBR segments, since the ORC does not contain any type of identifier or name, the ORC is entirely optional in ORUs, and the OBX only contains TEST/RESULTS. In the database, we do not deal with these since HL7 does not transmit enough information to determine the relationships necessary. The ORDER_TBL has two fields that attempt to deal with order groups at a gross level, PARENT_ORD_ID and CHILD_ORD_SW. When ORDER ENTRY is developed this will need to be re-investigated. Batteries: Batteries are collections of tests that are given a single name and are generally ordered (i.e. OBR''s). An HL7 battery is equivalent to a display panel. Each battery processed by CDR will have a unique battery_id value', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_result';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the information about indication of abnormal result flags to be displayed by the front end. Whenever an abnormal result ''flag'' is sent by a feeder system identified by ''sys_ent_id'', the front end will use this table to decide if a text message is to be displayed in front or back of the result or the result is to be colored with the ''color'' or a bitmap is to be placed in front or back of the result.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_result_flag';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores events manually saved by the user. Each record is uniquely identified by patient_id, event_id and insert_dt. The data in this table is populated by the Patsrvr process. New records are added and no records are deleted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_saved_event';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores base waveform information, raw waveform data, and timelog data for each waveform within a saved event. Each record is uniquely identified by event_id and wave_index. The data in this table is populated by the Patsrvr process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_saved_event_waveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains general information about the saved event. It should have patient_id and event_id as PKs. There will be one row for each saved event.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_SavedEvent';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_beat_time_log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_calipers';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is designed to save savedevent lead changes and monitor events logs (lead changed log timetag_type = 12289   monitor event log timetag_type = 12290)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_event_log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_vitals';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains waveform data for a given saved event. It should have patient_id, event_id, and wave_index as PKs. The event_id column corresponds to the event_id column in the SavedEvent table. There can be several rows in this table for a given saved event (one for each waveform in the saved event).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_savedevent_waveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores security settings for all users, roles and global. These security settings are stored as an XML string that each application defines. The XML hierarchy allows each application to have a very large number of security settings and to add/remove values without requiring a database change. Security settings are any setting that controls access to data and/or applications that are defined and controlled by administrators. Preferences and security are arranged into a 3-tier hierarchy (Global->Role->User). There is the capability for a lower level to override a higher level. There is also the ability for the higher level to lock down the value (prevent lower-level overrides).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_security';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines "Differences" that occur when a lower-level value is changed. This only occurs when a user or role value is changed. It is used to quickly display a change indicator at the global or role level if a lower-level value is different from the higher-level value. These records are only removed if a push-down is applied for a specific level in the XML.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_security_diff';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores any locks that are applied (at any level). Locks prevent lower levels from having different values than the current level. For example, if a value is locked at global, then all user_role''s and users must have the same value. This allows a site to ensure all security settings are the same for everyone. Locks are really used very little (if any) for security since the end-user can not generally change any security settings. However it can be useful to prevent system administrators from accidentally setting a lower-level value.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_security_lock';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores "pushdown''s". A pushdown is an attempt by the administrator to push-out a value to all users of the global or user_role level. When a change is made by the administrator to a security setting at the global or category level, the default is to "push out" the new value to all users affected by that level. However, there are times when an administrator may want to make a change to the value for a level, but leave the current user''s value alone. A pushdown record is removed once a user logs in. Pushdown''s could be proprogated to the actual int_security table as soon as possible, but this would require a lot of processing time during each change made at the global or category levels.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_security_pushdown';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains information for each system sending messages to be stored in the CIS database. Specifically, all system codes defined in the message header (MSH) Sending Application and Receiving Application fields must be loaded in this table. All system codes that are sent as application id''s for placer order numbers and filler order number (see HL7 segments ORC, OBR, and OBX) must be loaded into this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_send_sys';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the links (URL''s) that appear on the left-hand side of the Clinical Browser homepage. A site can customize the homepage by adding links and groupings of links. The system administration module has screens to allow a site to maintain this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_site_link';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to capture information of the SPECIMEN that is associated with the performable test. The important information are the type, source, and when the SPECIMEN was collected. The test processing generally is categorized by the SPECIMEN type. Blood related SPECIMEN usually process in hemetology section, etc.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_specimen';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity type is used in the displaying and presentation of specimen information as it relates to a specific result. One of the functions of this entity type is to optionally allow an entry for no specimen type so it can be mapped to a group. It also defines a standard method to map multiple specimen types to one code. The short description of the code we map to will then be used for display. If a specific value is not sent, default back to the specimen code. ''DEFAULT'' should not be an allowable specimen type or specimen group because it is a potential entry in the TGM with specific functionality associated. This table is not currently used in the CDR.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_specimen_group';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used strictly for internationalizing the CB. It contains words within the starter data set that must be translated. This is done as part of configuring the site. Whenever the language of a site is changed, this table will drive the translation process. This is generally a one-time thing for each site. This is slightly different than the int_translate table which is being used 100% of the time to translate tags on web pages. This table is only referenced when the language of a site is changed.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_starter_set';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the system generation information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_sysgen';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the system licensing information.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_sysgen_audit';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores comments about system generation.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_sysgen_comment';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the parameters for system processes such as number of days past admit/discharge date for trimming pre-admit/inpatient visits OR table name, index name for dbcc/update stats process. It stores parameters that are used by system processes (backend services).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_system_parameter';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table maps technicians (lab technicians, x-ray techs, etc). All technicians in HL/7 messages have codes or ID''s that identify them. This table maps the external code to an internal person_id.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_tech_map';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores ALL telephone numbers for patients, NOK''s, guarantor''s, external organizations, etc. While the current/primary phone # for a patient is de-normalized into the int_person table for performance reasons, all current and historical phone #''s are in this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_telephone';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains template set information. Can have up to 4 template sets per user/patient analysis.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_template_set_info';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the display structure of the test hierarchy on the result screen. The test results can be grouped together in a tree type of display structure and each row of this table defines a non-leaf node in the tree display structure. The leaf node information is stored in test_group_detail table. Typically a nonleaf node in the tree is a Department (e.g.. LAB,RAD,ECG,..etc) or a Group (e.g.. Common Chemistry,XRAY etc) A leaf node will be the actual result test code or a universal service code (K-Sodium, NA-Potassium, Albumin, CHEM23 etc.) An example result display structure is: LAB test_group Common Chemistry test_group K test_group_detail NA test_group_detail ALBUMIN test_group_detail CHEM23 test_group_detail Specific Chemistry test_group A test_group_detail B test_group_detail RAD test_group XRAY test_group Chest x-ray test_group_detail', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_test_group';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the leaf nodes of the display structure of the test hierarchy on the result screen. The test results can be grouped together in a tree type of display structure and each row of the test_group table defines a non-leaf node in the tree display structure. The leaf node information is stored in test_group_detail table. Typically a non-leaf node in the tree is a Department (e.g.. LAB,RAD,ECG,..etc) or a Group (e.g.. CommonChemistry,X=RAY etc) A leaf node will be the actual result test code or a universal service code (K-Sodium, NA-Potassium, Albumin, CHEM23 etc.) An example result display structure is: LAB test_group Common Chemistry test_group K test_group_detail NA test_group_detail ALBUMIN test_group_detail CHEM23 test_group_detail Specific Chemistry test_group A test_group_detail B test_group_detail RAD test_group XRAY test_group Chest x-ray test_group_detail', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_test_group_detail';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to support internationalization of the Clinical Browser. Every literal string in the entire system has an entry in this table. Each language that is supported by the Clinical Browser has a column in this table. At run-time, the web server translates the literals into the appropriate language based upon a registry entry on the server.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_translate';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is a temporary table used to pass data from a given web page to the editor used to edit tags. You can truncate this table at any time (that language tags are not being edited).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_translate_list';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The table contains an entry for every user of the Intesys products. All Intesys modules that share the common schema will use the same user record regardless of what modules a user has access. Entries in this table are managed by user role administration module in ICS Admin', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Table used to store contact information for a given user. It allows the system to have information about the address, phone #, etc for each user. It also allows multiple phone #''s and addresses.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_contact';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table defines the groups that are available for user groups. Each user can be a member of zero, one or multiple user groups. Users are assigned to groups to allow coverage or access to the practicing lists of the other members in the group. It is used for any "clinical grouping" that needs to occur for each application and is somewhat application defined.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_group';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the members of a user group. Each user can be a member of zero, one or multiple groups.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_group_member';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains password history for users whenever they change their password. It is only used if the security option to keep password history has been enabled. It stores previous passwords to prevent users from re-using a password within a certain number of times. The current password for a user is NOT stored in this table (only prior values).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_password';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to group users into roles. This grouping is only used for security and preferences. Each user in the system must belong to one and only one user role. Users are also grouped by user groups (which is used for clinical grouping such as practicing groups).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_role';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old Intesys user settings table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_user_settings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_vital_live';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_vital_live_temp';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains the waveform data collected and stored over time. A waveform is uniquely identified by patient_id, patient_channel_id, and start_ft. Each row contains a pre-defined amount of waveform data. As new waveform data is collected, the new waveform data is appended to the end of the existing data block, until the pre-defined amount of data is reached. A new row is then created. The data in this table is populated by the MonitorLoader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_waveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains the waveform data for a given patient and channel. Each patient_id, channel_id row will be unique. When new data comes in for a patient on a channel the waveform_data is updated. A new record is NOT inserted.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_waveform_live';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LeadConfiguration';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains information about limit alarms for patient topic sessions.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LimitAlarmsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LimitChangeData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the live feed data for a patient topic session.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LiveData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains error log information', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'LogData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'MetaData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ml_duplicate_info';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the results of the score for each field for each decision_log row. These scores are combined to create a total score that is stored in the decision_log record.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_decision_field';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table stores the results of scoring for each inexact search. Any patients that score above a certain threshold will cause records to be added to this table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_decision_log';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Patients that needs to be "scored"(i.e. similar patients (if any) need to be located). An MPI search is necessary to be run against this patient. If similar patients are found, then row(s) are inserted into the decision_log table.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_decision_queue';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table is used to track patients that have been linked (i.e. are really the same patient). For a lot of reasons, a patient may have multiple patient records. Linking allows these duplicate records to be merged in such a way that allows them to later be "unlinked".', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_patient_link';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains all fields you can do a MPI search on. You can change the weights that control how important each field is in the search. This table is used in the MPI search (either by the end user or during the background MPI lookup).', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_search_field';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_search_results';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Work table that is used when searching the master patient index for a patient. The rows in this table are deleted after the search is finished.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'mpi_search_work';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains pacer spike information (one row for each user/patient analysis)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PacerSpikeLog';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PatientData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PatientSessions';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PatientSessionsMap';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintBlobData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintJobs';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintRequestData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintRequestDescriptions';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'PrintRequests';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'RemovedAlarms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ResourceStrings';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Status Data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'StatusData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'StatusDataSets';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_ConfigurationData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TopicFeedTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TopicSessions';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Topic Types', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TopicTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains histogram information (one row for each user/patient analysis)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TrendData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'VitalsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'WaveformAnnotationData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<Table description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'WaveformData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the waveform live feed data for a patient topic session.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'WaveformLiveData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Information for printing waveforms', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'WaveformPrintData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets the latest channel types from waveforms and topics from non-waveform.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_ActivePatientChannels';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_AvailableDataTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_CombinedEncounters';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DevicePatientIdActive';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DeviceSessionAssignment';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DeviceSessionInfo';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DeviceSessionOrganization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Consolidate the patient channel information for the data between the start and end dates.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DiscardedOverlappingLegacyWaveformData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_DiscardedOverlappingWaveformData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_FeedGdsCodes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_GeneralAlarms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_GeneralAlarmsLite';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyChannelTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyMonitorCombined';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyPatientMonitor';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyPatientMonitorCombined';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LegacyWaveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Limit alarms view', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LimitAlarms';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LimitAlarmsLite';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_LiveVitalsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_MetaData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_Monitors';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientChannelLegacy';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Return the patient ID''s and the number of days since each patients'' last discharge.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientDaysSinceLastDischarge';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_Patients';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientSessionOrganization';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientSessions';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PatientTopicSessions';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PrintJobs';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_PrintJobsWaveform';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_StatusData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_StitchedPatients';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'<View description here>', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_TopicTypes';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets the vitals data.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_VitalsData';

GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Gets the waveform sample rate.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_WaveformSampleRate';

GO
