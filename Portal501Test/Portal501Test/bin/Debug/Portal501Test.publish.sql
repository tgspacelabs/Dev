/*
Deployment script for Portal501Test

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Portal501Test"
:setvar DefaultFilePrefix "Portal501Test"
:setvar DefaultDataPath "D:\SQLDATA\"
:setvar DefaultLogPath "D:\SQLDATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Starting rebuilding table [dbo].[int_waveform]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_int_waveform] (
    [patient_id]         UNIQUEIDENTIFIER NOT NULL,
    [orig_patient_id]    UNIQUEIDENTIFIER NULL,
    [patient_channel_id] UNIQUEIDENTIFIER NOT NULL,
    [start_dt]           DATETIME         NOT NULL,
    [end_dt]             DATETIME         NULL,
    [start_ft]           BIGINT           NOT NULL,
    [end_ft]             BIGINT           NOT NULL,
    [compress_method]    CHAR (8)         NULL,
    [waveform_data]      IMAGE            NOT NULL
);

CREATE UNIQUE CLUSTERED INDEX [tmp_ms_xx_index_CL_int_waveform_patient_id_patient_channel_id_start_ft_end_ft1]
    ON [dbo].[tmp_ms_xx_int_waveform]([patient_id] ASC, [patient_channel_id] ASC, [start_ft] ASC, [end_ft] ASC) WITH (FILLFACTOR = 100);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[int_waveform])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_int_waveform] ([patient_id], [patient_channel_id], [start_ft], [end_ft], [orig_patient_id], [start_dt], [end_dt], [compress_method], [waveform_data])
        SELECT   [patient_id],
                 [patient_channel_id],
                 [start_ft],
                 [end_ft],
                 [orig_patient_id],
                 [start_dt],
                 [end_dt],
                 [compress_method],
                 [waveform_data]
        FROM     [dbo].[int_waveform]
        ORDER BY [patient_id] ASC, [patient_channel_id] ASC, [start_ft] ASC, [end_ft] ASC;
    END

DROP TABLE [dbo].[int_waveform];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_int_waveform]', N'int_waveform';

EXECUTE sp_rename N'[dbo].[int_waveform].[tmp_ms_xx_index_CL_int_waveform_patient_id_patient_channel_id_start_ft_end_ft1]', N'CL_int_waveform_patient_id_patient_channel_id_start_ft_end_ft', N'INDEX';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[int_waveform].[IX_int_waveform_patient_channel_id_start_ft_end_ft]...';


GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_patient_channel_id_start_ft_end_ft]
    ON [dbo].[int_waveform]([patient_channel_id] ASC, [start_ft] ASC, [end_ft] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[int_waveform].[IX_int_waveform_end_ft]...';


GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_end_ft]
    ON [dbo].[int_waveform]([end_dt] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[int_waveform].[IX_int_waveform_patient_id_start_ft_end_ft]...';


GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_patient_id_start_ft_end_ft]
    ON [dbo].[int_waveform]([patient_id] ASC, [end_ft] ASC, [start_ft] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[int_waveform].[IX_int_waveform_patient_id_start_ft_patient_channel_id_start_dt_end_ft]...';


GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_patient_id_start_ft_patient_channel_id_start_dt_end_ft]
    ON [dbo].[int_waveform]([patient_id] ASC, [start_ft] ASC)
    INCLUDE([patient_channel_id], [start_dt], [end_ft]) WITH (FILLFACTOR = 100);


GO
PRINT N'Creating [dbo].[int_waveform].[IX_int_waveform_patient_channel_id_patient_id_end_ft_start_ft_start_dt_end_dt_compress_method]...';


GO
CREATE NONCLUSTERED INDEX [IX_int_waveform_patient_channel_id_patient_id_end_ft_start_ft_start_dt_end_dt_compress_method]
    ON [dbo].[int_waveform]([patient_channel_id] ASC, [patient_id] ASC, [end_ft] ASC, [start_ft] ASC)
    INCLUDE([start_dt], [end_dt], [compress_method]) WITH (FILLFACTOR = 100);


GO
PRINT N'Refreshing [dbo].[v_DiscardedOverlappingLegacyWaveformData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[v_DiscardedOverlappingLegacyWaveformData]';


GO
PRINT N'Creating [dbo].[int_waveform].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table contains the waveform data collected and stored over time. A waveform is uniquely identified by patient_id, patient_channel_id, and start_ft. Each row contains a pre-defined amount of waveform data. As new waveform data is collected, the new waveform data is appended to the end of the existing data block, until the pre-defined amount of data is reached. A new row is then created. The data in this table is populated by the MonitorLoader process.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'int_waveform';


GO
PRINT N'Refreshing [dbo].[GetMinMaxPatientTimes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetMinMaxPatientTimes]';


GO
PRINT N'Refreshing [dbo].[GetPatientChannelTimes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetPatientChannelTimes]';


GO
PRINT N'Refreshing [dbo].[GetPatientWaveFormTimeHistory]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetPatientWaveFormTimeHistory]';


GO
PRINT N'Refreshing [dbo].[usp_CA_GetPatientWaveForms]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_CA_GetPatientWaveForms]';


GO
PRINT N'Refreshing [dbo].[GetLegacyPatientChannelTimes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetLegacyPatientChannelTimes]';


GO
PRINT N'Refreshing [dbo].[GetLegacyPatientWaveFormTimeHistory]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetLegacyPatientWaveFormTimeHistory]';


GO
PRINT N'Refreshing [dbo].[GetPatientTimeOfDay]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetPatientTimeOfDay]';


GO
PRINT N'Refreshing [dbo].[GetPatientTimes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetPatientTimes]';


GO
PRINT N'Refreshing [dbo].[GetPatientWaveFormTimeUpdate]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetPatientWaveFormTimeUpdate]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[GetWaveFormTimes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetWaveFormTimes]';


GO
PRINT N'Refreshing [dbo].[p_gts_Input_Rate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[p_gts_Input_Rate]';


GO
PRINT N'Refreshing [dbo].[p_gts_WaveForm_Index_Rate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[p_gts_WaveForm_Index_Rate]';


GO
PRINT N'Refreshing [dbo].[p_Purge_All_Patient_Data]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[p_Purge_All_Patient_Data]';


GO
PRINT N'Refreshing [dbo].[p_Purge_eval]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[p_Purge_eval]';


GO
PRINT N'Refreshing [dbo].[p_Purge_Input_Rate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[p_Purge_Input_Rate]';


GO
PRINT N'Refreshing [dbo].[p_Purge_WaveForm_Data]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[p_Purge_WaveForm_Data]';


GO
PRINT N'Refreshing [dbo].[usp_CA_GetLegacyPatientWaveForms]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_CA_GetLegacyPatientWaveForms]';


GO
PRINT N'Refreshing [dbo].[GetLeadList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetLeadList]';


GO
PRINT N'Refreshing [dbo].[GetNumLeadConFigs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetNumLeadConFigs]';


GO
PRINT N'Refreshing [dbo].[GetNumProcStats]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetNumProcStats]';


GO
PRINT N'Refreshing [dbo].[GetProcStatList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetProcStatList]';


GO
PRINT N'Refreshing [dbo].[GetRawECGData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetRawECGData]';


GO
PRINT N'Refreshing [dbo].[usp_PurgeTasks]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_PurgeTasks]';


GO
PRINT N'Update complete.';


GO
