// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uIBtnSelectPatientButton = this.UICLINICALACCESSRAJANIWindow.UIBtnSelectPatientWindow.UIBtnSelectPatientButton;
            WinCell uIHEMATSTCell = this.UIPatientSelectDialogWindow.UIDgvPatientsWindow.UIDataGridViewTable.UIRow29Row.UIHEMATSTCell;
            WinRadioButton uIWaveformsRadioButton = this.UICLINICALACCESSRAJANIWindow.UIWaveformsWindow.UIWaveformsRadioButton;
            WinRadioButton uIArrhythmiaRadioButton = this.UICLINICALACCESSRAJANIWindow.UIArrhythmiaWindow.UIArrhythmiaRadioButton;
            WinButton uIAnalyzeButton = this.UICLINICALACCESSRAJANIWindow.UIAnalyzeWindow.UIAnalyzeButton;
            WinButton uIOKButton = this.UISelectTimeWindow.UIOKWindow.UIOKButton;
            WinRadioButton uIAlarmsRadioButton = this.UICLINICALACCESSRAJANIWindow.UIAlarmsWindow.UIAlarmsRadioButton;
            WinRadioButton uISavedEventsRadioButton = this.UICLINICALACCESSRAJANIWindow.UISavedEventsWindow.UISavedEventsRadioButton;
            WinRadioButton uIItem12LeadRadioButton = this.UICLINICALACCESSRAJANIWindow.UIItem12LeadWindow.UIItem12LeadRadioButton;
            WinRadioButton uITrendsRadioButton = this.UICLINICALACCESSRAJANIWindow.UITrendsWindow.UITrendsRadioButton;
            WinRadioButton uIPrintJobsRadioButton = this.UICLINICALACCESSRAJANIWindow.UIPrintJobsWindow.UIPrintJobsRadioButton;
            WinRadioButton uIBedsideRadioButton = this.UICLINICALACCESSRAJANIWindow.UIBedsideWindow.UIBedsideRadioButton;
            WinClient uIItem624201515349PMClient = this.UICLINICALACCESSRAJANIWindow.UIWaveformControlWindow.UIItem624201515349PMClient;
            WinClient uIItem624201514341PMClient = this.UICLINICALACCESSRAJANIWindow.UIWaveformControlWindow1.UIItem624201514341PMClient;
            WinRadioButton uIThumbnailsRadioButton = this.UICLINICALACCESSRAJANIWindow.UIThumbnailsWindow.UIThumbnailsRadioButton;
            WinRadioButton uIHomeRadioButton = this.UICLINICALACCESSRAJANIWindow.UIHomeWindow.UIHomeRadioButton;
            WinCell uITESTALARMSCell = this.UIPatientSelectDialogWindow.UIDgvPatientsWindow.UIDataGridViewTable.UIRow22Row.UITESTALARMSCell;
            WinComboBox uICboReportListComboBox = this.UICLINICALACCESSRAJANIWindow.UICboReportListWindow.UICboReportListComboBox;
            #endregion

            // Click 'btnSelectPatient' button
            Mouse.Click(uIBtnSelectPatientButton, new Point(54, 25));

            // Click 'HEMA, TST' cell
            Mouse.Click(uIHEMATSTCell, new Point(43, 13));

            // Select 'Waveforms' radio button
            uIWaveformsRadioButton.Selected = this.RecordedMethod1Params.UIWaveformsRadioButtonSelected;

            // Select 'Arrhythmia' radio button
            uIArrhythmiaRadioButton.Selected = this.RecordedMethod1Params.UIArrhythmiaRadioButtonSelected;

            // Click 'Analyze' button
            Mouse.Click(uIAnalyzeButton, new Point(84, 16));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(49, 17));

            // Select 'Alarms' radio button
            uIAlarmsRadioButton.Selected = this.RecordedMethod1Params.UIAlarmsRadioButtonSelected;

            // Select 'Saved Events' radio button
            uISavedEventsRadioButton.Selected = this.RecordedMethod1Params.UISavedEventsRadioButtonSelected;

            // Select '12-Lead' radio button
            uIItem12LeadRadioButton.Selected = this.RecordedMethod1Params.UIItem12LeadRadioButtonSelected;

            // Select 'Trends' radio button
            uITrendsRadioButton.Selected = this.RecordedMethod1Params.UITrendsRadioButtonSelected;

            // Select 'Print Jobs' radio button
            uIPrintJobsRadioButton.Selected = this.RecordedMethod1Params.UIPrintJobsRadioButtonSelected;

            // Select 'Bedside' radio button
            uIBedsideRadioButton.Selected = this.RecordedMethod1Params.UIBedsideRadioButtonSelected;

            // Give bedside time to display waveforms
            Playback.Wait(10000);

            // Select 'Arrhythmia' radio button
            uIArrhythmiaRadioButton.Selected = this.RecordedMethod1Params.UIArrhythmiaRadioButtonSelected1;

            // Click '6/24/2015 1:53:49 PM' client
            //Mouse.Click(uIItem624201515349PMClient, new Point(111, 45));

            // Click '6/24/2015 1:43:41 PM' client
            //Mouse.Click(uIItem624201514341PMClient, new Point(101, 25));

            // Select 'Thumbnails' radio button
            //uIThumbnailsRadioButton.Selected = this.RecordedMethod1Params.UIThumbnailsRadioButtonSelected;

            // Select 'Home' radio button
            //uIHomeRadioButton.Selected = this.RecordedMethod1Params.UIHomeRadioButtonSelected;

            // Click 'btnSelectPatient' button
            Mouse.Click(uIBtnSelectPatientButton, new Point(50, 32));

            // Click 'TEST, ALARMS' cell
            Mouse.Click(uITESTALARMSCell, new Point(93, 5));

            // Select '12-Lead' radio button
            uIItem12LeadRadioButton.Selected = this.RecordedMethod1Params.UIItem12LeadRadioButtonSelected1;

            // Select '6/24/2015 1:30:00 PM' in 'cboReportList' combo box
            uICboReportListComboBox.SelectedItem = this.RecordedMethod1Params.UICboReportListComboBoxSelectedItem;
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIClinicalAccessWindow.UIItemWindow.UIClinicalHistoryXPexeListItem.UINameEdit;
            WinCell uIPICARDJEANLUCCell = this.UIPatientSelectDialogWindow.UIDgvPatientsWindow.UIDataGridViewTable.UIRow8Row.UIPICARDJEANLUCCell;
            WinButton uIBtnSelectPatientButton = this.UICLINICALACCESSPICARDWindow.UIBtnSelectPatientWindow.UIBtnSelectPatientButton;
            WinCell uITESTALARMSCell = this.UIPatientSelectDialogWindow.UIDgvPatientsWindow.UIDataGridViewTable.UIRow22Row.UITESTALARMSCell;
            #endregion

            // Double-Click 'Name' text box
            //Mouse.DoubleClick(uINameEdit, new Point(90, 11));

            // Click 'PICARD, JEAN-LUC' cell
            Mouse.Click(uIPICARDJEANLUCCell, new Point(78, 12));

            // Click 'btnSelectPatient' button
            Mouse.Click(uIBtnSelectPatientButton, new Point(42, 27));

            // Click 'TEST, ALARMS' cell
            Mouse.Click(uITESTALARMSCell, new Point(37, 11));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UICLINICALACCESSRAJANIWindow UICLINICALACCESSRAJANIWindow
        {
            get
            {
                if ((this.mUICLINICALACCESSRAJANIWindow == null))
                {
                    this.mUICLINICALACCESSRAJANIWindow = new UICLINICALACCESSRAJANIWindow();
                }
                return this.mUICLINICALACCESSRAJANIWindow;
            }
        }
        
        public UIPatientSelectDialogWindow UIPatientSelectDialogWindow
        {
            get
            {
                if ((this.mUIPatientSelectDialogWindow == null))
                {
                    this.mUIPatientSelectDialogWindow = new UIPatientSelectDialogWindow();
                }
                return this.mUIPatientSelectDialogWindow;
            }
        }
        
        public UISelectTimeWindow UISelectTimeWindow
        {
            get
            {
                if ((this.mUISelectTimeWindow == null))
                {
                    this.mUISelectTimeWindow = new UISelectTimeWindow();
                }
                return this.mUISelectTimeWindow;
            }
        }
        
        public UIClinicalAccessWindow UIClinicalAccessWindow
        {
            get
            {
                if ((this.mUIClinicalAccessWindow == null))
                {
                    this.mUIClinicalAccessWindow = new UIClinicalAccessWindow();
                }
                return this.mUIClinicalAccessWindow;
            }
        }
        
        public UICLINICALACCESSPICARDWindow UICLINICALACCESSPICARDWindow
        {
            get
            {
                if ((this.mUICLINICALACCESSPICARDWindow == null))
                {
                    this.mUICLINICALACCESSPICARDWindow = new UICLINICALACCESSPICARDWindow();
                }
                return this.mUICLINICALACCESSPICARDWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UICLINICALACCESSRAJANIWindow mUICLINICALACCESSRAJANIWindow;
        
        private UIPatientSelectDialogWindow mUIPatientSelectDialogWindow;
        
        private UISelectTimeWindow mUISelectTimeWindow;
        
        private UIClinicalAccessWindow mUIClinicalAccessWindow;
        
        private UICLINICALACCESSPICARDWindow mUICLINICALACCESSPICARDWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Waveforms' radio button
        /// </summary>
        public bool UIWaveformsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Arrhythmia' radio button
        /// </summary>
        public bool UIArrhythmiaRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Alarms' radio button
        /// </summary>
        public bool UIAlarmsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Saved Events' radio button
        /// </summary>
        public bool UISavedEventsRadioButtonSelected = true;
        
        /// <summary>
        /// Select '12-Lead' radio button
        /// </summary>
        public bool UIItem12LeadRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Trends' radio button
        /// </summary>
        public bool UITrendsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Print Jobs' radio button
        /// </summary>
        public bool UIPrintJobsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Bedside' radio button
        /// </summary>
        public bool UIBedsideRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Arrhythmia' radio button
        /// </summary>
        public bool UIArrhythmiaRadioButtonSelected1 = true;
        
        /// <summary>
        /// Select 'Thumbnails' radio button
        /// </summary>
        public bool UIThumbnailsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Home' radio button
        /// </summary>
        public bool UIHomeRadioButtonSelected = true;
        
        /// <summary>
        /// Select '12-Lead' radio button
        /// </summary>
        public bool UIItem12LeadRadioButtonSelected1 = true;
        
        /// <summary>
        /// Select '6/24/2015 1:30:00 PM' in 'cboReportList' combo box
        /// </summary>
        public string UICboReportListComboBoxSelectedItem = "6/24/2015 1:30:00 PM";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICLINICALACCESSRAJANIWindow : WinWindow
    {
        
        public UICLINICALACCESSRAJANIWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CLINICAL ACCESS - RAJANI, TEST1 [RW158]";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("CLINICAL ACCESS - RAJANI, TEST1 [RW158]");
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            this.WindowTitles.Add("CLINICAL ACCESS - TEST, ALARMS [RW152]");
            #endregion
        }
        
        #region Properties
        public UIBtnSelectPatientWindow UIBtnSelectPatientWindow
        {
            get
            {
                if ((this.mUIBtnSelectPatientWindow == null))
                {
                    this.mUIBtnSelectPatientWindow = new UIBtnSelectPatientWindow(this);
                }
                return this.mUIBtnSelectPatientWindow;
            }
        }
        
        public UIWaveformsWindow UIWaveformsWindow
        {
            get
            {
                if ((this.mUIWaveformsWindow == null))
                {
                    this.mUIWaveformsWindow = new UIWaveformsWindow(this);
                }
                return this.mUIWaveformsWindow;
            }
        }
        
        public UIArrhythmiaWindow UIArrhythmiaWindow
        {
            get
            {
                if ((this.mUIArrhythmiaWindow == null))
                {
                    this.mUIArrhythmiaWindow = new UIArrhythmiaWindow(this);
                }
                return this.mUIArrhythmiaWindow;
            }
        }
        
        public UIAnalyzeWindow UIAnalyzeWindow
        {
            get
            {
                if ((this.mUIAnalyzeWindow == null))
                {
                    this.mUIAnalyzeWindow = new UIAnalyzeWindow(this);
                }
                return this.mUIAnalyzeWindow;
            }
        }
        
        public UIAlarmsWindow UIAlarmsWindow
        {
            get
            {
                if ((this.mUIAlarmsWindow == null))
                {
                    this.mUIAlarmsWindow = new UIAlarmsWindow(this);
                }
                return this.mUIAlarmsWindow;
            }
        }
        
        public UISavedEventsWindow UISavedEventsWindow
        {
            get
            {
                if ((this.mUISavedEventsWindow == null))
                {
                    this.mUISavedEventsWindow = new UISavedEventsWindow(this);
                }
                return this.mUISavedEventsWindow;
            }
        }
        
        public UIItem12LeadWindow UIItem12LeadWindow
        {
            get
            {
                if ((this.mUIItem12LeadWindow == null))
                {
                    this.mUIItem12LeadWindow = new UIItem12LeadWindow(this);
                }
                return this.mUIItem12LeadWindow;
            }
        }
        
        public UITrendsWindow UITrendsWindow
        {
            get
            {
                if ((this.mUITrendsWindow == null))
                {
                    this.mUITrendsWindow = new UITrendsWindow(this);
                }
                return this.mUITrendsWindow;
            }
        }
        
        public UIPrintJobsWindow UIPrintJobsWindow
        {
            get
            {
                if ((this.mUIPrintJobsWindow == null))
                {
                    this.mUIPrintJobsWindow = new UIPrintJobsWindow(this);
                }
                return this.mUIPrintJobsWindow;
            }
        }
        
        public UIBedsideWindow UIBedsideWindow
        {
            get
            {
                if ((this.mUIBedsideWindow == null))
                {
                    this.mUIBedsideWindow = new UIBedsideWindow(this);
                }
                return this.mUIBedsideWindow;
            }
        }
        
        public UIWaveformControlWindow UIWaveformControlWindow
        {
            get
            {
                if ((this.mUIWaveformControlWindow == null))
                {
                    this.mUIWaveformControlWindow = new UIWaveformControlWindow(this);
                }
                return this.mUIWaveformControlWindow;
            }
        }
        
        public UIWaveformControlWindow1 UIWaveformControlWindow1
        {
            get
            {
                if ((this.mUIWaveformControlWindow1 == null))
                {
                    this.mUIWaveformControlWindow1 = new UIWaveformControlWindow1(this);
                }
                return this.mUIWaveformControlWindow1;
            }
        }
        
        public UIThumbnailsWindow UIThumbnailsWindow
        {
            get
            {
                if ((this.mUIThumbnailsWindow == null))
                {
                    this.mUIThumbnailsWindow = new UIThumbnailsWindow(this);
                }
                return this.mUIThumbnailsWindow;
            }
        }
        
        public UIHomeWindow UIHomeWindow
        {
            get
            {
                if ((this.mUIHomeWindow == null))
                {
                    this.mUIHomeWindow = new UIHomeWindow(this);
                }
                return this.mUIHomeWindow;
            }
        }
        
        public UICboReportListWindow UICboReportListWindow
        {
            get
            {
                if ((this.mUICboReportListWindow == null))
                {
                    this.mUICboReportListWindow = new UICboReportListWindow(this);
                }
                return this.mUICboReportListWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBtnSelectPatientWindow mUIBtnSelectPatientWindow;
        
        private UIWaveformsWindow mUIWaveformsWindow;
        
        private UIArrhythmiaWindow mUIArrhythmiaWindow;
        
        private UIAnalyzeWindow mUIAnalyzeWindow;
        
        private UIAlarmsWindow mUIAlarmsWindow;
        
        private UISavedEventsWindow mUISavedEventsWindow;
        
        private UIItem12LeadWindow mUIItem12LeadWindow;
        
        private UITrendsWindow mUITrendsWindow;
        
        private UIPrintJobsWindow mUIPrintJobsWindow;
        
        private UIBedsideWindow mUIBedsideWindow;
        
        private UIWaveformControlWindow mUIWaveformControlWindow;
        
        private UIWaveformControlWindow1 mUIWaveformControlWindow1;
        
        private UIThumbnailsWindow mUIThumbnailsWindow;
        
        private UIHomeWindow mUIHomeWindow;
        
        private UICboReportListWindow mUICboReportListWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBtnSelectPatientWindow : WinWindow
    {
        
        public UIBtnSelectPatientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSelectPatient";
            this.WindowTitles.Add("CLINICAL ACCESS - RAJANI, TEST1 [RW158]");
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnSelectPatientButton
        {
            get
            {
                if ((this.mUIBtnSelectPatientButton == null))
                {
                    this.mUIBtnSelectPatientButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnSelectPatientButton.WindowTitles.Add("CLINICAL ACCESS - RAJANI, TEST1 [RW158]");
                    this.mUIBtnSelectPatientButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIBtnSelectPatientButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnSelectPatientButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIWaveformsWindow : WinWindow
    {
        
        public UIWaveformsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnWaveformReview";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIWaveformsRadioButton
        {
            get
            {
                if ((this.mUIWaveformsRadioButton == null))
                {
                    this.mUIWaveformsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIWaveformsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Waveforms";
                    this.mUIWaveformsRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIWaveformsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIWaveformsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIArrhythmiaWindow : WinWindow
    {
        
        public UIArrhythmiaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnArrhythmiaReview";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIArrhythmiaRadioButton
        {
            get
            {
                if ((this.mUIArrhythmiaRadioButton == null))
                {
                    this.mUIArrhythmiaRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIArrhythmiaRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Arrhythmia";
                    this.mUIArrhythmiaRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIArrhythmiaRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIArrhythmiaRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAnalyzeWindow : WinWindow
    {
        
        public UIAnalyzeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAnalyze";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinButton UIAnalyzeButton
        {
            get
            {
                if ((this.mUIAnalyzeButton == null))
                {
                    this.mUIAnalyzeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAnalyzeButton.SearchProperties[WinButton.PropertyNames.Name] = "Analyze";
                    this.mUIAnalyzeButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIAnalyzeButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAnalyzeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAlarmsWindow : WinWindow
    {
        
        public UIAlarmsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAlarmHistory";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIAlarmsRadioButton
        {
            get
            {
                if ((this.mUIAlarmsRadioButton == null))
                {
                    this.mUIAlarmsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIAlarmsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Alarms";
                    this.mUIAlarmsRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIAlarmsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIAlarmsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISavedEventsWindow : WinWindow
    {
        
        public UISavedEventsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSavedEventReview";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UISavedEventsRadioButton
        {
            get
            {
                if ((this.mUISavedEventsRadioButton == null))
                {
                    this.mUISavedEventsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUISavedEventsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Saved Events";
                    this.mUISavedEventsRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUISavedEventsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUISavedEventsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItem12LeadWindow : WinWindow
    {
        
        public UIItem12LeadWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btn12Lead";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            this.WindowTitles.Add("CLINICAL ACCESS - TEST, ALARMS [RW152]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIItem12LeadRadioButton
        {
            get
            {
                if ((this.mUIItem12LeadRadioButton == null))
                {
                    this.mUIItem12LeadRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIItem12LeadRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "12-Lead";
                    this.mUIItem12LeadRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    this.mUIItem12LeadRadioButton.WindowTitles.Add("CLINICAL ACCESS - TEST, ALARMS [RW152]");
                    #endregion
                }
                return this.mUIItem12LeadRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIItem12LeadRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITrendsWindow : WinWindow
    {
        
        public UITrendsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnTrends";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UITrendsRadioButton
        {
            get
            {
                if ((this.mUITrendsRadioButton == null))
                {
                    this.mUITrendsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUITrendsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Trends";
                    this.mUITrendsRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUITrendsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUITrendsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIPrintJobsWindow : WinWindow
    {
        
        public UIPrintJobsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPrintManager";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIPrintJobsRadioButton
        {
            get
            {
                if ((this.mUIPrintJobsRadioButton == null))
                {
                    this.mUIPrintJobsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIPrintJobsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Print Jobs";
                    this.mUIPrintJobsRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIPrintJobsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIPrintJobsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBedsideWindow : WinWindow
    {
        
        public UIBedsideWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnBedSide";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIBedsideRadioButton
        {
            get
            {
                if ((this.mUIBedsideRadioButton == null))
                {
                    this.mUIBedsideRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIBedsideRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Bedside";
                    this.mUIBedsideRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIBedsideRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIBedsideRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIWaveformControlWindow : WinWindow
    {
        
        public UIWaveformControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "WaveformControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinClient UIItem624201515349PMClient
        {
            get
            {
                if ((this.mUIItem624201515349PMClient == null))
                {
                    this.mUIItem624201515349PMClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItem624201515349PMClient.SearchProperties[WinControl.PropertyNames.Name] = "6/24/2015 1:53:49 PM";
                    this.mUIItem624201515349PMClient.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIItem624201515349PMClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItem624201515349PMClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIWaveformControlWindow1 : WinWindow
    {
        
        public UIWaveformControlWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "WaveformControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "24";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinClient UIItem624201514341PMClient
        {
            get
            {
                if ((this.mUIItem624201514341PMClient == null))
                {
                    this.mUIItem624201514341PMClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItem624201514341PMClient.SearchProperties[WinControl.PropertyNames.Name] = "6/24/2015 1:43:41 PM";
                    this.mUIItem624201514341PMClient.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIItem624201514341PMClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItem624201514341PMClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIThumbnailsWindow : WinWindow
    {
        
        public UIThumbnailsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnThumbnails";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIThumbnailsRadioButton
        {
            get
            {
                if ((this.mUIThumbnailsRadioButton == null))
                {
                    this.mUIThumbnailsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIThumbnailsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Thumbnails";
                    this.mUIThumbnailsRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIThumbnailsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIThumbnailsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHomeWindow : WinWindow
    {
        
        public UIHomeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnHome";
            this.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIHomeRadioButton
        {
            get
            {
                if ((this.mUIHomeRadioButton == null))
                {
                    this.mUIHomeRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIHomeRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Home";
                    this.mUIHomeRadioButton.WindowTitles.Add("CLINICAL ACCESS - HEMA, TST [RW162]");
                    #endregion
                }
                return this.mUIHomeRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIHomeRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICboReportListWindow : WinWindow
    {
        
        public UICboReportListWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboReportList";
            this.WindowTitles.Add("CLINICAL ACCESS - TEST, ALARMS [RW152]");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICboReportListComboBox
        {
            get
            {
                if ((this.mUICboReportListComboBox == null))
                {
                    this.mUICboReportListComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICboReportListComboBox.WindowTitles.Add("CLINICAL ACCESS - TEST, ALARMS [RW152]");
                    #endregion
                }
                return this.mUICboReportListComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICboReportListComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIPatientSelectDialogWindow : WinWindow
    {
        
        public UIPatientSelectDialogWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Patient Select Dialog";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public UIDgvPatientsWindow UIDgvPatientsWindow
        {
            get
            {
                if ((this.mUIDgvPatientsWindow == null))
                {
                    this.mUIDgvPatientsWindow = new UIDgvPatientsWindow(this);
                }
                return this.mUIDgvPatientsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDgvPatientsWindow mUIDgvPatientsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDgvPatientsWindow : WinWindow
    {
        
        public UIDgvPatientsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvPatients";
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public UIRow29Row UIRow29Row
        {
            get
            {
                if ((this.mUIRow29Row == null))
                {
                    this.mUIRow29Row = new UIRow29Row(this);
                }
                return this.mUIRow29Row;
            }
        }
        
        public UIRow22Row UIRow22Row
        {
            get
            {
                if ((this.mUIRow22Row == null))
                {
                    this.mUIRow22Row = new UIRow22Row(this);
                }
                return this.mUIRow22Row;
            }
        }
        
        public UIRow8Row UIRow8Row
        {
            get
            {
                if ((this.mUIRow8Row == null))
                {
                    this.mUIRow8Row = new UIRow8Row(this);
                }
                return this.mUIRow8Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow29Row mUIRow29Row;
        
        private UIRow22Row mUIRow22Row;
        
        private UIRow8Row mUIRow8Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRow29Row : WinRow
    {
        
        public UIRow29Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "RW162;HEMA, TST;R3;(null);(null);6/2/2015 3:02 PM;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public WinCell UIHEMATSTCell
        {
            get
            {
                if ((this.mUIHEMATSTCell == null))
                {
                    this.mUIHEMATSTCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHEMATSTCell.SearchProperties[WinCell.PropertyNames.Value] = "HEMA, TST";
                    this.mUIHEMATSTCell.WindowTitles.Add("Patient Select Dialog");
                    #endregion
                }
                return this.mUIHEMATSTCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHEMATSTCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRow22Row : WinRow
    {
        
        public UIRow22Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "RW152;TEST, ALARMS;ML983_0963B8AD;(null);(null);4/27/2015 9:21 AM;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public WinCell UITESTALARMSCell
        {
            get
            {
                if ((this.mUITESTALARMSCell == null))
                {
                    this.mUITESTALARMSCell = new WinCell(this);
                    #region Search Criteria
                    this.mUITESTALARMSCell.SearchProperties[WinCell.PropertyNames.Value] = "TEST, ALARMS";
                    this.mUITESTALARMSCell.WindowTitles.Add("Patient Select Dialog");
                    #endregion
                }
                return this.mUITESTALARMSCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUITESTALARMSCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRow8Row : WinRow
    {
        
        public UIRow8Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "RP147;PICARD, JEAN-LUC;061015147;(null);10/10/1972;6/8/2015 2:37 PM;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Patient Select Dialog");
            #endregion
        }
        
        #region Properties
        public WinCell UIPICARDJEANLUCCell
        {
            get
            {
                if ((this.mUIPICARDJEANLUCCell == null))
                {
                    this.mUIPICARDJEANLUCCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPICARDJEANLUCCell.SearchProperties[WinCell.PropertyNames.Value] = "PICARD, JEAN-LUC";
                    this.mUIPICARDJEANLUCCell.WindowTitles.Add("Patient Select Dialog");
                    #endregion
                }
                return this.mUIPICARDJEANLUCCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIPICARDJEANLUCCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISelectTimeWindow : WinWindow
    {
        
        public UISelectTimeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Time";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Select Time");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "BtnOk";
            this.WindowTitles.Add("Select Time");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Select Time");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIClinicalAccessWindow : WinWindow
    {
        
        public UIClinicalAccessWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Clinical Access";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Clinical Access");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Clinical Access");
            #endregion
        }
        
        #region Properties
        public UIClinicalHistoryXPexeListItem UIClinicalHistoryXPexeListItem
        {
            get
            {
                if ((this.mUIClinicalHistoryXPexeListItem == null))
                {
                    this.mUIClinicalHistoryXPexeListItem = new UIClinicalHistoryXPexeListItem(this);
                }
                return this.mUIClinicalHistoryXPexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClinicalHistoryXPexeListItem mUIClinicalHistoryXPexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIClinicalHistoryXPexeListItem : WinListItem
    {
        
        public UIClinicalHistoryXPexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ClinicalHistoryXP.exe";
            this.WindowTitles.Add("Clinical Access");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Clinical Access");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICLINICALACCESSPICARDWindow : WinWindow
    {
        
        public UICLINICALACCESSPICARDWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CLINICAL ACCESS - PICARD, JEAN-LUC [RP147]";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("CLINICAL ACCESS - PICARD, JEAN-LUC [RP147]");
            #endregion
        }
        
        #region Properties
        public UIBtnSelectPatientWindow1 UIBtnSelectPatientWindow
        {
            get
            {
                if ((this.mUIBtnSelectPatientWindow == null))
                {
                    this.mUIBtnSelectPatientWindow = new UIBtnSelectPatientWindow1(this);
                }
                return this.mUIBtnSelectPatientWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBtnSelectPatientWindow1 mUIBtnSelectPatientWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBtnSelectPatientWindow1 : WinWindow
    {
        
        public UIBtnSelectPatientWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSelectPatient";
            this.WindowTitles.Add("CLINICAL ACCESS - PICARD, JEAN-LUC [RP147]");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnSelectPatientButton
        {
            get
            {
                if ((this.mUIBtnSelectPatientButton == null))
                {
                    this.mUIBtnSelectPatientButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnSelectPatientButton.WindowTitles.Add("CLINICAL ACCESS - PICARD, JEAN-LUC [RP147]");
                    #endregion
                }
                return this.mUIBtnSelectPatientButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnSelectPatientButton;
        #endregion
    }
}
