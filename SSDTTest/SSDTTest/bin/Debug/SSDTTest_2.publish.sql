/*
Deployment script for SSDTTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SSDTTest"
:setvar DefaultFilePrefix "SSDTTest"
:setvar DefaultDataPath "D:\SQLDATA\"
:setvar DefaultLogPath "D:\SQLDATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL)
BEGIN
    DECLARE @rc      int,                       -- return code
            @fn      nvarchar(4000),            -- file name for back up
            @dir     nvarchar(4000)             -- backup directory

    EXEC @rc = [master].[dbo].[xp_instance_regread] N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', N'BackupDirectory', @dir output, 'no_output'
    if (@rc = 0) SELECT @dir = @dir + N'\'

    IF (@dir IS NULL)
    BEGIN 
        EXEC @rc = [master].[dbo].[xp_instance_regread] N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', N'DefaultData', @dir output, 'no_output'
        if (@rc = 0) SELECT @dir = @dir + N'\'
    END

    IF (@dir IS NULL)
    BEGIN
        EXEC @rc = [master].[dbo].[xp_instance_regread] N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\Setup', N'SQLDataRoot', @dir output, 'no_output'
        if (@rc = 0) SELECT @dir = @dir + N'\Backup\'
    END

    IF (@dir IS NULL)
    BEGIN
        SELECT @dir = N'$(DefaultDataPath)'
    END

    SELECT  @fn = @dir + N'$(DatabaseName)' + N'-' + 
            CONVERT(nchar(8), GETDATE(), 112) + N'-' + 
            RIGHT(N'0' + RTRIM(CONVERT(nchar(2), DATEPART(hh, GETDATE()))), 2) + 
            RIGHT(N'0' + RTRIM(CONVERT(nchar(2), DATEPART(mi, getdate()))), 2) + 
            RIGHT(N'0' + RTRIM(CONVERT(nchar(2), DATEPART(ss, getdate()))), 2) + 
            N'.bak' 
            BACKUP DATABASE [$(DatabaseName)] TO DISK = @fn
END
GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[IndexChange].[IX_IndexChange_Name]...';


GO
DROP INDEX [IX_IndexChange_Name]
    ON [dbo].[IndexChange];


GO
PRINT N'Starting rebuilding table [dbo].[IndexChange]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_IndexChange] (
    [IndexChangeID] INT             IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (50)   NOT NULL,
    [Description]   NVARCHAR (2000) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_IndexChange_IndexChangeID1] PRIMARY KEY NONCLUSTERED ([IndexChangeID] ASC)
);

CREATE UNIQUE CLUSTERED INDEX [tmp_ms_xx_index_IX_IndexChange_IndexChangeID1]
    ON [dbo].[tmp_ms_xx_IndexChange]([IndexChangeID] ASC);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[IndexChange])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_IndexChange] ON;
        INSERT INTO [dbo].[tmp_ms_xx_IndexChange] ([IndexChangeID], [Name], [Description])
        SELECT   [IndexChangeID],
                 [Name],
                 [Description]
        FROM     [dbo].[IndexChange]
        ORDER BY [IndexChangeID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_IndexChange] OFF;
    END

DROP TABLE [dbo].[IndexChange];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_IndexChange]', N'IndexChange';

EXECUTE sp_rename N'[dbo].[IndexChange].[tmp_ms_xx_index_IX_IndexChange_IndexChangeID1]', N'IX_IndexChange_IndexChangeID', N'INDEX';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_IndexChange_IndexChangeID1]', N'PK_IndexChange_IndexChangeID', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[IndexChange].[IX_IndexChange_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_IndexChange_Name]
    ON [dbo].[IndexChange]([Name] ASC) WITH (FILLFACTOR = 100);


GO
PRINT N'Update complete.';


GO
